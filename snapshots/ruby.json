[
  {
    "name": "ruby",
    "options": [
      {
        "type": "long",
        "key": "copyright",
        "title": "--copyright",
        "description": "Prints the copyright notice, and quits immediately without running any script."
      },
      {
        "type": "long",
        "key": "version",
        "title": "--version",
        "description": "Prints the version of the Ruby interpreter, and quits immediately without running any script."
      },
      {
        "type": "short",
        "key": "0",
        "title": "-0[octal]",
        "description": "(The digit “zero”.) Specifies the input record separator ($/) as an octal number. If no digit is given, the null character is taken as the separator. Other switches may follow the digits. -00 turns Ruby into paragraph mode. -0777 makes Ruby read whole file at once as a single string since there is no legal character with that value."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C directory, -X directory",
        "description": "Causes Ruby to switch to the directory."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-C directory, -X directory",
        "description": "Causes Ruby to switch to the directory."
      },
      {
        "type": "short",
        "key": "E",
        "title": "-E external[:internal], --encoding external[:internal]",
        "description": "Specifies the default value(s) for external encodings and internal encoding. Values should be separated with colon (:).\n\nYou can omit the one for internal encodings, then the value (Encoding.default_internal) will be nil."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "-E external[:internal], --encoding external[:internal]",
        "description": "Specifies the default value(s) for external encodings and internal encoding. Values should be separated with colon (:).\n\nYou can omit the one for internal encodings, then the value (Encoding.default_internal) will be nil."
      },
      {
        "type": "long",
        "key": "external-encoding",
        "title": "--external-encoding=encoding, --internal-encoding=encoding",
        "description": "Specify the default external or internal character encoding"
      },
      {
        "type": "long",
        "key": "internal-encoding",
        "title": "--external-encoding=encoding, --internal-encoding=encoding",
        "description": "Specify the default external or internal character encoding"
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F pattern",
        "description": "Specifies input field separator ($;)."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I directory",
        "description": "Used to tell Ruby where to load the library scripts. Directory path will be added to the load-path variable ($:)."
      },
      {
        "type": "short",
        "key": "K",
        "title": "-K kcode",
        "description": "Specifies KANJI (Japanese) encoding. The default value for script encodings (__ENCODING__) and external encodings (Encoding.default_external) will be the specified one. kcode can be one of e EUC-JP s Windows-31J (CP932) u UTF-8 n ASCII-8BIT (BINARY)"
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S",
        "description": "Makes Ruby use the PATH environment variable to search for script, unless its name begins with a slash. This is used to emulate #! on machines that don't support it, in the following manner:\n\n#! /usr/local/bin/ruby\n# This line makes the next one a comment in Ruby \\\n  exec /usr/local/bin/ruby -S $0 $*\n    \n\nOn some systems $0 does not always contain the full pathname, so you need the -S switch to tell Ruby to search for the script if necessary (to handle embedded spaces and such). A better construct than $* would be ${1+\"$@\"}, but it does not work if the script is being interpreted by csh(1)."
      },
      {
        "type": "short",
        "key": "T",
        "title": "-T[level=1]",
        "description": "Turns on taint checks at the specified level (default 1)."
      },
      {
        "type": "short",
        "key": "U",
        "title": "-U",
        "description": "Sets the default value for internal encodings (Encoding.default_internal) to UTF-8."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W[level=2]",
        "description": "Turns on verbose mode at the specified level without printing the version message at the beginning. The level can be; 0 Verbose mode is \"silence\". It sets the $VERBOSE to nil. 1 Verbose mode is \"medium\". It sets the $VERBOSE to false. 2 (default) Verbose mode is \"verbose\". It sets the $VERBOSE to true. -W2 is the same as -w"
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a",
        "description": "Turns on auto-split mode when used with -n or -p. In auto-split mode, Ruby executes\n$F = $_.split\nat beginning of each loop."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c",
        "description": "Causes Ruby to check the syntax of the script and exit without executing. If there are no syntax errors, Ruby will print “Syntax OK” to the standard output."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --debug",
        "description": "Turns on debug mode. $DEBUG will be set to true."
      },
      {
        "type": "long",
        "key": "debug",
        "title": "-d, --debug",
        "description": "Turns on debug mode. $DEBUG will be set to true."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e command",
        "description": "Specifies script from command-line while telling Ruby not to search the rest of the arguments for a script file name."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints a summary of the options."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints a summary of the options."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i extension",
        "description": "Specifies in-place-edit mode. The extension, if specified, is added to old file name to make a backup copy. For example:\n\n% echo matz > /tmp/junk\n% cat /tmp/junk\nmatz\n% ruby -p -i.bak -e '$_.upcase!' /tmp/junk\n% cat /tmp/junk\nMATZ\n% cat /tmp/junk.bak\nmatz"
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l",
        "description": "(The lowercase letter “ell”.) Enables automatic line-ending processing, which means to firstly set $\\ to the value of $/, and secondly chops every line read using chomp!."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n",
        "description": "Causes Ruby to assume the following loop around your script, which makes it iterate over file name arguments somewhat like sed -n or awk.\n\nwhile gets\n  ...\nend"
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p",
        "description": "Acts mostly same as -n switch, but print the value of variable $_ at the each end of the loop. For example:\n\n% echo matz | ruby -p -e '$_.tr! \"a-z\", \"A-Z\"'\nMATZ"
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r library",
        "description": "Causes Ruby to load the library using require. It is useful when using -n or -p."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s",
        "description": "Enables some switch parsing for switches after script name but before any file name arguments (or before a --). Any switches found there are removed from ARGV and set the corresponding variable in the script. For example:\n\n#! /usr/local/bin/ruby -s\n# prints \"true\" if invoked with `-xyz' switch.\nprint \"true\\n\" if $xyz"
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Enables verbose mode. Ruby will print its version at the beginning and set the variable $VERBOSE to true. Some methods print extra messages if this variable is true. If this switch is given, and no other switches are present, Ruby quits after printing its version."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w",
        "description": "Enables verbose mode without printing version message at the beginning. It sets the $VERBOSE variable to true."
      },
      {
        "type": "short",
        "key": "x",
        "title": "-x[directory]",
        "description": "Tells Ruby that the script is embedded in a message. Leading garbage will be discarded until the first line that starts with “#!” and contains the string, “ruby”. Any meaningful switches on that line will be applied. The end of the script must be specified with either EOF, ^D (control-D), ^Z (control-Z), or the reserved word __END__. If the directory name is specified, Ruby will switch to that directory before executing script."
      },
      {
        "type": "short",
        "key": "y",
        "title": "-y, --yydebug",
        "description": "DO NOT USE.\n\nTurns on compiler debug mode. Ruby will print a bunch of internal state messages during compilation. Only specify this switch you are going to debug the Ruby interpreter."
      },
      {
        "type": "long",
        "key": "yydebug",
        "title": "-y, --yydebug",
        "description": "DO NOT USE.\n\nTurns on compiler debug mode. Ruby will print a bunch of internal state messages during compilation. Only specify this switch you are going to debug the Ruby interpreter."
      },
      {
        "type": "long",
        "key": "disable-FEATURE",
        "title": "--disable-FEATURE, --enable-FEATURE",
        "description": "Disables (or enables) the specified FEATURE. --disable-gems   --enable-gems Disables (or enables) RubyGems libraries. By default, Ruby will load the latest version of each installed gem. The Gem constant is true if RubyGems is enabled, false if otherwise.\n\n--disable-rubyopt   --enable-rubyopt Ignores (or considers) the RUBYOPT environment variable. By default, Ruby considers the variable.\n\n--disable-all   --enable-all Disables (or enables) all features."
      },
      {
        "type": "long",
        "key": "enable-FEATURE",
        "title": "--disable-FEATURE, --enable-FEATURE",
        "description": "Disables (or enables) the specified FEATURE. --disable-gems   --enable-gems Disables (or enables) RubyGems libraries. By default, Ruby will load the latest version of each installed gem. The Gem constant is true if RubyGems is enabled, false if otherwise.\n\n--disable-rubyopt   --enable-rubyopt Ignores (or considers) the RUBYOPT environment variable. By default, Ruby considers the variable.\n\n--disable-all   --enable-all Disables (or enables) all features."
      },
      {
        "type": "long",
        "key": "dump",
        "title": "--dump=target",
        "description": "Dump some information.\n\nPrints the specified target. target can be one of;\n\nversion version description same as --version usage brief usage message same as -h help Show long help message same as --help syntax check of syntax same as -c --yydebug yydebug compiler debug mode, same as --yydebug\n\nOnly specify this switch if you are going to debug the Ruby interpreter.\n\nparsetree parsetree_with_comment AST nodes tree\n\nOnly specify this switch if you are going to debug the Ruby interpreter.\n\ninsns disassembled instructions\n\nOnly specify this switch if you are going to debug the Ruby interpreter."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Enables verbose mode without printing version message at the beginning. It sets the $VERBOSE variable to true. If this switch is given, and no script arguments (script file or -e options) are present, Ruby quits immediately."
      }
    ]
  }
]
