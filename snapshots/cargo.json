[
  {
    "name": "cargo",
    "options": [
      {
        "type": "short",
        "key": "V",
        "title": "-V, --version",
        "description": "Print version info and exit. If used with --verbose, prints extra information."
      },
      {
        "type": "long",
        "key": "version",
        "title": "-V, --version",
        "description": "Print version info and exit. If used with --verbose, prints extra information."
      },
      {
        "type": "long",
        "key": "list",
        "title": "--list",
        "description": "List all installed Cargo subcommands. If used with --verbose, prints extra information."
      },
      {
        "type": "long",
        "key": "explain",
        "title": "--explain code",
        "description": "Run rustc --explain CODE which will print out a detailed explanation of an error message (for example, E0004)."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo help",
    "options": []
  },
  {
    "name": "cargo version",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Display additional version information."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Display additional version information."
      }
    ]
  },
  {
    "name": "cargo bench",
    "options": [
      {
        "type": "long",
        "key": "no-run",
        "title": "--no-run",
        "description": "Compile, but don't run benchmarks."
      },
      {
        "type": "long",
        "key": "no-fail-fast",
        "title": "--no-fail-fast",
        "description": "Run all benchmarks regardless of failure. Without this flag, Cargo will exit after the first executable fails. The Rust test harness will run all benchmarks within the executable to completion, this flag only applies to the executable as a whole."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p spec..., --package spec...",
        "description": "Benchmark only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec..., --package spec...",
        "description": "Benchmark only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "workspace",
        "title": "--workspace",
        "description": "Benchmark all members in the workspace."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Deprecated alias for --workspace."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude SPEC...",
        "description": "Exclude the specified packages. Must be used in conjunction with the --workspace flag. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "lib",
        "title": "--lib",
        "description": "Benchmark the package's library."
      },
      {
        "type": "long",
        "key": "bin",
        "title": "--bin name...",
        "description": "Benchmark the specified binary. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "bins",
        "title": "--bins",
        "description": "Benchmark all binary targets."
      },
      {
        "type": "long",
        "key": "example",
        "title": "--example name...",
        "description": "Benchmark the specified example. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "examples",
        "title": "--examples",
        "description": "Benchmark all example targets."
      },
      {
        "type": "long",
        "key": "test",
        "title": "--test name...",
        "description": "Benchmark the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "tests",
        "title": "--tests",
        "description": "Benchmark all targets in test mode that have the test = true manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the test flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "bench",
        "title": "--bench name...",
        "description": "Benchmark the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "benches",
        "title": "--benches",
        "description": "Benchmark all targets in benchmark mode that have the bench = true manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the bench flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "all-targets",
        "title": "--all-targets",
        "description": "Benchmark all targets. This is equivalent to specifying --lib --bins --tests --benches --examples."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Benchmark for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to target in the root of the workspace."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "message-format",
        "title": "--message-format fmt",
        "description": "The output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n * human (default): Display in a human-readable text format. Conflicts with short and json.\n * short: Emit shorter, human-readable text messages. Conflicts with human and json.\n * json: Emit JSON messages to stdout. See the reference for more details. Conflicts with human and short.\n * json-diagnostic-short: Ensure the rendered field of JSON messages contains the \"short\" rendering from rustc. Cannot be used with human or short.\n * json-diagnostic-rendered-ansi: Ensure the rendered field of JSON messages contains embedded ANSI color codes for respecting rustc's default color scheme. Cannot be used with human or short.\n * json-render-diagnostics: Instruct Cargo to not include rustc diagnostics in in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo's own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with human or short."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      }
    ]
  },
  {
    "name": "cargo build",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p spec..., --package spec...",
        "description": "Build only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec..., --package spec...",
        "description": "Build only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "workspace",
        "title": "--workspace",
        "description": "Build all members in the workspace."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Deprecated alias for --workspace."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude SPEC...",
        "description": "Exclude the specified packages. Must be used in conjunction with the --workspace flag. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "lib",
        "title": "--lib",
        "description": "Build the package's library."
      },
      {
        "type": "long",
        "key": "bin",
        "title": "--bin name...",
        "description": "Build the specified binary. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "bins",
        "title": "--bins",
        "description": "Build all binary targets."
      },
      {
        "type": "long",
        "key": "example",
        "title": "--example name...",
        "description": "Build the specified example. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "examples",
        "title": "--examples",
        "description": "Build all example targets."
      },
      {
        "type": "long",
        "key": "test",
        "title": "--test name...",
        "description": "Build the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "tests",
        "title": "--tests",
        "description": "Build all targets in test mode that have the test = true manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the test flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "bench",
        "title": "--bench name...",
        "description": "Build the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "benches",
        "title": "--benches",
        "description": "Build all targets in benchmark mode that have the bench = true manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the bench flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "all-targets",
        "title": "--all-targets",
        "description": "Build all targets. This is equivalent to specifying --lib --bins --tests --benches --examples."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Build for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "long",
        "key": "release",
        "title": "--release",
        "description": "Build optimized artifacts with the release profile. See the PROFILES section for details on how this affects profile selection."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to target in the root of the workspace."
      },
      {
        "type": "long",
        "key": "out-dir",
        "title": "--out-dir directory",
        "description": "Copy final artifacts to this directory.\n\nThis option is unstable and available only on the nightly channel and requires the -Z unstable-options flag to enable. See https://github.com/rust-lang/cargo/issues/6790 for more information."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "message-format",
        "title": "--message-format fmt",
        "description": "The output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n * human (default): Display in a human-readable text format. Conflicts with short and json.\n * short: Emit shorter, human-readable text messages. Conflicts with human and json.\n * json: Emit JSON messages to stdout. See the reference for more details. Conflicts with human and short.\n * json-diagnostic-short: Ensure the rendered field of JSON messages contains the \"short\" rendering from rustc. Cannot be used with human or short.\n * json-diagnostic-rendered-ansi: Ensure the rendered field of JSON messages contains embedded ANSI color codes for respecting rustc's default color scheme. Cannot be used with human or short.\n * json-render-diagnostics: Instruct Cargo to not include rustc diagnostics in in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo's own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with human or short."
      },
      {
        "type": "long",
        "key": "build-plan",
        "title": "--build-plan",
        "description": "Outputs a series of JSON messages to stdout that indicate the commands to run the build.\n\nThis option is unstable and available only on the nightly channel and requires the -Z unstable-options flag to enable. See https://github.com/rust-lang/cargo/issues/5579 for more information."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      }
    ]
  },
  {
    "name": "cargo check",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p spec..., --package spec...",
        "description": "Check only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec..., --package spec...",
        "description": "Check only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "workspace",
        "title": "--workspace",
        "description": "Check all members in the workspace."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Deprecated alias for --workspace."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude SPEC...",
        "description": "Exclude the specified packages. Must be used in conjunction with the --workspace flag. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "lib",
        "title": "--lib",
        "description": "Check the package's library."
      },
      {
        "type": "long",
        "key": "bin",
        "title": "--bin name...",
        "description": "Check the specified binary. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "bins",
        "title": "--bins",
        "description": "Check all binary targets."
      },
      {
        "type": "long",
        "key": "example",
        "title": "--example name...",
        "description": "Check the specified example. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "examples",
        "title": "--examples",
        "description": "Check all example targets."
      },
      {
        "type": "long",
        "key": "test",
        "title": "--test name...",
        "description": "Check the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "tests",
        "title": "--tests",
        "description": "Check all targets in test mode that have the test = true manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the test flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "bench",
        "title": "--bench name...",
        "description": "Check the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "benches",
        "title": "--benches",
        "description": "Check all targets in benchmark mode that have the bench = true manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the bench flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "all-targets",
        "title": "--all-targets",
        "description": "Check all targets. This is equivalent to specifying --lib --bins --tests --benches --examples."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Check for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "long",
        "key": "release",
        "title": "--release",
        "description": "Check optimized artifacts with the release profile. See the PROFILES section for details on how this affects profile selection."
      },
      {
        "type": "long",
        "key": "profile",
        "title": "--profile name",
        "description": "Changes check behavior. Currently only test is supported, which will check with the #[cfg(test)] attribute enabled. This is useful to have it check unit tests which are usually excluded via the cfg attribute. This does not change the actual profile used."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to target in the root of the workspace."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "message-format",
        "title": "--message-format fmt",
        "description": "The output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n * human (default): Display in a human-readable text format. Conflicts with short and json.\n * short: Emit shorter, human-readable text messages. Conflicts with human and json.\n * json: Emit JSON messages to stdout. See the reference for more details. Conflicts with human and short.\n * json-diagnostic-short: Ensure the rendered field of JSON messages contains the \"short\" rendering from rustc. Cannot be used with human or short.\n * json-diagnostic-rendered-ansi: Ensure the rendered field of JSON messages contains embedded ANSI color codes for respecting rustc's default color scheme. Cannot be used with human or short.\n * json-render-diagnostics: Instruct Cargo to not include rustc diagnostics in in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo's own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with human or short."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      }
    ]
  },
  {
    "name": "cargo clean",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p spec..., --package spec...",
        "description": "Clean only the specified packages. This flag may be specified multiple times. See cargo-pkgid(1) for the SPEC format."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec..., --package spec...",
        "description": "Clean only the specified packages. This flag may be specified multiple times. See cargo-pkgid(1) for the SPEC format."
      },
      {
        "type": "long",
        "key": "doc",
        "title": "--doc",
        "description": "This option will cause cargo clean to remove only the doc directory in the target directory."
      },
      {
        "type": "long",
        "key": "release",
        "title": "--release",
        "description": "Clean all artifacts that were built with the release or bench profiles."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to target in the root of the workspace."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Clean for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo doc",
    "options": [
      {
        "type": "long",
        "key": "open",
        "title": "--open",
        "description": "Open the docs in a browser after building them. This will use your default browser unless you define another one in the BROWSER environment variable or use the doc.browser configuration option."
      },
      {
        "type": "long",
        "key": "no-deps",
        "title": "--no-deps",
        "description": "Do not build documentation for dependencies."
      },
      {
        "type": "long",
        "key": "document-private-items",
        "title": "--document-private-items",
        "description": "Include non-public items in the documentation. This will be enabled by default if documenting a binary target."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p spec..., --package spec...",
        "description": "Document only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec..., --package spec...",
        "description": "Document only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "workspace",
        "title": "--workspace",
        "description": "Document all members in the workspace."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Deprecated alias for --workspace."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude SPEC...",
        "description": "Exclude the specified packages. Must be used in conjunction with the --workspace flag. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "lib",
        "title": "--lib",
        "description": "Document the package's library."
      },
      {
        "type": "long",
        "key": "bin",
        "title": "--bin name...",
        "description": "Document the specified binary. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "bins",
        "title": "--bins",
        "description": "Document all binary targets."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Document for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "long",
        "key": "release",
        "title": "--release",
        "description": "Document optimized artifacts with the release profile. See the PROFILES section for details on how this affects profile selection."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to target in the root of the workspace."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "message-format",
        "title": "--message-format fmt",
        "description": "The output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n * human (default): Display in a human-readable text format. Conflicts with short and json.\n * short: Emit shorter, human-readable text messages. Conflicts with human and json.\n * json: Emit JSON messages to stdout. See the reference for more details. Conflicts with human and short.\n * json-diagnostic-short: Ensure the rendered field of JSON messages contains the \"short\" rendering from rustc. Cannot be used with human or short.\n * json-diagnostic-rendered-ansi: Ensure the rendered field of JSON messages contains embedded ANSI color codes for respecting rustc's default color scheme. Cannot be used with human or short.\n * json-render-diagnostics: Instruct Cargo to not include rustc diagnostics in in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo's own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with human or short."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      }
    ]
  },
  {
    "name": "cargo fetch",
    "options": [
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Fetch for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo fix",
    "options": [
      {
        "type": "long",
        "key": "broken-code",
        "title": "--broken-code",
        "description": "Fix code even if it already has compiler errors. This is useful if cargo fix fails to apply the changes. It will apply the changes and leave the broken code in the working directory for you to inspect and manually fix."
      },
      {
        "type": "long",
        "key": "edition",
        "title": "--edition",
        "description": "Apply changes that will update the code to the next edition. This will not update the edition in the Cargo.toml manifest, which must be updated manually after cargo fix --edition has finished."
      },
      {
        "type": "long",
        "key": "edition-idioms",
        "title": "--edition-idioms",
        "description": "Apply suggestions that will update code to the preferred style for the current edition."
      },
      {
        "type": "long",
        "key": "allow-no-vcs",
        "title": "--allow-no-vcs",
        "description": "Fix code even if a VCS was not detected."
      },
      {
        "type": "long",
        "key": "allow-dirty",
        "title": "--allow-dirty",
        "description": "Fix code even if the working directory has changes."
      },
      {
        "type": "long",
        "key": "allow-staged",
        "title": "--allow-staged",
        "description": "Fix code even if the working directory has staged changes."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p spec..., --package spec...",
        "description": "Fix only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec..., --package spec...",
        "description": "Fix only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "workspace",
        "title": "--workspace",
        "description": "Fix all members in the workspace."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Deprecated alias for --workspace."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude SPEC...",
        "description": "Exclude the specified packages. Must be used in conjunction with the --workspace flag. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "lib",
        "title": "--lib",
        "description": "Fix the package's library."
      },
      {
        "type": "long",
        "key": "bin",
        "title": "--bin name...",
        "description": "Fix the specified binary. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "bins",
        "title": "--bins",
        "description": "Fix all binary targets."
      },
      {
        "type": "long",
        "key": "example",
        "title": "--example name...",
        "description": "Fix the specified example. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "examples",
        "title": "--examples",
        "description": "Fix all example targets."
      },
      {
        "type": "long",
        "key": "test",
        "title": "--test name...",
        "description": "Fix the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "tests",
        "title": "--tests",
        "description": "Fix all targets in test mode that have the test = true manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the test flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "bench",
        "title": "--bench name...",
        "description": "Fix the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "benches",
        "title": "--benches",
        "description": "Fix all targets in benchmark mode that have the bench = true manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the bench flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "all-targets",
        "title": "--all-targets",
        "description": "Fix all targets. This is equivalent to specifying --lib --bins --tests --benches --examples."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Fix for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "long",
        "key": "release",
        "title": "--release",
        "description": "Fix optimized artifacts with the release profile. See the PROFILES section for details on how this affects profile selection."
      },
      {
        "type": "long",
        "key": "profile",
        "title": "--profile name",
        "description": "Changes fix behavior. Currently only test is supported, which will fix with the #[cfg(test)] attribute enabled. This is useful to have it fix unit tests which are usually excluded via the cfg attribute. This does not change the actual profile used."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to target in the root of the workspace."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "message-format",
        "title": "--message-format fmt",
        "description": "The output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n * human (default): Display in a human-readable text format. Conflicts with short and json.\n * short: Emit shorter, human-readable text messages. Conflicts with human and json.\n * json: Emit JSON messages to stdout. See the reference for more details. Conflicts with human and short.\n * json-diagnostic-short: Ensure the rendered field of JSON messages contains the \"short\" rendering from rustc. Cannot be used with human or short.\n * json-diagnostic-rendered-ansi: Ensure the rendered field of JSON messages contains embedded ANSI color codes for respecting rustc's default color scheme. Cannot be used with human or short.\n * json-render-diagnostics: Instruct Cargo to not include rustc diagnostics in in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo's own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with human or short."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      }
    ]
  },
  {
    "name": "cargo run",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p spec, --package spec",
        "description": "The package to run. See cargo-pkgid(1) for the SPEC format."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec, --package spec",
        "description": "The package to run. See cargo-pkgid(1) for the SPEC format."
      },
      {
        "type": "long",
        "key": "bin",
        "title": "--bin name",
        "description": "Run the specified binary."
      },
      {
        "type": "long",
        "key": "example",
        "title": "--example name",
        "description": "Run the specified example."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Run for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "long",
        "key": "release",
        "title": "--release",
        "description": "Run optimized artifacts with the release profile. See the PROFILES section for details on how this affects profile selection."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to target in the root of the workspace."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "message-format",
        "title": "--message-format fmt",
        "description": "The output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n * human (default): Display in a human-readable text format. Conflicts with short and json.\n * short: Emit shorter, human-readable text messages. Conflicts with human and json.\n * json: Emit JSON messages to stdout. See the reference for more details. Conflicts with human and short.\n * json-diagnostic-short: Ensure the rendered field of JSON messages contains the \"short\" rendering from rustc. Cannot be used with human or short.\n * json-diagnostic-rendered-ansi: Ensure the rendered field of JSON messages contains embedded ANSI color codes for respecting rustc's default color scheme. Cannot be used with human or short.\n * json-render-diagnostics: Instruct Cargo to not include rustc diagnostics in in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo's own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with human or short."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      }
    ]
  },
  {
    "name": "cargo rustc",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p spec, --package spec",
        "description": "The package to build. See cargo-pkgid(1) for the SPEC format."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec, --package spec",
        "description": "The package to build. See cargo-pkgid(1) for the SPEC format."
      },
      {
        "type": "long",
        "key": "lib",
        "title": "--lib",
        "description": "Build the package's library."
      },
      {
        "type": "long",
        "key": "bin",
        "title": "--bin name...",
        "description": "Build the specified binary. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "bins",
        "title": "--bins",
        "description": "Build all binary targets."
      },
      {
        "type": "long",
        "key": "example",
        "title": "--example name...",
        "description": "Build the specified example. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "examples",
        "title": "--examples",
        "description": "Build all example targets."
      },
      {
        "type": "long",
        "key": "test",
        "title": "--test name...",
        "description": "Build the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "tests",
        "title": "--tests",
        "description": "Build all targets in test mode that have the test = true manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the test flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "bench",
        "title": "--bench name...",
        "description": "Build the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "benches",
        "title": "--benches",
        "description": "Build all targets in benchmark mode that have the bench = true manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the bench flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "all-targets",
        "title": "--all-targets",
        "description": "Build all targets. This is equivalent to specifying --lib --bins --tests --benches --examples."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Build for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "long",
        "key": "release",
        "title": "--release",
        "description": "Build optimized artifacts with the release profile. See the PROFILES section for details on how this affects profile selection."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to target in the root of the workspace."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "message-format",
        "title": "--message-format fmt",
        "description": "The output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n * human (default): Display in a human-readable text format. Conflicts with short and json.\n * short: Emit shorter, human-readable text messages. Conflicts with human and json.\n * json: Emit JSON messages to stdout. See the reference for more details. Conflicts with human and short.\n * json-diagnostic-short: Ensure the rendered field of JSON messages contains the \"short\" rendering from rustc. Cannot be used with human or short.\n * json-diagnostic-rendered-ansi: Ensure the rendered field of JSON messages contains embedded ANSI color codes for respecting rustc's default color scheme. Cannot be used with human or short.\n * json-render-diagnostics: Instruct Cargo to not include rustc diagnostics in in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo's own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with human or short."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      }
    ]
  },
  {
    "name": "cargo rustdoc",
    "options": [
      {
        "type": "long",
        "key": "open",
        "title": "--open",
        "description": "Open the docs in a browser after building them. This will use your default browser unless you define another one in the BROWSER environment variable or use the doc.browser configuration option."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p spec, --package spec",
        "description": "The package to document. See cargo-pkgid(1) for the SPEC format."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec, --package spec",
        "description": "The package to document. See cargo-pkgid(1) for the SPEC format."
      },
      {
        "type": "long",
        "key": "lib",
        "title": "--lib",
        "description": "Document the package's library."
      },
      {
        "type": "long",
        "key": "bin",
        "title": "--bin name...",
        "description": "Document the specified binary. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "bins",
        "title": "--bins",
        "description": "Document all binary targets."
      },
      {
        "type": "long",
        "key": "example",
        "title": "--example name...",
        "description": "Document the specified example. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "examples",
        "title": "--examples",
        "description": "Document all example targets."
      },
      {
        "type": "long",
        "key": "test",
        "title": "--test name...",
        "description": "Document the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "tests",
        "title": "--tests",
        "description": "Document all targets in test mode that have the test = true manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the test flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "bench",
        "title": "--bench name...",
        "description": "Document the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "benches",
        "title": "--benches",
        "description": "Document all targets in benchmark mode that have the bench = true manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the bench flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "all-targets",
        "title": "--all-targets",
        "description": "Document all targets. This is equivalent to specifying --lib --bins --tests --benches --examples."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Document for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "long",
        "key": "release",
        "title": "--release",
        "description": "Document optimized artifacts with the release profile. See the PROFILES section for details on how this affects profile selection."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to target in the root of the workspace."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "message-format",
        "title": "--message-format fmt",
        "description": "The output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n * human (default): Display in a human-readable text format. Conflicts with short and json.\n * short: Emit shorter, human-readable text messages. Conflicts with human and json.\n * json: Emit JSON messages to stdout. See the reference for more details. Conflicts with human and short.\n * json-diagnostic-short: Ensure the rendered field of JSON messages contains the \"short\" rendering from rustc. Cannot be used with human or short.\n * json-diagnostic-rendered-ansi: Ensure the rendered field of JSON messages contains embedded ANSI color codes for respecting rustc's default color scheme. Cannot be used with human or short.\n * json-render-diagnostics: Instruct Cargo to not include rustc diagnostics in in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo's own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with human or short."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      }
    ]
  },
  {
    "name": "cargo test",
    "options": [
      {
        "type": "long",
        "key": "no-run",
        "title": "--no-run",
        "description": "Compile, but don't run tests."
      },
      {
        "type": "long",
        "key": "no-fail-fast",
        "title": "--no-fail-fast",
        "description": "Run all tests regardless of failure. Without this flag, Cargo will exit after the first executable fails. The Rust test harness will run all tests within the executable to completion, this flag only applies to the executable as a whole."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p spec..., --package spec...",
        "description": "Test only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec..., --package spec...",
        "description": "Test only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "workspace",
        "title": "--workspace",
        "description": "Test all members in the workspace."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Deprecated alias for --workspace."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude SPEC...",
        "description": "Exclude the specified packages. Must be used in conjunction with the --workspace flag. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "lib",
        "title": "--lib",
        "description": "Test the package's library."
      },
      {
        "type": "long",
        "key": "bin",
        "title": "--bin name...",
        "description": "Test the specified binary. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "bins",
        "title": "--bins",
        "description": "Test all binary targets."
      },
      {
        "type": "long",
        "key": "example",
        "title": "--example name...",
        "description": "Test the specified example. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "examples",
        "title": "--examples",
        "description": "Test all example targets."
      },
      {
        "type": "long",
        "key": "test",
        "title": "--test name...",
        "description": "Test the specified integration test. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "tests",
        "title": "--tests",
        "description": "Test all targets in test mode that have the test = true manifest flag set. By default this includes the library and binaries built as unittests, and integration tests. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a unittest, and once as a dependency for binaries, integration tests, etc.). Targets may be enabled or disabled by setting the test flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "bench",
        "title": "--bench name...",
        "description": "Test the specified benchmark. This flag may be specified multiple times and supports common Unix glob patterns."
      },
      {
        "type": "long",
        "key": "benches",
        "title": "--benches",
        "description": "Test all targets in benchmark mode that have the bench = true manifest flag set. By default this includes the library and binaries built as benchmarks, and bench targets. Be aware that this will also build any required dependencies, so the lib target may be built twice (once as a benchmark, and once as a dependency for binaries, benchmarks, etc.). Targets may be enabled or disabled by setting the bench flag in the manifest settings for the target."
      },
      {
        "type": "long",
        "key": "all-targets",
        "title": "--all-targets",
        "description": "Test all targets. This is equivalent to specifying --lib --bins --tests --benches --examples."
      },
      {
        "type": "long",
        "key": "doc",
        "title": "--doc",
        "description": "Test only the library's documentation. This cannot be mixed with other target options."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Test for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "long",
        "key": "release",
        "title": "--release",
        "description": "Test optimized artifacts with the release profile. See the PROFILES section for details on how this affects profile selection."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to target in the root of the workspace."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "message-format",
        "title": "--message-format fmt",
        "description": "The output format for diagnostic messages. Can be specified multiple times and consists of comma-separated values. Valid values:\n\n * human (default): Display in a human-readable text format. Conflicts with short and json.\n * short: Emit shorter, human-readable text messages. Conflicts with human and json.\n * json: Emit JSON messages to stdout. See the reference for more details. Conflicts with human and short.\n * json-diagnostic-short: Ensure the rendered field of JSON messages contains the \"short\" rendering from rustc. Cannot be used with human or short.\n * json-diagnostic-rendered-ansi: Ensure the rendered field of JSON messages contains embedded ANSI color codes for respecting rustc's default color scheme. Cannot be used with human or short.\n * json-render-diagnostics: Instruct Cargo to not include rustc diagnostics in in JSON messages printed, but instead Cargo itself should render the JSON diagnostics coming from rustc. Cargo's own JSON diagnostics and others coming from rustc are still emitted. Cannot be used with human or short."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      }
    ]
  },
  {
    "name": "cargo generate-lockfile",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo locate-project",
    "options": [
      {
        "type": "long",
        "key": "workspace",
        "title": "--workspace",
        "description": "Locate the Cargo.toml at the root of the workspace, as opposed to the current workspace member."
      },
      {
        "type": "long",
        "key": "message-format",
        "title": "--message-format fmt",
        "description": "The representation in which to print the project location. Valid values:\n\n * json (default): JSON object with the path under the key \"root\".\n * plain: Just the path."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo metadata",
    "options": [
      {
        "type": "long",
        "key": "no-deps",
        "title": "--no-deps",
        "description": "Output information only about the workspace members and don't fetch dependencies."
      },
      {
        "type": "long",
        "key": "format-version",
        "title": "--format-version version",
        "description": "Specify the version of the output format to use. Currently 1 is the only possible value."
      },
      {
        "type": "long",
        "key": "filter-platform",
        "title": "--filter-platform triple",
        "description": "This filters the resolve output to only include dependencies for the given target triple. Without this flag, the resolve includes all targets.\n\nNote that the dependencies listed in the \"packages\" array still includes all dependencies. Each package definition is intended to be an unaltered reproduction of the information within Cargo.toml."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo pkgid",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p spec, --package spec",
        "description": "Get the package ID for the given package instead of the current package."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec, --package spec",
        "description": "Get the package ID for the given package instead of the current package."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo tree",
    "options": [
      {
        "type": "short",
        "key": "i",
        "title": "-i spec, --invert spec",
        "description": "Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package.\n\nNote that in a workspace, by default it will only display the package's reverse dependencies inside the tree of the workspace member in the current directory. The --workspace flag can be used to extend it so that it will show the package's reverse dependencies across the entire workspace. The -p flag can be used to display the package's reverse dependencies only with the subtree of the package given to -p."
      },
      {
        "type": "long",
        "key": "invert",
        "title": "-i spec, --invert spec",
        "description": "Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package.\n\nNote that in a workspace, by default it will only display the package's reverse dependencies inside the tree of the workspace member in the current directory. The --workspace flag can be used to extend it so that it will show the package's reverse dependencies across the entire workspace. The -p flag can be used to display the package's reverse dependencies only with the subtree of the package given to -p."
      },
      {
        "type": "long",
        "key": "prune",
        "title": "--prune spec",
        "description": "Prune the given package from the display of the dependency tree."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--depth depth",
        "description": "Maximum display depth of the dependency tree. A depth of 1 displays the direct dependencies, for example."
      },
      {
        "type": "long",
        "key": "no-dedupe",
        "title": "--no-dedupe",
        "description": "Do not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a (*) to indicate it has already been shown. This flag will cause those duplicates to be repeated."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --duplicates",
        "description": "Show only dependencies which come in multiple versions (implies --invert). When used with the -p flag, only shows duplicates within the subtree of the given package.\n\nIt can be beneficial for build times and executable sizes to avoid building that same package multiple times. This flag can help identify the offending packages. You can then investigate if the package that depends on the duplicate with the older version can be updated to the newer version so that only one instance is built."
      },
      {
        "type": "long",
        "key": "duplicates",
        "title": "-d, --duplicates",
        "description": "Show only dependencies which come in multiple versions (implies --invert). When used with the -p flag, only shows duplicates within the subtree of the given package.\n\nIt can be beneficial for build times and executable sizes to avoid building that same package multiple times. This flag can help identify the offending packages. You can then investigate if the package that depends on the duplicate with the older version can be updated to the newer version so that only one instance is built."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e kinds, --edges kinds",
        "description": "The dependency kinds to display. Takes a comma separated list of values:\n\n * all — Show all edge kinds.\n * normal — Show normal dependencies.\n * build — Show build dependencies.\n * dev — Show development dependencies.\n * features — Show features enabled by each dependency. If this is the only kind given, then it will automatically include the other dependency kinds.\n * no-normal — Do not include normal dependencies.\n * no-build — Do not include build dependencies.\n * no-dev — Do not include development dependencies.\n * no-proc-macro — Do not include procedural macro dependencies.\n\nThe normal, build, dev, and all dependency kinds cannot be mixed with no-normal, no-build, or no-dev dependency kinds.\n\nThe default is normal,build,dev."
      },
      {
        "type": "long",
        "key": "edges",
        "title": "-e kinds, --edges kinds",
        "description": "The dependency kinds to display. Takes a comma separated list of values:\n\n * all — Show all edge kinds.\n * normal — Show normal dependencies.\n * build — Show build dependencies.\n * dev — Show development dependencies.\n * features — Show features enabled by each dependency. If this is the only kind given, then it will automatically include the other dependency kinds.\n * no-normal — Do not include normal dependencies.\n * no-build — Do not include build dependencies.\n * no-dev — Do not include development dependencies.\n * no-proc-macro — Do not include procedural macro dependencies.\n\nThe normal, build, dev, and all dependency kinds cannot be mixed with no-normal, no-build, or no-dev dependency kinds.\n\nThe default is normal,build,dev."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Filter dependencies matching the given target-triple. The default is the host platform. Use the value all to include all targets."
      },
      {
        "type": "long",
        "key": "charset",
        "title": "--charset charset",
        "description": "Chooses the character set to use for the tree. Valid values are \"utf8\" or \"ascii\". Default is \"utf8\"."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f format, --format format",
        "description": "Set the format string for each package. The default is \"{p}\".\n\nThis is an arbitrary string which will be used to display each package. The following strings will be replaced with the corresponding value:\n\n * {p} — The package name.\n * {l} — The package license.\n * {r} — The package repository URL.\n * {f} — Comma-separated list of package features that are enabled.\n * {lib} — The name, as used in a use statement, of the package's library."
      },
      {
        "type": "long",
        "key": "format",
        "title": "-f format, --format format",
        "description": "Set the format string for each package. The default is \"{p}\".\n\nThis is an arbitrary string which will be used to display each package. The following strings will be replaced with the corresponding value:\n\n * {p} — The package name.\n * {l} — The package license.\n * {r} — The package repository URL.\n * {f} — Comma-separated list of package features that are enabled.\n * {lib} — The name, as used in a use statement, of the package's library."
      },
      {
        "type": "long",
        "key": "prefix",
        "title": "--prefix prefix",
        "description": "Sets how each line is displayed. The prefix value can be one of:\n\n * indent (default) — Shows each line indented as a tree.\n * depth — Show as a list, with the numeric depth printed before each entry.\n * none — Show as a flat list."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p spec..., --package spec...",
        "description": "Display only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec..., --package spec...",
        "description": "Display only the specified packages. See cargo-pkgid(1) for the SPEC format. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "workspace",
        "title": "--workspace",
        "description": "Display all members in the workspace."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude SPEC...",
        "description": "Exclude the specified packages. Must be used in conjunction with the --workspace flag. This flag may be specified multiple times and supports common Unix glob patterns like *, ? and []. However, to avoid your shell accidentally expanding glob patterns before Cargo handles them, you must use single quotes or double quotes around each pattern."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo update",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p spec..., --package spec...",
        "description": "Update only the specified packages. This flag may be specified multiple times. See cargo-pkgid(1) for the SPEC format.\n\nIf packages are specified with the -p flag, then a conservative update of the lockfile will be performed. This means that only the dependency specified by SPEC will be updated. Its transitive dependencies will be updated only if SPEC cannot be updated without updating dependencies. All other dependencies will remain locked at their currently recorded versions.\n\nIf -p is not specified, all dependencies are updated."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p spec..., --package spec...",
        "description": "Update only the specified packages. This flag may be specified multiple times. See cargo-pkgid(1) for the SPEC format.\n\nIf packages are specified with the -p flag, then a conservative update of the lockfile will be performed. This means that only the dependency specified by SPEC will be updated. Its transitive dependencies will be updated only if SPEC cannot be updated without updating dependencies. All other dependencies will remain locked at their currently recorded versions.\n\nIf -p is not specified, all dependencies are updated."
      },
      {
        "type": "long",
        "key": "aggressive",
        "title": "--aggressive",
        "description": "When used with -p, dependencies of spec are forced to update as well. Cannot be used with --precise."
      },
      {
        "type": "long",
        "key": "precise",
        "title": "--precise precise",
        "description": "When used with -p, allows you to specify a specific version number to set the package to. If the package comes from a git repository, this can be a git revision (such as a SHA hash or tag)."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --workspace",
        "description": "Attempt to update only packages defined in the workspace. Other packages are updated only if they don't already exist in the lockfile. This option is useful for updating Cargo.lock after you've changed version numbers in Cargo.toml."
      },
      {
        "type": "long",
        "key": "workspace",
        "title": "-w, --workspace",
        "description": "Attempt to update only packages defined in the workspace. Other packages are updated only if they don't already exist in the lockfile. This option is useful for updating Cargo.lock after you've changed version numbers in Cargo.toml."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Displays what would be updated, but doesn't actually write the lockfile."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo vendor",
    "options": [
      {
        "type": "short",
        "key": "s",
        "title": "-s manifest, --sync manifest",
        "description": "Specify extra Cargo.toml manifests to workspaces which should also be vendored and synced to the output."
      },
      {
        "type": "long",
        "key": "sync",
        "title": "-s manifest, --sync manifest",
        "description": "Specify extra Cargo.toml manifests to workspaces which should also be vendored and synced to the output."
      },
      {
        "type": "long",
        "key": "no-delete",
        "title": "--no-delete",
        "description": "Don't delete the \"vendor\" directory when vendoring, but rather keep all existing contents of the vendor directory"
      },
      {
        "type": "long",
        "key": "respect-source-config",
        "title": "--respect-source-config",
        "description": "Instead of ignoring [source] configuration by default in .cargo/config.toml read it and use it when downloading crates from crates.io, for example"
      },
      {
        "type": "long",
        "key": "versioned-dirs",
        "title": "--versioned-dirs",
        "description": "Normally versions are only added to disambiguate multiple versions of the same package. This option causes all directories in the \"vendor\" directory to be versioned, which makes it easier to track the history of vendored packages over time, and can help with the performance of re-vendoring when only a subset of the packages have changed."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo verify-project",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo init",
    "options": [
      {
        "type": "long",
        "key": "bin",
        "title": "--bin",
        "description": "Create a package with a binary target (src/main.rs). This is the default behavior."
      },
      {
        "type": "long",
        "key": "lib",
        "title": "--lib",
        "description": "Create a package with a library target (src/lib.rs)."
      },
      {
        "type": "long",
        "key": "edition",
        "title": "--edition edition",
        "description": "Specify the Rust edition to use. Default is 2018. Possible values: 2015, 2018, 2021"
      },
      {
        "type": "long",
        "key": "name",
        "title": "--name name",
        "description": "Set the package name. Defaults to the directory name."
      },
      {
        "type": "long",
        "key": "vcs",
        "title": "--vcs vcs",
        "description": "Initialize a new VCS repository for the given version control system (git, hg, pijul, or fossil) or do not initialize any version control at all (none). If not specified, defaults to git or the configuration value cargo-new.vcs, or none if already inside a VCS repository."
      },
      {
        "type": "long",
        "key": "registry",
        "title": "--registry registry",
        "description": "This sets the publish field in Cargo.toml to the given registry name which will restrict publishing only to that registry.\n\nRegistry names are defined in Cargo config files. If not specified, the default registry defined by the registry.default config key is used. If the default registry is not set and --registry is not used, the publish field will not be set which means that publishing will not be restricted."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo install",
    "options": [
      {
        "type": "long",
        "key": "vers",
        "title": "--vers version, --version version",
        "description": "Specify a version to install. This may be a version requirement, like ~1.2, to have Cargo select the newest version from the given requirement. If the version does not have a requirement operator (such as ^ or ~), then it must be in the form MAJOR.MINOR.PATCH, and will install exactly that version; it is not treated as a caret requirement like Cargo dependencies are."
      },
      {
        "type": "long",
        "key": "version",
        "title": "--vers version, --version version",
        "description": "Specify a version to install. This may be a version requirement, like ~1.2, to have Cargo select the newest version from the given requirement. If the version does not have a requirement operator (such as ^ or ~), then it must be in the form MAJOR.MINOR.PATCH, and will install exactly that version; it is not treated as a caret requirement like Cargo dependencies are."
      },
      {
        "type": "long",
        "key": "git",
        "title": "--git url",
        "description": "Git URL to install the specified crate from."
      },
      {
        "type": "long",
        "key": "branch",
        "title": "--branch branch",
        "description": "Branch to use when installing from git."
      },
      {
        "type": "long",
        "key": "tag",
        "title": "--tag tag",
        "description": "Tag to use when installing from git."
      },
      {
        "type": "long",
        "key": "rev",
        "title": "--rev sha",
        "description": "Specific commit to use when installing from git."
      },
      {
        "type": "long",
        "key": "path",
        "title": "--path path",
        "description": "Filesystem path to local crate to install."
      },
      {
        "type": "long",
        "key": "list",
        "title": "--list",
        "description": "List all installed packages and their versions."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Force overwriting existing crates or binaries. This can be used if a package has installed a binary with the same name as another package. This is also useful if something has changed on the system that you want to rebuild with, such as a newer version of rustc."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Force overwriting existing crates or binaries. This can be used if a package has installed a binary with the same name as another package. This is also useful if something has changed on the system that you want to rebuild with, such as a newer version of rustc."
      },
      {
        "type": "long",
        "key": "no-track",
        "title": "--no-track",
        "description": "By default, Cargo keeps track of the installed packages with a metadata file stored in the installation root directory. This flag tells Cargo not to use or create that file. With this flag, Cargo will refuse to overwrite any existing files unless the --force flag is used. This also disables Cargo's ability to protect against multiple concurrent invocations of Cargo installing at the same time."
      },
      {
        "type": "long",
        "key": "bin",
        "title": "--bin name...",
        "description": "Install only the specified binary."
      },
      {
        "type": "long",
        "key": "bins",
        "title": "--bins",
        "description": "Install all binaries."
      },
      {
        "type": "long",
        "key": "example",
        "title": "--example name...",
        "description": "Install only the specified example."
      },
      {
        "type": "long",
        "key": "examples",
        "title": "--examples",
        "description": "Install all examples."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root dir",
        "description": "Directory to install packages into."
      },
      {
        "type": "long",
        "key": "registry",
        "title": "--registry registry",
        "description": "Name of the registry to use. Registry names are defined in Cargo config files. If not specified, the default registry is used, which is defined by the registry.default config key which defaults to crates-io."
      },
      {
        "type": "long",
        "key": "index",
        "title": "--index index",
        "description": "The URL of the registry index to use."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Install for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to a new temporary folder located in the temporary directory of the platform.\n\nWhen using --path, by default it will use target directory in the workspace of the local crate unless --target-dir is specified."
      },
      {
        "type": "long",
        "key": "debug",
        "title": "--debug",
        "description": "Build with the dev profile instead the release profile."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo new",
    "options": [
      {
        "type": "long",
        "key": "bin",
        "title": "--bin",
        "description": "Create a package with a binary target (src/main.rs). This is the default behavior."
      },
      {
        "type": "long",
        "key": "lib",
        "title": "--lib",
        "description": "Create a package with a library target (src/lib.rs)."
      },
      {
        "type": "long",
        "key": "edition",
        "title": "--edition edition",
        "description": "Specify the Rust edition to use. Default is 2018. Possible values: 2015, 2018, 2021"
      },
      {
        "type": "long",
        "key": "name",
        "title": "--name name",
        "description": "Set the package name. Defaults to the directory name."
      },
      {
        "type": "long",
        "key": "vcs",
        "title": "--vcs vcs",
        "description": "Initialize a new VCS repository for the given version control system (git, hg, pijul, or fossil) or do not initialize any version control at all (none). If not specified, defaults to git or the configuration value cargo-new.vcs, or none if already inside a VCS repository."
      },
      {
        "type": "long",
        "key": "registry",
        "title": "--registry registry",
        "description": "This sets the publish field in Cargo.toml to the given registry name which will restrict publishing only to that registry.\n\nRegistry names are defined in Cargo config files. If not specified, the default registry defined by the registry.default config key is used. If the default registry is not set and --registry is not used, the publish field will not be set which means that publishing will not be restricted."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo search",
    "options": [
      {
        "type": "long",
        "key": "limit",
        "title": "--limit limit",
        "description": "Limit the number of results (default: 10, max: 100)."
      },
      {
        "type": "long",
        "key": "index",
        "title": "--index index",
        "description": "The URL of the registry index to use."
      },
      {
        "type": "long",
        "key": "registry",
        "title": "--registry registry",
        "description": "Name of the registry to use. Registry names are defined in Cargo config files. If not specified, the default registry is used, which is defined by the registry.default config key which defaults to crates-io."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo uninstall",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p, --package spec...",
        "description": "Package to uninstall."
      },
      {
        "type": "long",
        "key": "package",
        "title": "-p, --package spec...",
        "description": "Package to uninstall."
      },
      {
        "type": "long",
        "key": "bin",
        "title": "--bin name...",
        "description": "Only uninstall the binary name."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root dir",
        "description": "Directory to uninstall packages from."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo login",
    "options": [
      {
        "type": "long",
        "key": "registry",
        "title": "--registry registry",
        "description": "Name of the registry to use. Registry names are defined in Cargo config files. If not specified, the default registry is used, which is defined by the registry.default config key which defaults to crates-io."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo owner",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --add login...",
        "description": "Invite the given user or team as an owner."
      },
      {
        "type": "long",
        "key": "add",
        "title": "-a, --add login...",
        "description": "Invite the given user or team as an owner."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r, --remove login...",
        "description": "Remove the given user or team as an owner."
      },
      {
        "type": "long",
        "key": "remove",
        "title": "-r, --remove login...",
        "description": "Remove the given user or team as an owner."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --list",
        "description": "List owners of a crate."
      },
      {
        "type": "long",
        "key": "list",
        "title": "-l, --list",
        "description": "List owners of a crate."
      },
      {
        "type": "long",
        "key": "token",
        "title": "--token token",
        "description": "API token to use when authenticating. This overrides the token stored in the credentials file (which is created by cargo-login(1)).\n\nCargo config environment variables can be used to override the tokens stored in the credentials file. The token for crates.io may be specified with the CARGO_REGISTRY_TOKEN environment variable. Tokens for other registries may be specified with environment variables of the form CARGO_REGISTRIES_NAME_TOKEN where NAME is the name of the registry in all capital letters."
      },
      {
        "type": "long",
        "key": "index",
        "title": "--index index",
        "description": "The URL of the registry index to use."
      },
      {
        "type": "long",
        "key": "registry",
        "title": "--registry registry",
        "description": "Name of the registry to use. Registry names are defined in Cargo config files. If not specified, the default registry is used, which is defined by the registry.default config key which defaults to crates-io."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo package",
    "options": [
      {
        "type": "short",
        "key": "l",
        "title": "-l, --list",
        "description": "Print files included in a package without making one."
      },
      {
        "type": "long",
        "key": "list",
        "title": "-l, --list",
        "description": "Print files included in a package without making one."
      },
      {
        "type": "long",
        "key": "no-verify",
        "title": "--no-verify",
        "description": "Don't verify the contents by building them."
      },
      {
        "type": "long",
        "key": "no-metadata",
        "title": "--no-metadata",
        "description": "Ignore warnings about a lack of human-usable metadata (such as the description or the license)."
      },
      {
        "type": "long",
        "key": "allow-dirty",
        "title": "--allow-dirty",
        "description": "Allow working directories with uncommitted VCS changes to be packaged."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Package for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to target in the root of the workspace."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo publish",
    "options": [
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Perform all checks without uploading."
      },
      {
        "type": "long",
        "key": "token",
        "title": "--token token",
        "description": "API token to use when authenticating. This overrides the token stored in the credentials file (which is created by cargo-login(1)).\n\nCargo config environment variables can be used to override the tokens stored in the credentials file. The token for crates.io may be specified with the CARGO_REGISTRY_TOKEN environment variable. Tokens for other registries may be specified with environment variables of the form CARGO_REGISTRIES_NAME_TOKEN where NAME is the name of the registry in all capital letters."
      },
      {
        "type": "long",
        "key": "no-verify",
        "title": "--no-verify",
        "description": "Don't verify the contents by building them."
      },
      {
        "type": "long",
        "key": "allow-dirty",
        "title": "--allow-dirty",
        "description": "Allow working directories with uncommitted VCS changes to be packaged."
      },
      {
        "type": "long",
        "key": "index",
        "title": "--index index",
        "description": "The URL of the registry index to use."
      },
      {
        "type": "long",
        "key": "registry",
        "title": "--registry registry",
        "description": "Name of the registry to publish to. Registry names are defined in Cargo config files. If not specified, and there is a package.publish field in Cargo.toml with a single registry, then it will publish to that registry. Otherwise it will use the default registry, which is defined by the registry.default config key which defaults to crates-io."
      },
      {
        "type": "long",
        "key": "target",
        "title": "--target triple",
        "description": "Publish for the given architecture. The default is the host architecture. The general format of the triple is <arch><sub>-<vendor>-<sys>-<abi>. Run rustc --print target-list for a list of supported targets.\n\nThis may also be specified with the build.target config value.\n\nNote that specifying this flag makes Cargo run in a different mode where the target artifacts are placed in a separate directory. See the build cache documentation for more details."
      },
      {
        "type": "long",
        "key": "target-dir",
        "title": "--target-dir directory",
        "description": "Directory for all generated artifacts and intermediate files. May also be specified with the CARGO_TARGET_DIR environment variable, or the build.target-dir config value. Defaults to target in the root of the workspace."
      },
      {
        "type": "long",
        "key": "features",
        "title": "--features features",
        "description": "Space or comma separated list of features to activate. Features of workspace members may be enabled with package-name/feature-name syntax. This flag may be specified multiple times, which enables all specified features."
      },
      {
        "type": "long",
        "key": "all-features",
        "title": "--all-features",
        "description": "Activate all available features of all selected packages."
      },
      {
        "type": "long",
        "key": "no-default-features",
        "title": "--no-default-features",
        "description": "Do not activate the default feature of the selected packages."
      },
      {
        "type": "long",
        "key": "manifest-path",
        "title": "--manifest-path path",
        "description": "Path to the Cargo.toml file. By default, Cargo searches for the Cargo.toml file in the current directory or any parent directory."
      },
      {
        "type": "long",
        "key": "frozen",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "locked",
        "title": "--frozen, --locked",
        "description": "Either of these flags requires that the Cargo.lock file is up-to-date. If the lock file is missing, or it needs to be updated, Cargo will exit with an error. The --frozen flag also prevents Cargo from attempting to access the network to determine if it is out-of-date.\n\nThese may be used in environments where you want to assert that the Cargo.lock file is up-to-date (such as a CI build) or want to avoid network access."
      },
      {
        "type": "long",
        "key": "offline",
        "title": "--offline",
        "description": "Prevents Cargo from accessing the network for any reason. Without this flag, Cargo will stop with an error if it needs to access the network and the network is not available. With this flag, Cargo will attempt to proceed without the network if possible.\n\nBeware that this may result in different dependency resolution than online mode. Cargo will restrict itself to crates that are downloaded locally, even if there might be a newer version as indicated in the local copy of the index. See the cargo-fetch(1) command to download dependencies before going offline.\n\nMay also be specified with the net.offline config value."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j N, --jobs N",
        "description": "Number of parallel jobs to run. May also be specified with the build.jobs config value. Defaults to the number of CPUs."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  },
  {
    "name": "cargo yank",
    "options": [
      {
        "type": "long",
        "key": "vers",
        "title": "--vers version",
        "description": "The version to yank or un-yank."
      },
      {
        "type": "long",
        "key": "undo",
        "title": "--undo",
        "description": "Undo a yank, putting a version back into the index."
      },
      {
        "type": "long",
        "key": "token",
        "title": "--token token",
        "description": "API token to use when authenticating. This overrides the token stored in the credentials file (which is created by cargo-login(1)).\n\nCargo config environment variables can be used to override the tokens stored in the credentials file. The token for crates.io may be specified with the CARGO_REGISTRY_TOKEN environment variable. Tokens for other registries may be specified with environment variables of the form CARGO_REGISTRIES_NAME_TOKEN where NAME is the name of the registry in all capital letters."
      },
      {
        "type": "long",
        "key": "index",
        "title": "--index index",
        "description": "The URL of the registry index to use."
      },
      {
        "type": "long",
        "key": "registry",
        "title": "--registry registry",
        "description": "Name of the registry to use. Registry names are defined in Cargo config files. If not specified, the default registry is used, which is defined by the registry.default config key which defaults to crates-io."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Use verbose output. May be specified twice for \"very verbose\" output which includes extra output such as dependency warnings and build script output. May also be specified with the term.verbose config value."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "No output printed to stdout."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color when",
        "description": "Control when colored output is used. Valid values:\n\n * auto (default): Automatically detect if color support is available on the terminal.\n * always: Always display colors.\n * never: Never display colors.\n\nMay also be specified with the term.color config value."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, --help",
        "description": "Prints help information."
      },
      {
        "type": "short",
        "key": "Z",
        "title": "-Z flag",
        "description": "Unstable (nightly-only) flags to Cargo. Run cargo -Z help for details."
      }
    ]
  }
]
