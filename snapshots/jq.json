[
  {
    "name": "jq",
    "optionStyle": "short-and-long",
    "options": [
      {
        "key": "version",
        "title": "--version",
        "description": "Output the jq version and exit with zero."
      },
      {
        "key": "seq",
        "title": "--seq",
        "description": "Use the application/json-seq MIME type scheme for separating JSON texts in jq's input and output. This means that an ASCII RS (record separator) character is printed before each value on output and an ASCII LF (line feed) is printed after every output. Input JSON texts that fail to parse are ignored (but warned about), discarding all subsequent input until the next RS. This mode also parses the output of jq without the --seq option."
      },
      {
        "key": "stream",
        "title": "--stream",
        "description": "Parse the input in streaming fashion, outputting arrays of path and leaf values (scalars and empty arrays or empty objects). For example, \"a\" becomes [[],\"a\"], and [[],\"a\",[\"b\"]] becomes [[0],[]], [[1],\"a\"], and [[1,0],\"b\"].\nThis is useful for processing very large inputs. Use this in conjunction with filtering and the reduce and foreach syntax to reduce large inputs incrementally."
      },
      {
        "key": "slurp",
        "title": "--slurp / -s",
        "description": "Instead of running the filter for each JSON object in the input, read the entire input stream into a large array and run the filter just once."
      },
      {
        "key": "s",
        "title": "--slurp / -s",
        "description": "Instead of running the filter for each JSON object in the input, read the entire input stream into a large array and run the filter just once."
      },
      {
        "key": "raw-input",
        "title": "--raw-input / -R",
        "description": "Don't parse the input as JSON. Instead, each line of text is passed to the filter as a string. If combined with --slurp, then the entire input is passed to the filter as a single long string."
      },
      {
        "key": "R",
        "title": "--raw-input / -R",
        "description": "Don't parse the input as JSON. Instead, each line of text is passed to the filter as a string. If combined with --slurp, then the entire input is passed to the filter as a single long string."
      },
      {
        "key": "null-input",
        "title": "--null-input / -n",
        "description": "Don't read any input at all! Instead, the filter is run once using null as the input. This is useful when using jq as a simple calculator or to construct JSON data from scratch."
      },
      {
        "key": "n",
        "title": "--null-input / -n",
        "description": "Don't read any input at all! Instead, the filter is run once using null as the input. This is useful when using jq as a simple calculator or to construct JSON data from scratch."
      },
      {
        "key": "compact-output",
        "title": "--compact-output / -c",
        "description": "By default, jq pretty-prints JSON output. Using this option will result in more compact output by instead putting each JSON object on a single line."
      },
      {
        "key": "c",
        "title": "--compact-output / -c",
        "description": "By default, jq pretty-prints JSON output. Using this option will result in more compact output by instead putting each JSON object on a single line."
      },
      {
        "key": "tab",
        "title": "--tab",
        "description": "Use a tab for each indentation level instead of two spaces."
      },
      {
        "key": "indent",
        "title": "--indent n",
        "description": "Use the given number of spaces (no more than 7) for indentation."
      },
      {
        "key": "color-output",
        "title": "--color-output / -C and --monochrome-output / -M",
        "description": "By default, jq outputs colored JSON if writing to a terminal. You can force it to produce color even if writing to a pipe or a file using -C, and disable color with -M.\nColors can be configured with the JQ_COLORS environment variable (see below)."
      },
      {
        "key": "C",
        "title": "--color-output / -C and --monochrome-output / -M",
        "description": "By default, jq outputs colored JSON if writing to a terminal. You can force it to produce color even if writing to a pipe or a file using -C, and disable color with -M.\nColors can be configured with the JQ_COLORS environment variable (see below)."
      },
      {
        "key": "monochrome-output",
        "title": "--color-output / -C and --monochrome-output / -M",
        "description": "By default, jq outputs colored JSON if writing to a terminal. You can force it to produce color even if writing to a pipe or a file using -C, and disable color with -M.\nColors can be configured with the JQ_COLORS environment variable (see below)."
      },
      {
        "key": "M",
        "title": "--color-output / -C and --monochrome-output / -M",
        "description": "By default, jq outputs colored JSON if writing to a terminal. You can force it to produce color even if writing to a pipe or a file using -C, and disable color with -M.\nColors can be configured with the JQ_COLORS environment variable (see below)."
      },
      {
        "key": "binary",
        "title": "--binary / -b",
        "description": "Windows users using WSL, MSYS2, or Cygwin, should use this option when using a native jq.exe, otherwise jq will turn newlines (LFs) into carriage-return-then-newline (CRLF)."
      },
      {
        "key": "b",
        "title": "--binary / -b",
        "description": "Windows users using WSL, MSYS2, or Cygwin, should use this option when using a native jq.exe, otherwise jq will turn newlines (LFs) into carriage-return-then-newline (CRLF)."
      },
      {
        "key": "ascii-output",
        "title": "--ascii-output / -a",
        "description": "jq usually outputs non-ASCII Unicode codepoints as UTF-8, even if the input specified them as escape sequences (like \"\\u03bc\"). Using this option, you can force jq to produce pure ASCII output with every non-ASCII character replaced with the equivalent escape sequence."
      },
      {
        "key": "a",
        "title": "--ascii-output / -a",
        "description": "jq usually outputs non-ASCII Unicode codepoints as UTF-8, even if the input specified them as escape sequences (like \"\\u03bc\"). Using this option, you can force jq to produce pure ASCII output with every non-ASCII character replaced with the equivalent escape sequence."
      },
      {
        "key": "unbuffered",
        "title": "--unbuffered",
        "description": "Flush the output after each JSON object is printed (useful if you're piping a slow data source into jq and piping jq's output elsewhere)."
      },
      {
        "key": "sort-keys",
        "title": "--sort-keys / -S",
        "description": "Output the fields of each object with the keys in sorted order."
      },
      {
        "key": "S",
        "title": "--sort-keys / -S",
        "description": "Output the fields of each object with the keys in sorted order."
      },
      {
        "key": "raw-output",
        "title": "--raw-output / -r",
        "description": "With this option, if the filter's result is a string then it will be written directly to standard output rather than being formatted as a JSON string with quotes. This can be useful for making jq filters talk to non-JSON-based systems."
      },
      {
        "key": "r",
        "title": "--raw-output / -r",
        "description": "With this option, if the filter's result is a string then it will be written directly to standard output rather than being formatted as a JSON string with quotes. This can be useful for making jq filters talk to non-JSON-based systems."
      },
      {
        "key": "join-output",
        "title": "--join-output / -j",
        "description": "Like -r but jq won't print a newline after each output."
      },
      {
        "key": "j",
        "title": "--join-output / -j",
        "description": "Like -r but jq won't print a newline after each output."
      },
      {
        "key": "nul-output",
        "title": "--nul-output / -0",
        "description": "Like -r but jq will print NUL instead of newline after each output. This can be useful when the values being output can contain newlines."
      },
      {
        "key": "0",
        "title": "--nul-output / -0",
        "description": "Like -r but jq will print NUL instead of newline after each output. This can be useful when the values being output can contain newlines."
      },
      {
        "key": "f",
        "title": "-f filename / --from-file filename",
        "description": "Read filter from the file rather than from a command line, like awk's -f option. You can also use '#' to make comments."
      },
      {
        "key": "from-file",
        "title": "-f filename / --from-file filename",
        "description": "Read filter from the file rather than from a command line, like awk's -f option. You can also use '#' to make comments."
      },
      {
        "key": "L",
        "title": "-Ldirectory / -L directory",
        "description": "Prepend directory to the search list for modules. If this option is used then no builtin search list is used. See the section on modules below."
      },
      {
        "key": "e",
        "title": "-e / --exit-status",
        "description": "Sets the exit status of jq to 0 if the last output values was neither false nor null, 1 if the last output value was either false or null, or 4 if no valid result was ever produced. Normally jq exits with 2 if there was any usage problem or system error, 3 if there was a jq program compile error, or 0 if the jq program ran.\nAnother way to set the exit status is with the halt_error builtin function."
      },
      {
        "key": "exit-status",
        "title": "-e / --exit-status",
        "description": "Sets the exit status of jq to 0 if the last output values was neither false nor null, 1 if the last output value was either false or null, or 4 if no valid result was ever produced. Normally jq exits with 2 if there was any usage problem or system error, 3 if there was a jq program compile error, or 0 if the jq program ran.\nAnother way to set the exit status is with the halt_error builtin function."
      },
      {
        "key": "arg",
        "title": "--arg name value",
        "description": "This option passes a value to the jq program as a predefined variable. If you run jq with --arg foo bar, then $foo is available in the program and has the value \"bar\". Note that value will be treated as a string, so --arg foo 123 will bind $foo to \"123\".\nNamed arguments are also available to the jq program as $ARGS.named."
      },
      {
        "key": "argjson",
        "title": "--argjson name JSON-text",
        "description": "This option passes a JSON-encoded value to the jq program as a predefined variable. If you run jq with --argjson foo 123, then $foo is available in the program and has the value 123."
      },
      {
        "key": "slurpfile",
        "title": "--slurpfile variable-name filename",
        "description": "This option reads all the JSON texts in the named file and binds an array of the parsed JSON values to the given global variable. If you run jq with --slurpfile foo bar, then $foo is available in the program and has an array whose elements correspond to the texts in the file named bar."
      },
      {
        "key": "rawfile",
        "title": "--rawfile variable-name filename",
        "description": "This option reads in the named file and binds its contents to the given global variable. If you run jq with --rawfile foo bar, then $foo is available in the program and has a string whose contents are to the texs in the file named bar."
      },
      {
        "key": "argfile",
        "title": "--argfile variable-name filename",
        "description": "Do not use. Use --slurpfile instead.\n(This option is like --slurpfile, but when the file has just one text, then that is used, else an array of texts is used as in --slurpfile.)"
      },
      {
        "key": "args",
        "title": "--args",
        "description": "Remaining arguments are positional string arguments. These are available to the jq program as $ARGS.positional[]."
      },
      {
        "key": "jsonargs",
        "title": "--jsonargs",
        "description": "Remaining arguments are positional JSON text arguments. These are available to the jq program as $ARGS.positional[]."
      },
      {
        "key": "run-tests",
        "title": "--run-tests [filename]",
        "description": "Runs the tests in the given file or standard input. This must be the last option given and does not honor all preceding options. The input consists of comment lines, empty lines, and program lines followed by one input line, as many lines of output as are expected (one per output), and a terminating empty line. Compilation failure tests start with a line containing only \"%%FAIL\", then a line containing the program to compile, then a line containing an error message to compare to the actual.\nBe warned that this option can change backwards-incompatibly."
      }
    ]
  }
]
