[
  {
    "name": "terraform apply",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "auto-approve",
        "title": "-auto-approve",
        "description": "Skips interactive approval of plan before applying. This option is ignored when you pass a previously-saved plan file, because Terraform considers you passing the plan file as the approval and so will never prompt in that case."
      },
      {
        "key": "compact-warnings",
        "title": "-compact-warnings",
        "description": "Shows any warning messages in a compact form which includes only the summary messages, unless the warnings are accompanied by at least one error and thus the warning text might be useful context for the errors."
      },
      {
        "key": "input",
        "title": "-input=false",
        "description": "Disables all of Terraform's interactive prompts. Note that this also prevents Terraform from prompting for interactive approval of a plan, so Terraform will conservatively assume that you do not wish to apply the plan, causing the operation to fail. If you wish to run Terraform in a non-interactive context, see Running Terraform in Automation for some different approaches."
      },
      {
        "key": "json",
        "title": "-json",
        "description": "Enables the machine readable JSON UI output. This implies -input=false, so the configuration must have no unassigned variable values to continue. To enable this flag, you must also either enable the -auto-approve flag or specify a previously-saved plan."
      },
      {
        "key": "lock",
        "title": "-lock=false",
        "description": "Don't hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace."
      },
      {
        "key": "lock-timeout",
        "title": "-lock-timeout=DURATION",
        "description": "Unless locking is disabled with -lock=false, instructs Terraform to retry acquiring a lock for a period of time before returning an error. The duration syntax is a number followed by a time unit letter, such as \"3s\" for three seconds."
      },
      {
        "key": "no-color",
        "title": "-no-color",
        "description": "Disables terminal formatting sequences in the output. Use this if you are running Terraform in a context where its output will be rendered by a system that cannot interpret terminal formatting."
      },
      {
        "key": "parallelism",
        "title": "-parallelism=n",
        "description": "Limit the number of concurrent operation as Terraform walks the graph. Defaults to 10."
      }
    ]
  },
  {
    "name": "terraform console",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform destroy",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform env",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform fmt",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "list",
        "title": "-list=false",
        "description": "Don't list the files containing formatting inconsistencies."
      },
      {
        "key": "write",
        "title": "-write=false",
        "description": "Don't overwrite the input files. (This is implied by -check or when the input is STDIN.)"
      },
      {
        "key": "diff",
        "title": "-diff",
        "description": "Display diffs of formatting changes"
      },
      {
        "key": "check",
        "title": "-check",
        "description": "Check if the input is formatted. Exit status will be 0 if all input is properly formatted and non-zero otherwise."
      },
      {
        "key": "recursive",
        "title": "-recursive",
        "description": "Also process files in subdirectories. By default, only the given directory (or current directory) is processed."
      }
    ]
  },
  {
    "name": "terraform force-unlock",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "force",
        "title": "-force",
        "description": "Don't ask for input for unlock confirmation."
      }
    ]
  },
  {
    "name": "terraform get",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "update",
        "title": "-update",
        "description": "If specified, modules that are already downloaded will be checked for updates and the updates will be downloaded if present."
      },
      {
        "key": "no-color",
        "title": "-no-color",
        "description": "Disable text coloring in the output."
      }
    ]
  },
  {
    "name": "terraform graph",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "plan",
        "title": "-plan=tfplan",
        "description": "Render graph using the specified plan file instead of the configuration in the current directory."
      },
      {
        "key": "draw-cycles",
        "title": "-draw-cycles",
        "description": "Highlight any cycles in the graph with colored edges. This helps when diagnosing cycle errors."
      },
      {
        "key": "type",
        "title": "-type=plan",
        "description": "Type of graph to output. Can be: plan, plan-destroy, apply, validate, input, refresh."
      },
      {
        "key": "module-depth",
        "title": "-module-depth=n",
        "description": "(deprecated) In prior versions of Terraform, specified the depth of modules to show in the output."
      }
    ]
  },
  {
    "name": "terraform import",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "config",
        "title": "-config=path",
        "description": "Path to directory of Terraform configuration files that configure the provider for import. This defaults to your working directory. If this directory contains no Terraform configuration files, the provider must be configured via manual input or environmental variables."
      },
      {
        "key": "input",
        "title": "-input=true",
        "description": "Whether to ask for input for provider configuration."
      },
      {
        "key": "lock",
        "title": "-lock=false",
        "description": "Don't hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace."
      },
      {
        "key": "lock-timeout",
        "title": "-lock-timeout=0s",
        "description": "Duration to retry a state lock."
      },
      {
        "key": "no-color",
        "title": "-no-color",
        "description": "If specified, output won't contain any color."
      },
      {
        "key": "parallelism",
        "title": "-parallelism=n",
        "description": "Limit the number of concurrent operation as Terraform walks the graph. Defaults to 10."
      },
      {
        "key": "provider",
        "title": "-provider=provider",
        "description": "Deprecated Override the provider configuration to use when importing the object. By default, Terraform uses the provider specified in the configuration for the target resource, and that is the best behavior in most cases."
      },
      {
        "key": "var",
        "title": "-var 'foo=bar'",
        "description": "Set a variable in the Terraform configuration. This flag can be set multiple times. Variable values are interpreted as literal expressions in the Terraform language, so list and map values can be specified via this flag. This is only useful with the -config flag."
      },
      {
        "key": "var-file",
        "title": "-var-file=foo",
        "description": "Set variables in the Terraform configuration from a variable file. If a terraform.tfvars or any .auto.tfvars files are present in the current directory, they will be automatically loaded. terraform.tfvars is loaded first and the .auto.tfvars files after in alphabetical order. Any files specified by -var-file override any values set automatically from files in the working directory. This flag can be used multiple times. This is only useful with the -config flag."
      }
    ]
  },
  {
    "name": "terraform init",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "input",
        "title": "-input=true",
        "description": "Ask for input if necessary. If false, will error if input was required."
      },
      {
        "key": "lock",
        "title": "-lock=false",
        "description": "Disable locking of state files during state-related operations."
      },
      {
        "key": "lock-timeout",
        "title": "-lock-timeout=<duration>",
        "description": "Override the time Terraform will wait to acquire a state lock. The default is 0s (zero seconds), which causes immediate failure if the lock is already held by another process."
      },
      {
        "key": "no-color",
        "title": "-no-color",
        "description": "Disable color codes in the command output."
      },
      {
        "key": "upgrade",
        "title": "-upgrade",
        "description": "Opt to upgrade modules and plugins as part of their respective installation steps. See the sections below for more details."
      },
      {
        "key": "get-plugins",
        "title": "-get-plugins=false",
        "description": "Skip plugin installation.\n\nNote: Since Terraform 0.13, this option has been superseded by the provider_installation and plugin_cache_dir settings. It should not be used in Terraform versions 0.13+, and this option was removed in Terraform 0.15."
      },
      {
        "key": "plugin-dir",
        "title": "-plugin-dir=PATH",
        "description": "Force plugin installation to read plugins only from the specified directory, as if it had been configured as a filesystem_mirror in the CLI configuration. If you intend to routinely use a particular filesystem mirror then we recommend configuring Terraform's installation methods globally. You can use -plugin-dir as a one-time override for exceptional situations, such as if you are testing a local build of a provider plugin you are currently developing."
      },
      {
        "key": "lockfile",
        "title": "-lockfile=MODE",
        "description": "Set a dependency lockfile mode."
      }
    ]
  },
  {
    "name": "terraform login",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform logout",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform output",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "json",
        "title": "-json",
        "description": "If specified, the outputs are formatted as a JSON object, with a key per output. If NAME is specified, only the output specified will be returned. This can be piped into tools such as jq for further processing."
      },
      {
        "key": "raw",
        "title": "-raw",
        "description": "If specified, Terraform will convert the specified output value to a string and print that string directly to the output, without any special formatting. This can be convenient when working with shell scripts, but it only supports string, number, and boolean values. Use -json instead for processing complex data types."
      },
      {
        "key": "no-color",
        "title": "-no-color",
        "description": "If specified, output won't contain any color."
      },
      {
        "key": "state",
        "title": "-state=path",
        "description": "Path to the state file. Defaults to \"terraform.tfstate\". Ignored when remote state is used."
      }
    ]
  },
  {
    "name": "terraform plan",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "refresh",
        "title": "-refresh=false",
        "description": "Disables the default behavior of synchronizing the Terraform state with remote objects before checking for configuration changes.\n\nThis option can potentially make the planning operation faster by reducing the number of remote API requests, but it comes at the expense of having Terraform not take into account any changes that might've happened outside of Terraform, and thus the resulting plan may not be complete or correct.\n\nThis option is not available in the \"refresh only\" planning mode, because it would effectively disable the entirety of the planning operation in that case."
      },
      {
        "key": "replace",
        "title": "-replace=ADDRESS",
        "description": "Instructs Terraform to plan to replace the single resource instance with the given address. If the given instance would normally have caused only an \"update\" action, or no action at all, then Terraform will choose a \"replace\" action instead.\n\nYou can use this option if you have learned that a particular remote object has become degraded in some way. If you are using immutable infrastructure patterns then you may wish to respond to that by replacing the malfunctioning object with a new object that has the same configuration.\n\nThis option is allowed only in the normal planning mode, so this option is incompatible with the -destroy option.\n\nThe -replace=... option is available only from Terraform v0.15.2 onwards. For earlier versions, you can achieve a similar effect (with some caveats) using terraform taint."
      },
      {
        "key": "target",
        "title": "-target=ADDRESS",
        "description": "Instructs Terraform to focus its planning efforts only on resource instances which match the given address and on any objects that those instances depend on.\n\nThis command is for exceptional use only. See Resource Targeting below for more information."
      },
      {
        "key": "var",
        "title": "-var 'NAME=VALUE'",
        "description": "Sets a value for a single input variable declared in the root module of the configuration. Use this option multiple times to set more than one variable. For more information see Input Variables on the Command Line, below."
      },
      {
        "key": "var-file",
        "title": "-var-file=FILENAME",
        "description": "Sets values for potentially many input variables declared in the root module of the configuration, using definitions from a \"tfvars\" file. Use this option multiple times to include values from more than one file."
      },
      {
        "key": "compact-warnings",
        "title": "-compact-warnings",
        "description": "Shows any warning messages in a compact form which includes only the summary messages, unless the warnings are accompanied by at least one error and thus the warning text might be useful context for the errors."
      },
      {
        "key": "detailed-exitcode",
        "title": "-detailed-exitcode",
        "description": "Returns a detailed exit code when the command exits. When provided, this argument changes the exit codes and their meanings to provide more granular information about what the resulting plan contains:\n\n* 0 = Succeeded with empty diff (no changes)\n* 1 = Error\n* 2 = Succeeded with non-empty diff (changes present)"
      },
      {
        "key": "input",
        "title": "-input=false",
        "description": "Disables Terraform's default behavior of prompting for input for root module input variables that have not otherwise been assigned a value. This option is particular useful when running Terraform in non-interactive automation systems."
      },
      {
        "key": "json",
        "title": "-json",
        "description": "Enables the machine readable JSON UI output. This implies -input=false, so the configuration must have no unassigned variable values to continue."
      },
      {
        "key": "lock",
        "title": "-lock=false",
        "description": "Don't hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace."
      },
      {
        "key": "lock-timeout",
        "title": "-lock-timeout=DURATION",
        "description": "Unless locking is disabled with -lock=false, instructs Terraform to retry acquiring a lock for a period of time before returning an error. The duration syntax is a number followed by a time unit letter, such as \"3s\" for three seconds."
      },
      {
        "key": "no-color",
        "title": "-no-color",
        "description": "Disables terminal formatting sequences in the output. Use this if you are running Terraform in a context where its output will be rendered by a system that cannot interpret terminal formatting."
      },
      {
        "key": "out",
        "title": "-out=FILENAME",
        "description": "Writes the generated plan to the given filename in an opaque file format that you can later pass to terraform apply to execute the planned changes, and to some other Terraform commands that can work with saved plan files.\n\nTerraform will allow any filename for the plan file, but a typical convention is to name it tfplan. Do not name the file with a suffix that Terraform recognizes as another file format; if you use a .tf suffix then Terraform will try to interpret the file as a configuration source file, which will then cause syntax errors for subsequent commands.\n\nThe generated file is not in any standard format intended for consumption by other software, but the file does contain your full configuration, all of the values associated with planned changes, and all of the plan options including the input variables. If your plan includes any sort of sensitive data, even if obscured in Terraform's terminal output, it will be saved in cleartext in the plan file. You should therefore treat any saved plan files as potentially-sensitive artifacts."
      },
      {
        "key": "parallelism",
        "title": "-parallelism=n",
        "description": "Limit the number of concurrent operation as Terraform walks the graph. Defaults to 10."
      }
    ]
  },
  {
    "name": "terraform providers",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform providers lock",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "fs-mirror",
        "title": "-fs-mirror=PATH",
        "description": "Direct Terraform to look for provider packages in the given local filesystem mirror directory, instead of in upstream registries. The given directory must use the usual filesystem mirror directory layout."
      },
      {
        "key": "net-mirror",
        "title": "-net-mirror=URL",
        "description": "Direct Terraform to look for provider packages in the given network mirror service, instead of in upstream registries. The given URL must implement the Terraform provider network mirror protocol."
      },
      {
        "key": "platform",
        "title": "-platform=OS_ARCH",
        "description": "Specify a platform you intend to use to work with this Terraform configuration. Terraform will ensure that the providers are all available for the given platform and will save enough package checksums in the lock file to support at least the specified platforms.\n\nUse this option multiple times to include checksums for multiple target systems.\n\nTarget platform names consist of an operating system and a CPU architecture. For example, linux_amd64 selects the Linux operating system running on an AMD64 or x86_64 CPU.\n\nThere is more detail on this option in the following section."
      }
    ]
  },
  {
    "name": "terraform providers mirror",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "platform",
        "title": "-platform=OS_ARCH",
        "description": "Choose which target platform to build a mirror for. By default Terraform will obtain plugin packages suitable for the platform where you run this command. Use this flag multiple times to include packages for multiple target systems."
      }
    ]
  },
  {
    "name": "terraform providers schema",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "json",
        "title": "-json",
        "description": "Displays the schemas in a machine-readable, JSON format."
      }
    ]
  },
  {
    "name": "terraform push",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform refresh",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform show",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "no-color",
        "title": "-no-color",
        "description": "Disables output with coloring"
      },
      {
        "key": "json",
        "title": "-json",
        "description": "Displays machine-readable output from a state or plan file"
      }
    ]
  },
  {
    "name": "terraform state list",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "state",
        "title": "-state=path",
        "description": "Path to the state file. Defaults to \"terraform.tfstate\". Ignored when remote state is used."
      },
      {
        "key": "id",
        "title": "-id=id",
        "description": "ID of resources to show. Ignored when unset."
      }
    ]
  },
  {
    "name": "terraform state mv",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "dry-run",
        "title": "-dry-run",
        "description": "Report all of the resource instances that match the given address without actually \"forgetting\" any of them."
      },
      {
        "key": "lock",
        "title": "-lock=false",
        "description": "Don't hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace."
      },
      {
        "key": "lock-timeout",
        "title": "-lock-timeout=DURATION",
        "description": "Unless locking is disabled with -lock=false, instructs Terraform to retry acquiring a lock for a period of time before returning an error. The duration syntax is a number followed by a time unit letter, such as \"3s\" for three seconds."
      }
    ]
  },
  {
    "name": "terraform state pull",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform state push",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform state replace-provider",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "auto-approve",
        "title": "-auto-approve",
        "description": "Skip interactive approval."
      },
      {
        "key": "lock",
        "title": "-lock=false",
        "description": "Don't hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace."
      },
      {
        "key": "lock-timeout",
        "title": "-lock-timeout=0s",
        "description": "Duration to retry a state lock."
      }
    ]
  },
  {
    "name": "terraform state rm",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "dry-run",
        "title": "-dry-run",
        "description": "Report all of the resource instances that match the given address without actually \"forgetting\" any of them."
      },
      {
        "key": "lock",
        "title": "-lock=false",
        "description": "Don't hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace."
      },
      {
        "key": "lock-timeout",
        "title": "-lock-timeout=DURATION",
        "description": "Unless locking is disabled with -lock=false, instructs Terraform to retry acquiring a lock for a period of time before returning an error. The duration syntax is a number followed by a time unit letter, such as \"3s\" for three seconds."
      }
    ]
  },
  {
    "name": "terraform state show",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "state",
        "title": "-state=path",
        "description": "Path to the state file. Defaults to \"terraform.tfstate\". Ignored when remote state is used."
      }
    ]
  },
  {
    "name": "terraform taint",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "allow-missing",
        "title": "-allow-missing",
        "description": "If specified, the command will succeed (exit code 0) even if the resource is missing. The command might still return an error for other situations, such as if there is a problem reading or writing the state."
      },
      {
        "key": "lock",
        "title": "-lock=false",
        "description": "Disables Terraform's default behavior of attempting to take a read/write lock on the state for the duration of the operation."
      },
      {
        "key": "lock-timeout",
        "title": "-lock-timeout=DURATION",
        "description": "Unless locking is disabled with -lock=false, instructs Terraform to retry acquiring a lock for a period of time before returning an error. The duration syntax is a number followed by a time unit letter, such as \"3s\" for three seconds."
      }
    ]
  },
  {
    "name": "terraform test",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform untaint",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "allow-missing",
        "title": "-allow-missing",
        "description": "If specified, the command will succeed (exit code 0) even if the resource is missing. The command might still return an error for other situations, such as if there is a problem reading or writing the state."
      },
      {
        "key": "lock",
        "title": "-lock=false",
        "description": "Don't hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace."
      },
      {
        "key": "lock-timeout",
        "title": "-lock-timeout=DURATION",
        "description": "Unless locking is disabled with -lock=false, instructs Terraform to retry acquiring a lock for a period of time before returning an error. The duration syntax is a number followed by a time unit letter, such as \"3s\" for three seconds."
      },
      {
        "key": "no-color",
        "title": "-no-color",
        "description": "Disables terminal formatting sequences in the output. Use this if you are running Terraform in a context where its output will be rendered by a system that cannot interpret terminal formatting."
      }
    ]
  },
  {
    "name": "terraform validate",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "json",
        "title": "-json",
        "description": "Produce output in a machine-readable JSON format, suitable for use in text editor integrations and other automated systems. Always disables color."
      },
      {
        "key": "no-color",
        "title": "-no-color",
        "description": "If specified, output won't contain any color."
      }
    ]
  },
  {
    "name": "terraform version",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "json",
        "title": "-json",
        "description": "If specified, the version information is formatted as a JSON object, and no upgrade or security information is included."
      }
    ]
  },
  {
    "name": "terraform workspace list",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform workspace select",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform workspace new",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "lock",
        "title": "-lock=false",
        "description": "Don't hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace."
      },
      {
        "key": "lock-timeout",
        "title": "-lock-timeout=DURATION",
        "description": "Duration to retry a state lock. Default 0s."
      },
      {
        "key": "state",
        "title": "-state=path",
        "description": "Path to an existing state file to initialize the state of this environment."
      }
    ]
  },
  {
    "name": "terraform workspace delete",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "force",
        "title": "-force",
        "description": "Delete the workspace even if its state is not empty. Defaults to false."
      },
      {
        "key": "lock",
        "title": "-lock=false",
        "description": "Don't hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace."
      },
      {
        "key": "lock-timeout",
        "title": "-lock-timeout=DURATION",
        "description": "Duration to retry a state lock. Default 0s."
      }
    ]
  },
  {
    "name": "terraform workspace show",
    "optionStyle": "single-dash",
    "options": []
  },
  {
    "name": "terraform 0.12upgrade",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "yes",
        "title": "-yes",
        "description": "Skip the initial introduction messages and interactive confirmation. Use this when running the command in batch from a script."
      },
      {
        "key": "force",
        "title": "-force",
        "description": "Override the heuristic that attempts to detect if a configuration is already written for v0.12 or later. Some of the transformations made by this command are not idempotent, so re-running against the same module may change the meanings of some expressions in the module."
      }
    ]
  },
  {
    "name": "terraform 0.13upgrade",
    "optionStyle": "single-dash",
    "options": [
      {
        "key": "yes",
        "title": "-yes",
        "description": "Skip the initial introduction messages and interactive confirmation. Use this when running the command in batch from a script."
      }
    ]
  }
]
