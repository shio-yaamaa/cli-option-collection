[
  {
    "name": "git",
    "options": [
      {
        "type": "long",
        "key": "version",
        "title": "--version",
        "description": "Prints the Git suite version that the git program came from.\n\nThis option is internaly converted to git version ... and accepts the same options as the git-version[1] command. If --help is also given, it takes precedence over --version."
      },
      {
        "type": "long",
        "key": "help",
        "title": "--help",
        "description": "Prints the synopsis and a list of the most commonly used commands. If the option --all or -a is given then all available commands are printed. If a Git command is named this option will bring up the manual page for that command.\n\nOther options are available to control how the manual page is displayed. See git-help[1] for more information, because git --help ... is converted internally into git help ...."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C <path>",
        "description": "Run as if git was started in <path> instead of the current working directory. When multiple -C options are given, each subsequent non-absolute -C <path> is interpreted relative to the preceding -C <path>. If <path> is present but empty, e.g. -C \"\", then the current working directory is left unchanged.\n\nThis option affects options that expect path name like --git-dir and --work-tree in that their interpretations of the path names would be made relative to the working directory caused by the -C option. For example the following invocations are equivalent:\n\ngit --git-dir=a.git --work-tree=b -C c status\ngit --git-dir=c/a.git --work-tree=c/b status"
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c <name>=<value>",
        "description": "Pass a configuration parameter to the command. The value given will override values from configuration files. The <name> is expected in the same format as listed by git config (subkeys separated by dots).\n\nNote that omitting the = in git -c foo.bar ... is allowed and sets foo.bar to the boolean true value (just like [foo]bar would in a config file). Including the equals but with an empty value (like git -c foo.bar= ...) sets foo.bar to the empty string which git config --type=bool will convert to false."
      },
      {
        "type": "long",
        "key": "config-env",
        "title": "--config-env=<name>=<envvar>",
        "description": "Like -c <name>=<value>, give configuration variable <name> a value, where <envvar> is the name of an environment variable from which to retrieve the value. Unlike -c there is no shortcut for directly setting the value to an empty string, instead the environment variable itself must be set to the empty string. It is an error if the <envvar> does not exist in the environment. <envvar> may not contain an equals sign to avoid ambiguity with <name> containing one.\n\nThis is useful for cases where you want to pass transitory configuration options to git, but are doing so on OS’s where other processes might be able to read your cmdline (e.g. /proc/self/cmdline), but not your environ (e.g. /proc/self/environ). That behavior is the default on Linux, but may not be on your system.\n\nNote that this might add security for variables such as http.extraHeader where the sensitive information is part of the value, but not e.g. url.<base>.insteadOf where the sensitive information can be part of the key."
      },
      {
        "type": "long",
        "key": "exec-path",
        "title": "--exec-path[=<path>]",
        "description": "Path to wherever your core Git programs are installed. This can also be controlled by setting the GIT_EXEC_PATH environment variable. If no path is given, git will print the current setting and then exit."
      },
      {
        "type": "long",
        "key": "html-path",
        "title": "--html-path",
        "description": "Print the path, without trailing slash, where Git’s HTML documentation is installed and exit."
      },
      {
        "type": "long",
        "key": "man-path",
        "title": "--man-path",
        "description": "Print the manpath (see man(1)) for the man pages for this version of Git and exit."
      },
      {
        "type": "long",
        "key": "info-path",
        "title": "--info-path",
        "description": "Print the path where the Info files documenting this version of Git are installed and exit."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --paginate",
        "description": "Pipe all output into less (or if set, $PAGER) if standard output is a terminal. This overrides the pager.<cmd> configuration options (see the \"Configuration Mechanism\" section below)."
      },
      {
        "type": "long",
        "key": "paginate",
        "title": "-p, --paginate",
        "description": "Pipe all output into less (or if set, $PAGER) if standard output is a terminal. This overrides the pager.<cmd> configuration options (see the \"Configuration Mechanism\" section below)."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P, --no-pager",
        "description": "Do not pipe Git output into a pager."
      },
      {
        "type": "long",
        "key": "no-pager",
        "title": "-P, --no-pager",
        "description": "Do not pipe Git output into a pager."
      },
      {
        "type": "long",
        "key": "git-dir",
        "title": "--git-dir=<path>",
        "description": "Set the path to the repository (\".git\" directory). This can also be controlled by setting the GIT_DIR environment variable. It can be an absolute path or relative path to current working directory.\n\nSpecifying the location of the \".git\" directory using this option (or GIT_DIR environment variable) turns off the repository discovery that tries to find a directory with \".git\" subdirectory (which is how the repository and the top-level of the working tree are discovered), and tells Git that you are at the top level of the working tree. If you are not at the top-level directory of the working tree, you should tell Git where the top-level of the working tree is, with the --work-tree=<path> option (or GIT_WORK_TREE environment variable)\n\nIf you just want to run git as if it was started in <path> then use git -C <path>."
      },
      {
        "type": "long",
        "key": "work-tree",
        "title": "--work-tree=<path>",
        "description": "Set the path to the working tree. It can be an absolute path or a path relative to the current working directory. This can also be controlled by setting the GIT_WORK_TREE environment variable and the core.worktree configuration variable (see core.worktree in git-config[1] for a more detailed discussion)."
      },
      {
        "type": "long",
        "key": "namespace",
        "title": "--namespace=<path>",
        "description": "Set the Git namespace. See gitnamespaces[7] for more details. Equivalent to setting the GIT_NAMESPACE environment variable."
      },
      {
        "type": "long",
        "key": "super-prefix",
        "title": "--super-prefix=<path>",
        "description": "Currently for internal use only. Set a prefix which gives a path from above a repository down to its root. One use is to give submodules context about the superproject that invoked it."
      },
      {
        "type": "long",
        "key": "bare",
        "title": "--bare",
        "description": "Treat the repository as a bare repository. If GIT_DIR environment is not set, it is set to the current working directory."
      },
      {
        "type": "long",
        "key": "no-replace-objects",
        "title": "--no-replace-objects",
        "description": "Do not use replacement refs to replace Git objects. See git-replace[1] for more information."
      },
      {
        "type": "long",
        "key": "literal-pathspecs",
        "title": "--literal-pathspecs",
        "description": "Treat pathspecs literally (i.e. no globbing, no pathspec magic). This is equivalent to setting the GIT_LITERAL_PATHSPECS environment variable to 1."
      },
      {
        "type": "long",
        "key": "glob-pathspecs",
        "title": "--glob-pathspecs",
        "description": "Add \"glob\" magic to all pathspec. This is equivalent to setting the GIT_GLOB_PATHSPECS environment variable to 1. Disabling globbing on individual pathspecs can be done using pathspec magic \":(literal)\""
      },
      {
        "type": "long",
        "key": "noglob-pathspecs",
        "title": "--noglob-pathspecs",
        "description": "Add \"literal\" magic to all pathspec. This is equivalent to setting the GIT_NOGLOB_PATHSPECS environment variable to 1. Enabling globbing on individual pathspecs can be done using pathspec magic \":(glob)\""
      },
      {
        "type": "long",
        "key": "icase-pathspecs",
        "title": "--icase-pathspecs",
        "description": "Add \"icase\" magic to all pathspec. This is equivalent to setting the GIT_ICASE_PATHSPECS environment variable to 1."
      },
      {
        "type": "long",
        "key": "no-optional-locks",
        "title": "--no-optional-locks",
        "description": "Do not perform optional operations that require locks. This is equivalent to setting the GIT_OPTIONAL_LOCKS to 0."
      },
      {
        "type": "long",
        "key": "list-cmds",
        "title": "--list-cmds=group[, group… ]",
        "description": "List commands by group. This is an internal/experimental option and may change or be removed in the future. Supported groups are: builtins, parseopt (builtin commands that use parse-options), main (all commands in libexec directory), others (all other commands in $PATH that have git- prefix), list-<category> (see categories in command-list.txt), nohelpers (exclude helper commands), alias and config (retrieve command list from config variable completion.commands)"
      }
    ]
  },
  {
    "name": "git version",
    "options": [
      {
        "type": "long",
        "key": "build-options",
        "title": "--build-options",
        "description": "Include additional information about how git was built for diagnostic purposes."
      }
    ]
  },
  {
    "name": "git help",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "Prints all the available commands on the standard output. This option overrides any given command or guide name."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "Prints all the available commands on the standard output. This option overrides any given command or guide name."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "When used with --all print description for all recognized commands. This is the default."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --config",
        "description": "List all available configuration variables. This is a short summary of the list in git-config[1]."
      },
      {
        "type": "long",
        "key": "config",
        "title": "-c, --config",
        "description": "List all available configuration variables. This is a short summary of the list in git-config[1]."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --guides",
        "description": "Prints a list of the Git concept guides on the standard output. This option overrides any given command or guide name."
      },
      {
        "type": "long",
        "key": "guides",
        "title": "-g, --guides",
        "description": "Prints a list of the Git concept guides on the standard output. This option overrides any given command or guide name."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --info",
        "description": "Display manual page for the command in the info format. The info program will be used for that purpose."
      },
      {
        "type": "long",
        "key": "info",
        "title": "-i, --info",
        "description": "Display manual page for the command in the info format. The info program will be used for that purpose."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --man",
        "description": "Display manual page for the command in the man format. This option may be used to override a value set in the help.format configuration variable.\n\nBy default the man program will be used to display the manual page, but the man.viewer configuration variable may be used to choose other display programs (see below)."
      },
      {
        "type": "long",
        "key": "man",
        "title": "-m, --man",
        "description": "Display manual page for the command in the man format. This option may be used to override a value set in the help.format configuration variable.\n\nBy default the man program will be used to display the manual page, but the man.viewer configuration variable may be used to choose other display programs (see below)."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --web",
        "description": "Display manual page for the command in the web (HTML) format. A web browser will be used for that purpose.\n\nThe web browser can be specified using the configuration variable help.browser, or web.browser if the former is not set. If none of these config variables is set, the git web--browse helper script (called by git help) will pick a suitable default. See git-web--browse[1] for more information about this."
      },
      {
        "type": "long",
        "key": "web",
        "title": "-w, --web",
        "description": "Display manual page for the command in the web (HTML) format. A web browser will be used for that purpose.\n\nThe web browser can be specified using the configuration variable help.browser, or web.browser if the former is not set. If none of these config variables is set, the git web--browse helper script (called by git help) will pick a suitable default. See git-web--browse[1] for more information about this."
      }
    ]
  },
  {
    "name": "git config",
    "options": [
      {
        "type": "long",
        "key": "replace-all",
        "title": "--replace-all",
        "description": "Default behavior is to replace at most one line. This replaces all lines matching the key (and optionally the value-pattern)."
      },
      {
        "type": "long",
        "key": "add",
        "title": "--add",
        "description": "Adds a new line to the option without altering any existing values. This is the same as providing ^$ as the value-pattern in --replace-all."
      },
      {
        "type": "long",
        "key": "get",
        "title": "--get",
        "description": "Get the value for a given key (optionally filtered by a regex matching the value). Returns error code 1 if the key was not found and the last value if multiple key values were found."
      },
      {
        "type": "long",
        "key": "get-all",
        "title": "--get-all",
        "description": "Like get, but returns all values for a multi-valued key."
      },
      {
        "type": "long",
        "key": "get-regexp",
        "title": "--get-regexp",
        "description": "Like --get-all, but interprets the name as a regular expression and writes out the key names. Regular expression matching is currently case-sensitive and done against a canonicalized version of the key in which section and variable names are lowercased, but subsection names are not."
      },
      {
        "type": "long",
        "key": "global",
        "title": "--global",
        "description": "For writing options: write to global ~/.gitconfig file rather than the repository .git/config, write to $XDG_CONFIG_HOME/git/config file if this file exists and the ~/.gitconfig file doesn’t.\n\nFor reading options: read only from global ~/.gitconfig and from $XDG_CONFIG_HOME/git/config rather than from all available files.\n\nSee also FILES."
      },
      {
        "type": "long",
        "key": "system",
        "title": "--system",
        "description": "For writing options: write to system-wide $(prefix)/etc/gitconfig rather than the repository .git/config.\n\nFor reading options: read only from system-wide $(prefix)/etc/gitconfig rather than from all available files.\n\nSee also FILES."
      },
      {
        "type": "long",
        "key": "local",
        "title": "--local",
        "description": "For writing options: write to the repository .git/config file. This is the default behavior.\n\nFor reading options: read only from the repository .git/config rather than from all available files.\n\nSee also FILES."
      },
      {
        "type": "long",
        "key": "worktree",
        "title": "--worktree",
        "description": "Similar to --local except that .git/config.worktree is read from or written to if extensions.worktreeConfig is present. If not it’s the same as --local."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f config-file, --file config-file",
        "description": "For writing options: write to the specified file rather than the repository .git/config.\n\nFor reading options: read only from the specified file rather than from all available files.\n\nSee also FILES."
      },
      {
        "type": "long",
        "key": "remove-section",
        "title": "--remove-section",
        "description": "Remove the given section from the configuration file."
      },
      {
        "type": "long",
        "key": "rename-section",
        "title": "--rename-section",
        "description": "Rename the given section to a new name."
      },
      {
        "type": "long",
        "key": "unset",
        "title": "--unset",
        "description": "Remove the line matching the key from config file."
      },
      {
        "type": "long",
        "key": "unset-all",
        "title": "--unset-all",
        "description": "Remove all lines matching the key from config file."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --list",
        "description": "List all variables set in config file, along with their values."
      },
      {
        "type": "long",
        "key": "list",
        "title": "-l, --list",
        "description": "List all variables set in config file, along with their values."
      },
      {
        "type": "long",
        "key": "fixed-value",
        "title": "--fixed-value",
        "description": "When used with the value-pattern argument, treat value-pattern as an exact string instead of a regular expression. This will restrict the name/value pairs that are matched to only those where the value is exactly equal to the value-pattern."
      },
      {
        "type": "long",
        "key": "bool",
        "title": "--bool, --int, --bool-or-int, --path, --expiry-date",
        "description": "Historical options for selecting a type specifier. Prefer instead --type (see above)."
      },
      {
        "type": "long",
        "key": "int",
        "title": "--bool, --int, --bool-or-int, --path, --expiry-date",
        "description": "Historical options for selecting a type specifier. Prefer instead --type (see above)."
      },
      {
        "type": "long",
        "key": "bool-or-int",
        "title": "--bool, --int, --bool-or-int, --path, --expiry-date",
        "description": "Historical options for selecting a type specifier. Prefer instead --type (see above)."
      },
      {
        "type": "long",
        "key": "path",
        "title": "--bool, --int, --bool-or-int, --path, --expiry-date",
        "description": "Historical options for selecting a type specifier. Prefer instead --type (see above)."
      },
      {
        "type": "long",
        "key": "expiry-date",
        "title": "--bool, --int, --bool-or-int, --path, --expiry-date",
        "description": "Historical options for selecting a type specifier. Prefer instead --type (see above)."
      },
      {
        "type": "long",
        "key": "no-type",
        "title": "--no-type",
        "description": "Un-sets the previously set type specifier (if one was previously set). This option requests that git config not canonicalize the retrieved variable. --no-type has no effect without --type=<type> or --<type>."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z, --null",
        "description": "For all options that output values and/or keys, always end values with the null character (instead of a newline). Use newline instead as a delimiter between key and value. This allows for secure parsing of the output without getting confused e.g. by values that contain line breaks."
      },
      {
        "type": "long",
        "key": "null",
        "title": "-z, --null",
        "description": "For all options that output values and/or keys, always end values with the null character (instead of a newline). Use newline instead as a delimiter between key and value. This allows for secure parsing of the output without getting confused e.g. by values that contain line breaks."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only",
        "description": "Output only the names of config variables for --list or --get-regexp."
      },
      {
        "type": "long",
        "key": "show-origin",
        "title": "--show-origin",
        "description": "Augment the output of all queried config options with the origin type (file, standard input, blob, command line) and the actual origin (config file path, ref, or blob id if applicable)."
      },
      {
        "type": "long",
        "key": "show-scope",
        "title": "--show-scope",
        "description": "Similar to --show-origin in that it augments the output of all queried config options with the scope of that value (local, global, system, command)."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "Opens an editor to modify the specified config file; either --system, --global, or repository (default)."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "Opens an editor to modify the specified config file; either --system, --global, or repository (default)."
      },
      {
        "type": "long",
        "key": "includes",
        "title": "--[no-]includes",
        "description": "Respect include.* directives in config files when looking up values. Defaults to off when a specific file is given (e.g., using --file, --global, etc) and on when searching all config files."
      }
    ]
  },
  {
    "name": "git replace",
    "options": [
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "If an existing replace ref for the same object exists, it will be overwritten (instead of failing)."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "If an existing replace ref for the same object exists, it will be overwritten (instead of failing)."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --delete",
        "description": "Delete existing replace refs for the given objects."
      },
      {
        "type": "long",
        "key": "delete",
        "title": "-d, --delete",
        "description": "Delete existing replace refs for the given objects."
      },
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "When editing, provide the raw object contents rather than pretty-printed ones. Currently this only affects trees, which will be shown in their binary form. This is harder to work with, but can help when repairing a tree that is so corrupted it cannot be pretty-printed. Note that you may need to configure your editor to cleanly read and write binary data."
      },
      {
        "type": "long",
        "key": "convert-graft-file",
        "title": "--convert-graft-file",
        "description": "Creates graft commits for all entries in $GIT_DIR/info/grafts and deletes that file upon success. The purpose is to help users with transitioning off of the now-deprecated graft file."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l <pattern>, --list <pattern>",
        "description": "List replace refs for objects that match the given pattern (or all if no pattern is given). Typing \"git replace\" without arguments, also lists all replace refs."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--format=<format>",
        "description": "When listing, use the specified <format>, which can be one of short, medium and long. When omitted, the format defaults to short."
      }
    ]
  },
  {
    "name": "git add",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Don’t actually add the file(s), just show if they exist and/or will be ignored."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Don’t actually add the file(s), just show if they exist and/or will be ignored."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Allow adding otherwise ignored files."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Allow adding otherwise ignored files."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --interactive",
        "description": "Add modified contents in the working tree interactively to the index. Optional path arguments may be supplied to limit operation to a subset of the working tree. See “Interactive mode” for details."
      },
      {
        "type": "long",
        "key": "interactive",
        "title": "-i, --interactive",
        "description": "Add modified contents in the working tree interactively to the index. Optional path arguments may be supplied to limit operation to a subset of the working tree. See “Interactive mode” for details."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --patch",
        "description": "Interactively choose hunks of patch between the index and the work tree and add them to the index. This gives the user a chance to review the difference before adding modified contents to the index.\n\nThis effectively runs add --interactive, but bypasses the initial command menu and directly jumps to the patch subcommand. See “Interactive mode” for details."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, --patch",
        "description": "Interactively choose hunks of patch between the index and the work tree and add them to the index. This gives the user a chance to review the difference before adding modified contents to the index.\n\nThis effectively runs add --interactive, but bypasses the initial command menu and directly jumps to the patch subcommand. See “Interactive mode” for details."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "Open the diff vs. the index in an editor and let the user edit it. After the editor was closed, adjust the hunk headers and apply the patch to the index.\n\nThe intent of this option is to pick and choose lines of the patch to apply, or even to modify the contents of lines to be staged. This can be quicker and more flexible than using the interactive hunk selector. However, it is easy to confuse oneself and create a patch that does not apply to the index. See EDITING PATCHES below."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "Open the diff vs. the index in an editor and let the user edit it. After the editor was closed, adjust the hunk headers and apply the patch to the index.\n\nThe intent of this option is to pick and choose lines of the patch to apply, or even to modify the contents of lines to be staged. This can be quicker and more flexible than using the interactive hunk selector. However, it is easy to confuse oneself and create a patch that does not apply to the index. See EDITING PATCHES below."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u, --update",
        "description": "Update the index just where it already has an entry matching <pathspec>. This removes as well as modifies index entries to match the working tree, but adds no new files.\n\nIf no <pathspec> is given when -u option is used, all tracked files in the entire working tree are updated (old versions of Git used to limit the update to the current directory and its subdirectories)."
      },
      {
        "type": "long",
        "key": "update",
        "title": "-u, --update",
        "description": "Update the index just where it already has an entry matching <pathspec>. This removes as well as modifies index entries to match the working tree, but adds no new files.\n\nIf no <pathspec> is given when -u option is used, all tracked files in the entire working tree are updated (old versions of Git used to limit the update to the current directory and its subdirectories)."
      },
      {
        "type": "short",
        "key": "A",
        "title": "-A, --all, --no-ignore-removal",
        "description": "Update the index not only where the working tree has a file matching <pathspec> but also where the index already has an entry. This adds, modifies, and removes index entries to match the working tree.\n\nIf no <pathspec> is given when -A option is used, all files in the entire working tree are updated (old versions of Git used to limit the update to the current directory and its subdirectories)."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-A, --all, --no-ignore-removal",
        "description": "Update the index not only where the working tree has a file matching <pathspec> but also where the index already has an entry. This adds, modifies, and removes index entries to match the working tree.\n\nIf no <pathspec> is given when -A option is used, all files in the entire working tree are updated (old versions of Git used to limit the update to the current directory and its subdirectories)."
      },
      {
        "type": "long",
        "key": "no-ignore-removal",
        "title": "-A, --all, --no-ignore-removal",
        "description": "Update the index not only where the working tree has a file matching <pathspec> but also where the index already has an entry. This adds, modifies, and removes index entries to match the working tree.\n\nIf no <pathspec> is given when -A option is used, all files in the entire working tree are updated (old versions of Git used to limit the update to the current directory and its subdirectories)."
      },
      {
        "type": "long",
        "key": "no-all",
        "title": "--no-all, --ignore-removal",
        "description": "Update the index by adding new files that are unknown to the index and files modified in the working tree, but ignore files that have been removed from the working tree. This option is a no-op when no <pathspec> is used.\n\nThis option is primarily to help users who are used to older versions of Git, whose \"git add <pathspec>… \" was a synonym for \"git add --no-all <pathspec>… \", i.e. ignored removed files."
      },
      {
        "type": "long",
        "key": "ignore-removal",
        "title": "--no-all, --ignore-removal",
        "description": "Update the index by adding new files that are unknown to the index and files modified in the working tree, but ignore files that have been removed from the working tree. This option is a no-op when no <pathspec> is used.\n\nThis option is primarily to help users who are used to older versions of Git, whose \"git add <pathspec>… \" was a synonym for \"git add --no-all <pathspec>… \", i.e. ignored removed files."
      },
      {
        "type": "short",
        "key": "N",
        "title": "-N, --intent-to-add",
        "description": "Record only the fact that the path will be added later. An entry for the path is placed in the index with no content. This is useful for, among other things, showing the unstaged content of such files with git diff and committing them with git commit -a."
      },
      {
        "type": "long",
        "key": "intent-to-add",
        "title": "-N, --intent-to-add",
        "description": "Record only the fact that the path will be added later. An entry for the path is placed in the index with no content. This is useful for, among other things, showing the unstaged content of such files with git diff and committing them with git commit -a."
      },
      {
        "type": "long",
        "key": "refresh",
        "title": "--refresh",
        "description": "Don’t add the file(s), but only refresh their stat() information in the index."
      },
      {
        "type": "long",
        "key": "ignore-errors",
        "title": "--ignore-errors",
        "description": "If some files could not be added because of errors indexing them, do not abort the operation, but continue adding the others. The command shall still exit with non-zero status. The configuration variable add.ignoreErrors can be set to true to make this the default behaviour."
      },
      {
        "type": "long",
        "key": "ignore-missing",
        "title": "--ignore-missing",
        "description": "This option can only be used together with --dry-run. By using this option the user can check if any of the given files would be ignored, no matter if they are already present in the work tree or not."
      },
      {
        "type": "long",
        "key": "no-warn-embedded-repo",
        "title": "--no-warn-embedded-repo",
        "description": "By default, git add will warn when adding an embedded repository to the index without using git submodule add to create an entry in .gitmodules. This option will suppress the warning (e.g., if you are manually performing operations on submodules)."
      },
      {
        "type": "long",
        "key": "renormalize",
        "title": "--renormalize",
        "description": "Apply the \"clean\" process freshly to all tracked files to forcibly add them again to the index. This is useful after changing core.autocrlf configuration or the text attribute in order to correct files added with wrong CRLF/LF line endings. This option implies -u."
      },
      {
        "type": "long",
        "key": "chmod",
        "title": "--chmod=(+|-)x",
        "description": "Override the executable bit of the added files. The executable bit is only changed in the index, the files on disk are left unchanged."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable core.quotePath (see git-config[1]). See also --pathspec-file-nul and global --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "Only meaningful with --pathspec-from-file. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes)."
      }
    ]
  },
  {
    "name": "git am",
    "options": [
      {
        "type": "short",
        "key": "s",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer to the commit message, using the committer identity of yourself. See the signoff option in git-commit[1] for more information."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer to the commit message, using the committer identity of yourself. See the signoff option in git-commit[1] for more information."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep",
        "description": "Pass -k flag to git mailinfo (see git-mailinfo[1])."
      },
      {
        "type": "long",
        "key": "keep",
        "title": "-k, --keep",
        "description": "Pass -k flag to git mailinfo (see git-mailinfo[1])."
      },
      {
        "type": "long",
        "key": "keep-non-patch",
        "title": "--keep-non-patch",
        "description": "Pass -b flag to git mailinfo (see git-mailinfo[1])."
      },
      {
        "type": "long",
        "key": "keep-cr",
        "title": "--[no-]keep-cr",
        "description": "With --keep-cr, call git mailsplit (see git-mailsplit[1]) with the same option, to prevent it from stripping CR at the end of lines. am.keepcr configuration variable can be used to specify the default behaviour. --no-keep-cr is useful to override am.keepcr."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --scissors",
        "description": "Remove everything in body before a scissors line (see git-mailinfo[1]). Can be activated by default using the mailinfo.scissors configuration variable."
      },
      {
        "type": "long",
        "key": "scissors",
        "title": "-c, --scissors",
        "description": "Remove everything in body before a scissors line (see git-mailinfo[1]). Can be activated by default using the mailinfo.scissors configuration variable."
      },
      {
        "type": "long",
        "key": "no-scissors",
        "title": "--no-scissors",
        "description": "Ignore scissors lines (see git-mailinfo[1])."
      },
      {
        "type": "long",
        "key": "quoted-cr",
        "title": "--quoted-cr=<action>",
        "description": "This flag will be passed down to git mailinfo (see git-mailinfo[1])."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --message-id",
        "description": "Pass the -m flag to git mailinfo (see git-mailinfo[1]), so that the Message-ID header is added to the commit message. The am.messageid configuration variable can be used to specify the default behaviour."
      },
      {
        "type": "long",
        "key": "message-id",
        "title": "-m, --message-id",
        "description": "Pass the -m flag to git mailinfo (see git-mailinfo[1]), so that the Message-ID header is added to the commit message. The am.messageid configuration variable can be used to specify the default behaviour."
      },
      {
        "type": "long",
        "key": "no-message-id",
        "title": "--no-message-id",
        "description": "Do not add the Message-ID header to the commit message. no-message-id is useful to override am.messageid."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Be quiet. Only print error messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Be quiet. Only print error messages."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u, --utf8",
        "description": "Pass -u flag to git mailinfo (see git-mailinfo[1]). The proposed commit log message taken from the e-mail is re-coded into UTF-8 encoding (configuration variable i18n.commitEncoding can be used to specify project’s preferred encoding if it is not UTF-8).\n\nThis was optional in prior versions of git, but now it is the default. You can use --no-utf8 to override this."
      },
      {
        "type": "long",
        "key": "utf8",
        "title": "-u, --utf8",
        "description": "Pass -u flag to git mailinfo (see git-mailinfo[1]). The proposed commit log message taken from the e-mail is re-coded into UTF-8 encoding (configuration variable i18n.commitEncoding can be used to specify project’s preferred encoding if it is not UTF-8).\n\nThis was optional in prior versions of git, but now it is the default. You can use --no-utf8 to override this."
      },
      {
        "type": "long",
        "key": "no-utf8",
        "title": "--no-utf8",
        "description": "Pass -n flag to git mailinfo (see git-mailinfo[1])."
      },
      {
        "type": "short",
        "key": "3",
        "title": "-3, --3way, --no-3way",
        "description": "When the patch does not apply cleanly, fall back on 3-way merge if the patch records the identity of blobs it is supposed to apply to and we have those blobs available locally. --no-3way can be used to override am.threeWay configuration variable. For more information, see am.threeWay in git-config[1]."
      },
      {
        "type": "long",
        "key": "3way",
        "title": "-3, --3way, --no-3way",
        "description": "When the patch does not apply cleanly, fall back on 3-way merge if the patch records the identity of blobs it is supposed to apply to and we have those blobs available locally. --no-3way can be used to override am.threeWay configuration variable. For more information, see am.threeWay in git-config[1]."
      },
      {
        "type": "long",
        "key": "no-3way",
        "title": "-3, --3way, --no-3way",
        "description": "When the patch does not apply cleanly, fall back on 3-way merge if the patch records the identity of blobs it is supposed to apply to and we have those blobs available locally. --no-3way can be used to override am.threeWay configuration variable. For more information, see am.threeWay in git-config[1]."
      },
      {
        "type": "long",
        "key": "rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "no-rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1]) program that applies the patch."
      },
      {
        "type": "long",
        "key": "ignore-whitespace",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1]) program that applies the patch."
      },
      {
        "type": "long",
        "key": "whitespace",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1]) program that applies the patch."
      },
      {
        "type": "short",
        "key": "C",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1]) program that applies the patch."
      },
      {
        "type": "short",
        "key": "p",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1]) program that applies the patch."
      },
      {
        "type": "long",
        "key": "directory",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1]) program that applies the patch."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1]) program that applies the patch."
      },
      {
        "type": "long",
        "key": "include",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1]) program that applies the patch."
      },
      {
        "type": "long",
        "key": "reject",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1]) program that applies the patch."
      },
      {
        "type": "long",
        "key": "patch-format",
        "title": "--patch-format",
        "description": "By default the command will try to detect the patch format automatically. This option allows the user to bypass the automatic detection and specify the patch format that the patch(es) should be interpreted as. Valid formats are mbox, mboxrd, stgit, stgit-series and hg."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --interactive",
        "description": "Run interactively."
      },
      {
        "type": "long",
        "key": "interactive",
        "title": "-i, --interactive",
        "description": "Run interactively."
      },
      {
        "type": "long",
        "key": "committer-date-is-author-date",
        "title": "--committer-date-is-author-date",
        "description": "By default the command records the date from the e-mail message as the commit author date, and uses the time of commit creation as the committer date. This allows the user to lie about the committer date by using the same value as the author date."
      },
      {
        "type": "long",
        "key": "ignore-date",
        "title": "--ignore-date",
        "description": "By default the command records the date from the e-mail message as the commit author date, and uses the time of commit creation as the committer date. This allows the user to lie about the author date by using the same value as the committer date."
      },
      {
        "type": "long",
        "key": "skip",
        "title": "--skip",
        "description": "Skip the current patch. This is only meaningful when restarting an aborted patch."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "continue",
        "title": "--continue, -r, --resolved",
        "description": "After a patch failure (e.g. attempting to apply conflicting patch), the user has applied it by hand and the index file stores the result of the application. Make a commit using the authorship and commit log extracted from the e-mail message and the current index file, and continue."
      },
      {
        "type": "short",
        "key": "r",
        "title": "--continue, -r, --resolved",
        "description": "After a patch failure (e.g. attempting to apply conflicting patch), the user has applied it by hand and the index file stores the result of the application. Make a commit using the authorship and commit log extracted from the e-mail message and the current index file, and continue."
      },
      {
        "type": "long",
        "key": "resolved",
        "title": "--continue, -r, --resolved",
        "description": "After a patch failure (e.g. attempting to apply conflicting patch), the user has applied it by hand and the index file stores the result of the application. Make a commit using the authorship and commit log extracted from the e-mail message and the current index file, and continue."
      },
      {
        "type": "long",
        "key": "resolvemsg",
        "title": "--resolvemsg=<msg>",
        "description": "When a patch failure occurs, <msg> will be printed to the screen before exiting. This overrides the standard message informing you to use --continue or --skip to handle the failure. This is solely for internal use between git rebase and git am."
      },
      {
        "type": "long",
        "key": "abort",
        "title": "--abort",
        "description": "Restore the original branch and abort the patching operation. Revert contents of files involved in the am operation to their pre-am state."
      },
      {
        "type": "long",
        "key": "quit",
        "title": "--quit",
        "description": "Abort the patching operation but keep HEAD and the index untouched."
      },
      {
        "type": "long",
        "key": "show-current-patch",
        "title": "--show-current-patch[=(diff|raw)]",
        "description": "Show the message at which git am has stopped due to conflicts. If raw is specified, show the raw contents of the e-mail message; if diff, show the diff portion only. Defaults to raw."
      }
    ]
  },
  {
    "name": "git archive",
    "options": [
      {
        "type": "long",
        "key": "format",
        "title": "--format=<fmt>",
        "description": "Format of the resulting archive: tar or zip. If this option is not given, and the output file is specified, the format is inferred from the filename if possible (e.g. writing to \"foo.zip\" makes the output to be in the zip format). Otherwise the output format is tar."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --list",
        "description": "Show all available formats."
      },
      {
        "type": "long",
        "key": "list",
        "title": "-l, --list",
        "description": "Show all available formats."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Report progress to stderr."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Report progress to stderr."
      },
      {
        "type": "long",
        "key": "prefix",
        "title": "--prefix=<prefix>/",
        "description": "Prepend <prefix>/ to each filename in the archive."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <file>, --output=<file>",
        "description": "Write the archive to <file> instead of stdout."
      },
      {
        "type": "long",
        "key": "output",
        "title": "-o <file>, --output=<file>",
        "description": "Write the archive to <file> instead of stdout."
      },
      {
        "type": "long",
        "key": "add-file",
        "title": "--add-file=<file>",
        "description": "Add a non-tracked file to the archive. Can be repeated to add multiple files. The path of the file in the archive is built by concatenating the value for --prefix (if any) and the basename of <file>."
      },
      {
        "type": "long",
        "key": "worktree-attributes",
        "title": "--worktree-attributes",
        "description": "Look for attributes in .gitattributes files in the working tree as well (see ATTRIBUTES)."
      },
      {
        "type": "long",
        "key": "remote",
        "title": "--remote=<repo>",
        "description": "Instead of making a tar archive from the local repository, retrieve a tar archive from a remote repository. Note that the remote repository may place restrictions on which sha1 expressions may be allowed in <tree-ish>. See git-upload-archive[1] for details."
      },
      {
        "type": "long",
        "key": "exec",
        "title": "--exec=<git-upload-archive>",
        "description": "Used with --remote to specify the path to the git-upload-archive on the remote side."
      }
    ]
  },
  {
    "name": "git bisect",
    "options": [
      {
        "type": "long",
        "key": "no-checkout",
        "title": "--no-checkout",
        "description": "Do not checkout the new working tree at each iteration of the bisection process. Instead just update a special reference named BISECT_HEAD to make it point to the commit that should be tested.\n\nThis option may be useful when the test you would perform in each step does not require a checked out tree.\n\nIf the repository is bare, --no-checkout is assumed."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge commit.\n\nIn detecting regressions introduced through the merging of a branch, the merge commit will be identified as introduction of the bug and its ancestors will be ignored.\n\nThis option is particularly useful in avoiding false positives when a merged branch contained broken or non-buildable commits, but the merge itself was OK."
      }
    ]
  },
  {
    "name": "git branch",
    "options": [
      {
        "type": "short",
        "key": "d",
        "title": "-d, --delete",
        "description": "Delete a branch. The branch must be fully merged in its upstream branch, or in HEAD if no upstream was set with --track or --set-upstream-to."
      },
      {
        "type": "long",
        "key": "delete",
        "title": "-d, --delete",
        "description": "Delete a branch. The branch must be fully merged in its upstream branch, or in HEAD if no upstream was set with --track or --set-upstream-to."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D",
        "description": "Shortcut for --delete --force."
      },
      {
        "type": "long",
        "key": "create-reflog",
        "title": "--create-reflog",
        "description": "Create the branch’s reflog. This activates recording of all changes made to the branch ref, enabling use of date based sha1 expressions such as \"<branchname>@{yesterday}\". Note that in non-bare repositories, reflogs are usually enabled by default by the core.logAllRefUpdates config option. The negated form --no-create-reflog only overrides an earlier --create-reflog, but currently does not negate the setting of core.logAllRefUpdates."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Reset <branchname> to <startpoint>, even if <branchname> exists already. Without -f, git branch refuses to change an existing branch. In combination with -d (or --delete), allow deleting the branch irrespective of its merged status, or whether it even points to a valid commit. In combination with -m (or --move), allow renaming the branch even if the new branch name already exists, the same applies for -c (or --copy)."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Reset <branchname> to <startpoint>, even if <branchname> exists already. Without -f, git branch refuses to change an existing branch. In combination with -d (or --delete), allow deleting the branch irrespective of its merged status, or whether it even points to a valid commit. In combination with -m (or --move), allow renaming the branch even if the new branch name already exists, the same applies for -c (or --copy)."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --move",
        "description": "Move/rename a branch and the corresponding reflog."
      },
      {
        "type": "long",
        "key": "move",
        "title": "-m, --move",
        "description": "Move/rename a branch and the corresponding reflog."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M",
        "description": "Shortcut for --move --force."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --copy",
        "description": "Copy a branch and the corresponding reflog."
      },
      {
        "type": "long",
        "key": "copy",
        "title": "-c, --copy",
        "description": "Copy a branch and the corresponding reflog."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C",
        "description": "Shortcut for --copy --force."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Color branches to highlight current, local, and remote-tracking branches. The value must be always (the default), never, or auto."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off branch colors, even when the configuration file gives the default to color output. Same as --color=never."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --ignore-case",
        "description": "Sorting and filtering branches are case insensitive."
      },
      {
        "type": "long",
        "key": "ignore-case",
        "title": "-i, --ignore-case",
        "description": "Sorting and filtering branches are case insensitive."
      },
      {
        "type": "long",
        "key": "column",
        "title": "--column[=<options>], --no-column",
        "description": "Display branch listing in columns. See configuration variable column.branch for option syntax. --column and --no-column without options are equivalent to always and never respectively.\n\nThis option is only applicable in non-verbose mode."
      },
      {
        "type": "long",
        "key": "no-column",
        "title": "--column[=<options>], --no-column",
        "description": "Display branch listing in columns. See configuration variable column.branch for option syntax. --column and --no-column without options are equivalent to always and never respectively.\n\nThis option is only applicable in non-verbose mode."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r, --remotes",
        "description": "List or delete (if used with -d) the remote-tracking branches. Combine with --list to match the optional pattern(s)."
      },
      {
        "type": "long",
        "key": "remotes",
        "title": "-r, --remotes",
        "description": "List or delete (if used with -d) the remote-tracking branches. Combine with --list to match the optional pattern(s)."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "List both remote-tracking branches and local branches. Combine with --list to match optional pattern(s)."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "List both remote-tracking branches and local branches. Combine with --list to match optional pattern(s)."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --list",
        "description": "List branches. With optional <pattern>..., e.g. git branch --list 'maint-*', list only the branches that match the pattern(s)."
      },
      {
        "type": "long",
        "key": "list",
        "title": "-l, --list",
        "description": "List branches. With optional <pattern>..., e.g. git branch --list 'maint-*', list only the branches that match the pattern(s)."
      },
      {
        "type": "long",
        "key": "show-current",
        "title": "--show-current",
        "description": "Print the name of the current branch. In detached HEAD state, nothing is printed."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, -vv, --verbose",
        "description": "When in list mode, show sha1 and commit subject line for each head, along with relationship to upstream branch (if any). If given twice, print the path of the linked worktree (if any) and the name of the upstream branch, as well (see also git remote show <remote>). Note that the current worktree’s HEAD will not have its path printed (it will always be your current directory)."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, -vv, --verbose",
        "description": "When in list mode, show sha1 and commit subject line for each head, along with relationship to upstream branch (if any). If given twice, print the path of the linked worktree (if any) and the name of the upstream branch, as well (see also git remote show <remote>). Note that the current worktree’s HEAD will not have its path printed (it will always be your current directory)."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Be more quiet when creating or deleting a branch, suppressing non-error messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Be more quiet when creating or deleting a branch, suppressing non-error messages."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev=<n>",
        "description": "In the verbose listing that show the commit object name, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. The default value is 7 and can be overridden by the core.abbrev config option."
      },
      {
        "type": "long",
        "key": "no-abbrev",
        "title": "--no-abbrev",
        "description": "Display the full sha1s in the output listing rather than abbreviating them."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t, --track",
        "description": "When creating a new branch, set up branch.<name>.remote and branch.<name>.merge configuration entries to mark the start-point branch as \"upstream\" from the new branch. This configuration will tell git to show the relationship between the two branches in git status and git branch -v. Furthermore, it directs git pull without arguments to pull from the upstream when the new branch is checked out.\n\nThis behavior is the default when the start point is a remote-tracking branch. Set the branch.autoSetupMerge configuration variable to false if you want git switch, git checkout and git branch to always behave as if --no-track were given. Set it to always if you want this behavior when the start-point is either a local or remote-tracking branch."
      },
      {
        "type": "long",
        "key": "track",
        "title": "-t, --track",
        "description": "When creating a new branch, set up branch.<name>.remote and branch.<name>.merge configuration entries to mark the start-point branch as \"upstream\" from the new branch. This configuration will tell git to show the relationship between the two branches in git status and git branch -v. Furthermore, it directs git pull without arguments to pull from the upstream when the new branch is checked out.\n\nThis behavior is the default when the start point is a remote-tracking branch. Set the branch.autoSetupMerge configuration variable to false if you want git switch, git checkout and git branch to always behave as if --no-track were given. Set it to always if you want this behavior when the start-point is either a local or remote-tracking branch."
      },
      {
        "type": "long",
        "key": "no-track",
        "title": "--no-track",
        "description": "Do not set up \"upstream\" configuration, even if the branch.autoSetupMerge configuration variable is true."
      },
      {
        "type": "long",
        "key": "set-upstream",
        "title": "--set-upstream",
        "description": "As this option had confusing syntax, it is no longer supported. Please use --track or --set-upstream-to instead."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u <upstream>, --set-upstream-to=<upstream>",
        "description": "Set up <branchname>'s tracking information so <upstream> is considered <branchname>'s upstream branch. If no <branchname> is specified, then it defaults to the current branch."
      },
      {
        "type": "long",
        "key": "set-upstream-to",
        "title": "-u <upstream>, --set-upstream-to=<upstream>",
        "description": "Set up <branchname>'s tracking information so <upstream> is considered <branchname>'s upstream branch. If no <branchname> is specified, then it defaults to the current branch."
      },
      {
        "type": "long",
        "key": "unset-upstream",
        "title": "--unset-upstream",
        "description": "Remove the upstream information for <branchname>. If no branch is specified it defaults to the current branch."
      },
      {
        "type": "long",
        "key": "edit-description",
        "title": "--edit-description",
        "description": "Open an editor and edit the text to explain what the branch is for, to be used by various other commands (e.g. format-patch, request-pull, and merge (if enabled)). Multi-line explanations may be used."
      },
      {
        "type": "long",
        "key": "contains",
        "title": "--contains [<commit>]",
        "description": "Only list branches which contain the specified commit (HEAD if not specified). Implies --list."
      },
      {
        "type": "long",
        "key": "no-contains",
        "title": "--no-contains [<commit>]",
        "description": "Only list branches which don’t contain the specified commit (HEAD if not specified). Implies --list."
      },
      {
        "type": "long",
        "key": "merged",
        "title": "--merged [<commit>]",
        "description": "Only list branches whose tips are reachable from the specified commit (HEAD if not specified). Implies --list."
      },
      {
        "type": "long",
        "key": "no-merged",
        "title": "--no-merged [<commit>]",
        "description": "Only list branches whose tips are not reachable from the specified commit (HEAD if not specified). Implies --list."
      },
      {
        "type": "long",
        "key": "sort",
        "title": "--sort=<key>",
        "description": "Sort based on the key given. Prefix - to sort in descending order of the value. You may use the --sort=<key> option multiple times, in which case the last key becomes the primary key. The keys supported are the same as those in git for-each-ref. Sort order defaults to the value configured for the branch.sort variable if exists, or to sorting based on the full refname (including refs/... prefix). This lists detached HEAD (if present) first, then local branches and finally remote-tracking branches. See git-config[1]."
      }
    ]
  },
  {
    "name": "git bundle",
    "options": [
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal."
      },
      {
        "type": "long",
        "key": "all-progress",
        "title": "--all-progress",
        "description": "When --stdout is specified then progress report is displayed during the object count and compression phases but inhibited during the write-out phase. The reason is that in some cases the output stream is directly linked to another command which may wish to display progress status of its own as it processes incoming pack data. This flag is like --progress except that it forces progress report for the write-out phase as well even if --stdout is used."
      },
      {
        "type": "long",
        "key": "all-progress-implied",
        "title": "--all-progress-implied",
        "description": "This is used to imply --all-progress whenever progress display is activated. Unlike --all-progress this flag doesn’t actually force any progress display by itself."
      },
      {
        "type": "long",
        "key": "version",
        "title": "--version=<version>",
        "description": "Specify the bundle version. Version 2 is the older format and can only be used with SHA-1 repositories; the newer version 3 contains capabilities that permit extensions. The default is the oldest supported format, based on the hash algorithm in use."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "This flag makes the command not to report its progress on the standard error stream."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "This flag makes the command not to report its progress on the standard error stream."
      }
    ]
  },
  {
    "name": "git checkout",
    "options": [
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress, --no-progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not attached to a terminal, regardless of --quiet."
      },
      {
        "type": "long",
        "key": "no-progress",
        "title": "--progress, --no-progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not attached to a terminal, regardless of --quiet."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "When switching branches, proceed even if the index or the working tree differs from HEAD. This is used to throw away local changes.\n\nWhen checking out paths from the index, do not fail upon unmerged entries; instead, unmerged entries are ignored."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "When switching branches, proceed even if the index or the working tree differs from HEAD. This is used to throw away local changes.\n\nWhen checking out paths from the index, do not fail upon unmerged entries; instead, unmerged entries are ignored."
      },
      {
        "type": "long",
        "key": "ours",
        "title": "--ours, --theirs",
        "description": "When checking out paths from the index, check out stage #2 (ours) or #3 (theirs) for unmerged paths.\n\nNote that during git rebase and git pull --rebase, ours and theirs may appear swapped; --ours gives the version from the branch the changes are rebased onto, while --theirs gives the version from the branch that holds your work that is being rebased.\n\nThis is because rebase is used in a workflow that treats the history at the remote as the shared canonical one, and treats the work done on the branch you are rebasing as the third-party work to be integrated, and you are temporarily assuming the role of the keeper of the canonical history during the rebase. As the keeper of the canonical history, you need to view the history from the remote as ours (i.e. \"our shared canonical history\"), while what you did on your side branch as theirs (i.e. \"one contributor’s work on top of it\")."
      },
      {
        "type": "long",
        "key": "theirs",
        "title": "--ours, --theirs",
        "description": "When checking out paths from the index, check out stage #2 (ours) or #3 (theirs) for unmerged paths.\n\nNote that during git rebase and git pull --rebase, ours and theirs may appear swapped; --ours gives the version from the branch the changes are rebased onto, while --theirs gives the version from the branch that holds your work that is being rebased.\n\nThis is because rebase is used in a workflow that treats the history at the remote as the shared canonical one, and treats the work done on the branch you are rebasing as the third-party work to be integrated, and you are temporarily assuming the role of the keeper of the canonical history during the rebase. As the keeper of the canonical history, you need to view the history from the remote as ours (i.e. \"our shared canonical history\"), while what you did on your side branch as theirs (i.e. \"one contributor’s work on top of it\")."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b <new_branch>",
        "description": "Create a new branch named <new_branch> and start it at <start_point>; see git-branch[1] for details."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B <new_branch>",
        "description": "Creates the branch <new_branch> and start it at <start_point>; if it already exists, then reset it to <start_point>. This is equivalent to running \"git branch\" with \"-f\"; see git-branch[1] for details."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t, --track",
        "description": "When creating a new branch, set up \"upstream\" configuration. See \"--track\" in git-branch[1] for details.\n\nIf no -b option is given, the name of the new branch will be derived from the remote-tracking branch, by looking at the local part of the refspec configured for the corresponding remote, and then stripping the initial part up to the \"*\". This would tell us to use hack as the local branch when branching off of origin/hack (or remotes/origin/hack, or even refs/remotes/origin/hack). If the given name has no slash, or the above guessing results in an empty name, the guessing is aborted. You can explicitly give a name with -b in such a case."
      },
      {
        "type": "long",
        "key": "track",
        "title": "-t, --track",
        "description": "When creating a new branch, set up \"upstream\" configuration. See \"--track\" in git-branch[1] for details.\n\nIf no -b option is given, the name of the new branch will be derived from the remote-tracking branch, by looking at the local part of the refspec configured for the corresponding remote, and then stripping the initial part up to the \"*\". This would tell us to use hack as the local branch when branching off of origin/hack (or remotes/origin/hack, or even refs/remotes/origin/hack). If the given name has no slash, or the above guessing results in an empty name, the guessing is aborted. You can explicitly give a name with -b in such a case."
      },
      {
        "type": "long",
        "key": "no-track",
        "title": "--no-track",
        "description": "Do not set up \"upstream\" configuration, even if the branch.autoSetupMerge configuration variable is true."
      },
      {
        "type": "long",
        "key": "guess",
        "title": "--guess, --no-guess",
        "description": "If <branch> is not found but there does exist a tracking branch in exactly one remote (call it <remote>) with a matching name, treat as equivalent to\n\n$ git checkout -b <branch> --track <remote>/<branch>\n\nIf the branch exists in multiple remotes and one of them is named by the checkout.defaultRemote configuration variable, we’ll use that one for the purposes of disambiguation, even if the <branch> isn’t unique across all remotes. Set it to e.g. checkout.defaultRemote=origin to always checkout remote branches from there if <branch> is ambiguous but exists on the origin remote. See also checkout.defaultRemote in git-config[1].\n\n--guess is the default behavior. Use --no-guess to disable it.\n\nThe default behavior can be set via the checkout.guess configuration variable."
      },
      {
        "type": "long",
        "key": "no-guess",
        "title": "--guess, --no-guess",
        "description": "If <branch> is not found but there does exist a tracking branch in exactly one remote (call it <remote>) with a matching name, treat as equivalent to\n\n$ git checkout -b <branch> --track <remote>/<branch>\n\nIf the branch exists in multiple remotes and one of them is named by the checkout.defaultRemote configuration variable, we’ll use that one for the purposes of disambiguation, even if the <branch> isn’t unique across all remotes. Set it to e.g. checkout.defaultRemote=origin to always checkout remote branches from there if <branch> is ambiguous but exists on the origin remote. See also checkout.defaultRemote in git-config[1].\n\n--guess is the default behavior. Use --no-guess to disable it.\n\nThe default behavior can be set via the checkout.guess configuration variable."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l",
        "description": "Create the new branch’s reflog; see git-branch[1] for details."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --detach",
        "description": "Rather than checking out a branch to work on it, check out a commit for inspection and discardable experiments. This is the default behavior of git checkout <commit> when <commit> is not a branch name. See the \"DETACHED HEAD\" section below for details."
      },
      {
        "type": "long",
        "key": "detach",
        "title": "-d, --detach",
        "description": "Rather than checking out a branch to work on it, check out a commit for inspection and discardable experiments. This is the default behavior of git checkout <commit> when <commit> is not a branch name. See the \"DETACHED HEAD\" section below for details."
      },
      {
        "type": "long",
        "key": "ignore-skip-worktree-bits",
        "title": "--ignore-skip-worktree-bits",
        "description": "In sparse checkout mode, git checkout -- <paths> would update only entries matched by <paths> and sparse patterns in $GIT_DIR/info/sparse-checkout. This option ignores the sparse patterns and adds back any files in <paths>."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --merge",
        "description": "When switching branches, if you have local modifications to one or more files that are different between the current branch and the branch to which you are switching, the command refuses to switch branches in order to preserve your modifications in context. However, with this option, a three-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch.\n\nWhen a merge conflict happens, the index entries for conflicting paths are left unmerged, and you need to resolve the conflicts and mark the resolved paths with git add (or git rm if the merge should result in deletion of the path).\n\nWhen checking out paths from the index, this option lets you recreate the conflicted merge in the specified paths.\n\nWhen switching branches with --merge, staged changes may be lost."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "-m, --merge",
        "description": "When switching branches, if you have local modifications to one or more files that are different between the current branch and the branch to which you are switching, the command refuses to switch branches in order to preserve your modifications in context. However, with this option, a three-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch.\n\nWhen a merge conflict happens, the index entries for conflicting paths are left unmerged, and you need to resolve the conflicts and mark the resolved paths with git add (or git rm if the merge should result in deletion of the path).\n\nWhen checking out paths from the index, this option lets you recreate the conflicted merge in the specified paths.\n\nWhen switching branches with --merge, staged changes may be lost."
      },
      {
        "type": "long",
        "key": "conflict",
        "title": "--conflict=<style>",
        "description": "The same as --merge option above, but changes the way the conflicting hunks are presented, overriding the merge.conflictStyle configuration variable. Possible values are \"merge\" (default) and \"diff3\" (in addition to what is shown by \"merge\" style, shows the original contents)."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --patch",
        "description": "Interactively select hunks in the difference between the <tree-ish> (or the index, if unspecified) and the working tree. The chosen hunks are then applied in reverse to the working tree (and if a <tree-ish> was specified, the index).\n\nThis means that you can use git checkout -p to selectively discard edits from your current working tree. See the “Interactive Mode” section of git-add[1] to learn how to operate the --patch mode.\n\nNote that this option uses the no overlay mode by default (see also --overlay), and currently doesn’t support overlay mode."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, --patch",
        "description": "Interactively select hunks in the difference between the <tree-ish> (or the index, if unspecified) and the working tree. The chosen hunks are then applied in reverse to the working tree (and if a <tree-ish> was specified, the index).\n\nThis means that you can use git checkout -p to selectively discard edits from your current working tree. See the “Interactive Mode” section of git-add[1] to learn how to operate the --patch mode.\n\nNote that this option uses the no overlay mode by default (see also --overlay), and currently doesn’t support overlay mode."
      },
      {
        "type": "long",
        "key": "ignore-other-worktrees",
        "title": "--ignore-other-worktrees",
        "description": "git checkout refuses when the wanted ref is already checked out by another worktree. This option makes it check the ref out anyway. In other words, the ref can be held by more than one worktree."
      },
      {
        "type": "long",
        "key": "overwrite-ignore",
        "title": "--overwrite-ignore, --no-overwrite-ignore",
        "description": "Silently overwrite ignored files when switching branches. This is the default behavior. Use --no-overwrite-ignore to abort the operation when the new branch contains ignored files."
      },
      {
        "type": "long",
        "key": "no-overwrite-ignore",
        "title": "--overwrite-ignore, --no-overwrite-ignore",
        "description": "Silently overwrite ignored files when switching branches. This is the default behavior. Use --no-overwrite-ignore to abort the operation when the new branch contains ignored files."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules, --no-recurse-submodules",
        "description": "Using --recurse-submodules will update the content of all active submodules according to the commit recorded in the superproject. If local modifications in a submodule would be overwritten the checkout will fail unless -f is used. If nothing (or --no-recurse-submodules) is used, submodules working trees will not be updated. Just like git-submodule[1], this will detach HEAD of the submodule."
      },
      {
        "type": "long",
        "key": "no-recurse-submodules",
        "title": "--recurse-submodules, --no-recurse-submodules",
        "description": "Using --recurse-submodules will update the content of all active submodules according to the commit recorded in the superproject. If local modifications in a submodule would be overwritten the checkout will fail unless -f is used. If nothing (or --no-recurse-submodules) is used, submodules working trees will not be updated. Just like git-submodule[1], this will detach HEAD of the submodule."
      },
      {
        "type": "long",
        "key": "overlay",
        "title": "--overlay, --no-overlay",
        "description": "In the default overlay mode, git checkout never removes files from the index or the working tree. When specifying --no-overlay, files that appear in the index and working tree, but not in <tree-ish> are removed, to make them match <tree-ish> exactly."
      },
      {
        "type": "long",
        "key": "no-overlay",
        "title": "--overlay, --no-overlay",
        "description": "In the default overlay mode, git checkout never removes files from the index or the working tree. When specifying --no-overlay, files that appear in the index and working tree, but not in <tree-ish> are removed, to make them match <tree-ish> exactly."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable core.quotePath (see git-config[1]). See also --pathspec-file-nul and global --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "Only meaningful with --pathspec-from-file. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes)."
      }
    ]
  },
  {
    "name": "git cherry-pick",
    "options": [
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "With this option, git cherry-pick will let you edit the commit message prior to committing."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "With this option, git cherry-pick will let you edit the commit message prior to committing."
      },
      {
        "type": "long",
        "key": "cleanup",
        "title": "--cleanup=<mode>",
        "description": "This option determines how the commit message will be cleaned up before being passed on to the commit machinery. See git-commit[1] for more details. In particular, if the <mode> is given a value of scissors, scissors will be appended to MERGE_MSG before being passed on in the case of a conflict."
      },
      {
        "type": "short",
        "key": "x",
        "title": "-x",
        "description": "When recording the commit, append a line that says \"(cherry picked from commit … )\" to the original commit message in order to indicate which commit this change was cherry-picked from. This is done only for cherry picks without conflicts. Do not use this option if you are cherry-picking from your private branch because the information is useless to the recipient. If on the other hand you are cherry-picking between two publicly visible branches (e.g. backporting a fix to a maintenance branch for an older release from a development branch), adding this information can be useful."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r",
        "description": "It used to be that the command defaulted to do -x described above, and -r was to disable it. Now the default is not to do -x so this option is a no-op."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m parent-number, --mainline parent-number",
        "description": "Usually you cannot cherry-pick a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and allows cherry-pick to replay the change relative to the specified parent."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-commit",
        "description": "Usually the command automatically creates a sequence of commits. This flag applies the changes necessary to cherry-pick each named commit to your working tree and the index, without making any commit. In addition, when this option is used, your index does not have to match the HEAD commit. The cherry-pick is done against the beginning state of your index.\n\nThis is useful when cherry-picking more than one commits' effect to your index in a row."
      },
      {
        "type": "long",
        "key": "no-commit",
        "title": "-n, --no-commit",
        "description": "Usually the command automatically creates a sequence of commits. This flag applies the changes necessary to cherry-pick each named commit to your working tree and the index, without making any commit. In addition, when this option is used, your index does not have to match the HEAD commit. The cherry-pick is done against the beginning state of your index.\n\nThis is useful when cherry-picking more than one commits' effect to your index in a row."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer at the end of the commit message. See the signoff option in git-commit[1] for more information."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer at the end of the commit message. See the signoff option in git-commit[1] for more information."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "ff",
        "title": "--ff",
        "description": "If the current HEAD is the same as the parent of the cherry-pick’ed commit, then a fast forward to this commit will be performed."
      },
      {
        "type": "long",
        "key": "allow-empty",
        "title": "--allow-empty",
        "description": "By default, cherry-picking an empty commit will fail, indicating that an explicit invocation of git commit --allow-empty is required. This option overrides that behavior, allowing empty commits to be preserved automatically in a cherry-pick. Note that when \"--ff\" is in effect, empty commits that meet the \"fast-forward\" requirement will be kept even without this option. Note also, that use of this option only keeps commits that were initially empty (i.e. the commit recorded the same tree as its parent). Commits which are made empty due to a previous commit are dropped. To force the inclusion of those commits use --keep-redundant-commits."
      },
      {
        "type": "long",
        "key": "allow-empty-message",
        "title": "--allow-empty-message",
        "description": "By default, cherry-picking a commit with an empty message will fail. This option overrides that behavior, allowing commits with empty messages to be cherry picked."
      },
      {
        "type": "long",
        "key": "keep-redundant-commits",
        "title": "--keep-redundant-commits",
        "description": "If a commit being cherry picked duplicates a commit already in the current history, it will become empty. By default these redundant commits cause cherry-pick to stop so the user can examine the commit. This option overrides that behavior and creates an empty commit object. Implies --allow-empty."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "--strategy=<strategy>",
        "description": "Use the given merge strategy. Should only be used once. See the MERGE STRATEGIES section in git-merge[1] for details."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X<option>, --strategy-option=<option>",
        "description": "Pass the merge strategy-specific option through to the merge strategy. See git-merge[1] for details."
      },
      {
        "type": "long",
        "key": "strategy-option",
        "title": "-X<option>, --strategy-option=<option>",
        "description": "Pass the merge strategy-specific option through to the merge strategy. See git-merge[1] for details."
      },
      {
        "type": "long",
        "key": "rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "no-rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible."
      }
    ]
  },
  {
    "name": "git citool",
    "options": []
  },
  {
    "name": "git clean",
    "options": [
      {
        "type": "short",
        "key": "d",
        "title": "-d",
        "description": "Normally, when no <path> is specified, git clean will not recurse into untracked directories to avoid removing too much. Specify -d to have it recurse into such directories as well. If any paths are specified, -d is irrelevant; all untracked files matching the specified paths (with exceptions for nested git directories mentioned under --force) will be removed."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "If the Git configuration variable clean.requireForce is not set to false, git clean will refuse to delete files or directories unless given -f or -i. Git will refuse to modify untracked nested git repositories (directories with a .git subdirectory) unless a second -f is given."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "If the Git configuration variable clean.requireForce is not set to false, git clean will refuse to delete files or directories unless given -f or -i. Git will refuse to modify untracked nested git repositories (directories with a .git subdirectory) unless a second -f is given."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --interactive",
        "description": "Show what would be done and clean files interactively. See “Interactive mode” for details."
      },
      {
        "type": "long",
        "key": "interactive",
        "title": "-i, --interactive",
        "description": "Show what would be done and clean files interactively. See “Interactive mode” for details."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Don’t actually remove anything, just show what would be done."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Don’t actually remove anything, just show what would be done."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Be quiet, only report errors, but not the files that are successfully removed."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Be quiet, only report errors, but not the files that are successfully removed."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e <pattern>, --exclude=<pattern>",
        "description": "Use the given exclude pattern in addition to the standard ignore rules (see gitignore[5])."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "-e <pattern>, --exclude=<pattern>",
        "description": "Use the given exclude pattern in addition to the standard ignore rules (see gitignore[5])."
      },
      {
        "type": "short",
        "key": "x",
        "title": "-x",
        "description": "Don’t use the standard ignore rules (see gitignore[5]), but still use the ignore rules given with -e options from the command line. This allows removing all untracked files, including build products. This can be used (possibly in conjunction with git restore or git reset) to create a pristine working directory to test a clean build."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X",
        "description": "Remove only files ignored by Git. This may be useful to rebuild everything from scratch, but keep manually created files."
      }
    ]
  },
  {
    "name": "git clone",
    "options": [
      {
        "type": "short",
        "key": "l",
        "title": "-l, --local",
        "description": "When the repository to clone from is on a local machine, this flag bypasses the normal \"Git aware\" transport mechanism and clones the repository by making a copy of HEAD and everything under objects and refs directories. The files under .git/objects/ directory are hardlinked to save space when possible.\n\nIf the repository is specified as a local path (e.g., /path/to/repo), this is the default, and --local is essentially a no-op. If the repository is specified as a URL, then this flag is ignored (and we never use the local optimizations). Specifying --no-local will override the default when /path/to/repo is given, using the regular Git transport instead.\n\nNOTE: this operation can race with concurrent modification to the source repository, similar to running cp -r src dst while modifying src."
      },
      {
        "type": "long",
        "key": "local",
        "title": "-l, --local",
        "description": "When the repository to clone from is on a local machine, this flag bypasses the normal \"Git aware\" transport mechanism and clones the repository by making a copy of HEAD and everything under objects and refs directories. The files under .git/objects/ directory are hardlinked to save space when possible.\n\nIf the repository is specified as a local path (e.g., /path/to/repo), this is the default, and --local is essentially a no-op. If the repository is specified as a URL, then this flag is ignored (and we never use the local optimizations). Specifying --no-local will override the default when /path/to/repo is given, using the regular Git transport instead.\n\nNOTE: this operation can race with concurrent modification to the source repository, similar to running cp -r src dst while modifying src."
      },
      {
        "type": "long",
        "key": "no-hardlinks",
        "title": "--no-hardlinks",
        "description": "Force the cloning process from a repository on a local filesystem to copy the files under the .git/objects directory instead of using hardlinks. This may be desirable if you are trying to make a back-up of your repository."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --shared",
        "description": "When the repository to clone is on the local machine, instead of using hard links, automatically setup .git/objects/info/alternates to share the objects with the source repository. The resulting repository starts out without any object of its own.\n\nNOTE: this is a possibly dangerous operation; do not use it unless you understand what it does. If you clone your repository using this option and then delete branches (or use any other Git command that makes any existing commit unreferenced) in the source repository, some objects may become unreferenced (or dangling). These objects may be removed by normal Git operations (such as git commit) which automatically call git maintenance run --auto. (See git-maintenance[1].) If these objects are removed and were referenced by the cloned repository, then the cloned repository will become corrupt.\n\nNote that running git repack without the --local option in a repository cloned with --shared will copy objects from the source repository into a pack in the cloned repository, removing the disk space savings of clone --shared. It is safe, however, to run git gc, which uses the --local option by default.\n\nIf you want to break the dependency of a repository cloned with --shared on its source repository, you can simply run git repack -a to copy all objects from the source repository into a pack in the cloned repository."
      },
      {
        "type": "long",
        "key": "shared",
        "title": "-s, --shared",
        "description": "When the repository to clone is on the local machine, instead of using hard links, automatically setup .git/objects/info/alternates to share the objects with the source repository. The resulting repository starts out without any object of its own.\n\nNOTE: this is a possibly dangerous operation; do not use it unless you understand what it does. If you clone your repository using this option and then delete branches (or use any other Git command that makes any existing commit unreferenced) in the source repository, some objects may become unreferenced (or dangling). These objects may be removed by normal Git operations (such as git commit) which automatically call git maintenance run --auto. (See git-maintenance[1].) If these objects are removed and were referenced by the cloned repository, then the cloned repository will become corrupt.\n\nNote that running git repack without the --local option in a repository cloned with --shared will copy objects from the source repository into a pack in the cloned repository, removing the disk space savings of clone --shared. It is safe, however, to run git gc, which uses the --local option by default.\n\nIf you want to break the dependency of a repository cloned with --shared on its source repository, you can simply run git repack -a to copy all objects from the source repository into a pack in the cloned repository."
      },
      {
        "type": "long",
        "key": "dissociate",
        "title": "--dissociate",
        "description": "Borrow the objects from reference repositories specified with the --reference options only to reduce network transfer, and stop borrowing from them after a clone is made by making necessary local copies of borrowed objects. This option can also be used when cloning locally from a repository that already borrows objects from another repository— the new repository will borrow objects from the same repository, and this option can be used to stop the borrowing."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Operate quietly. Progress is not reported to the standard error stream."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Operate quietly. Progress is not reported to the standard error stream."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Run verbosely. Does not affect the reporting of progress status to the standard error stream."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Run verbosely. Does not affect the reporting of progress status to the standard error stream."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --quiet is specified. This flag forces progress status even if the standard error stream is not directed to a terminal."
      },
      {
        "type": "long",
        "key": "server-option",
        "title": "--server-option=<option>",
        "description": "Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. The server’s handling of server options, including unknown ones, is server-specific. When multiple --server-option=<option> are given, they are all sent to the other side in the order listed on the command line."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-checkout",
        "description": "No checkout of HEAD is performed after the clone is complete."
      },
      {
        "type": "long",
        "key": "no-checkout",
        "title": "-n, --no-checkout",
        "description": "No checkout of HEAD is performed after the clone is complete."
      },
      {
        "type": "long",
        "key": "reject-shallow",
        "title": "--[no-]reject-shallow",
        "description": "Fail if the source repository is a shallow repository. The clone.rejectShallow configuration variable can be used to specify the default."
      },
      {
        "type": "long",
        "key": "bare",
        "title": "--bare",
        "description": "Make a bare Git repository. That is, instead of creating <directory> and placing the administrative files in <directory>/.git, make the <directory> itself the $GIT_DIR. This obviously implies the --no-checkout because there is nowhere to check out the working tree. Also the branch heads at the remote are copied directly to corresponding local branch heads, without mapping them to refs/remotes/origin/. When this option is used, neither remote-tracking branches nor the related configuration variables are created."
      },
      {
        "type": "long",
        "key": "sparse",
        "title": "--sparse",
        "description": "Initialize the sparse-checkout file so the working directory starts with only the files in the root of the repository. The sparse-checkout file can be modified to grow the working directory as needed."
      },
      {
        "type": "long",
        "key": "filter",
        "title": "--filter=<filter-spec>",
        "description": "Use the partial clone feature and request that the server sends a subset of reachable objects according to a given object filter. When using --filter, the supplied <filter-spec> is used for the partial clone filter. For example, --filter=blob:none will filter out all blobs (file contents) until needed by Git. Also, --filter=blob:limit=<size> will filter out all blobs of size at least <size>. For more details on filter specifications, see the --filter option in git-rev-list[1]."
      },
      {
        "type": "long",
        "key": "mirror",
        "title": "--mirror",
        "description": "Set up a mirror of the source repository. This implies --bare. Compared to --bare, --mirror not only maps local branches of the source to local branches of the target, it maps all refs (including remote-tracking branches, notes etc.) and sets up a refspec configuration such that all these refs are overwritten by a git remote update in the target repository."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <name>, --origin <name>",
        "description": "Instead of using the remote name origin to keep track of the upstream repository, use <name>. Overrides clone.defaultRemoteName from the config."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b <name>, --branch <name>",
        "description": "Instead of pointing the newly created HEAD to the branch pointed to by the cloned repository’s HEAD, point to <name> branch instead. In a non-bare repository, this is the branch that will be checked out. --branch can also take tags and detaches the HEAD at that commit in the resulting repository."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u <upload-pack>, --upload-pack <upload-pack>",
        "description": "When given, and the repository to clone from is accessed via ssh, this specifies a non-default path for the command run on the other end."
      },
      {
        "type": "long",
        "key": "template",
        "title": "--template=<template_directory>",
        "description": "Specify the directory from which templates will be used; (See the \"TEMPLATE DIRECTORY\" section of git-init[1].)"
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c <key>=<value>, --config <key>=<value>",
        "description": "Set a configuration variable in the newly-created repository; this takes effect immediately after the repository is initialized, but before the remote history is fetched or any files checked out. The key is in the same format as expected by git-config[1] (e.g., core.eol=true). If multiple values are given for the same key, each value will be written to the config file. This makes it safe, for example, to add additional fetch refspecs to the origin remote.\n\nDue to limitations of the current implementation, some configuration variables do not take effect until after the initial fetch and checkout. Configuration variables known to not take effect are: remote.<name>.mirror and remote.<name>.tagOpt. Use the corresponding --mirror and --no-tags options instead."
      },
      {
        "type": "long",
        "key": "shallow-since",
        "title": "--shallow-since=<date>",
        "description": "Create a shallow clone with a history after the specified time."
      },
      {
        "type": "long",
        "key": "shallow-exclude",
        "title": "--shallow-exclude=<revision>",
        "description": "Create a shallow clone with a history, excluding commits reachable from a specified remote branch or tag. This option can be specified multiple times."
      },
      {
        "type": "long",
        "key": "single-branch",
        "title": "--[no-]single-branch",
        "description": "Clone only the history leading to the tip of a single branch, either specified by the --branch option or the primary branch remote’s HEAD points at. Further fetches into the resulting repository will only update the remote-tracking branch for the branch this option was used for the initial cloning. If the HEAD at the remote did not point at any branch when --single-branch clone was made, no remote-tracking branch is created."
      },
      {
        "type": "long",
        "key": "no-tags",
        "title": "--no-tags",
        "description": "Don’t clone any tags, and set remote.<remote>.tagOpt=--no-tags in the config, ensuring that future git pull and git fetch operations won’t follow any tags. Subsequent explicit tag fetches will still work, (see git-fetch[1]).\n\nCan be used in conjunction with --single-branch to clone and maintain a branch with no references other than a single cloned branch. This is useful e.g. to maintain minimal clones of the default branch of some repository for search indexing."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules[=<pathspec>]",
        "description": "After the clone is created, initialize and clone submodules within based on the provided pathspec. If no pathspec is provided, all submodules are initialized and cloned. This option can be given multiple times for pathspecs consisting of multiple entries. The resulting clone has submodule.active set to the provided pathspec, or \".\" (meaning all submodules) if no pathspec is provided.\n\nSubmodules are initialized and cloned using their default settings. This is equivalent to running git submodule update --init --recursive <pathspec> immediately after the clone is finished. This option is ignored if the cloned repository does not have a worktree/checkout (i.e. if any of --no-checkout/-n, --bare, or --mirror is given)"
      },
      {
        "type": "long",
        "key": "shallow-submodules",
        "title": "--[no-]shallow-submodules",
        "description": "All submodules which are cloned will be shallow with a depth of 1."
      },
      {
        "type": "long",
        "key": "remote-submodules",
        "title": "--[no-]remote-submodules",
        "description": "All submodules which are cloned will use the status of the submodule’s remote-tracking branch to update the submodule, rather than the superproject’s recorded SHA-1. Equivalent to passing --remote to git submodule update."
      },
      {
        "type": "long",
        "key": "separate-git-dir",
        "title": "--separate-git-dir=<git dir>",
        "description": "Instead of placing the cloned repository where it is supposed to be, place the cloned repository at the specified directory, then make a filesystem-agnostic Git symbolic link to there. The result is Git repository can be separated from working tree."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j <n>, --jobs <n>",
        "description": "The number of submodules fetched at the same time. Defaults to the submodule.fetchJobs option."
      }
    ]
  },
  {
    "name": "git commit",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --patch",
        "description": "Use the interactive patch selection interface to choose which changes to commit. See git-add[1] for details."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, --patch",
        "description": "Use the interactive patch selection interface to choose which changes to commit. See git-add[1] for details."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C <commit>, --reuse-message=<commit>",
        "description": "Take an existing commit object, and reuse the log message and the authorship information (including the timestamp) when creating the commit."
      },
      {
        "type": "long",
        "key": "reuse-message",
        "title": "-C <commit>, --reuse-message=<commit>",
        "description": "Take an existing commit object, and reuse the log message and the authorship information (including the timestamp) when creating the commit."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c <commit>, --reedit-message=<commit>",
        "description": "Like -C, but with -c the editor is invoked, so that the user can further edit the commit message."
      },
      {
        "type": "long",
        "key": "reedit-message",
        "title": "-c <commit>, --reedit-message=<commit>",
        "description": "Like -C, but with -c the editor is invoked, so that the user can further edit the commit message."
      },
      {
        "type": "long",
        "key": "fixup",
        "title": "--fixup=[(amend|reword):]<commit>",
        "description": "Create a new commit which \"fixes up\" <commit> when applied with git rebase --autosquash. Plain --fixup=<commit> creates a \"fixup!\" commit which changes the content of <commit> but leaves its log message untouched. --fixup=amend:<commit> is similar but creates an \"amend!\" commit which also replaces the log message of <commit> with the log message of the \"amend!\" commit. --fixup=reword:<commit> creates an \"amend!\" commit which replaces the log message of <commit> with its own log message but makes no changes to the content of <commit>.\n\nThe commit created by plain --fixup=<commit> has a subject composed of \"fixup!\" followed by the subject line from <commit>, and is recognized specially by git rebase --autosquash. The -m option may be used to supplement the log message of the created commit, but the additional commentary will be thrown away once the \"fixup!\" commit is squashed into <commit> by git rebase --autosquash.\n\nThe commit created by --fixup=amend:<commit> is similar but its subject is instead prefixed with \"amend!\". The log message of <commit> is copied into the log message of the \"amend!\" commit and opened in an editor so it can be refined. When git rebase --autosquash squashes the \"amend!\" commit into <commit>, the log message of <commit> is replaced by the refined log message from the \"amend!\" commit. It is an error for the \"amend!\" commit’s log message to be empty unless --allow-empty-message is specified.\n\n--fixup=reword:<commit> is shorthand for --fixup=amend:<commit> --only. It creates an \"amend!\" commit with only a log message (ignoring any changes staged in the index). When squashed by git rebase --autosquash, it replaces the log message of <commit> without making any other changes.\n\nNeither \"fixup!\" nor \"amend!\" commits change authorship of <commit> when applied by git rebase --autosquash. See git-rebase[1] for details."
      },
      {
        "type": "long",
        "key": "squash",
        "title": "--squash=<commit>",
        "description": "Construct a commit message for use with rebase --autosquash. The commit message subject line is taken from the specified commit with a prefix of \"squash! \". Can be used with additional commit message options (-m/-c/-C/-F). See git-rebase[1] for details."
      },
      {
        "type": "long",
        "key": "reset-author",
        "title": "--reset-author",
        "description": "When used with -C/-c/--amend options, or when committing after a conflicting cherry-pick, declare that the authorship of the resulting commit now belongs to the committer. This also renews the author timestamp."
      },
      {
        "type": "long",
        "key": "short",
        "title": "--short",
        "description": "When doing a dry-run, give the output in the short-format. See git-status[1] for details. Implies --dry-run."
      },
      {
        "type": "long",
        "key": "branch",
        "title": "--branch",
        "description": "Show the branch and tracking info even in short-format."
      },
      {
        "type": "long",
        "key": "porcelain",
        "title": "--porcelain",
        "description": "When doing a dry-run, give the output in a porcelain-ready format. See git-status[1] for details. Implies --dry-run."
      },
      {
        "type": "long",
        "key": "long",
        "title": "--long",
        "description": "When doing a dry-run, give the output in the long-format. Implies --dry-run."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z, --null",
        "description": "When showing short or porcelain status output, print the filename verbatim and terminate the entries with NUL, instead of LF. If no format is given, implies the --porcelain output format. Without the -z option, filenames with \"unusual\" characters are quoted as explained for the configuration variable core.quotePath (see git-config[1])."
      },
      {
        "type": "long",
        "key": "null",
        "title": "-z, --null",
        "description": "When showing short or porcelain status output, print the filename verbatim and terminate the entries with NUL, instead of LF. If no format is given, implies the --porcelain output format. Without the -z option, filenames with \"unusual\" characters are quoted as explained for the configuration variable core.quotePath (see git-config[1])."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F <file>, --file=<file>",
        "description": "Take the commit message from the given file. Use - to read the message from the standard input."
      },
      {
        "type": "long",
        "key": "file",
        "title": "-F <file>, --file=<file>",
        "description": "Take the commit message from the given file. Use - to read the message from the standard input."
      },
      {
        "type": "long",
        "key": "author",
        "title": "--author=<author>",
        "description": "Override the commit author. Specify an explicit author using the standard A U Thor <author@example.com> format. Otherwise <author> is assumed to be a pattern and is used to search for an existing commit by that author (i.e. rev-list --all -i --author=<author>); the commit author is then copied from the first such commit found."
      },
      {
        "type": "long",
        "key": "date",
        "title": "--date=<date>",
        "description": "Override the author date used in the commit."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m <msg>, --message=<msg>",
        "description": "Use the given <msg> as the commit message. If multiple -m options are given, their values are concatenated as separate paragraphs.\n\nThe -m option is mutually exclusive with -c, -C, and -F."
      },
      {
        "type": "long",
        "key": "message",
        "title": "-m <msg>, --message=<msg>",
        "description": "Use the given <msg> as the commit message. If multiple -m options are given, their values are concatenated as separate paragraphs.\n\nThe -m option is mutually exclusive with -c, -C, and -F."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t <file>, --template=<file>",
        "description": "When editing the commit message, start the editor with the contents in the given file. The commit.template configuration variable is often used to give this option implicitly to the command. This mechanism can be used by projects that want to guide participants with some hints on what to write in the message in what order. If the user exits the editor without editing the message, the commit is aborted. This has no effect when a message is given by other means, e.g. with the -m or -F options."
      },
      {
        "type": "long",
        "key": "template",
        "title": "-t <file>, --template=<file>",
        "description": "When editing the commit message, start the editor with the contents in the given file. The commit.template configuration variable is often used to give this option implicitly to the command. This mechanism can be used by projects that want to guide participants with some hints on what to write in the message in what order. If the user exits the editor without editing the message, the commit is aborted. This has no effect when a message is given by other means, e.g. with the -m or -F options."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit log message. The meaning of a signoff depends on the project to which you’re committing. For example, it may certify that the committer has the rights to submit the work under the project’s license or agrees to some contributor representation, such as a Developer Certificate of Origin. (See http://developercertificate.org for the one used by the Linux kernel and Git projects.) Consult the documentation or leadership of the project to which you’re contributing to understand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff option on the command line."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "-s, --signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit log message. The meaning of a signoff depends on the project to which you’re committing. For example, it may certify that the committer has the rights to submit the work under the project’s license or agrees to some contributor representation, such as a Developer Certificate of Origin. (See http://developercertificate.org for the one used by the Linux kernel and Git projects.) Consult the documentation or leadership of the project to which you’re contributing to understand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff option on the command line."
      },
      {
        "type": "long",
        "key": "no-signoff",
        "title": "-s, --signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit log message. The meaning of a signoff depends on the project to which you’re committing. For example, it may certify that the committer has the rights to submit the work under the project’s license or agrees to some contributor representation, such as a Developer Certificate of Origin. (See http://developercertificate.org for the one used by the Linux kernel and Git projects.) Consult the documentation or leadership of the project to which you’re contributing to understand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff option on the command line."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-verify",
        "description": "This option bypasses the pre-commit and commit-msg hooks. See also githooks[5]."
      },
      {
        "type": "long",
        "key": "no-verify",
        "title": "-n, --no-verify",
        "description": "This option bypasses the pre-commit and commit-msg hooks. See also githooks[5]."
      },
      {
        "type": "long",
        "key": "allow-empty",
        "title": "--allow-empty",
        "description": "Usually recording a commit that has the exact same tree as its sole parent commit is a mistake, and the command prevents you from making such a commit. This option bypasses the safety, and is primarily for use by foreign SCM interface scripts."
      },
      {
        "type": "long",
        "key": "allow-empty-message",
        "title": "--allow-empty-message",
        "description": "Like --allow-empty this command is primarily for use by foreign SCM interface scripts. It allows you to create a commit with an empty commit message without using plumbing commands like git-commit-tree[1]."
      },
      {
        "type": "long",
        "key": "cleanup",
        "title": "--cleanup=<mode>",
        "description": "This option determines how the supplied commit message should be cleaned up before committing. The <mode> can be strip, whitespace, verbatim, scissors or default.\n\nstrip\n\nStrip leading and trailing empty lines, trailing whitespace, commentary and collapse consecutive empty lines.\n\nwhitespace\n\nSame as strip except #commentary is not removed.\n\nverbatim\n\nDo not change the message at all.\n\nscissors\n\nSame as whitespace except that everything from (and including) the line found below is truncated, if the message is to be edited. \"#\" can be customized with core.commentChar.\n\n# ------------------------ >8 ------------------------\n\ndefault\n\nSame as strip if the message is to be edited. Otherwise whitespace.\n\nThe default can be changed by the commit.cleanup configuration variable (see git-config[1])."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "The message taken from file with -F, command line with -m, and from commit object with -C are usually used as the commit log message unmodified. This option lets you further edit the message taken from these sources."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "The message taken from file with -F, command line with -m, and from commit object with -C are usually used as the commit log message unmodified. This option lets you further edit the message taken from these sources."
      },
      {
        "type": "long",
        "key": "no-edit",
        "title": "--no-edit",
        "description": "Use the selected commit message without launching an editor. For example, git commit --amend --no-edit amends a commit without changing its commit message."
      },
      {
        "type": "long",
        "key": "amend",
        "title": "--amend",
        "description": "Replace the tip of the current branch by creating a new commit. The recorded tree is prepared as usual (including the effect of the -i and -o options and explicit pathspec), and the message from the original commit is used as the starting point, instead of an empty message, when no other message is specified from the command line via options such as -m, -F, -c, etc. The new commit has the same parents and author as the current one (the --reset-author option can countermand this).\n\nIt is a rough equivalent for:\n\n\t$ git reset --soft HEAD^\n\t$ ... do something else to come up with the right tree ...\n\t$ git commit -c ORIG_HEAD\n\nbut can be used to amend a merge commit.\n\nYou should understand the implications of rewriting history if you amend a commit that has already been published. (See the \"RECOVERING FROM UPSTREAM REBASE\" section in git-rebase[1].)"
      },
      {
        "type": "long",
        "key": "no-post-rewrite",
        "title": "--no-post-rewrite",
        "description": "Bypass the post-rewrite hook."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --include",
        "description": "Before making a commit out of staged contents so far, stage the contents of paths given on the command line as well. This is usually not what you want unless you are concluding a conflicted merge."
      },
      {
        "type": "long",
        "key": "include",
        "title": "-i, --include",
        "description": "Before making a commit out of staged contents so far, stage the contents of paths given on the command line as well. This is usually not what you want unless you are concluding a conflicted merge."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o, --only",
        "description": "Make a commit by taking the updated working tree contents of the paths specified on the command line, disregarding any contents that have been staged for other paths. This is the default mode of operation of git commit if any paths are given on the command line, in which case this option can be omitted. If this option is specified together with --amend, then no paths need to be specified, which can be used to amend the last commit without committing changes that have already been staged. If used together with --allow-empty paths are also not required, and an empty commit will be created."
      },
      {
        "type": "long",
        "key": "only",
        "title": "-o, --only",
        "description": "Make a commit by taking the updated working tree contents of the paths specified on the command line, disregarding any contents that have been staged for other paths. This is the default mode of operation of git commit if any paths are given on the command line, in which case this option can be omitted. If this option is specified together with --amend, then no paths need to be specified, which can be used to amend the last commit without committing changes that have already been staged. If used together with --allow-empty paths are also not required, and an empty commit will be created."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable core.quotePath (see git-config[1]). See also --pathspec-file-nul and global --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "Only meaningful with --pathspec-from-file. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes)."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u[<mode>], --untracked-files[=<mode>]",
        "description": "Show untracked files.\n\nThe mode parameter is optional (defaults to all), and is used to specify the handling of untracked files; when -u is not used, the default is normal, i.e. show untracked files and directories.\n\nThe possible options are:\n\n * no - Show no untracked files\n\n * normal - Shows untracked files and directories\n\n * all - Also shows individual files in untracked directories.\n\nThe default can be changed using the status.showUntrackedFiles configuration variable documented in git-config[1]."
      },
      {
        "type": "long",
        "key": "untracked-files",
        "title": "-u[<mode>], --untracked-files[=<mode>]",
        "description": "Show untracked files.\n\nThe mode parameter is optional (defaults to all), and is used to specify the handling of untracked files; when -u is not used, the default is normal, i.e. show untracked files and directories.\n\nThe possible options are:\n\n * no - Show no untracked files\n\n * normal - Shows untracked files and directories\n\n * all - Also shows individual files in untracked directories.\n\nThe default can be changed using the status.showUntrackedFiles configuration variable documented in git-config[1]."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Show unified diff between the HEAD commit and what would be committed at the bottom of the commit message template to help the user describe the commit by reminding what changes the commit has. Note that this diff output doesn’t have its lines prefixed with #. This diff will not be a part of the commit message. See the commit.verbose configuration variable in git-config[1].\n\nIf specified twice, show in addition the unified diff between what would be committed and the worktree files, i.e. the unstaged changes to tracked files."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Show unified diff between the HEAD commit and what would be committed at the bottom of the commit message template to help the user describe the commit by reminding what changes the commit has. Note that this diff output doesn’t have its lines prefixed with #. This diff will not be a part of the commit message. See the commit.verbose configuration variable in git-config[1].\n\nIf specified twice, show in addition the unified diff between what would be committed and the worktree files, i.e. the unstaged changes to tracked files."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Suppress commit summary message."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Suppress commit summary message."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Do not create a commit, but show a list of paths that are to be committed, paths with local changes that will be left uncommitted and paths that are untracked."
      },
      {
        "type": "long",
        "key": "status",
        "title": "--status",
        "description": "Include the output of git-status[1] in the commit message template when using an editor to prepare the commit message. Defaults to on, but can be used to override configuration variable commit.status."
      },
      {
        "type": "long",
        "key": "no-status",
        "title": "--no-status",
        "description": "Do not include the output of git-status[1] in the commit message template when using an editor to prepare the default commit message."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      }
    ]
  },
  {
    "name": "git describe",
    "options": [
      {
        "type": "long",
        "key": "dirty",
        "title": "--dirty[=<mark>], --broken[=<mark>]",
        "description": "Describe the state of the working tree. When the working tree matches HEAD, the output is the same as \"git describe HEAD\". If the working tree has local modification \"-dirty\" is appended to it. If a repository is corrupt and Git cannot determine if there is local modification, Git will error out, unless ‘--broken’ is given, which appends the suffix \"-broken\" instead."
      },
      {
        "type": "long",
        "key": "broken",
        "title": "--dirty[=<mark>], --broken[=<mark>]",
        "description": "Describe the state of the working tree. When the working tree matches HEAD, the output is the same as \"git describe HEAD\". If the working tree has local modification \"-dirty\" is appended to it. If a repository is corrupt and Git cannot determine if there is local modification, Git will error out, unless ‘--broken’ is given, which appends the suffix \"-broken\" instead."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Instead of using only the annotated tags, use any ref found in refs/ namespace. This option enables matching any known branch, remote-tracking branch, or lightweight tag."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--tags",
        "description": "Instead of using only the annotated tags, use any tag found in refs/tags namespace. This option enables matching a lightweight (non-annotated) tag."
      },
      {
        "type": "long",
        "key": "contains",
        "title": "--contains",
        "description": "Instead of finding the tag that predates the commit, find the tag that comes after the commit, and thus contains it. Automatically implies --tags."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev=<n>",
        "description": "Instead of using the default number of hexadecimal digits (which will vary according to the number of objects in the repository with a default of 7) of the abbreviated object name, use <n> digits, or as many digits as needed to form a unique object name. An <n> of 0 will suppress long format, only showing the closest tag."
      },
      {
        "type": "long",
        "key": "candidates",
        "title": "--candidates=<n>",
        "description": "Instead of considering only the 10 most recent tags as candidates to describe the input commit-ish consider up to <n> candidates. Increasing <n> above 10 will take slightly longer but may produce a more accurate result. An <n> of 0 will cause only exact matches to be output."
      },
      {
        "type": "long",
        "key": "exact-match",
        "title": "--exact-match",
        "description": "Only output exact matches (a tag directly references the supplied commit). This is a synonym for --candidates=0."
      },
      {
        "type": "long",
        "key": "debug",
        "title": "--debug",
        "description": "Verbosely display information about the searching strategy being employed to standard error. The tag name will still be printed to standard out."
      },
      {
        "type": "long",
        "key": "long",
        "title": "--long",
        "description": "Always output the long format (the tag, the number of commits and the abbreviated commit name) even when it matches a tag. This is useful when you want to see parts of the commit object name in \"describe\" output, even when the commit in question happens to be a tagged version. Instead of just emitting the tag name, it will describe such a commit as v1.2-0-gdeadbee (0th commit since tag v1.2 that points at object deadbee… .)."
      },
      {
        "type": "long",
        "key": "always",
        "title": "--always",
        "description": "Show uniquely abbreviated commit object as fallback."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge commit. This is useful when you wish to not match tags on branches merged in the history of the target commit."
      }
    ]
  },
  {
    "name": "git diff",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches). This is the default."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches). This is the default."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches). This is the default."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "long",
        "key": "no-patch",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "short",
        "key": "U",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of the usual three. Implies --patch."
      },
      {
        "type": "long",
        "key": "unified",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of the usual three. Implies --patch."
      },
      {
        "type": "long",
        "key": "output",
        "title": "--output=<file>",
        "description": "Output to a specific file instead of stdout."
      },
      {
        "type": "long",
        "key": "output-indicator-new",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-old",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-context",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "Generate the diff in raw format."
      },
      {
        "type": "long",
        "key": "patch-with-raw",
        "title": "--patch-with-raw",
        "description": "Synonym for -p --raw."
      },
      {
        "type": "long",
        "key": "indent-heuristic",
        "title": "--indent-heuristic",
        "description": "Enable the heuristic that shifts diff hunk boundaries to make patches easier to read. This is the default."
      },
      {
        "type": "long",
        "key": "no-indent-heuristic",
        "title": "--no-indent-heuristic",
        "description": "Disable the indent heuristic."
      },
      {
        "type": "long",
        "key": "minimal",
        "title": "--minimal",
        "description": "Spend extra time to make sure the smallest possible diff is produced."
      },
      {
        "type": "long",
        "key": "patience",
        "title": "--patience",
        "description": "Generate a diff using the \"patience diff\" algorithm."
      },
      {
        "type": "long",
        "key": "histogram",
        "title": "--histogram",
        "description": "Generate a diff using the \"histogram diff\" algorithm."
      },
      {
        "type": "long",
        "key": "anchored",
        "title": "--anchored=<text>",
        "description": "Generate a diff using the \"anchored diff\" algorithm.\n\nThis option may be specified more than once.\n\nIf a line exists in both the source and destination, exists only once, and starts with this text, this algorithm attempts to prevent it from appearing as a deletion or addition in the output. It uses the \"patience diff\" algorithm internally."
      },
      {
        "type": "long",
        "key": "diff-algorithm",
        "title": "--diff-algorithm={patience|minimal|histogram|myers}",
        "description": "Choose a diff algorithm. The variants are as follows:\n\ndefault, myers\n\nThe basic greedy diff algorithm. Currently, this is the default.\n\nminimal\n\nSpend extra time to make sure the smallest possible diff is produced.\n\npatience\n\nUse \"patience diff\" algorithm when generating patches.\n\nhistogram\n\nThis algorithm extends the patience algorithm to \"support low-occurrence common elements\".\n\nFor instance, if you configured the diff.algorithm variable to a non-default value and want to use the default one, then you have to use --diff-algorithm=default option."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat[=<width>[, <name-width>[, <count>]]]",
        "description": "Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <width>. The width of the filename part can be limited by giving another width <name-width> after a comma. The width of the graph part can be limited by using --stat-graph-width=<width> (affects all commands generating a stat graph) or by setting diff.statGraphWidth=<width> (does not affect git format-patch). By giving a third parameter <count>, you can limit the output to the first <count> lines, followed by ... if there are more.\n\nThese parameters can also be set individually with --stat-width=<width>, --stat-name-width=<name-width> and --stat-count=<count>."
      },
      {
        "type": "long",
        "key": "compact-summary",
        "title": "--compact-summary",
        "description": "Output a condensed summary of extended header information such as file creations or deletions (\"new\" or \"gone\", optionally \"+l\" if it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding or removing executable bit respectively) in diffstat. The information is put between the filename part and the graph part. Implies --stat."
      },
      {
        "type": "long",
        "key": "numstat",
        "title": "--numstat",
        "description": "Similar to --stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two - instead of saying 0 0."
      },
      {
        "type": "long",
        "key": "shortstat",
        "title": "--shortstat",
        "description": "Output only the last line of the --stat format containing total number of modified files, as well as number of added and deleted lines."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X[<param1, param2, … >], --dirstat[=<param1, param2, … >]",
        "description": "Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config[1]). The following parameters are available:\n\nchanges\n\nCompute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.\n\nlines\n\nCompute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other --*stat options.\n\nfiles\n\nCompute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest --dirstat behavior, since it does not have to look at the file contents at all.\n\ncumulative\n\nCount changes in a child directory for the parent directory as well. Note that when using cumulative, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the noncumulative parameter.\n\n<limit>\n\nAn integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.\n\nExample: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "dirstat",
        "title": "-X[<param1, param2, … >], --dirstat[=<param1, param2, … >]",
        "description": "Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config[1]). The following parameters are available:\n\nchanges\n\nCompute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.\n\nlines\n\nCompute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other --*stat options.\n\nfiles\n\nCompute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest --dirstat behavior, since it does not have to look at the file contents at all.\n\ncumulative\n\nCount changes in a child directory for the parent directory as well. Note that when using cumulative, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the noncumulative parameter.\n\n<limit>\n\nAn integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.\n\nExample: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "cumulative",
        "title": "--cumulative",
        "description": "Synonym for --dirstat=cumulative"
      },
      {
        "type": "long",
        "key": "dirstat-by-file",
        "title": "--dirstat-by-file[=<param1, param2>… ]",
        "description": "Synonym for --dirstat=files,param1,param2…"
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary",
        "description": "Output a condensed summary of extended header information such as creations, renames and mode changes."
      },
      {
        "type": "long",
        "key": "patch-with-stat",
        "title": "--patch-with-stat",
        "description": "Synonym for -p --stat."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "When --raw, --numstat, --name-only or --name-status has been given, do not munge pathnames and use NULs as output field terminators.\n\nWithout this option, pathnames with \"unusual\" characters are quoted as explained for the configuration variable core.quotePath (see git-config[1])."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only",
        "description": "Show only names of changed files. The file names are often encoded in UTF-8. For more information see the discussion about encoding in the git-log[1] manual page."
      },
      {
        "type": "long",
        "key": "name-status",
        "title": "--name-status",
        "description": "Show only names and status of changed files. See the description of the --diff-filter option on what the status letters mean. Just like --name-only the file names are often encoded in UTF-8."
      },
      {
        "type": "long",
        "key": "submodule",
        "title": "--submodule[=<format>]",
        "description": "Specify how differences in submodules are shown. When specifying --submodule=short the short format is used. This format just shows the names of the commits at the beginning and end of the range. When --submodule or --submodule=log is specified, the log format is used. This format lists the commits in the range like git-submodule[1] summary does. When --submodule=diff is specified, the diff format is used. This format shows an inline diff of the changes in the submodule contents between the commit range. Defaults to diff.submodule or the short format if the config option is unset."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Show colored diff. --color (i.e. without =<when>) is the same as --color=always. <when> can be one of always, never, or auto. It can be changed by the color.ui and color.diff configuration settings."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off colored diff. This can be used to override configuration settings. It is the same as --color=never."
      },
      {
        "type": "long",
        "key": "color-moved",
        "title": "--color-moved[=<mode>]",
        "description": "Moved lines of code are colored differently. It can be changed by the diff.colorMoved configuration setting. The <mode> defaults to no if the option is not given and to zebra if the option with no mode is given. The mode must be one of:\n\nno\n\nMoved lines are not highlighted.\n\ndefault\n\nIs a synonym for zebra. This may change to a more sensible mode in the future.\n\nplain\n\nAny line that is added in one location and was removed in another location will be colored with color.diff.newMoved. Similarly color.diff.oldMoved will be used for removed lines that are added somewhere else in the diff. This mode picks up any moved line, but it is not very useful in a review to determine if a block of code was moved without permutation.\n\nblocks\n\nBlocks of moved text of at least 20 alphanumeric characters are detected greedily. The detected blocks are painted using either the color.diff.{old,new}Moved color. Adjacent blocks cannot be told apart.\n\nzebra\n\nBlocks of moved text are detected as in blocks mode. The blocks are painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative. The change between the two colors indicates that a new block was detected.\n\ndimmed-zebra\n\nSimilar to zebra, but additional dimming of uninteresting parts of moved code is performed. The bordering lines of two adjacent blocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."
      },
      {
        "type": "long",
        "key": "no-color-moved",
        "title": "--no-color-moved",
        "description": "Turn off move detection. This can be used to override configuration settings. It is the same as --color-moved=no."
      },
      {
        "type": "long",
        "key": "color-moved-ws",
        "title": "--color-moved-ws=<modes>",
        "description": "This configures how whitespace is ignored when performing the move detection for --color-moved. It can be set by the diff.colorMovedWS configuration setting. These modes can be given as a comma separated list:\n\nno\n\nDo not ignore whitespace when performing move detection.\n\nignore-space-at-eol\n\nIgnore changes in whitespace at EOL.\n\nignore-space-change\n\nIgnore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.\n\nignore-all-space\n\nIgnore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.\n\nallow-indentation-change\n\nInitially ignore any whitespace in the move detection, then group the moved code blocks only into a block if the change in whitespace is the same per line. This is incompatible with the other modes."
      },
      {
        "type": "long",
        "key": "no-color-moved-ws",
        "title": "--no-color-moved-ws",
        "description": "Do not ignore whitespace when performing move detection. This can be used to override configuration settings. It is the same as --color-moved-ws=no."
      },
      {
        "type": "long",
        "key": "word-diff",
        "title": "--word-diff[=<mode>]",
        "description": "Show a word diff, using the <mode> to delimit changed words. By default, words are delimited by whitespace; see --word-diff-regex below. The <mode> defaults to plain, and must be one of:\n\ncolor\n\nHighlight changed words using only colors. Implies --color.\n\nplain\n\nShow words as [-removed-] and {+added+}. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous.\n\nporcelain\n\nUse a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a +/-/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde ~ on a line of its own.\n\nnone\n\nDisable word diff again.\n\nNote that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled."
      },
      {
        "type": "long",
        "key": "word-diff-regex",
        "title": "--word-diff-regex=<regex>",
        "description": "Use <regex> to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies --word-diff unless it was already enabled.\n\nEvery non-overlapping match of the <regex> is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences. You may want to append |[^[:space:]] to your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is silently truncated(!) at the newline.\n\nFor example, --word-diff-regex=. will treat each character as a word and, correspondingly, show differences character by character.\n\nThe regex can also be set via a diff driver or configuration option, see gitattributes[5] or git-config[1]. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings."
      },
      {
        "type": "long",
        "key": "color-words",
        "title": "--color-words[=<regex>]",
        "description": "Equivalent to --word-diff=color plus (if a regex was specified) --word-diff-regex=<regex>."
      },
      {
        "type": "long",
        "key": "no-renames",
        "title": "--no-renames",
        "description": "Turn off rename detection, even when the configuration file gives the default to do so."
      },
      {
        "type": "long",
        "key": "rename-empty",
        "title": "--[no-]rename-empty",
        "description": "Whether to use empty blobs as rename source."
      },
      {
        "type": "long",
        "key": "check",
        "title": "--check",
        "description": "Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by core.whitespace configuration. By default, trailing whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code."
      },
      {
        "type": "long",
        "key": "ws-error-highlight",
        "title": "--ws-error-highlight=<kind>",
        "description": "Highlight whitespace errors in the context, old or new lines of the diff. Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context. When this option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored with color.diff.whitespace."
      },
      {
        "type": "long",
        "key": "full-index",
        "title": "--full-index",
        "description": "Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output."
      },
      {
        "type": "long",
        "key": "binary",
        "title": "--binary",
        "description": "In addition to --full-index, output a binary diff that can be applied with git-apply. Implies --patch."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. In diff-patch output format, --full-index takes higher precedence, i.e. if --full-index is specified, full blob names will be shown regardless of --abbrev. Non default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and create. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number m controls this aspect of the -B option (defaults to 60%). -B/70% specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).\n\nWhen used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number n controls this aspect of the -B option (defaults to 50%). -B20% specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file."
      },
      {
        "type": "long",
        "key": "break-rewrites",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and create. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number m controls this aspect of the -B option (defaults to 60%). -B/70% specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).\n\nWhen used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number n controls this aspect of the -B option (defaults to 50%). -B20% specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%."
      },
      {
        "type": "long",
        "key": "find-renames",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies-harder",
        "title": "--find-copies-harder",
        "description": "For performance reasons, by default, -C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one -C option has the same effect."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part of a delete/create pair."
      },
      {
        "type": "long",
        "key": "irreversible-delete",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part of a delete/create pair."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l<num>",
        "description": "The -M and -C options involve some preliminary steps that can detect subsets of renames/copies cheaply, followed by an exhaustive fallback portion that compares all remaining unpaired destinations to all relevant sources. (For renames, only remaining unpaired sources are relevant; for copies, all original sources are relevant.) For N sources and destinations, this exhaustive check is O(N^2). This option prevents the exhaustive portion of rename/copy detection from running if the number of source/destination files involved exceeds the specified number. Defaults to diff.renameLimit. Note that a value of 0 is treated as unlimited."
      },
      {
        "type": "long",
        "key": "diff-filter",
        "title": "--diff-filter=[(A|C|D|M|R|T|U|X|B)… [*]]",
        "description": "Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (i.e. regular file, symlink, submodule, … ) changed (T), are Unmerged (U), are Unknown (X), or have had their pairing Broken (B). Any combination of the filter characters (including none) can be used. When * (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.\n\nAlso, these upper-case letters can be downcased to exclude. E.g. --diff-filter=ad excludes added and deleted paths.\n\nNote that not all diffs can feature all types. For instance, diffs from the index to the working tree can never have Added entries (because the set of paths included in the diff is limited by what is in the index). Similarly, copied and renamed entries cannot appear if detection for those types is disabled."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S<string>",
        "description": "Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.\n\nIt is useful when you’re looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into -S, and keep going until you get the very first version of the block.\n\nBinary files are searched as well."
      },
      {
        "type": "short",
        "key": "G",
        "title": "-G<regex>",
        "description": "Look for differences whose patch text contains added/removed lines that match <regex>.\n\nTo illustrate the difference between -S<regex> --pickaxe-regex and -G<regex>, consider a commit with the following diff in the same file:\n\n+    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0);\n\nWhile git log -G\"frotz\\(nitfol\" will show this commit, git log -S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of occurrences of that string did not change).\n\nUnless --text is supplied patches of binary files without a textconv filter will be ignored.\n\nSee the pickaxe entry in gitdiffcore[7] for more information."
      },
      {
        "type": "long",
        "key": "find-object",
        "title": "--find-object=<object-id>",
        "description": "Look for differences that change the number of occurrences of the specified object. Similar to -S, just the argument is different in that it doesn’t search for a specific string but for a specific object id.\n\nThe object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."
      },
      {
        "type": "long",
        "key": "pickaxe-all",
        "title": "--pickaxe-all",
        "description": "When -S or -G finds a change, show all the changes in that changeset, not just the files that contain the change in <string>."
      },
      {
        "type": "long",
        "key": "pickaxe-regex",
        "title": "--pickaxe-regex",
        "description": "Treat the <string> given to -S as an extended POSIX regular expression to match."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O<orderfile>",
        "description": "Control the order in which files appear in the output. This overrides the diff.orderFile configuration variable (see git-config[1]). To cancel diff.orderFile, use -O/dev/null.\n\nThe output order is determined by the order of glob patterns in <orderfile>. All files with pathnames that match the first pattern are output first, all files with pathnames that match the second pattern (but not the first) are output next, and so on. All files with pathnames that do not match any pattern are output last, as if there was an implicit match-all pattern at the end of the file. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order relative to each other is the normal order.\n\n<orderfile> is parsed as follows:\n\n * Blank lines are ignored, so they can be used as separators for readability.\n\n * Lines starting with a hash (\"#\") are ignored, so they can be used for comments. Add a backslash (\"\\\") to the beginning of the pattern if it starts with a hash.\n\n * Each other line contains a single pattern.\n\nPatterns have the same syntax and semantics as patterns used for fnmatch(3) without the FNM_PATHNAME flag, except a pathname also matches a pattern if removing any number of the final pathname components matches the pattern. For example, the pattern \"foo*bar\" matches \"fooasdfbar\" and \"foo/bar/baz/asdf\" but not \"foobarx\"."
      },
      {
        "type": "long",
        "key": "skip-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise."
      },
      {
        "type": "long",
        "key": "rotate-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise."
      },
      {
        "type": "short",
        "key": "R",
        "title": "-R",
        "description": "Swap two inputs; that is, show differences from index or on-disk file to tree contents."
      },
      {
        "type": "long",
        "key": "relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative."
      },
      {
        "type": "long",
        "key": "no-relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "text",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "ignore-cr-at-eol",
        "title": "--ignore-cr-at-eol",
        "description": "Ignore carriage-return at the end of line when doing a comparison."
      },
      {
        "type": "long",
        "key": "ignore-space-at-eol",
        "title": "--ignore-space-at-eol",
        "description": "Ignore changes in whitespace at EOL."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none."
      },
      {
        "type": "long",
        "key": "ignore-all-space",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none."
      },
      {
        "type": "long",
        "key": "ignore-blank-lines",
        "title": "--ignore-blank-lines",
        "description": "Ignore changes whose lines are all blank."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>. This option may be specified more than once."
      },
      {
        "type": "long",
        "key": "ignore-matching-lines",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>. This option may be specified more than once."
      },
      {
        "type": "long",
        "key": "inter-hunk-context",
        "title": "--inter-hunk-context=<lines>",
        "description": "Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other. Defaults to diff.interHunkContext or 0 if the config option is unset."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "function-context",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "exit-code",
        "title": "--exit-code",
        "description": "Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Disable all output of the program. Implies --exit-code."
      },
      {
        "type": "long",
        "key": "ext-diff",
        "title": "--ext-diff",
        "description": "Allow an external diff helper to be executed. If you set an external diff driver with gitattributes[5], you need to use this option with git-log[1] and friends."
      },
      {
        "type": "long",
        "key": "no-ext-diff",
        "title": "--no-ext-diff",
        "description": "Disallow external diff drivers."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes[5] for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff[1] and git-log[1], but not for git-format-patch[1] or diff plumbing commands."
      },
      {
        "type": "long",
        "key": "no-textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes[5] for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff[1] and git-log[1], but not for git-format-patch[1] or diff plumbing commands."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules[=<when>]",
        "description": "Ignore changes to submodules in the diff generation. <when> can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the ignore option in git-config[1] or gitmodules[5]. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using \"all\" hides all changes to submodules."
      },
      {
        "type": "long",
        "key": "src-prefix",
        "title": "--src-prefix=<prefix>",
        "description": "Show the given source prefix instead of \"a/\"."
      },
      {
        "type": "long",
        "key": "dst-prefix",
        "title": "--dst-prefix=<prefix>",
        "description": "Show the given destination prefix instead of \"b/\"."
      },
      {
        "type": "long",
        "key": "no-prefix",
        "title": "--no-prefix",
        "description": "Do not show any source or destination prefix."
      },
      {
        "type": "long",
        "key": "line-prefix",
        "title": "--line-prefix=<prefix>",
        "description": "Prepend an additional prefix to every line of output."
      },
      {
        "type": "long",
        "key": "ita-invisible-in-index",
        "title": "--ita-invisible-in-index",
        "description": "By default entries added by \"git add -N\" appear as an existing empty file in \"git diff\" and a new file in \"git diff --cached\". This option makes the entry appear as a new file in \"git diff\" and non-existent in \"git diff --cached\". This option could be reverted with --ita-visible-in-index. Both options are experimental and could be removed in future."
      },
      {
        "type": "short",
        "key": "0",
        "title": "-0",
        "description": "Omit diff output for unmerged entries and just show \"Unmerged\". Can be used only when comparing the working tree with the index."
      }
    ]
  },
  {
    "name": "git fetch",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Fetch all remotes."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --append",
        "description": "Append ref names and object names of fetched refs to the existing contents of .git/FETCH_HEAD. Without this option old data in .git/FETCH_HEAD will be overwritten."
      },
      {
        "type": "long",
        "key": "append",
        "title": "-a, --append",
        "description": "Append ref names and object names of fetched refs to the existing contents of .git/FETCH_HEAD. Without this option old data in .git/FETCH_HEAD will be overwritten."
      },
      {
        "type": "long",
        "key": "atomic",
        "title": "--atomic",
        "description": "Use an atomic transaction to update local refs. Either all refs are updated, or on error, no refs are updated."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--depth=<depth>",
        "description": "Limit fetching to the specified number of commits from the tip of each remote branch history. If fetching to a shallow repository created by git clone with --depth=<depth> option (see git-clone[1]), deepen or shorten the history to the specified number of commits. Tags for the deepened commits are not fetched."
      },
      {
        "type": "long",
        "key": "deepen",
        "title": "--deepen=<depth>",
        "description": "Similar to --depth, except it specifies the number of commits from the current shallow boundary instead of from the tip of each remote branch history."
      },
      {
        "type": "long",
        "key": "shallow-since",
        "title": "--shallow-since=<date>",
        "description": "Deepen or shorten the history of a shallow repository to include all reachable commits after <date>."
      },
      {
        "type": "long",
        "key": "shallow-exclude",
        "title": "--shallow-exclude=<revision>",
        "description": "Deepen or shorten the history of a shallow repository to exclude commits reachable from a specified remote branch or tag. This option can be specified multiple times."
      },
      {
        "type": "long",
        "key": "unshallow",
        "title": "--unshallow",
        "description": "If the source repository is complete, convert a shallow repository to a complete one, removing all the limitations imposed by shallow repositories.\n\nIf the source repository is shallow, fetch as much as possible so that the current repository has the same history as the source repository."
      },
      {
        "type": "long",
        "key": "update-shallow",
        "title": "--update-shallow",
        "description": "By default when fetching from a shallow repository, git fetch refuses refs that require updating .git/shallow. This option updates .git/shallow and accept such refs."
      },
      {
        "type": "long",
        "key": "negotiation-tip",
        "title": "--negotiation-tip=<commit|glob>",
        "description": "By default, Git will report, to the server, commits reachable from all local refs to find common commits in an attempt to reduce the size of the to-be-received packfile. If specified, Git will only report commits reachable from the given tips. This is useful to speed up fetches when the user knows which local ref is likely to have commits in common with the upstream ref being fetched.\n\nThis option may be specified more than once; if so, Git will report commits reachable from any of the given commits.\n\nThe argument to this option may be a glob on ref names, a ref, or the (possibly abbreviated) SHA-1 of a commit. Specifying a glob is equivalent to specifying this option multiple times, one for each matching ref name.\n\nSee also the fetch.negotiationAlgorithm and push.negotiate configuration variables documented in git-config[1], and the --negotiate-only option below."
      },
      {
        "type": "long",
        "key": "negotiate-only",
        "title": "--negotiate-only",
        "description": "Do not fetch anything from the server, and instead print the ancestors of the provided --negotiation-tip=* arguments, which we have in common with the server.\n\nInternally this is used to implement the push.negotiate option, see git-config[1]."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Show what would be done, without making any changes."
      },
      {
        "type": "long",
        "key": "write-fetch-head",
        "title": "--[no-]write-fetch-head",
        "description": "Write the list of remote refs fetched in the FETCH_HEAD file directly under $GIT_DIR. This is the default. Passing --no-write-fetch-head from the command line tells Git not to write the file. Under --dry-run option, the file is never written."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "When git fetch is used with <src>:<dst> refspec it may refuse to update the local branch as discussed in the <refspec> part below. This option overrides that check."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "When git fetch is used with <src>:<dst> refspec it may refuse to update the local branch as discussed in the <refspec> part below. This option overrides that check."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep",
        "description": "Keep downloaded pack."
      },
      {
        "type": "long",
        "key": "keep",
        "title": "-k, --keep",
        "description": "Keep downloaded pack."
      },
      {
        "type": "long",
        "key": "multiple",
        "title": "--multiple",
        "description": "Allow several <repository> and <group> arguments to be specified. No <refspec>s may be specified."
      },
      {
        "type": "long",
        "key": "auto-maintenance",
        "title": "--[no-]auto-maintenance, --[no-]auto-gc",
        "description": "Run git maintenance run --auto at the end to perform automatic repository maintenance if needed. (--[no-]auto-gc is a synonym.) This is enabled by default."
      },
      {
        "type": "long",
        "key": "auto-gc",
        "title": "--[no-]auto-maintenance, --[no-]auto-gc",
        "description": "Run git maintenance run --auto at the end to perform automatic repository maintenance if needed. (--[no-]auto-gc is a synonym.) This is enabled by default."
      },
      {
        "type": "long",
        "key": "write-commit-graph",
        "title": "--[no-]write-commit-graph",
        "description": "Write a commit-graph after fetching. This overrides the config setting fetch.writeCommitGraph."
      },
      {
        "type": "long",
        "key": "prefetch",
        "title": "--prefetch",
        "description": "Modify the configured refspec to place all refs into the refs/prefetch/ namespace. See the prefetch task in git-maintenance[1]."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --prune",
        "description": "Before fetching, remove any remote-tracking references that no longer exist on the remote. Tags are not subject to pruning if they are fetched only because of the default tag auto-following or due to a --tags option. However, if tags are fetched due to an explicit refspec (either on the command line or in the remote configuration, for example if the remote was cloned with the --mirror option), then they are also subject to pruning. Supplying --prune-tags is a shorthand for providing the tag refspec.\n\nSee the PRUNING section below for more details."
      },
      {
        "type": "long",
        "key": "prune",
        "title": "-p, --prune",
        "description": "Before fetching, remove any remote-tracking references that no longer exist on the remote. Tags are not subject to pruning if they are fetched only because of the default tag auto-following or due to a --tags option. However, if tags are fetched due to an explicit refspec (either on the command line or in the remote configuration, for example if the remote was cloned with the --mirror option), then they are also subject to pruning. Supplying --prune-tags is a shorthand for providing the tag refspec.\n\nSee the PRUNING section below for more details."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P, --prune-tags",
        "description": "Before fetching, remove any local tags that no longer exist on the remote if --prune is enabled. This option should be used more carefully, unlike --prune it will remove any local references (local tags) that have been created. This option is a shorthand for providing the explicit tag refspec along with --prune, see the discussion about that in its documentation.\n\nSee the PRUNING section below for more details."
      },
      {
        "type": "long",
        "key": "prune-tags",
        "title": "-P, --prune-tags",
        "description": "Before fetching, remove any local tags that no longer exist on the remote if --prune is enabled. This option should be used more carefully, unlike --prune it will remove any local references (local tags) that have been created. This option is a shorthand for providing the explicit tag refspec along with --prune, see the discussion about that in its documentation.\n\nSee the PRUNING section below for more details."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-tags",
        "description": "By default, tags that point at objects that are downloaded from the remote repository are fetched and stored locally. This option disables this automatic tag following. The default behavior for a remote may be specified with the remote.<name>.tagOpt setting. See git-config[1]."
      },
      {
        "type": "long",
        "key": "no-tags",
        "title": "-n, --no-tags",
        "description": "By default, tags that point at objects that are downloaded from the remote repository are fetched and stored locally. This option disables this automatic tag following. The default behavior for a remote may be specified with the remote.<name>.tagOpt setting. See git-config[1]."
      },
      {
        "type": "long",
        "key": "refmap",
        "title": "--refmap=<refspec>",
        "description": "When fetching refs listed on the command line, use the specified refspec (can be given more than once) to map the refs to remote-tracking branches, instead of the values of remote.*.fetch configuration variables for the remote repository. Providing an empty <refspec> to the --refmap option causes Git to ignore the configured refspecs and rely entirely on the refspecs supplied as command-line arguments. See section on \"Configured Remote-tracking Branches\" for details."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t, --tags",
        "description": "Fetch all tags from the remote (i.e., fetch remote tags refs/tags/* into local tags with the same name), in addition to whatever else would otherwise be fetched. Using this option alone does not subject tags to pruning, even if --prune is used (though tags may be pruned anyway if they are also the destination of an explicit refspec; see --prune)."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "-t, --tags",
        "description": "Fetch all tags from the remote (i.e., fetch remote tags refs/tags/* into local tags with the same name), in addition to whatever else would otherwise be fetched. Using this option alone does not subject tags to pruning, even if --prune is used (though tags may be pruned anyway if they are also the destination of an explicit refspec; see --prune)."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules[=yes|on-demand|no]",
        "description": "This option controls if and under what conditions new commits of populated submodules should be fetched too. It can be used as a boolean option to completely disable recursion when set to no or to unconditionally recurse into all populated submodules when set to yes, which is the default when this option is used without any value. Use on-demand to only recurse into a populated submodule when the superproject retrieves a commit that updates the submodule’s reference to a commit that isn’t already in the local submodule clone. By default, on-demand is used, unless fetch.recurseSubmodules is set (see git-config[1])."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j, --jobs=<n>",
        "description": "Number of parallel children to be used for all forms of fetching.\n\nIf the --multiple option was specified, the different remotes will be fetched in parallel. If multiple submodules are fetched, they will be fetched in parallel. To control them independently, use the config settings fetch.parallel and submodule.fetchJobs (see git-config[1]).\n\nTypically, parallel recursive and multi-remote fetches will be faster. By default fetches are performed sequentially, not in parallel."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j, --jobs=<n>",
        "description": "Number of parallel children to be used for all forms of fetching.\n\nIf the --multiple option was specified, the different remotes will be fetched in parallel. If multiple submodules are fetched, they will be fetched in parallel. To control them independently, use the config settings fetch.parallel and submodule.fetchJobs (see git-config[1]).\n\nTypically, parallel recursive and multi-remote fetches will be faster. By default fetches are performed sequentially, not in parallel."
      },
      {
        "type": "long",
        "key": "no-recurse-submodules",
        "title": "--no-recurse-submodules",
        "description": "Disable recursive fetching of submodules (this has the same effect as using the --recurse-submodules=no option)."
      },
      {
        "type": "long",
        "key": "set-upstream",
        "title": "--set-upstream",
        "description": "If the remote is fetched successfully, add upstream (tracking) reference, used by argument-less git-pull[1] and other commands. For more information, see branch.<name>.merge and branch.<name>.remote in git-config[1]."
      },
      {
        "type": "long",
        "key": "submodule-prefix",
        "title": "--submodule-prefix=<path>",
        "description": "Prepend <path> to paths printed in informative messages such as \"Fetching submodule foo\". This option is used internally when recursing over submodules."
      },
      {
        "type": "long",
        "key": "recurse-submodules-default",
        "title": "--recurse-submodules-default=[yes|on-demand]",
        "description": "This option is used internally to temporarily provide a non-negative default value for the --recurse-submodules option. All other methods of configuring fetch’s submodule recursion (such as settings in gitmodules[5] and git-config[1]) override this option, as does specifying --[no-]recurse-submodules directly."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u, --update-head-ok",
        "description": "By default git fetch refuses to update the head which corresponds to the current branch. This flag disables the check. This is purely for the internal use for git pull to communicate with git fetch, and unless you are implementing your own Porcelain you are not supposed to use it."
      },
      {
        "type": "long",
        "key": "update-head-ok",
        "title": "-u, --update-head-ok",
        "description": "By default git fetch refuses to update the head which corresponds to the current branch. This flag disables the check. This is purely for the internal use for git pull to communicate with git fetch, and unless you are implementing your own Porcelain you are not supposed to use it."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Pass --quiet to git-fetch-pack and silence any other internally used git commands. Progress is not reported to the standard error stream."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Pass --quiet to git-fetch-pack and silence any other internally used git commands. Progress is not reported to the standard error stream."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <option>, --server-option=<option>",
        "description": "Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. The server’s handling of server options, including unknown ones, is server-specific. When multiple --server-option=<option> are given, they are all sent to the other side in the order listed on the command line."
      },
      {
        "type": "long",
        "key": "server-option",
        "title": "-o <option>, --server-option=<option>",
        "description": "Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. The server’s handling of server options, including unknown ones, is server-specific. When multiple --server-option=<option> are given, they are all sent to the other side in the order listed on the command line."
      },
      {
        "type": "long",
        "key": "show-forced-updates",
        "title": "--show-forced-updates",
        "description": "By default, git checks if a branch is force-updated during fetch. This can be disabled through fetch.showForcedUpdates, but the --show-forced-updates option guarantees this check occurs. See git-config[1]."
      },
      {
        "type": "long",
        "key": "no-show-forced-updates",
        "title": "--no-show-forced-updates",
        "description": "By default, git checks if a branch is force-updated during fetch. Pass --no-show-forced-updates or set fetch.showForcedUpdates to false to skip this check for performance reasons. If used during git-pull the --ff-only option will still check for forced updates before attempting a fast-forward update. See git-config[1]."
      },
      {
        "type": "short",
        "key": "4",
        "title": "-4, --ipv4",
        "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
      },
      {
        "type": "long",
        "key": "ipv4",
        "title": "-4, --ipv4",
        "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
      },
      {
        "type": "short",
        "key": "6",
        "title": "-6, --ipv6",
        "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
      },
      {
        "type": "long",
        "key": "ipv6",
        "title": "-6, --ipv6",
        "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Read refspecs, one per line, from stdin in addition to those provided as arguments. The \"tag <name>\" format is not supported."
      }
    ]
  },
  {
    "name": "git format-patch",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p, --no-stat",
        "description": "Generate plain patches without any diffstats."
      },
      {
        "type": "long",
        "key": "no-stat",
        "title": "-p, --no-stat",
        "description": "Generate plain patches without any diffstats."
      },
      {
        "type": "short",
        "key": "U",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of the usual three."
      },
      {
        "type": "long",
        "key": "unified",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of the usual three."
      },
      {
        "type": "long",
        "key": "output",
        "title": "--output=<file>",
        "description": "Output to a specific file instead of stdout."
      },
      {
        "type": "long",
        "key": "output-indicator-new",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-old",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-context",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "indent-heuristic",
        "title": "--indent-heuristic",
        "description": "Enable the heuristic that shifts diff hunk boundaries to make patches easier to read. This is the default."
      },
      {
        "type": "long",
        "key": "no-indent-heuristic",
        "title": "--no-indent-heuristic",
        "description": "Disable the indent heuristic."
      },
      {
        "type": "long",
        "key": "minimal",
        "title": "--minimal",
        "description": "Spend extra time to make sure the smallest possible diff is produced."
      },
      {
        "type": "long",
        "key": "patience",
        "title": "--patience",
        "description": "Generate a diff using the \"patience diff\" algorithm."
      },
      {
        "type": "long",
        "key": "histogram",
        "title": "--histogram",
        "description": "Generate a diff using the \"histogram diff\" algorithm."
      },
      {
        "type": "long",
        "key": "anchored",
        "title": "--anchored=<text>",
        "description": "Generate a diff using the \"anchored diff\" algorithm.\n\nThis option may be specified more than once.\n\nIf a line exists in both the source and destination, exists only once, and starts with this text, this algorithm attempts to prevent it from appearing as a deletion or addition in the output. It uses the \"patience diff\" algorithm internally."
      },
      {
        "type": "long",
        "key": "diff-algorithm",
        "title": "--diff-algorithm={patience|minimal|histogram|myers}",
        "description": "Choose a diff algorithm. The variants are as follows:\n\ndefault, myers\n\nThe basic greedy diff algorithm. Currently, this is the default.\n\nminimal\n\nSpend extra time to make sure the smallest possible diff is produced.\n\npatience\n\nUse \"patience diff\" algorithm when generating patches.\n\nhistogram\n\nThis algorithm extends the patience algorithm to \"support low-occurrence common elements\".\n\nFor instance, if you configured the diff.algorithm variable to a non-default value and want to use the default one, then you have to use --diff-algorithm=default option."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat[=<width>[, <name-width>[, <count>]]]",
        "description": "Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <width>. The width of the filename part can be limited by giving another width <name-width> after a comma. The width of the graph part can be limited by using --stat-graph-width=<width> (affects all commands generating a stat graph) or by setting diff.statGraphWidth=<width> (does not affect git format-patch). By giving a third parameter <count>, you can limit the output to the first <count> lines, followed by ... if there are more.\n\nThese parameters can also be set individually with --stat-width=<width>, --stat-name-width=<name-width> and --stat-count=<count>."
      },
      {
        "type": "long",
        "key": "compact-summary",
        "title": "--compact-summary",
        "description": "Output a condensed summary of extended header information such as file creations or deletions (\"new\" or \"gone\", optionally \"+l\" if it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding or removing executable bit respectively) in diffstat. The information is put between the filename part and the graph part. Implies --stat."
      },
      {
        "type": "long",
        "key": "numstat",
        "title": "--numstat",
        "description": "Similar to --stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two - instead of saying 0 0."
      },
      {
        "type": "long",
        "key": "shortstat",
        "title": "--shortstat",
        "description": "Output only the last line of the --stat format containing total number of modified files, as well as number of added and deleted lines."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X[<param1, param2, … >], --dirstat[=<param1, param2, … >]",
        "description": "Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config[1]). The following parameters are available:\n\nchanges\n\nCompute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.\n\nlines\n\nCompute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other --*stat options.\n\nfiles\n\nCompute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest --dirstat behavior, since it does not have to look at the file contents at all.\n\ncumulative\n\nCount changes in a child directory for the parent directory as well. Note that when using cumulative, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the noncumulative parameter.\n\n<limit>\n\nAn integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.\n\nExample: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "dirstat",
        "title": "-X[<param1, param2, … >], --dirstat[=<param1, param2, … >]",
        "description": "Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config[1]). The following parameters are available:\n\nchanges\n\nCompute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.\n\nlines\n\nCompute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other --*stat options.\n\nfiles\n\nCompute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest --dirstat behavior, since it does not have to look at the file contents at all.\n\ncumulative\n\nCount changes in a child directory for the parent directory as well. Note that when using cumulative, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the noncumulative parameter.\n\n<limit>\n\nAn integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.\n\nExample: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "cumulative",
        "title": "--cumulative",
        "description": "Synonym for --dirstat=cumulative"
      },
      {
        "type": "long",
        "key": "dirstat-by-file",
        "title": "--dirstat-by-file[=<param1, param2>… ]",
        "description": "Synonym for --dirstat=files,param1,param2…"
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary",
        "description": "Output a condensed summary of extended header information such as creations, renames and mode changes."
      },
      {
        "type": "long",
        "key": "no-renames",
        "title": "--no-renames",
        "description": "Turn off rename detection, even when the configuration file gives the default to do so."
      },
      {
        "type": "long",
        "key": "rename-empty",
        "title": "--[no-]rename-empty",
        "description": "Whether to use empty blobs as rename source."
      },
      {
        "type": "long",
        "key": "full-index",
        "title": "--full-index",
        "description": "Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output."
      },
      {
        "type": "long",
        "key": "binary",
        "title": "--binary",
        "description": "In addition to --full-index, output a binary diff that can be applied with git-apply."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. In diff-patch output format, --full-index takes higher precedence, i.e. if --full-index is specified, full blob names will be shown regardless of --abbrev. Non default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and create. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number m controls this aspect of the -B option (defaults to 60%). -B/70% specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).\n\nWhen used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number n controls this aspect of the -B option (defaults to 50%). -B20% specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file."
      },
      {
        "type": "long",
        "key": "break-rewrites",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and create. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number m controls this aspect of the -B option (defaults to 60%). -B/70% specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).\n\nWhen used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number n controls this aspect of the -B option (defaults to 50%). -B20% specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%."
      },
      {
        "type": "long",
        "key": "find-renames",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies-harder",
        "title": "--find-copies-harder",
        "description": "For performance reasons, by default, -C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one -C option has the same effect."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part of a delete/create pair."
      },
      {
        "type": "long",
        "key": "irreversible-delete",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part of a delete/create pair."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l<num>",
        "description": "The -M and -C options involve some preliminary steps that can detect subsets of renames/copies cheaply, followed by an exhaustive fallback portion that compares all remaining unpaired destinations to all relevant sources. (For renames, only remaining unpaired sources are relevant; for copies, all original sources are relevant.) For N sources and destinations, this exhaustive check is O(N^2). This option prevents the exhaustive portion of rename/copy detection from running if the number of source/destination files involved exceeds the specified number. Defaults to diff.renameLimit. Note that a value of 0 is treated as unlimited."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O<orderfile>",
        "description": "Control the order in which files appear in the output. This overrides the diff.orderFile configuration variable (see git-config[1]). To cancel diff.orderFile, use -O/dev/null.\n\nThe output order is determined by the order of glob patterns in <orderfile>. All files with pathnames that match the first pattern are output first, all files with pathnames that match the second pattern (but not the first) are output next, and so on. All files with pathnames that do not match any pattern are output last, as if there was an implicit match-all pattern at the end of the file. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order relative to each other is the normal order.\n\n<orderfile> is parsed as follows:\n\n * Blank lines are ignored, so they can be used as separators for readability.\n\n * Lines starting with a hash (\"#\") are ignored, so they can be used for comments. Add a backslash (\"\\\") to the beginning of the pattern if it starts with a hash.\n\n * Each other line contains a single pattern.\n\nPatterns have the same syntax and semantics as patterns used for fnmatch(3) without the FNM_PATHNAME flag, except a pathname also matches a pattern if removing any number of the final pathname components matches the pattern. For example, the pattern \"foo*bar\" matches \"fooasdfbar\" and \"foo/bar/baz/asdf\" but not \"foobarx\"."
      },
      {
        "type": "long",
        "key": "skip-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise."
      },
      {
        "type": "long",
        "key": "rotate-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise."
      },
      {
        "type": "long",
        "key": "relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative."
      },
      {
        "type": "long",
        "key": "no-relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "text",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "ignore-cr-at-eol",
        "title": "--ignore-cr-at-eol",
        "description": "Ignore carriage-return at the end of line when doing a comparison."
      },
      {
        "type": "long",
        "key": "ignore-space-at-eol",
        "title": "--ignore-space-at-eol",
        "description": "Ignore changes in whitespace at EOL."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none."
      },
      {
        "type": "long",
        "key": "ignore-all-space",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none."
      },
      {
        "type": "long",
        "key": "ignore-blank-lines",
        "title": "--ignore-blank-lines",
        "description": "Ignore changes whose lines are all blank."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>. This option may be specified more than once."
      },
      {
        "type": "long",
        "key": "ignore-matching-lines",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>. This option may be specified more than once."
      },
      {
        "type": "long",
        "key": "inter-hunk-context",
        "title": "--inter-hunk-context=<lines>",
        "description": "Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other. Defaults to diff.interHunkContext or 0 if the config option is unset."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "function-context",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "ext-diff",
        "title": "--ext-diff",
        "description": "Allow an external diff helper to be executed. If you set an external diff driver with gitattributes[5], you need to use this option with git-log[1] and friends."
      },
      {
        "type": "long",
        "key": "no-ext-diff",
        "title": "--no-ext-diff",
        "description": "Disallow external diff drivers."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes[5] for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff[1] and git-log[1], but not for git-format-patch[1] or diff plumbing commands."
      },
      {
        "type": "long",
        "key": "no-textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes[5] for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff[1] and git-log[1], but not for git-format-patch[1] or diff plumbing commands."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules[=<when>]",
        "description": "Ignore changes to submodules in the diff generation. <when> can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the ignore option in git-config[1] or gitmodules[5]. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using \"all\" hides all changes to submodules."
      },
      {
        "type": "long",
        "key": "src-prefix",
        "title": "--src-prefix=<prefix>",
        "description": "Show the given source prefix instead of \"a/\"."
      },
      {
        "type": "long",
        "key": "dst-prefix",
        "title": "--dst-prefix=<prefix>",
        "description": "Show the given destination prefix instead of \"b/\"."
      },
      {
        "type": "long",
        "key": "no-prefix",
        "title": "--no-prefix",
        "description": "Do not show any source or destination prefix."
      },
      {
        "type": "long",
        "key": "line-prefix",
        "title": "--line-prefix=<prefix>",
        "description": "Prepend an additional prefix to every line of output."
      },
      {
        "type": "long",
        "key": "ita-invisible-in-index",
        "title": "--ita-invisible-in-index",
        "description": "By default entries added by \"git add -N\" appear as an existing empty file in \"git diff\" and a new file in \"git diff --cached\". This option makes the entry appear as a new file in \"git diff\" and non-existent in \"git diff --cached\". This option could be reverted with --ita-visible-in-index. Both options are experimental and could be removed in future."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <dir>, --output-directory <dir>",
        "description": "Use <dir> to store the resulting files, instead of the current working directory."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --numbered",
        "description": "Name output in [PATCH n/m] format, even with a single patch."
      },
      {
        "type": "long",
        "key": "numbered",
        "title": "-n, --numbered",
        "description": "Name output in [PATCH n/m] format, even with a single patch."
      },
      {
        "type": "short",
        "key": "N",
        "title": "-N, --no-numbered",
        "description": "Name output in [PATCH] format."
      },
      {
        "type": "long",
        "key": "no-numbered",
        "title": "-N, --no-numbered",
        "description": "Name output in [PATCH] format."
      },
      {
        "type": "long",
        "key": "numbered-files",
        "title": "--numbered-files",
        "description": "Output file names will be a simple number sequence without the default first line of the commit appended."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep-subject",
        "description": "Do not strip/add [PATCH] from the first line of the commit log message."
      },
      {
        "type": "long",
        "key": "keep-subject",
        "title": "-k, --keep-subject",
        "description": "Do not strip/add [PATCH] from the first line of the commit log message."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer to the commit message, using the committer identity of yourself. See the signoff option in git-commit[1] for more information."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer to the commit message, using the committer identity of yourself. See the signoff option in git-commit[1] for more information."
      },
      {
        "type": "long",
        "key": "stdout",
        "title": "--stdout",
        "description": "Print all commits to the standard output in mbox format, instead of creating a file for each one."
      },
      {
        "type": "long",
        "key": "attach",
        "title": "--attach[=<boundary>]",
        "description": "Create multipart/mixed attachment, the first part of which is the commit message and the patch itself in the second part, with Content-Disposition: attachment."
      },
      {
        "type": "long",
        "key": "no-attach",
        "title": "--no-attach",
        "description": "Disable the creation of an attachment, overriding the configuration setting."
      },
      {
        "type": "long",
        "key": "inline",
        "title": "--inline[=<boundary>]",
        "description": "Create multipart/mixed attachment, the first part of which is the commit message and the patch itself in the second part, with Content-Disposition: inline."
      },
      {
        "type": "long",
        "key": "thread",
        "title": "--thread[=<style>], --no-thread",
        "description": "Controls addition of In-Reply-To and References headers to make the second and subsequent mails appear as replies to the first. Also controls generation of the Message-Id header to reference.\n\nThe optional <style> argument can be either shallow or deep. shallow threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the --in-reply-to, and the first patch mail, in this order. deep threading makes every mail a reply to the previous one.\n\nThe default is --no-thread, unless the format.thread configuration is set. If --thread is specified without a style, it defaults to the style specified by format.thread if any, or else shallow.\n\nBeware that the default for git send-email is to thread emails itself. If you want git format-patch to take care of threading, you will want to ensure that threading is disabled for git send-email."
      },
      {
        "type": "long",
        "key": "no-thread",
        "title": "--thread[=<style>], --no-thread",
        "description": "Controls addition of In-Reply-To and References headers to make the second and subsequent mails appear as replies to the first. Also controls generation of the Message-Id header to reference.\n\nThe optional <style> argument can be either shallow or deep. shallow threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the --in-reply-to, and the first patch mail, in this order. deep threading makes every mail a reply to the previous one.\n\nThe default is --no-thread, unless the format.thread configuration is set. If --thread is specified without a style, it defaults to the style specified by format.thread if any, or else shallow.\n\nBeware that the default for git send-email is to thread emails itself. If you want git format-patch to take care of threading, you will want to ensure that threading is disabled for git send-email."
      },
      {
        "type": "long",
        "key": "in-reply-to",
        "title": "--in-reply-to=<message id>",
        "description": "Make the first mail (or all the mails with --no-thread) appear as a reply to the given <message id>, which avoids breaking threads to provide a new patch series."
      },
      {
        "type": "long",
        "key": "ignore-if-in-upstream",
        "title": "--ignore-if-in-upstream",
        "description": "Do not include a patch that matches a commit in <until>..<since>. This will examine all patches reachable from <since> but not from <until> and compare them with the patches being generated, and any patch that matches is ignored."
      },
      {
        "type": "long",
        "key": "cover-from-description",
        "title": "--cover-from-description=<mode>",
        "description": "Controls which parts of the cover letter will be automatically populated using the branch’s description.\n\nIf <mode> is message or default, the cover letter subject will be populated with placeholder text. The body of the cover letter will be populated with the branch’s description. This is the default mode when no configuration nor command line option is specified.\n\nIf <mode> is subject, the first paragraph of the branch description will populate the cover letter subject. The remainder of the description will populate the body of the cover letter.\n\nIf <mode> is auto, if the first paragraph of the branch description is greater than 100 bytes, then the mode will be message, otherwise subject will be used.\n\nIf <mode> is none, both the cover letter subject and body will be populated with placeholder text."
      },
      {
        "type": "long",
        "key": "subject-prefix",
        "title": "--subject-prefix=<subject prefix>",
        "description": "Instead of the standard [PATCH] prefix in the subject line, instead use [<subject prefix>]. This allows for useful naming of a patch series, and can be combined with the --numbered option."
      },
      {
        "type": "long",
        "key": "filename-max-length",
        "title": "--filename-max-length=<n>",
        "description": "Instead of the standard 64 bytes, chomp the generated output filenames at around <n> bytes (too short a value will be silently raised to a reasonable length). Defaults to the value of the format.filenameMaxLength configuration variable, or 64 if unconfigured."
      },
      {
        "type": "long",
        "key": "rfc",
        "title": "--rfc",
        "description": "Alias for --subject-prefix=\"RFC PATCH\". RFC means \"Request For Comments\"; use this when sending an experimental patch for discussion rather than application."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v <n>, --reroll-count=<n>",
        "description": "Mark the series as the <n>-th iteration of the topic. The output filenames have v<n> prepended to them, and the subject prefix (\"PATCH\" by default, but configurable via the --subject-prefix option) has ` v<n>` appended to it. E.g. --reroll-count=4 may produce v4-0001-add-makefile.patch file that has \"Subject: [PATCH v4 1/20] Add makefile\" in it. <n> does not have to be an integer (e.g. \"--reroll-count=4.4\", or \"--reroll-count=4rev2\" are allowed), but the downside of using such a reroll-count is that the range-diff/interdiff with the previous version does not state exactly which version the new interation is compared against."
      },
      {
        "type": "long",
        "key": "reroll-count",
        "title": "-v <n>, --reroll-count=<n>",
        "description": "Mark the series as the <n>-th iteration of the topic. The output filenames have v<n> prepended to them, and the subject prefix (\"PATCH\" by default, but configurable via the --subject-prefix option) has ` v<n>` appended to it. E.g. --reroll-count=4 may produce v4-0001-add-makefile.patch file that has \"Subject: [PATCH v4 1/20] Add makefile\" in it. <n> does not have to be an integer (e.g. \"--reroll-count=4.4\", or \"--reroll-count=4rev2\" are allowed), but the downside of using such a reroll-count is that the range-diff/interdiff with the previous version does not state exactly which version the new interation is compared against."
      },
      {
        "type": "long",
        "key": "to",
        "title": "--to=<email>",
        "description": "Add a To: header to the email headers. This is in addition to any configured headers, and may be used multiple times. The negated form --no-to discards all To: headers added so far (from config or command line)."
      },
      {
        "type": "long",
        "key": "cc",
        "title": "--cc=<email>",
        "description": "Add a Cc: header to the email headers. This is in addition to any configured headers, and may be used multiple times. The negated form --no-cc discards all Cc: headers added so far (from config or command line)."
      },
      {
        "type": "long",
        "key": "from",
        "title": "--from, --from=<ident>",
        "description": "Use ident in the From: header of each commit email. If the author ident of the commit is not textually identical to the provided ident, place a From: header in the body of the message with the original author. If no ident is given, use the committer ident.\n\nNote that this option is only useful if you are actually sending the emails and want to identify yourself as the sender, but retain the original author (and git am will correctly pick up the in-body header). Note also that git send-email already handles this transformation for you, and this option should not be used if you are feeding the result to git send-email."
      },
      {
        "type": "long",
        "key": "add-header",
        "title": "--add-header=<header>",
        "description": "Add an arbitrary header to the email headers. This is in addition to any configured headers, and may be used multiple times. For example, --add-header=\"Organization: git-foo\". The negated form --no-add-header discards all (To:, Cc:, and custom) headers added so far from config or command line."
      },
      {
        "type": "long",
        "key": "cover-letter",
        "title": "--[no-]cover-letter",
        "description": "In addition to the patches, generate a cover letter file containing the branch description, shortlog and the overall diffstat. You can fill in a description in the file before sending it out."
      },
      {
        "type": "long",
        "key": "encode-email-headers",
        "title": "--encode-email-headers, --no-encode-email-headers",
        "description": "Encode email headers that have non-ASCII characters with \"Q-encoding\" (described in RFC 2047), instead of outputting the headers verbatim. Defaults to the value of the format.encodeEmailHeaders configuration variable."
      },
      {
        "type": "long",
        "key": "no-encode-email-headers",
        "title": "--encode-email-headers, --no-encode-email-headers",
        "description": "Encode email headers that have non-ASCII characters with \"Q-encoding\" (described in RFC 2047), instead of outputting the headers verbatim. Defaults to the value of the format.encodeEmailHeaders configuration variable."
      },
      {
        "type": "long",
        "key": "interdiff",
        "title": "--interdiff=<previous>",
        "description": "As a reviewer aid, insert an interdiff into the cover letter, or as commentary of the lone patch of a 1-patch series, showing the differences between the previous version of the patch series and the series currently being formatted. previous is a single revision naming the tip of the previous series which shares a common base with the series being formatted (for example git format-patch --cover-letter --interdiff=feature/v1 -3 feature/v2)."
      },
      {
        "type": "long",
        "key": "range-diff",
        "title": "--range-diff=<previous>",
        "description": "As a reviewer aid, insert a range-diff (see git-range-diff[1]) into the cover letter, or as commentary of the lone patch of a 1-patch series, showing the differences between the previous version of the patch series and the series currently being formatted. previous can be a single revision naming the tip of the previous series if it shares a common base with the series being formatted (for example git format-patch --cover-letter --range-diff=feature/v1 -3 feature/v2), or a revision range if the two versions of the series are disjoint (for example git format-patch --cover-letter --range-diff=feature/v1~3..feature/v1 -3 feature/v2).\n\nNote that diff options passed to the command affect how the primary product of format-patch is generated, and they are not passed to the underlying range-diff machinery used to generate the cover-letter material (this may change in the future)."
      },
      {
        "type": "long",
        "key": "creation-factor",
        "title": "--creation-factor=<percent>",
        "description": "Used with --range-diff, tweak the heuristic which matches up commits between the previous and current series of patches by adjusting the creation/deletion cost fudge factor. See git-range-diff[1]) for details."
      },
      {
        "type": "long",
        "key": "notes",
        "title": "--notes[=<ref>], --no-notes",
        "description": "Append the notes (see git-notes[1]) for the commit after the three-dash line.\n\nThe expected use case of this is to write supporting explanation for the commit that does not belong to the commit log message proper, and include it with the patch submission. While one can simply write these explanations after format-patch has run but before sending, keeping them as Git notes allows them to be maintained between versions of the patch series (but see the discussion of the notes.rewrite configuration options in git-notes[1] to use this workflow).\n\nThe default is --no-notes, unless the format.notes configuration is set."
      },
      {
        "type": "long",
        "key": "no-notes",
        "title": "--notes[=<ref>], --no-notes",
        "description": "Append the notes (see git-notes[1]) for the commit after the three-dash line.\n\nThe expected use case of this is to write supporting explanation for the commit that does not belong to the commit log message proper, and include it with the patch submission. While one can simply write these explanations after format-patch has run but before sending, keeping them as Git notes allows them to be maintained between versions of the patch series (but see the discussion of the notes.rewrite configuration options in git-notes[1] to use this workflow).\n\nThe default is --no-notes, unless the format.notes configuration is set."
      },
      {
        "type": "long",
        "key": "signature",
        "title": "--[no-]signature=<signature>",
        "description": "Add a signature to each message produced. Per RFC 3676 the signature is separated from the body by a line with '-- ' on it. If the signature option is omitted the signature defaults to the Git version number."
      },
      {
        "type": "long",
        "key": "signature-file",
        "title": "--signature-file=<file>",
        "description": "Works just like --signature except the signature is read from a file."
      },
      {
        "type": "long",
        "key": "suffix",
        "title": "--suffix=.<sfx>",
        "description": "Instead of using .patch as the suffix for generated filenames, use specified suffix. A common alternative is --suffix=.txt. Leaving this empty will remove the .patch suffix.\n\nNote that the leading character does not have to be a dot; for example, you can use --suffix=-patch to get 0001-description-of-my-change-patch."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Do not print the names of the generated files to standard output."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Do not print the names of the generated files to standard output."
      },
      {
        "type": "long",
        "key": "no-binary",
        "title": "--no-binary",
        "description": "Do not output contents of changes in binary files, instead display a notice that those files changed. Patches generated using this option cannot be applied properly, but they are still useful for code review."
      },
      {
        "type": "long",
        "key": "zero-commit",
        "title": "--zero-commit",
        "description": "Output an all-zero hash in each patch’s From header instead of the hash of the commit."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root",
        "description": "Treat the revision argument as a <revision range>, even if it is just a single commit (that would normally be treated as a <since>). Note that root commits included in the specified range are always formatted as creation patches, independently of this flag."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Show progress reports on stderr as patches are generated."
      }
    ]
  },
  {
    "name": "git gc",
    "options": [
      {
        "type": "long",
        "key": "aggressive",
        "title": "--aggressive",
        "description": "Usually git gc runs very quickly while providing good disk space utilization and performance. This option will cause git gc to more aggressively optimize the repository at the expense of taking much more time. The effects of this optimization are mostly persistent. See the \"AGGRESSIVE\" section below for details."
      },
      {
        "type": "long",
        "key": "auto",
        "title": "--auto",
        "description": "With this option, git gc checks whether any housekeeping is required; if not, it exits without performing any work.\n\nSee the gc.auto option in the \"CONFIGURATION\" section below for how this heuristic works.\n\nOnce housekeeping is triggered by exceeding the limits of configuration options such as gc.auto and gc.autoPackLimit, all other housekeeping tasks (e.g. rerere, working trees, reflog… ) will be performed as well."
      },
      {
        "type": "long",
        "key": "prune",
        "title": "--prune=<date>",
        "description": "Prune loose objects older than date (default is 2 weeks ago, overridable by the config variable gc.pruneExpire). --prune=now prunes loose objects regardless of their age and increases the risk of corruption if another process is writing to the repository concurrently; see \"NOTES\" below. --prune is on by default."
      },
      {
        "type": "long",
        "key": "no-prune",
        "title": "--no-prune",
        "description": "Do not prune any loose objects."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Suppress all progress reports."
      },
      {
        "type": "long",
        "key": "force",
        "title": "--force",
        "description": "Force git gc to run even if there may be another git gc instance running on this repository."
      },
      {
        "type": "long",
        "key": "keep-largest-pack",
        "title": "--keep-largest-pack",
        "description": "All packs except the largest pack and those marked with a .keep files are consolidated into a single pack. When this option is used, gc.bigPackThreshold is ignored."
      }
    ]
  },
  {
    "name": "git grep",
    "options": [
      {
        "type": "long",
        "key": "cached",
        "title": "--cached",
        "description": "Instead of searching tracked files in the working tree, search blobs registered in the index file."
      },
      {
        "type": "long",
        "key": "no-index",
        "title": "--no-index",
        "description": "Search files in the current directory that is not managed by Git."
      },
      {
        "type": "long",
        "key": "untracked",
        "title": "--untracked",
        "description": "In addition to searching in the tracked files in the working tree, search also in untracked files."
      },
      {
        "type": "long",
        "key": "no-exclude-standard",
        "title": "--no-exclude-standard",
        "description": "Also search in ignored files by not honoring the .gitignore mechanism. Only useful with --untracked."
      },
      {
        "type": "long",
        "key": "exclude-standard",
        "title": "--exclude-standard",
        "description": "Do not pay attention to ignored files specified via the .gitignore mechanism. Only useful when searching files in the current directory with --no-index."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules",
        "description": "Recursively search in each submodule that is active and checked out in the repository. When used in combination with the <tree> option the prefix of all submodule output will be the name of the parent project’s <tree> object. This option has no effect if --no-index is given."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --text",
        "description": "Process binary files as if they were text."
      },
      {
        "type": "long",
        "key": "text",
        "title": "-a, --text",
        "description": "Process binary files as if they were text."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv",
        "description": "Honor textconv filter settings."
      },
      {
        "type": "long",
        "key": "no-textconv",
        "title": "--no-textconv",
        "description": "Do not honor textconv filter settings. This is the default."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --ignore-case",
        "description": "Ignore case differences between the patterns and the files."
      },
      {
        "type": "long",
        "key": "ignore-case",
        "title": "-i, --ignore-case",
        "description": "Ignore case differences between the patterns and the files."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I",
        "description": "Don’t match the pattern in binary files."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r, --recursive",
        "description": "Same as --max-depth=-1; this is the default."
      },
      {
        "type": "long",
        "key": "recursive",
        "title": "-r, --recursive",
        "description": "Same as --max-depth=-1; this is the default."
      },
      {
        "type": "long",
        "key": "no-recursive",
        "title": "--no-recursive",
        "description": "Same as --max-depth=0."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --word-regexp",
        "description": "Match the pattern only at word boundary (either begin at the beginning of a line, or preceded by a non-word character; end at the end of a line or followed by a non-word character)."
      },
      {
        "type": "long",
        "key": "word-regexp",
        "title": "-w, --word-regexp",
        "description": "Match the pattern only at word boundary (either begin at the beginning of a line, or preceded by a non-word character; end at the end of a line or followed by a non-word character)."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --invert-match",
        "description": "Select non-matching lines."
      },
      {
        "type": "long",
        "key": "invert-match",
        "title": "-v, --invert-match",
        "description": "Select non-matching lines."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, -H",
        "description": "By default, the command shows the filename for each match. -h option is used to suppress this output. -H is there for completeness and does not do anything except it overrides -h given earlier on the command line."
      },
      {
        "type": "short",
        "key": "H",
        "title": "-h, -H",
        "description": "By default, the command shows the filename for each match. -h option is used to suppress this output. -H is there for completeness and does not do anything except it overrides -h given earlier on the command line."
      },
      {
        "type": "long",
        "key": "full-name",
        "title": "--full-name",
        "description": "When run from a subdirectory, the command usually outputs paths relative to the current directory. This option forces paths to be output relative to the project top directory."
      },
      {
        "type": "short",
        "key": "E",
        "title": "-E, --extended-regexp, -G, --basic-regexp",
        "description": "Use POSIX extended/basic regexp for patterns. Default is to use basic regexp."
      },
      {
        "type": "long",
        "key": "extended-regexp",
        "title": "-E, --extended-regexp, -G, --basic-regexp",
        "description": "Use POSIX extended/basic regexp for patterns. Default is to use basic regexp."
      },
      {
        "type": "short",
        "key": "G",
        "title": "-E, --extended-regexp, -G, --basic-regexp",
        "description": "Use POSIX extended/basic regexp for patterns. Default is to use basic regexp."
      },
      {
        "type": "long",
        "key": "basic-regexp",
        "title": "-E, --extended-regexp, -G, --basic-regexp",
        "description": "Use POSIX extended/basic regexp for patterns. Default is to use basic regexp."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P, --perl-regexp",
        "description": "Use Perl-compatible regular expressions for patterns.\n\nSupport for these types of regular expressions is an optional compile-time dependency. If Git wasn’t compiled with support for them providing this option will cause it to die."
      },
      {
        "type": "long",
        "key": "perl-regexp",
        "title": "-P, --perl-regexp",
        "description": "Use Perl-compatible regular expressions for patterns.\n\nSupport for these types of regular expressions is an optional compile-time dependency. If Git wasn’t compiled with support for them providing this option will cause it to die."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F, --fixed-strings",
        "description": "Use fixed strings for patterns (don’t interpret pattern as a regex)."
      },
      {
        "type": "long",
        "key": "fixed-strings",
        "title": "-F, --fixed-strings",
        "description": "Use fixed strings for patterns (don’t interpret pattern as a regex)."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --line-number",
        "description": "Prefix the line number to matching lines."
      },
      {
        "type": "long",
        "key": "line-number",
        "title": "-n, --line-number",
        "description": "Prefix the line number to matching lines."
      },
      {
        "type": "long",
        "key": "column",
        "title": "--column",
        "description": "Prefix the 1-indexed byte-offset of the first match from the start of the matching line."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --files-with-matches, --name-only, -L, --files-without-match",
        "description": "Instead of showing every matched line, show only the names of files that contain (or do not contain) matches. For better compatibility with git diff, --name-only is a synonym for --files-with-matches."
      },
      {
        "type": "long",
        "key": "files-with-matches",
        "title": "-l, --files-with-matches, --name-only, -L, --files-without-match",
        "description": "Instead of showing every matched line, show only the names of files that contain (or do not contain) matches. For better compatibility with git diff, --name-only is a synonym for --files-with-matches."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "-l, --files-with-matches, --name-only, -L, --files-without-match",
        "description": "Instead of showing every matched line, show only the names of files that contain (or do not contain) matches. For better compatibility with git diff, --name-only is a synonym for --files-with-matches."
      },
      {
        "type": "short",
        "key": "L",
        "title": "-l, --files-with-matches, --name-only, -L, --files-without-match",
        "description": "Instead of showing every matched line, show only the names of files that contain (or do not contain) matches. For better compatibility with git diff, --name-only is a synonym for --files-with-matches."
      },
      {
        "type": "long",
        "key": "files-without-match",
        "title": "-l, --files-with-matches, --name-only, -L, --files-without-match",
        "description": "Instead of showing every matched line, show only the names of files that contain (or do not contain) matches. For better compatibility with git diff, --name-only is a synonym for --files-with-matches."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O[<pager>], --open-files-in-pager[=<pager>]",
        "description": "Open the matching files in the pager (not the output of grep). If the pager happens to be \"less\" or \"vi\", and the user specified only one pattern, the first file is positioned at the first match automatically. The pager argument is optional; if specified, it must be stuck to the option without a space. If pager is unspecified, the default pager will be used (see core.pager in git-config[1])."
      },
      {
        "type": "long",
        "key": "open-files-in-pager",
        "title": "-O[<pager>], --open-files-in-pager[=<pager>]",
        "description": "Open the matching files in the pager (not the output of grep). If the pager happens to be \"less\" or \"vi\", and the user specified only one pattern, the first file is positioned at the first match automatically. The pager argument is optional; if specified, it must be stuck to the option without a space. If pager is unspecified, the default pager will be used (see core.pager in git-config[1])."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z, --null",
        "description": "Use \\0 as the delimiter for pathnames in the output, and print them verbatim. Without this option, pathnames with \"unusual\" characters are quoted as explained for the configuration variable core.quotePath (see git-config[1])."
      },
      {
        "type": "long",
        "key": "null",
        "title": "-z, --null",
        "description": "Use \\0 as the delimiter for pathnames in the output, and print them verbatim. Without this option, pathnames with \"unusual\" characters are quoted as explained for the configuration variable core.quotePath (see git-config[1])."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o, --only-matching",
        "description": "Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line."
      },
      {
        "type": "long",
        "key": "only-matching",
        "title": "-o, --only-matching",
        "description": "Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --count",
        "description": "Instead of showing every matched line, show the number of lines that match."
      },
      {
        "type": "long",
        "key": "count",
        "title": "-c, --count",
        "description": "Instead of showing every matched line, show the number of lines that match."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Show colored matches. The value must be always (the default), never, or auto."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off match highlighting, even when the configuration file gives the default to color output. Same as --color=never."
      },
      {
        "type": "long",
        "key": "break",
        "title": "--break",
        "description": "Print an empty line between matches from different files."
      },
      {
        "type": "long",
        "key": "heading",
        "title": "--heading",
        "description": "Show the filename above the matches in that file instead of at the start of each shown line."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --show-function",
        "description": "Show the preceding line that contains the function name of the match, unless the matching line is a function name itself. The name is determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "show-function",
        "title": "-p, --show-function",
        "description": "Show the preceding line that contains the function name of the match, unless the matching line is a function name itself. The name is determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-<num>, -C <num>, --context <num>",
        "description": "Show <num> leading and trailing lines, and place a line containing -- between contiguous groups of matches."
      },
      {
        "type": "short",
        "key": "A",
        "title": "-A <num>, --after-context <num>",
        "description": "Show <num> trailing lines, and place a line containing -- between contiguous groups of matches."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B <num>, --before-context <num>",
        "description": "Show <num> leading lines, and place a line containing -- between contiguous groups of matches."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --function-context",
        "description": "Show the surrounding text from the previous line containing a function name up to the one before the next function name, effectively showing the whole function in which the match was found. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "function-context",
        "title": "-W, --function-context",
        "description": "Show the surrounding text from the previous line containing a function name up to the one before the next function name, effectively showing the whole function in which the match was found. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f <file>",
        "description": "Read patterns from <file>, one per line.\n\nPassing the pattern via <file> allows for providing a search pattern containing a \\0.\n\nNot all pattern types support patterns containing \\0. Git will error out if a given pattern type can’t support such a pattern. The --perl-regexp pattern type when compiled against the PCRE v2 backend has the widest support for these types of patterns.\n\nIn versions of Git before 2.23.0 patterns containing \\0 would be silently considered fixed. This was never documented, there were also odd and undocumented interactions between e.g. non-ASCII patterns containing \\0 and --ignore-case.\n\nIn future versions we may learn to support patterns containing \\0 for more search backends, until then we’ll die when the pattern type in question doesn’t support them."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e",
        "description": "The next parameter is the pattern. This option has to be used for patterns starting with - and should be used in scripts passing user input to grep. Multiple patterns are combined by or."
      },
      {
        "type": "long",
        "key": "and",
        "title": "--and, --or, --not, ( … )",
        "description": "Specify how multiple patterns are combined using Boolean expressions. --or is the default operator. --and has higher precedence than --or. -e has to be used for all patterns."
      },
      {
        "type": "long",
        "key": "or",
        "title": "--and, --or, --not, ( … )",
        "description": "Specify how multiple patterns are combined using Boolean expressions. --or is the default operator. --and has higher precedence than --or. -e has to be used for all patterns."
      },
      {
        "type": "long",
        "key": "not",
        "title": "--and, --or, --not, ( … )",
        "description": "Specify how multiple patterns are combined using Boolean expressions. --or is the default operator. --and has higher precedence than --or. -e has to be used for all patterns."
      },
      {
        "type": "long",
        "key": "all-match",
        "title": "--all-match",
        "description": "When giving multiple pattern expressions combined with --or, this flag is specified to limit the match to files that have lines to match all of them."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Do not output matched lines; instead, exit with status 0 when there is a match and with non-zero status when there isn’t."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Do not output matched lines; instead, exit with status 0 when there is a match and with non-zero status when there isn’t."
      }
    ]
  },
  {
    "name": "git gui",
    "options": []
  },
  {
    "name": "git init",
    "options": [
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Only print error and warning messages; all other output will be suppressed."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Only print error and warning messages; all other output will be suppressed."
      },
      {
        "type": "long",
        "key": "bare",
        "title": "--bare",
        "description": "Create a bare repository. If GIT_DIR environment is not set, it is set to the current working directory."
      },
      {
        "type": "long",
        "key": "object-format",
        "title": "--object-format=<format>",
        "description": "Specify the given object format (hash algorithm) for the repository. The valid values are sha1 and (if enabled) sha256. sha1 is the default.\n\nTHIS OPTION IS EXPERIMENTAL! SHA-256 support is experimental and still in an early stage. A SHA-256 repository will in general not be able to share work with \"regular\" SHA-1 repositories. It should be assumed that, e.g., Git internal file formats in relation to SHA-256 repositories may change in backwards-incompatible ways. Only use --object-format=sha256 for testing purposes."
      },
      {
        "type": "long",
        "key": "template",
        "title": "--template=<template_directory>",
        "description": "Specify the directory from which templates will be used. (See the \"TEMPLATE DIRECTORY\" section below.)"
      },
      {
        "type": "long",
        "key": "separate-git-dir",
        "title": "--separate-git-dir=<git dir>",
        "description": "Instead of initializing the repository as a directory to either $GIT_DIR or ./.git/, create a text file there containing the path to the actual repository. This file acts as filesystem-agnostic Git symbolic link to the repository.\n\nIf this is reinitialization, the repository will be moved to the specified path."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b <branch-name>, --initial-branch=<branch-name>",
        "description": "Use the specified name for the initial branch in the newly created repository. If not specified, fall back to the default name (currently master, but this is subject to change in the future; the name can be customized via the init.defaultBranch configuration variable)."
      },
      {
        "type": "long",
        "key": "initial-branch",
        "title": "-b <branch-name>, --initial-branch=<branch-name>",
        "description": "Use the specified name for the initial branch in the newly created repository. If not specified, fall back to the default name (currently master, but this is subject to change in the future; the name can be customized via the init.defaultBranch configuration variable)."
      },
      {
        "type": "long",
        "key": "shared",
        "title": "--shared[=(false|true|umask|group|all|world|everybody|0xxx)]",
        "description": "Specify that the Git repository is to be shared amongst several users. This allows users belonging to the same group to push into that repository. When specified, the config variable \"core.sharedRepository\" is set so that files and directories under $GIT_DIR are created with the requested permissions. When not specified, Git will use permissions reported by umask(2).\n\nThe option can have the following values, defaulting to group if no value is given:\n\numask (or false)\n\nUse permissions reported by umask(2). The default, when --shared is not specified.\n\ngroup (or true)\n\nMake the repository group-writable, (and g+sx, since the git group may be not the primary group of all users). This is used to loosen the permissions of an otherwise safe umask(2) value. Note that the umask still applies to the other permission bits (e.g. if umask is 0022, using group will not remove read privileges from other (non-group) users). See 0xxx for how to exactly specify the repository permissions.\n\nall (or world or everybody)\n\nSame as group, but make the repository readable by all users.\n\n0xxx\n\n0xxx is an octal number and each file will have mode 0xxx. 0xxx will override users' umask(2) value (and not only loosen permissions as group and all does). 0640 will create a repository which is group-readable, but not group-writable or accessible to others. 0660 will create a repo that is readable and writable to the current user and group, but inaccessible to others."
      }
    ]
  },
  {
    "name": "git log",
    "options": [
      {
        "type": "long",
        "key": "follow",
        "title": "--follow",
        "description": "Continue listing the history of a file beyond renames (works only for a single file)."
      },
      {
        "type": "long",
        "key": "no-decorate",
        "title": "--no-decorate, --decorate[=short|full|auto|no]",
        "description": "Print out the ref names of any commits that are shown. If short is specified, the ref name prefixes refs/heads/, refs/tags/ and refs/remotes/ will not be printed. If full is specified, the full ref name (including prefix) will be printed. If auto is specified, then if the output is going to a terminal, the ref names are shown as if short were given, otherwise no ref names are shown. The option --decorate is short-hand for --decorate=short. Default to configuration value of log.decorate if configured, otherwise, auto."
      },
      {
        "type": "long",
        "key": "decorate",
        "title": "--no-decorate, --decorate[=short|full|auto|no]",
        "description": "Print out the ref names of any commits that are shown. If short is specified, the ref name prefixes refs/heads/, refs/tags/ and refs/remotes/ will not be printed. If full is specified, the full ref name (including prefix) will be printed. If auto is specified, then if the output is going to a terminal, the ref names are shown as if short were given, otherwise no ref names are shown. The option --decorate is short-hand for --decorate=short. Default to configuration value of log.decorate if configured, otherwise, auto."
      },
      {
        "type": "long",
        "key": "decorate-refs",
        "title": "--decorate-refs=<pattern>, --decorate-refs-exclude=<pattern>",
        "description": "If no --decorate-refs is given, pretend as if all refs were included. For each candidate, do not use it for decoration if it matches any patterns given to --decorate-refs-exclude or if it doesn’t match any of the patterns given to --decorate-refs. The log.excludeDecoration config option allows excluding refs from the decorations, but an explicit --decorate-refs pattern will override a match in log.excludeDecoration."
      },
      {
        "type": "long",
        "key": "decorate-refs-exclude",
        "title": "--decorate-refs=<pattern>, --decorate-refs-exclude=<pattern>",
        "description": "If no --decorate-refs is given, pretend as if all refs were included. For each candidate, do not use it for decoration if it matches any patterns given to --decorate-refs-exclude or if it doesn’t match any of the patterns given to --decorate-refs. The log.excludeDecoration config option allows excluding refs from the decorations, but an explicit --decorate-refs pattern will override a match in log.excludeDecoration."
      },
      {
        "type": "long",
        "key": "source",
        "title": "--source",
        "description": "Print out the ref name given on the command line by which each commit was reached."
      },
      {
        "type": "long",
        "key": "mailmap",
        "title": "--[no-]mailmap, --[no-]use-mailmap",
        "description": "Use mailmap file to map author and committer names and email addresses to canonical real names and email addresses. See git-shortlog[1]."
      },
      {
        "type": "long",
        "key": "use-mailmap",
        "title": "--[no-]mailmap, --[no-]use-mailmap",
        "description": "Use mailmap file to map author and committer names and email addresses to canonical real names and email addresses. See git-shortlog[1]."
      },
      {
        "type": "long",
        "key": "full-diff",
        "title": "--full-diff",
        "description": "Without this flag, git log -p <path>... shows commits that touch the specified paths, and diffs about the same specified paths. With this, the full diff is shown for commits that touch the specified paths; this means that \"<path>… \" limits only commits, and doesn’t limit diff for those commits.\n\nNote that this affects all diff-based output types, e.g. those produced by --stat, etc."
      },
      {
        "type": "long",
        "key": "log-size",
        "title": "--log-size",
        "description": "Include a line “log size <number>” in the output for each commit, where <number> is the length of that commit’s message in bytes. Intended to speed up tools that read log messages from git log output by allowing them to allocate space in advance."
      },
      {
        "type": "short",
        "key": "L",
        "title": "-L<start>, <end>:<file>, -L:<funcname>:<file>",
        "description": "Trace the evolution of the line range given by <start>,<end>, or by the function name regex <funcname>, within the <file>. You may not give any pathspec limiters. This is currently limited to a walk starting from a single revision, i.e., you may only give zero or one positive revision arguments, and <start> and <end> (or <funcname>) must exist in the starting revision. You can specify this option more than once. Implies --patch. Patch output can be suppressed using --no-patch, but other diff formats (namely --raw, --numstat, --shortstat, --dirstat, --summary, --name-only, --name-status, --check) are not currently implemented.\n\n<start> and <end> can take one of these forms:\n\n * number\n   \n   If <start> or <end> is a number, it specifies an absolute line number (lines count from 1).\n\n * /regex/\n   \n   This form will use the first line matching the given POSIX regex. If <start> is a regex, it will search from the end of the previous -L range, if any, otherwise from the start of file. If <start> is ^/regex/, it will search from the start of file. If <end> is a regex, it will search starting at the line given by <start>.\n\n * +offset or -offset\n   \n   This is only valid for <end> and will specify a number of lines before or after the line given by <start>.\n\nIf :<funcname> is given in place of <start> and <end>, it is a regular expression that denotes the range from the first funcname line that matches <funcname>, up to the next funcname line. :<funcname> searches from the end of the previous -L range, if any, otherwise from the start of file. ^:<funcname> searches from the start of file. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-<number>, -n <number>, --max-count=<number>",
        "description": "Limit the number of commits to output."
      },
      {
        "type": "long",
        "key": "max-count",
        "title": "-<number>, -n <number>, --max-count=<number>",
        "description": "Limit the number of commits to output."
      },
      {
        "type": "long",
        "key": "skip",
        "title": "--skip=<number>",
        "description": "Skip number commits before starting to show the commit output."
      },
      {
        "type": "long",
        "key": "since",
        "title": "--since=<date>, --after=<date>",
        "description": "Show commits more recent than a specific date."
      },
      {
        "type": "long",
        "key": "after",
        "title": "--since=<date>, --after=<date>",
        "description": "Show commits more recent than a specific date."
      },
      {
        "type": "long",
        "key": "until",
        "title": "--until=<date>, --before=<date>",
        "description": "Show commits older than a specific date."
      },
      {
        "type": "long",
        "key": "before",
        "title": "--until=<date>, --before=<date>",
        "description": "Show commits older than a specific date."
      },
      {
        "type": "long",
        "key": "author",
        "title": "--author=<pattern>, --committer=<pattern>",
        "description": "Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression). With more than one --author=<pattern>, commits whose author matches any of the given patterns are chosen (similarly for multiple --committer=<pattern>)."
      },
      {
        "type": "long",
        "key": "committer",
        "title": "--author=<pattern>, --committer=<pattern>",
        "description": "Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression). With more than one --author=<pattern>, commits whose author matches any of the given patterns are chosen (similarly for multiple --committer=<pattern>)."
      },
      {
        "type": "long",
        "key": "grep-reflog",
        "title": "--grep-reflog=<pattern>",
        "description": "Limit the commits output to ones with reflog entries that match the specified pattern (regular expression). With more than one --grep-reflog, commits whose reflog message matches any of the given patterns are chosen. It is an error to use this option unless --walk-reflogs is in use."
      },
      {
        "type": "long",
        "key": "grep",
        "title": "--grep=<pattern>",
        "description": "Limit the commits output to ones with log message that matches the specified pattern (regular expression). With more than one --grep=<pattern>, commits whose message matches any of the given patterns are chosen (but see --all-match).\n\nWhen --notes is in effect, the message from the notes is matched as if it were part of the log message."
      },
      {
        "type": "long",
        "key": "all-match",
        "title": "--all-match",
        "description": "Limit the commits output to ones that match all given --grep, instead of ones that match at least one."
      },
      {
        "type": "long",
        "key": "invert-grep",
        "title": "--invert-grep",
        "description": "Limit the commits output to ones with log message that do not match the pattern specified with --grep=<pattern>."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --regexp-ignore-case",
        "description": "Match the regular expression limiting patterns without regard to letter case."
      },
      {
        "type": "long",
        "key": "regexp-ignore-case",
        "title": "-i, --regexp-ignore-case",
        "description": "Match the regular expression limiting patterns without regard to letter case."
      },
      {
        "type": "long",
        "key": "basic-regexp",
        "title": "--basic-regexp",
        "description": "Consider the limiting patterns to be basic regular expressions; this is the default."
      },
      {
        "type": "short",
        "key": "E",
        "title": "-E, --extended-regexp",
        "description": "Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions."
      },
      {
        "type": "long",
        "key": "extended-regexp",
        "title": "-E, --extended-regexp",
        "description": "Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F, --fixed-strings",
        "description": "Consider the limiting patterns to be fixed strings (don’t interpret pattern as a regular expression)."
      },
      {
        "type": "long",
        "key": "fixed-strings",
        "title": "-F, --fixed-strings",
        "description": "Consider the limiting patterns to be fixed strings (don’t interpret pattern as a regular expression)."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P, --perl-regexp",
        "description": "Consider the limiting patterns to be Perl-compatible regular expressions.\n\nSupport for these types of regular expressions is an optional compile-time dependency. If Git wasn’t compiled with support for them providing this option will cause it to die."
      },
      {
        "type": "long",
        "key": "perl-regexp",
        "title": "-P, --perl-regexp",
        "description": "Consider the limiting patterns to be Perl-compatible regular expressions.\n\nSupport for these types of regular expressions is an optional compile-time dependency. If Git wasn’t compiled with support for them providing this option will cause it to die."
      },
      {
        "type": "long",
        "key": "remove-empty",
        "title": "--remove-empty",
        "description": "Stop when a given path disappears from the tree."
      },
      {
        "type": "long",
        "key": "merges",
        "title": "--merges",
        "description": "Print only merge commits. This is exactly the same as --min-parents=2."
      },
      {
        "type": "long",
        "key": "no-merges",
        "title": "--no-merges",
        "description": "Do not print commits with more than one parent. This is exactly the same as --max-parents=1."
      },
      {
        "type": "long",
        "key": "min-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more parents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "max-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more parents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "no-min-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more parents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "no-max-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more parents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge commit. This option can give a better overview when viewing the evolution of a particular topic branch, because merges into a topic branch tend to be only about adjusting to updated upstream from time to time, and this option allows you to ignore the individual commits brought in to your history by such a merge.\n\nThis option also changes default diff format for merge commits to first-parent, see --diff-merges=first-parent for details."
      },
      {
        "type": "long",
        "key": "not",
        "title": "--not",
        "description": "Reverses the meaning of the ^ prefix (or lack thereof) for all following revision specifiers, up to the next --not."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Pretend as if all the refs in refs/, along with HEAD, are listed on the command line as <commit>."
      },
      {
        "type": "long",
        "key": "branches",
        "title": "--branches[=<pattern>]",
        "description": "Pretend as if all the refs in refs/heads are listed on the command line as <commit>. If <pattern> is given, limit branches to ones matching given shell glob. If pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--tags[=<pattern>]",
        "description": "Pretend as if all the refs in refs/tags are listed on the command line as <commit>. If <pattern> is given, limit tags to ones matching given shell glob. If pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "remotes",
        "title": "--remotes[=<pattern>]",
        "description": "Pretend as if all the refs in refs/remotes are listed on the command line as <commit>. If <pattern> is given, limit remote-tracking branches to ones matching given shell glob. If pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "glob",
        "title": "--glob=<glob-pattern>",
        "description": "Pretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit>. Leading refs/, is automatically prepended if missing. If pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude=<glob-pattern>",
        "description": "Do not include refs matching <glob-pattern> that the next --all, --branches, --tags, --remotes, or --glob would otherwise consider. Repetitions of this option accumulate exclusion patterns up to the next --all, --branches, --tags, --remotes, or --glob option (other options or arguments do not clear accumulated patterns).\n\nThe patterns given should not begin with refs/heads, refs/tags, or refs/remotes when applied to --branches, --tags, or --remotes, respectively, and they must begin with refs/ when applied to --glob or --all. If a trailing /* is intended, it must be given explicitly."
      },
      {
        "type": "long",
        "key": "reflog",
        "title": "--reflog",
        "description": "Pretend as if all objects mentioned by reflogs are listed on the command line as <commit>."
      },
      {
        "type": "long",
        "key": "alternate-refs",
        "title": "--alternate-refs",
        "description": "Pretend as if all objects mentioned as ref tips of alternate repositories were listed on the command line. An alternate repository is any repository whose object directory is specified in objects/info/alternates. The set of included objects may be modified by core.alternateRefsCommand, etc. See git-config[1]."
      },
      {
        "type": "long",
        "key": "single-worktree",
        "title": "--single-worktree",
        "description": "By default, all working trees will be examined by the following options when there are more than one (see git-worktree[1]): --all, --reflog and --indexed-objects. This option forces them to examine the current working tree only."
      },
      {
        "type": "long",
        "key": "ignore-missing",
        "title": "--ignore-missing",
        "description": "Upon seeing an invalid object name in the input, pretend as if the bad input was not given."
      },
      {
        "type": "long",
        "key": "bisect",
        "title": "--bisect",
        "description": "Pretend as if the bad bisection ref refs/bisect/bad was listed and as if it was followed by --not and the good bisection refs refs/bisect/good-* on the command line."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "In addition to the <commit> listed on the command line, read them from the standard input. If a -- separator is seen, stop reading commits and start reading paths to limit the result."
      },
      {
        "type": "long",
        "key": "cherry-mark",
        "title": "--cherry-mark",
        "description": "Like --cherry-pick (see below) but mark equivalent commits with = rather than omitting them, and inequivalent ones with +."
      },
      {
        "type": "long",
        "key": "cherry-pick",
        "title": "--cherry-pick",
        "description": "Omit any commit that introduces the same change as another commit on the “other side” when the set of commits are limited with symmetric difference.\n\nFor example, if you have two branches, A and B, a usual way to list all commits on only one side of them is with --left-right (see the example below in the description of the --left-right option). However, it shows the commits that were cherry-picked from the other branch (for example, “3rd on b” may be cherry-picked from branch A). With this option, such pairs of commits are excluded from the output."
      },
      {
        "type": "long",
        "key": "left-only",
        "title": "--left-only, --right-only",
        "description": "List only commits on the respective side of a symmetric difference, i.e. only those which would be marked < resp. > by --left-right.\n\nFor example, --cherry-pick --right-only A...B omits those commits from B which are in A or are patch-equivalent to a commit in A. In other words, this lists the + commits from git cherry A B. More precisely, --cherry-pick --right-only --no-merges gives the exact list."
      },
      {
        "type": "long",
        "key": "right-only",
        "title": "--left-only, --right-only",
        "description": "List only commits on the respective side of a symmetric difference, i.e. only those which would be marked < resp. > by --left-right.\n\nFor example, --cherry-pick --right-only A...B omits those commits from B which are in A or are patch-equivalent to a commit in A. In other words, this lists the + commits from git cherry A B. More precisely, --cherry-pick --right-only --no-merges gives the exact list."
      },
      {
        "type": "long",
        "key": "cherry",
        "title": "--cherry",
        "description": "A synonym for --right-only --cherry-mark --no-merges; useful to limit the output to the commits on our side and mark those that have been applied to the other side of a forked history with git log --cherry upstream...mybranch, similar to git cherry upstream mybranch."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --walk-reflogs",
        "description": "Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones. When this option is used you cannot specify commits to exclude (that is, ^commit, commit1..commit2, and commit1...commit2 notations cannot be used).\n\nWith --pretty format other than oneline and reference (for obvious reasons), this causes the output to have two extra lines of information taken from the reflog. The reflog designator in the output may be shown as ref@{Nth} (where Nth is the reverse-chronological index in the reflog) or as ref@{timestamp} (with the timestamp for that entry), depending on a few rules:\n\n 1. If the starting point is specified as ref@{Nth}, show the index format.\n\n 2. If the starting point was specified as ref@{now}, show the timestamp format.\n\n 3. If neither was used, but --date was given on the command line, show the timestamp in the format requested by --date.\n\n 4. Otherwise, show the index format.\n\nUnder --pretty=oneline, the commit message is prefixed with this information on the same line. This option cannot be combined with --reverse. See also git-reflog[1].\n\nUnder --pretty=reference, this information will not be shown at all."
      },
      {
        "type": "long",
        "key": "walk-reflogs",
        "title": "-g, --walk-reflogs",
        "description": "Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones. When this option is used you cannot specify commits to exclude (that is, ^commit, commit1..commit2, and commit1...commit2 notations cannot be used).\n\nWith --pretty format other than oneline and reference (for obvious reasons), this causes the output to have two extra lines of information taken from the reflog. The reflog designator in the output may be shown as ref@{Nth} (where Nth is the reverse-chronological index in the reflog) or as ref@{timestamp} (with the timestamp for that entry), depending on a few rules:\n\n 1. If the starting point is specified as ref@{Nth}, show the index format.\n\n 2. If the starting point was specified as ref@{now}, show the timestamp format.\n\n 3. If neither was used, but --date was given on the command line, show the timestamp in the format requested by --date.\n\n 4. Otherwise, show the index format.\n\nUnder --pretty=oneline, the commit message is prefixed with this information on the same line. This option cannot be combined with --reverse. See also git-reflog[1].\n\nUnder --pretty=reference, this information will not be shown at all."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "--merge",
        "description": "After a failed merge, show refs that touch files having a conflict and don’t exist on all heads to merge."
      },
      {
        "type": "long",
        "key": "boundary",
        "title": "--boundary",
        "description": "Output excluded boundary commits. Boundary commits are prefixed with -."
      },
      {
        "type": "long",
        "key": "simplify-by-decoration",
        "title": "--simplify-by-decoration",
        "description": "Commits that are referred by some branch or tag are selected."
      },
      {
        "type": "long",
        "key": "show-pulls",
        "title": "--show-pulls",
        "description": "Include all commits from the default mode, but also any merge commits that are not TREESAME to the first parent but are TREESAME to a later parent. This mode is helpful for showing the merge commits that \"first introduced\" a change to a branch."
      },
      {
        "type": "long",
        "key": "full-history",
        "title": "--full-history",
        "description": "Same as the default mode, but does not prune some history."
      },
      {
        "type": "long",
        "key": "dense",
        "title": "--dense",
        "description": "Only the selected commits are shown, plus some to have a meaningful history."
      },
      {
        "type": "long",
        "key": "sparse",
        "title": "--sparse",
        "description": "All commits in the simplified history are shown."
      },
      {
        "type": "long",
        "key": "simplify-merges",
        "title": "--simplify-merges",
        "description": "Additional option to --full-history to remove some needless merges from the resulting history, as there are no selected commits contributing to this merge."
      },
      {
        "type": "long",
        "key": "ancestry-path",
        "title": "--ancestry-path",
        "description": "When given a range of commits to display (e.g. commit1..commit2 or commit2 ^commit1), only display commits that exist directly on the ancestry chain between the commit1 and commit2, i.e. commits that are both descendants of commit1, and ancestors of commit2."
      },
      {
        "type": "long",
        "key": "date-order",
        "title": "--date-order",
        "description": "Show no parents before all of its children are shown, but otherwise show commits in the commit timestamp order."
      },
      {
        "type": "long",
        "key": "author-date-order",
        "title": "--author-date-order",
        "description": "Show no parents before all of its children are shown, but otherwise show commits in the author timestamp order."
      },
      {
        "type": "long",
        "key": "topo-order",
        "title": "--topo-order",
        "description": "Show no parents before all of its children are shown, and avoid showing commits on multiple lines of history intermixed.\n\nFor example, in a commit history like this:\n\n    ---1----2----4----7\n\t\\\t       \\\n\t 3----5----6----8---\n\nwhere the numbers denote the order of commit timestamps, git rev-list and friends with --date-order show the commits in the timestamp order: 8 7 6 5 4 3 2 1.\n\nWith --topo-order, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5 3 1); some older commits are shown before newer ones in order to avoid showing the commits from two parallel development track mixed together."
      },
      {
        "type": "long",
        "key": "reverse",
        "title": "--reverse",
        "description": "Output the commits chosen to be shown (see Commit Limiting section above) in reverse order. Cannot be combined with --walk-reflogs."
      },
      {
        "type": "long",
        "key": "no-walk",
        "title": "--no-walk[=(sorted|unsorted)]",
        "description": "Only show the given commits, but do not traverse their ancestors. This has no effect if a range is specified. If the argument unsorted is given, the commits are shown in the order they were given on the command line. Otherwise (if sorted or no argument was given), the commits are shown in reverse chronological order by commit time. Cannot be combined with --graph."
      },
      {
        "type": "long",
        "key": "do-walk",
        "title": "--do-walk",
        "description": "Overrides a previous --no-walk."
      },
      {
        "type": "long",
        "key": "pretty",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format, where <format> can be one of oneline, short, medium, full, fuller, reference, email, raw, format:<string> and tformat:<string>. When <format> is none of the above, and has %placeholder in it, it acts as if --pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each format. When =<format> part is omitted, it defaults to medium.\n\nNote: you can specify the default pretty format in the repository configuration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format, where <format> can be one of oneline, short, medium, full, fuller, reference, email, raw, format:<string> and tformat:<string>. When <format> is none of the above, and has %placeholder in it, it acts as if --pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each format. When =<format> part is omitted, it defaults to medium.\n\nNote: you can specify the default pretty format in the repository configuration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "abbrev-commit",
        "title": "--abbrev-commit",
        "description": "Instead of showing the full 40-byte hexadecimal commit object name, show a prefix that names the object uniquely. \"--abbrev=<n>\" (which also modifies diff output, if it is displayed) option can be used to specify the minimum length of the prefix.\n\nThis should make \"--pretty=oneline\" a whole lot more readable for people using 80-column terminals."
      },
      {
        "type": "long",
        "key": "no-abbrev-commit",
        "title": "--no-abbrev-commit",
        "description": "Show the full 40-byte hexadecimal commit object name. This negates --abbrev-commit, either explicit or implied by other options such as \"--oneline\". It also overrides the log.abbrevCommit variable."
      },
      {
        "type": "long",
        "key": "oneline",
        "title": "--oneline",
        "description": "This is a shorthand for \"--pretty=oneline --abbrev-commit\" used together."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "Commit objects record the character encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in X and we are outputting in X, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output. Likewise, if iconv(3) fails to convert the commit, we will output the original object verbatim, along with a warning."
      },
      {
        "type": "long",
        "key": "expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <n>) in the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8, and --no-expand-tabs is a short-hand for --expand-tabs=0, which disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. medium, which is the default, full, and fuller)."
      },
      {
        "type": "long",
        "key": "no-expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <n>) in the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8, and --no-expand-tabs is a short-hand for --expand-tabs=0, which disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. medium, which is the default, full, and fuller)."
      },
      {
        "type": "long",
        "key": "notes",
        "title": "--notes[=<ref>]",
        "description": "Show the notes (see git-notes[1]) that annotate the commit, when showing the commit log message. This is the default for git log, git show and git whatchanged commands when there is no --pretty, --format, or --oneline option given on the command line.\n\nBy default, the notes shown are from the notes refs listed in the core.notesRef and notes.displayRef variables (or corresponding environment overrides). See git-config[1] for more details.\n\nWith an optional <ref> argument, use the ref to find the notes to display. The ref can specify the full refname when it begins with refs/notes/; when it begins with notes/, refs/ and otherwise refs/notes/ is prefixed to form a full name of the ref.\n\nMultiple --notes options can be combined to control which notes are being displayed. Examples: \"--notes=foo\" will show only notes from \"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from \"refs/notes/foo\" and from the default notes ref(s)."
      },
      {
        "type": "long",
        "key": "no-notes",
        "title": "--no-notes",
        "description": "Do not show notes. This negates the above --notes option, by resetting the list of notes refs from which notes are shown. Options are parsed in the order given on the command line, so e.g. \"--notes --notes=foo --no-notes --notes=bar\" will only show notes from \"refs/notes/bar\"."
      },
      {
        "type": "long",
        "key": "show-notes",
        "title": "--show-notes[=<ref>], --[no-]standard-notes",
        "description": "These options are deprecated. Use the above --notes/--no-notes options instead."
      },
      {
        "type": "long",
        "key": "standard-notes",
        "title": "--show-notes[=<ref>], --[no-]standard-notes",
        "description": "These options are deprecated. Use the above --notes/--no-notes options instead."
      },
      {
        "type": "long",
        "key": "show-signature",
        "title": "--show-signature",
        "description": "Check the validity of a signed commit object by passing the signature to gpg --verify and show the output."
      },
      {
        "type": "long",
        "key": "relative-date",
        "title": "--relative-date",
        "description": "Synonym for --date=relative."
      },
      {
        "type": "long",
        "key": "date",
        "title": "--date=<format>",
        "description": "Only takes effect for dates shown in human-readable format, such as when using --pretty. log.date config variable sets a default value for the log command’s --date option. By default, dates are shown in the original time zone (either committer’s or author’s). If -local is appended to the format (e.g., iso-local), the user’s local time zone is used instead.\n\n--date=relative shows dates relative to the current time, e.g. “2 hours ago”. The -local option has no effect for --date=relative.\n\n--date=local is an alias for --date=default-local.\n\n--date=iso (or --date=iso8601) shows timestamps in a ISO 8601-like format. The differences to the strict ISO 8601 format are:\n\n * a space instead of the T date/time delimiter\n\n * a space between time and time zone\n\n * no colon between hours and minutes of the time zone\n\n--date=iso-strict (or --date=iso8601-strict) shows timestamps in strict ISO 8601 format.\n\n--date=rfc (or --date=rfc2822) shows timestamps in RFC 2822 format, often found in email messages.\n\n--date=short shows only the date, but not the time, in YYYY-MM-DD format.\n\n--date=raw shows the date as seconds since the epoch (1970-01-01 00:00:00 UTC), followed by a space, and then the timezone as an offset from UTC (a + or - with four digits; the first two are hours, and the second two are minutes). I.e., as if the timestamp were formatted with strftime(\"%s %z\")). Note that the -local option does not affect the seconds-since-epoch value (which is always measured in UTC), but does switch the accompanying timezone value.\n\n--date=human shows the timezone if the timezone does not match the current time-zone, and doesn’t print the whole date if that matches (ie skip printing year for dates that are \"this year\", but also skip the whole date itself if it’s in the last few days and we can just say what weekday it was). For older dates the hour and minute is also omitted.\n\n--date=unix shows the date as a Unix epoch timestamp (seconds since 1970). As with --raw, this is always in UTC and therefore -local has no effect.\n\n--date=format:... feeds the format ... to your system strftime, except for %z and %Z, which are handled internally. Use --date=format:%c to show the date in your system locale’s preferred format. See the strftime manual for a complete list of format placeholders. When using -local, the correct syntax is --date=format-local:....\n\n--date=default is the default format, and is similar to --date=rfc2822, with a few exceptions:\n\n * there is no comma after the day-of-week\n\n * the time zone is omitted when the local time zone is used"
      },
      {
        "type": "long",
        "key": "parents",
        "title": "--parents",
        "description": "Print also the parents of the commit (in the form \"commit parent… \"). Also enables parent rewriting, see History Simplification above."
      },
      {
        "type": "long",
        "key": "children",
        "title": "--children",
        "description": "Print also the children of the commit (in the form \"commit child… \"). Also enables parent rewriting, see History Simplification above."
      },
      {
        "type": "long",
        "key": "left-right",
        "title": "--left-right",
        "description": "Mark which side of a symmetric difference a commit is reachable from. Commits from the left side are prefixed with < and those from the right with >. If combined with --boundary, those commits are prefixed with -.\n\nFor example, if you have this topology:\n\n\t     y---b---b  branch B\n\t    / \\ /\n\t   /   .\n\t  /   / \\\n\t o---x---a---a  branch A\n\nyou would get an output like this:\n\n\t$ git rev-list --left-right --boundary --pretty=oneline A...B\n\n\t>bbbbbbb... 3rd on b\n\t>bbbbbbb... 2nd on b\n\t<aaaaaaa... 3rd on a\n\t<aaaaaaa... 2nd on a\n\t-yyyyyyy... 1st on b\n\t-xxxxxxx... 1st on a"
      },
      {
        "type": "long",
        "key": "graph",
        "title": "--graph",
        "description": "Draw a text-based graphical representation of the commit history on the left hand side of the output. This may cause extra lines to be printed in between commits, in order for the graph history to be drawn properly. Cannot be combined with --no-walk.\n\nThis enables parent rewriting, see History Simplification above.\n\nThis implies the --topo-order option by default, but the --date-order option may also be specified."
      },
      {
        "type": "long",
        "key": "show-linear-break",
        "title": "--show-linear-break[=<barrier>]",
        "description": "When --graph is not used, all history branches are flattened which can make it hard to see that the two consecutive commits do not belong to a linear branch. This option puts a barrier in between them in that case. If <barrier> is specified, it is the string that will be shown instead of the default one."
      }
    ]
  },
  {
    "name": "git maintenance",
    "options": [
      {
        "type": "long",
        "key": "auto",
        "title": "--auto",
        "description": "When combined with the run subcommand, run maintenance tasks only if certain thresholds are met. For example, the gc task runs when the number of loose objects exceeds the number stored in the gc.auto config setting, or when the number of pack-files exceeds the gc.autoPackLimit config setting. Not compatible with the --schedule option."
      },
      {
        "type": "long",
        "key": "schedule",
        "title": "--schedule",
        "description": "When combined with the run subcommand, run maintenance tasks only if certain time conditions are met, as specified by the maintenance.<task>.schedule config value for each <task>. This config value specifies a number of seconds since the last time that task ran, according to the maintenance.<task>.lastRun config value. The tasks that are tested are those provided by the --task=<task> option(s) or those with maintenance.<task>.enabled set to true."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Do not report progress or other information over stderr."
      },
      {
        "type": "long",
        "key": "task",
        "title": "--task=<task>",
        "description": "If this option is specified one or more times, then only run the specified tasks in the specified order. If no --task=<task> arguments are specified, then only the tasks with maintenance.<task>.enabled configured as true are considered. See the TASKS section for the list of accepted <task> values."
      }
    ]
  },
  {
    "name": "git merge",
    "options": [
      {
        "type": "long",
        "key": "commit",
        "title": "--commit, --no-commit",
        "description": "Perform the merge and commit the result. This option can be used to override --no-commit.\n\nWith --no-commit perform the merge and stop just before creating a merge commit, to give the user a chance to inspect and further tweak the merge result before committing.\n\nNote that fast-forward updates do not create a merge commit and therefore there is no way to stop those merges with --no-commit. Thus, if you want to ensure your branch is not changed or updated by the merge command, use --no-ff with --no-commit."
      },
      {
        "type": "long",
        "key": "no-commit",
        "title": "--commit, --no-commit",
        "description": "Perform the merge and commit the result. This option can be used to override --no-commit.\n\nWith --no-commit perform the merge and stop just before creating a merge commit, to give the user a chance to inspect and further tweak the merge result before committing.\n\nNote that fast-forward updates do not create a merge commit and therefore there is no way to stop those merges with --no-commit. Thus, if you want to ensure your branch is not changed or updated by the merge command, use --no-ff with --no-commit."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "--edit, -e, --no-edit",
        "description": "Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message, so that the user can explain and justify the merge. The --no-edit option can be used to accept the auto-generated message (this is generally discouraged). The --edit (or -e) option is still useful if you are giving a draft message with the -m option from the command line and want to edit it in the editor.\n\nOlder scripts may depend on the historical behaviour of not allowing the user to edit the merge log message. They will see an editor opened when they run git merge. To make it easier to adjust such scripts to the updated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be set to no at the beginning of them."
      },
      {
        "type": "short",
        "key": "e",
        "title": "--edit, -e, --no-edit",
        "description": "Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message, so that the user can explain and justify the merge. The --no-edit option can be used to accept the auto-generated message (this is generally discouraged). The --edit (or -e) option is still useful if you are giving a draft message with the -m option from the command line and want to edit it in the editor.\n\nOlder scripts may depend on the historical behaviour of not allowing the user to edit the merge log message. They will see an editor opened when they run git merge. To make it easier to adjust such scripts to the updated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be set to no at the beginning of them."
      },
      {
        "type": "long",
        "key": "no-edit",
        "title": "--edit, -e, --no-edit",
        "description": "Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message, so that the user can explain and justify the merge. The --no-edit option can be used to accept the auto-generated message (this is generally discouraged). The --edit (or -e) option is still useful if you are giving a draft message with the -m option from the command line and want to edit it in the editor.\n\nOlder scripts may depend on the historical behaviour of not allowing the user to edit the merge log message. They will see an editor opened when they run git merge. To make it easier to adjust such scripts to the updated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be set to no at the beginning of them."
      },
      {
        "type": "long",
        "key": "cleanup",
        "title": "--cleanup=<mode>",
        "description": "This option determines how the merge message will be cleaned up before committing. See git-commit[1] for more details. In addition, if the <mode> is given a value of scissors, scissors will be appended to MERGE_MSG before being passed on to the commit machinery in the case of a merge conflict."
      },
      {
        "type": "long",
        "key": "ff",
        "title": "--ff, --no-ff, --ff-only",
        "description": "Specifies how a merge is handled when the merged-in history is already a descendant of the current history. --ff is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the refs/tags/ hierarchy, in which case --no-ff is assumed.\n\nWith --ff, when possible resolve the merge as a fast-forward (only update the branch pointer to match the merged branch; do not create a merge commit). When not possible (when the merged-in history is not a descendant of the current history), create a merge commit.\n\nWith --no-ff, create a merge commit in all cases, even when the merge could instead be resolved as a fast-forward.\n\nWith --ff-only, resolve the merge as a fast-forward when possible. When not possible, refuse to merge and exit with a non-zero status."
      },
      {
        "type": "long",
        "key": "no-ff",
        "title": "--ff, --no-ff, --ff-only",
        "description": "Specifies how a merge is handled when the merged-in history is already a descendant of the current history. --ff is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the refs/tags/ hierarchy, in which case --no-ff is assumed.\n\nWith --ff, when possible resolve the merge as a fast-forward (only update the branch pointer to match the merged branch; do not create a merge commit). When not possible (when the merged-in history is not a descendant of the current history), create a merge commit.\n\nWith --no-ff, create a merge commit in all cases, even when the merge could instead be resolved as a fast-forward.\n\nWith --ff-only, resolve the merge as a fast-forward when possible. When not possible, refuse to merge and exit with a non-zero status."
      },
      {
        "type": "long",
        "key": "ff-only",
        "title": "--ff, --no-ff, --ff-only",
        "description": "Specifies how a merge is handled when the merged-in history is already a descendant of the current history. --ff is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the refs/tags/ hierarchy, in which case --no-ff is assumed.\n\nWith --ff, when possible resolve the merge as a fast-forward (only update the branch pointer to match the merged branch; do not create a merge commit). When not possible (when the merged-in history is not a descendant of the current history), create a merge commit.\n\nWith --no-ff, create a merge commit in all cases, even when the merge could instead be resolved as a fast-forward.\n\nWith --ff-only, resolve the merge as a fast-forward when possible. When not possible, refuse to merge and exit with a non-zero status."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign the resulting merge commit. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign the resulting merge commit. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign the resulting merge commit. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "log",
        "title": "--log[=<n>], --no-log",
        "description": "In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits that are being merged. See also git-fmt-merge-msg[1].\n\nWith --no-log do not list one-line descriptions from the actual commits being merged."
      },
      {
        "type": "long",
        "key": "no-log",
        "title": "--log[=<n>], --no-log",
        "description": "In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits that are being merged. See also git-fmt-merge-msg[1].\n\nWith --no-log do not list one-line descriptions from the actual commits being merged."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "--signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit log message. The meaning of a signoff depends on the project to which you’re committing. For example, it may certify that the committer has the rights to submit the work under the project’s license or agrees to some contributor representation, such as a Developer Certificate of Origin. (See http://developercertificate.org for the one used by the Linux kernel and Git projects.) Consult the documentation or leadership of the project to which you’re contributing to understand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff option on the command line."
      },
      {
        "type": "long",
        "key": "no-signoff",
        "title": "--signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit log message. The meaning of a signoff depends on the project to which you’re committing. For example, it may certify that the committer has the rights to submit the work under the project’s license or agrees to some contributor representation, such as a Developer Certificate of Origin. (See http://developercertificate.org for the one used by the Linux kernel and Git projects.) Consult the documentation or leadership of the project to which you’re contributing to understand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff option on the command line."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat, -n, --no-stat",
        "description": "Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.\n\nWith -n or --no-stat do not show a diffstat at the end of the merge."
      },
      {
        "type": "short",
        "key": "n",
        "title": "--stat, -n, --no-stat",
        "description": "Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.\n\nWith -n or --no-stat do not show a diffstat at the end of the merge."
      },
      {
        "type": "long",
        "key": "no-stat",
        "title": "--stat, -n, --no-stat",
        "description": "Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.\n\nWith -n or --no-stat do not show a diffstat at the end of the merge."
      },
      {
        "type": "long",
        "key": "squash",
        "title": "--squash, --no-squash",
        "description": "Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD (to cause the next git commit command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).\n\nWith --no-squash perform the merge and commit the result. This option can be used to override --squash.\n\nWith --squash, --commit is not allowed, and will fail."
      },
      {
        "type": "long",
        "key": "no-squash",
        "title": "--squash, --no-squash",
        "description": "Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD (to cause the next git commit command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).\n\nWith --no-squash perform the merge and commit the result. This option can be used to override --squash.\n\nWith --squash, --commit is not allowed, and will fail."
      },
      {
        "type": "long",
        "key": "no-verify",
        "title": "--no-verify",
        "description": "This option bypasses the pre-merge and commit-msg hooks. See also githooks[5]."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no -s option, a built-in list of strategies is used instead (recursive when merging a single head, octopus otherwise)."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no -s option, a built-in list of strategies is used instead (recursive when merging a single head, octopus otherwise)."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X <option>, --strategy-option=<option>",
        "description": "Pass merge strategy specific option through to the merge strategy."
      },
      {
        "type": "long",
        "key": "strategy-option",
        "title": "-X <option>, --strategy-option=<option>",
        "description": "Pass merge strategy specific option through to the merge strategy."
      },
      {
        "type": "long",
        "key": "verify-signatures",
        "title": "--verify-signatures, --no-verify-signatures",
        "description": "Verify that the tip commit of the side branch being merged is signed with a valid key, i.e. a key that has a valid uid: in the default trust model, this means the signing key has been signed by a trusted key. If the tip commit of the side branch is not signed with a valid key, the merge is aborted."
      },
      {
        "type": "long",
        "key": "no-verify-signatures",
        "title": "--verify-signatures, --no-verify-signatures",
        "description": "Verify that the tip commit of the side branch being merged is signed with a valid key, i.e. a key that has a valid uid: in the default trust model, this means the signing key has been signed by a trusted key. If the tip commit of the side branch is not signed with a valid key, the merge is aborted."
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary, --no-summary",
        "description": "Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future."
      },
      {
        "type": "long",
        "key": "no-summary",
        "title": "--summary, --no-summary",
        "description": "Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Operate quietly. Implies --no-progress."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Operate quietly. Implies --no-progress."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress, --no-progress",
        "description": "Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal. Note that not all merge strategies may support progress reporting."
      },
      {
        "type": "long",
        "key": "no-progress",
        "title": "--progress, --no-progress",
        "description": "Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal. Note that not all merge strategies may support progress reporting."
      },
      {
        "type": "long",
        "key": "autostash",
        "title": "--autostash, --no-autostash",
        "description": "Automatically create a temporary stash entry before the operation begins, record it in the special ref MERGE_AUTOSTASH and apply it after the operation ends. This means that you can run the operation on a dirty worktree. However, use with care: the final stash application after a successful merge might result in non-trivial conflicts."
      },
      {
        "type": "long",
        "key": "no-autostash",
        "title": "--autostash, --no-autostash",
        "description": "Automatically create a temporary stash entry before the operation begins, record it in the special ref MERGE_AUTOSTASH and apply it after the operation ends. This means that you can run the operation on a dirty worktree. However, use with care: the final stash application after a successful merge might result in non-trivial conflicts."
      },
      {
        "type": "long",
        "key": "allow-unrelated-histories",
        "title": "--allow-unrelated-histories",
        "description": "By default, git merge command refuses to merge histories that do not share a common ancestor. This option can be used to override this safety when merging histories of two projects that started their lives independently. As that is a very rare occasion, no configuration variable to enable this by default exists and will not be added."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m <msg>",
        "description": "Set the commit message to be used for the merge commit (in case one is created).\n\nIf --log is specified, a shortlog of the commits being merged will be appended to the specified message.\n\nThe git fmt-merge-msg command can be used to give a good default for automated git merge invocations. The automated message can include the branch description."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F <file>, --file=<file>",
        "description": "Read the commit message to be used for the merge commit (in case one is created).\n\nIf --log is specified, a shortlog of the commits being merged will be appended to the specified message."
      },
      {
        "type": "long",
        "key": "file",
        "title": "-F <file>, --file=<file>",
        "description": "Read the commit message to be used for the merge commit (in case one is created).\n\nIf --log is specified, a shortlog of the commits being merged will be appended to the specified message."
      },
      {
        "type": "long",
        "key": "rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "no-rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "overwrite-ignore",
        "title": "--overwrite-ignore, --no-overwrite-ignore",
        "description": "Silently overwrite ignored files from the merge result. This is the default behavior. Use --no-overwrite-ignore to abort."
      },
      {
        "type": "long",
        "key": "no-overwrite-ignore",
        "title": "--overwrite-ignore, --no-overwrite-ignore",
        "description": "Silently overwrite ignored files from the merge result. This is the default behavior. Use --no-overwrite-ignore to abort."
      },
      {
        "type": "long",
        "key": "abort",
        "title": "--abort",
        "description": "Abort the current conflict resolution process, and try to reconstruct the pre-merge state. If an autostash entry is present, apply it to the worktree.\n\nIf there were uncommitted worktree changes present when the merge started, git merge --abort will in some cases be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes before running git merge.\n\ngit merge --abort is equivalent to git reset --merge when MERGE_HEAD is present unless MERGE_AUTOSTASH is also present in which case git merge --abort applies the stash entry to the worktree whereas git reset --merge will save the stashed changes in the stash list."
      },
      {
        "type": "long",
        "key": "quit",
        "title": "--quit",
        "description": "Forget about the current merge in progress. Leave the index and the working tree as-is. If MERGE_AUTOSTASH is present, the stash entry will be saved to the stash list."
      },
      {
        "type": "long",
        "key": "continue",
        "title": "--continue",
        "description": "After a git merge stops due to conflicts you can conclude the merge by running git merge --continue (see \"HOW TO RESOLVE CONFLICTS\" section below)."
      }
    ]
  },
  {
    "name": "git mv",
    "options": [
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Force renaming or moving of a file even if the target exists"
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Force renaming or moving of a file even if the target exists"
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k",
        "description": "Skip move or rename actions which would lead to an error condition. An error happens when a source is neither existing nor controlled by Git, or when it would overwrite an existing file unless -f is given."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Do nothing; only show what would happen"
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Do nothing; only show what would happen"
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Report the names of files as they are moved."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Report the names of files as they are moved."
      }
    ]
  },
  {
    "name": "git notes",
    "options": [
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "When adding notes to an object that already has notes, overwrite the existing notes (instead of aborting)."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "When adding notes to an object that already has notes, overwrite the existing notes (instead of aborting)."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m <msg>, --message=<msg>",
        "description": "Use the given note message (instead of prompting). If multiple -m options are given, their values are concatenated as separate paragraphs. Lines starting with # and empty lines other than a single line between paragraphs will be stripped out."
      },
      {
        "type": "long",
        "key": "message",
        "title": "-m <msg>, --message=<msg>",
        "description": "Use the given note message (instead of prompting). If multiple -m options are given, their values are concatenated as separate paragraphs. Lines starting with # and empty lines other than a single line between paragraphs will be stripped out."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F <file>, --file=<file>",
        "description": "Take the note message from the given file. Use - to read the note message from the standard input. Lines starting with # and empty lines other than a single line between paragraphs will be stripped out."
      },
      {
        "type": "long",
        "key": "file",
        "title": "-F <file>, --file=<file>",
        "description": "Take the note message from the given file. Use - to read the note message from the standard input. Lines starting with # and empty lines other than a single line between paragraphs will be stripped out."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C <object>, --reuse-message=<object>",
        "description": "Take the given blob object (for example, another note) as the note message. (Use git notes copy <object> instead to copy notes between objects.)"
      },
      {
        "type": "long",
        "key": "reuse-message",
        "title": "-C <object>, --reuse-message=<object>",
        "description": "Take the given blob object (for example, another note) as the note message. (Use git notes copy <object> instead to copy notes between objects.)"
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c <object>, --reedit-message=<object>",
        "description": "Like -C, but with -c the editor is invoked, so that the user can further edit the note message."
      },
      {
        "type": "long",
        "key": "reedit-message",
        "title": "-c <object>, --reedit-message=<object>",
        "description": "Like -C, but with -c the editor is invoked, so that the user can further edit the note message."
      },
      {
        "type": "long",
        "key": "allow-empty",
        "title": "--allow-empty",
        "description": "Allow an empty note object to be stored. The default behavior is to automatically remove empty notes."
      },
      {
        "type": "long",
        "key": "ignore-missing",
        "title": "--ignore-missing",
        "description": "Do not consider it an error to request removing notes from an object that does not have notes attached to it."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Also read the object names to remove notes from the standard input (there is no reason you cannot combine this with object names from the command line)."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Do not remove anything; just report the object names whose notes would be removed."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Do not remove anything; just report the object names whose notes would be removed."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "When merging notes, resolve notes conflicts using the given strategy. The following strategies are recognized: \"manual\" (default), \"ours\", \"theirs\", \"union\" and \"cat_sort_uniq\". This option overrides the \"notes.mergeStrategy\" configuration setting. See the \"NOTES MERGE STRATEGIES\" section below for more information on each notes merge strategy."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "When merging notes, resolve notes conflicts using the given strategy. The following strategies are recognized: \"manual\" (default), \"ours\", \"theirs\", \"union\" and \"cat_sort_uniq\". This option overrides the \"notes.mergeStrategy\" configuration setting. See the \"NOTES MERGE STRATEGIES\" section below for more information on each notes merge strategy."
      },
      {
        "type": "long",
        "key": "commit",
        "title": "--commit",
        "description": "Finalize an in-progress git notes merge. Use this option when you have resolved the conflicts that git notes merge stored in .git/NOTES_MERGE_WORKTREE. This amends the partial merge commit created by git notes merge (stored in .git/NOTES_MERGE_PARTIAL) by adding the notes in .git/NOTES_MERGE_WORKTREE. The notes ref stored in the .git/NOTES_MERGE_REF symref is updated to the resulting commit."
      },
      {
        "type": "long",
        "key": "abort",
        "title": "--abort",
        "description": "Abort/reset an in-progress git notes merge, i.e. a notes merge with conflicts. This simply removes all files related to the notes merge."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "When merging notes, operate quietly."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "When merging notes, operate quietly."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "When merging notes, be more verbose. When pruning notes, report all object names whose notes are removed."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "When merging notes, be more verbose. When pruning notes, report all object names whose notes are removed."
      }
    ]
  },
  {
    "name": "git pull",
    "options": [
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "This is passed to both underlying git-fetch to squelch reporting of during transfer, and underlying git-merge to squelch output during merging."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "This is passed to both underlying git-fetch to squelch reporting of during transfer, and underlying git-merge to squelch output during merging."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Pass --verbose to git-fetch and git-merge."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Pass --verbose to git-fetch and git-merge."
      },
      {
        "type": "long",
        "key": "commit",
        "title": "--commit, --no-commit",
        "description": "Perform the merge and commit the result. This option can be used to override --no-commit. Only useful when merging.\n\nWith --no-commit perform the merge and stop just before creating a merge commit, to give the user a chance to inspect and further tweak the merge result before committing.\n\nNote that fast-forward updates do not create a merge commit and therefore there is no way to stop those merges with --no-commit. Thus, if you want to ensure your branch is not changed or updated by the merge command, use --no-ff with --no-commit."
      },
      {
        "type": "long",
        "key": "no-commit",
        "title": "--commit, --no-commit",
        "description": "Perform the merge and commit the result. This option can be used to override --no-commit. Only useful when merging.\n\nWith --no-commit perform the merge and stop just before creating a merge commit, to give the user a chance to inspect and further tweak the merge result before committing.\n\nNote that fast-forward updates do not create a merge commit and therefore there is no way to stop those merges with --no-commit. Thus, if you want to ensure your branch is not changed or updated by the merge command, use --no-ff with --no-commit."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "--edit, -e, --no-edit",
        "description": "Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message, so that the user can explain and justify the merge. The --no-edit option can be used to accept the auto-generated message (this is generally discouraged).\n\nOlder scripts may depend on the historical behaviour of not allowing the user to edit the merge log message. They will see an editor opened when they run git merge. To make it easier to adjust such scripts to the updated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be set to no at the beginning of them."
      },
      {
        "type": "short",
        "key": "e",
        "title": "--edit, -e, --no-edit",
        "description": "Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message, so that the user can explain and justify the merge. The --no-edit option can be used to accept the auto-generated message (this is generally discouraged).\n\nOlder scripts may depend on the historical behaviour of not allowing the user to edit the merge log message. They will see an editor opened when they run git merge. To make it easier to adjust such scripts to the updated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be set to no at the beginning of them."
      },
      {
        "type": "long",
        "key": "no-edit",
        "title": "--edit, -e, --no-edit",
        "description": "Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message, so that the user can explain and justify the merge. The --no-edit option can be used to accept the auto-generated message (this is generally discouraged).\n\nOlder scripts may depend on the historical behaviour of not allowing the user to edit the merge log message. They will see an editor opened when they run git merge. To make it easier to adjust such scripts to the updated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be set to no at the beginning of them."
      },
      {
        "type": "long",
        "key": "cleanup",
        "title": "--cleanup=<mode>",
        "description": "This option determines how the merge message will be cleaned up before committing. See git-commit[1] for more details. In addition, if the <mode> is given a value of scissors, scissors will be appended to MERGE_MSG before being passed on to the commit machinery in the case of a merge conflict."
      },
      {
        "type": "long",
        "key": "ff-only",
        "title": "--ff-only",
        "description": "Only update to the new history if there is no divergent local history. This is the default when no method for reconciling divergent histories is provided (via the --rebase=* flags)."
      },
      {
        "type": "long",
        "key": "ff",
        "title": "--ff, --no-ff",
        "description": "When merging rather than rebasing, specifies how a merge is handled when the merged-in history is already a descendant of the current history. If merging is requested, --ff is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the refs/tags/ hierarchy, in which case --no-ff is assumed.\n\nWith --ff, when possible resolve the merge as a fast-forward (only update the branch pointer to match the merged branch; do not create a merge commit). When not possible (when the merged-in history is not a descendant of the current history), create a merge commit.\n\nWith --no-ff, create a merge commit in all cases, even when the merge could instead be resolved as a fast-forward."
      },
      {
        "type": "long",
        "key": "no-ff",
        "title": "--ff, --no-ff",
        "description": "When merging rather than rebasing, specifies how a merge is handled when the merged-in history is already a descendant of the current history. If merging is requested, --ff is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the refs/tags/ hierarchy, in which case --no-ff is assumed.\n\nWith --ff, when possible resolve the merge as a fast-forward (only update the branch pointer to match the merged branch; do not create a merge commit). When not possible (when the merged-in history is not a descendant of the current history), create a merge commit.\n\nWith --no-ff, create a merge commit in all cases, even when the merge could instead be resolved as a fast-forward."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign the resulting merge commit. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign the resulting merge commit. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign the resulting merge commit. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "log",
        "title": "--log[=<n>], --no-log",
        "description": "In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits that are being merged. See also git-fmt-merge-msg[1]. Only useful when merging.\n\nWith --no-log do not list one-line descriptions from the actual commits being merged."
      },
      {
        "type": "long",
        "key": "no-log",
        "title": "--log[=<n>], --no-log",
        "description": "In addition to branch names, populate the log message with one-line descriptions from at most <n> actual commits that are being merged. See also git-fmt-merge-msg[1]. Only useful when merging.\n\nWith --no-log do not list one-line descriptions from the actual commits being merged."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "--signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit log message. The meaning of a signoff depends on the project to which you’re committing. For example, it may certify that the committer has the rights to submit the work under the project’s license or agrees to some contributor representation, such as a Developer Certificate of Origin. (See http://developercertificate.org for the one used by the Linux kernel and Git projects.) Consult the documentation or leadership of the project to which you’re contributing to understand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff option on the command line."
      },
      {
        "type": "long",
        "key": "no-signoff",
        "title": "--signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit log message. The meaning of a signoff depends on the project to which you’re committing. For example, it may certify that the committer has the rights to submit the work under the project’s license or agrees to some contributor representation, such as a Developer Certificate of Origin. (See http://developercertificate.org for the one used by the Linux kernel and Git projects.) Consult the documentation or leadership of the project to which you’re contributing to understand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff option on the command line."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat, -n, --no-stat",
        "description": "Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.\n\nWith -n or --no-stat do not show a diffstat at the end of the merge."
      },
      {
        "type": "short",
        "key": "n",
        "title": "--stat, -n, --no-stat",
        "description": "Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.\n\nWith -n or --no-stat do not show a diffstat at the end of the merge."
      },
      {
        "type": "long",
        "key": "no-stat",
        "title": "--stat, -n, --no-stat",
        "description": "Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.\n\nWith -n or --no-stat do not show a diffstat at the end of the merge."
      },
      {
        "type": "long",
        "key": "squash",
        "title": "--squash, --no-squash",
        "description": "Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD (to cause the next git commit command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).\n\nWith --no-squash perform the merge and commit the result. This option can be used to override --squash.\n\nWith --squash, --commit is not allowed, and will fail.\n\nOnly useful when merging."
      },
      {
        "type": "long",
        "key": "no-squash",
        "title": "--squash, --no-squash",
        "description": "Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD (to cause the next git commit command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).\n\nWith --no-squash perform the merge and commit the result. This option can be used to override --squash.\n\nWith --squash, --commit is not allowed, and will fail.\n\nOnly useful when merging."
      },
      {
        "type": "long",
        "key": "no-verify",
        "title": "--no-verify",
        "description": "This option bypasses the pre-merge and commit-msg hooks. See also githooks[5]. Only useful when merging."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no -s option, a built-in list of strategies is used instead (recursive when merging a single head, octopus otherwise)."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no -s option, a built-in list of strategies is used instead (recursive when merging a single head, octopus otherwise)."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X <option>, --strategy-option=<option>",
        "description": "Pass merge strategy specific option through to the merge strategy."
      },
      {
        "type": "long",
        "key": "strategy-option",
        "title": "-X <option>, --strategy-option=<option>",
        "description": "Pass merge strategy specific option through to the merge strategy."
      },
      {
        "type": "long",
        "key": "verify-signatures",
        "title": "--verify-signatures, --no-verify-signatures",
        "description": "Verify that the tip commit of the side branch being merged is signed with a valid key, i.e. a key that has a valid uid: in the default trust model, this means the signing key has been signed by a trusted key. If the tip commit of the side branch is not signed with a valid key, the merge is aborted.\n\nOnly useful when merging."
      },
      {
        "type": "long",
        "key": "no-verify-signatures",
        "title": "--verify-signatures, --no-verify-signatures",
        "description": "Verify that the tip commit of the side branch being merged is signed with a valid key, i.e. a key that has a valid uid: in the default trust model, this means the signing key has been signed by a trusted key. If the tip commit of the side branch is not signed with a valid key, the merge is aborted.\n\nOnly useful when merging."
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary, --no-summary",
        "description": "Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future."
      },
      {
        "type": "long",
        "key": "no-summary",
        "title": "--summary, --no-summary",
        "description": "Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future."
      },
      {
        "type": "long",
        "key": "autostash",
        "title": "--autostash, --no-autostash",
        "description": "Automatically create a temporary stash entry before the operation begins, record it in the special ref MERGE_AUTOSTASH and apply it after the operation ends. This means that you can run the operation on a dirty worktree. However, use with care: the final stash application after a successful merge might result in non-trivial conflicts."
      },
      {
        "type": "long",
        "key": "no-autostash",
        "title": "--autostash, --no-autostash",
        "description": "Automatically create a temporary stash entry before the operation begins, record it in the special ref MERGE_AUTOSTASH and apply it after the operation ends. This means that you can run the operation on a dirty worktree. However, use with care: the final stash application after a successful merge might result in non-trivial conflicts."
      },
      {
        "type": "long",
        "key": "allow-unrelated-histories",
        "title": "--allow-unrelated-histories",
        "description": "By default, git merge command refuses to merge histories that do not share a common ancestor. This option can be used to override this safety when merging histories of two projects that started their lives independently. As that is a very rare occasion, no configuration variable to enable this by default exists and will not be added.\n\nOnly useful when merging."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r, --rebase[=false|true|merges|preserve|interactive]",
        "description": "When true, rebase the current branch on top of the upstream branch after fetching. If there is a remote-tracking branch corresponding to the upstream branch and the upstream branch was rebased since last fetched, the rebase uses that information to avoid rebasing non-local changes.\n\nWhen set to merges, rebase using git rebase --rebase-merges so that the local merge commits are included in the rebase (see git-rebase[1] for details).\n\nWhen set to preserve (deprecated in favor of merges), rebase with the --preserve-merges option passed to git rebase so that locally created merge commits will not be flattened.\n\nWhen false, merge the upstream branch into the current branch.\n\nWhen interactive, enable the interactive mode of rebase.\n\nSee pull.rebase, branch.<name>.rebase and branch.autoSetupRebase in git-config[1] if you want to make git pull always use --rebase instead of merging.\n\nNote\nThis is a potentially dangerous mode of operation. It rewrites history, which does not bode well when you published that history already. Do not use this option unless you have read git-rebase[1] carefully."
      },
      {
        "type": "long",
        "key": "rebase",
        "title": "-r, --rebase[=false|true|merges|preserve|interactive]",
        "description": "When true, rebase the current branch on top of the upstream branch after fetching. If there is a remote-tracking branch corresponding to the upstream branch and the upstream branch was rebased since last fetched, the rebase uses that information to avoid rebasing non-local changes.\n\nWhen set to merges, rebase using git rebase --rebase-merges so that the local merge commits are included in the rebase (see git-rebase[1] for details).\n\nWhen set to preserve (deprecated in favor of merges), rebase with the --preserve-merges option passed to git rebase so that locally created merge commits will not be flattened.\n\nWhen false, merge the upstream branch into the current branch.\n\nWhen interactive, enable the interactive mode of rebase.\n\nSee pull.rebase, branch.<name>.rebase and branch.autoSetupRebase in git-config[1] if you want to make git pull always use --rebase instead of merging.\n\nNote\nThis is a potentially dangerous mode of operation. It rewrites history, which does not bode well when you published that history already. Do not use this option unless you have read git-rebase[1] carefully."
      },
      {
        "type": "long",
        "key": "no-rebase",
        "title": "--no-rebase",
        "description": "This is shorthand for --rebase=false."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Fetch all remotes."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --append",
        "description": "Append ref names and object names of fetched refs to the existing contents of .git/FETCH_HEAD. Without this option old data in .git/FETCH_HEAD will be overwritten."
      },
      {
        "type": "long",
        "key": "append",
        "title": "-a, --append",
        "description": "Append ref names and object names of fetched refs to the existing contents of .git/FETCH_HEAD. Without this option old data in .git/FETCH_HEAD will be overwritten."
      },
      {
        "type": "long",
        "key": "atomic",
        "title": "--atomic",
        "description": "Use an atomic transaction to update local refs. Either all refs are updated, or on error, no refs are updated."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--depth=<depth>",
        "description": "Limit fetching to the specified number of commits from the tip of each remote branch history. If fetching to a shallow repository created by git clone with --depth=<depth> option (see git-clone[1]), deepen or shorten the history to the specified number of commits. Tags for the deepened commits are not fetched."
      },
      {
        "type": "long",
        "key": "deepen",
        "title": "--deepen=<depth>",
        "description": "Similar to --depth, except it specifies the number of commits from the current shallow boundary instead of from the tip of each remote branch history."
      },
      {
        "type": "long",
        "key": "shallow-since",
        "title": "--shallow-since=<date>",
        "description": "Deepen or shorten the history of a shallow repository to include all reachable commits after <date>."
      },
      {
        "type": "long",
        "key": "shallow-exclude",
        "title": "--shallow-exclude=<revision>",
        "description": "Deepen or shorten the history of a shallow repository to exclude commits reachable from a specified remote branch or tag. This option can be specified multiple times."
      },
      {
        "type": "long",
        "key": "unshallow",
        "title": "--unshallow",
        "description": "If the source repository is complete, convert a shallow repository to a complete one, removing all the limitations imposed by shallow repositories.\n\nIf the source repository is shallow, fetch as much as possible so that the current repository has the same history as the source repository."
      },
      {
        "type": "long",
        "key": "update-shallow",
        "title": "--update-shallow",
        "description": "By default when fetching from a shallow repository, git fetch refuses refs that require updating .git/shallow. This option updates .git/shallow and accept such refs."
      },
      {
        "type": "long",
        "key": "negotiation-tip",
        "title": "--negotiation-tip=<commit|glob>",
        "description": "By default, Git will report, to the server, commits reachable from all local refs to find common commits in an attempt to reduce the size of the to-be-received packfile. If specified, Git will only report commits reachable from the given tips. This is useful to speed up fetches when the user knows which local ref is likely to have commits in common with the upstream ref being fetched.\n\nThis option may be specified more than once; if so, Git will report commits reachable from any of the given commits.\n\nThe argument to this option may be a glob on ref names, a ref, or the (possibly abbreviated) SHA-1 of a commit. Specifying a glob is equivalent to specifying this option multiple times, one for each matching ref name.\n\nSee also the fetch.negotiationAlgorithm and push.negotiate configuration variables documented in git-config[1], and the --negotiate-only option below."
      },
      {
        "type": "long",
        "key": "negotiate-only",
        "title": "--negotiate-only",
        "description": "Do not fetch anything from the server, and instead print the ancestors of the provided --negotiation-tip=* arguments, which we have in common with the server.\n\nInternally this is used to implement the push.negotiate option, see git-config[1]."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Show what would be done, without making any changes."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "When git fetch is used with <src>:<dst> refspec it may refuse to update the local branch as discussed in the <refspec> part of the git-fetch[1] documentation. This option overrides that check."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "When git fetch is used with <src>:<dst> refspec it may refuse to update the local branch as discussed in the <refspec> part of the git-fetch[1] documentation. This option overrides that check."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep",
        "description": "Keep downloaded pack."
      },
      {
        "type": "long",
        "key": "keep",
        "title": "-k, --keep",
        "description": "Keep downloaded pack."
      },
      {
        "type": "long",
        "key": "prefetch",
        "title": "--prefetch",
        "description": "Modify the configured refspec to place all refs into the refs/prefetch/ namespace. See the prefetch task in git-maintenance[1]."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --prune",
        "description": "Before fetching, remove any remote-tracking references that no longer exist on the remote. Tags are not subject to pruning if they are fetched only because of the default tag auto-following or due to a --tags option. However, if tags are fetched due to an explicit refspec (either on the command line or in the remote configuration, for example if the remote was cloned with the --mirror option), then they are also subject to pruning. Supplying --prune-tags is a shorthand for providing the tag refspec."
      },
      {
        "type": "long",
        "key": "prune",
        "title": "-p, --prune",
        "description": "Before fetching, remove any remote-tracking references that no longer exist on the remote. Tags are not subject to pruning if they are fetched only because of the default tag auto-following or due to a --tags option. However, if tags are fetched due to an explicit refspec (either on the command line or in the remote configuration, for example if the remote was cloned with the --mirror option), then they are also subject to pruning. Supplying --prune-tags is a shorthand for providing the tag refspec."
      },
      {
        "type": "long",
        "key": "no-tags",
        "title": "--no-tags",
        "description": "By default, tags that point at objects that are downloaded from the remote repository are fetched and stored locally. This option disables this automatic tag following. The default behavior for a remote may be specified with the remote.<name>.tagOpt setting. See git-config[1]."
      },
      {
        "type": "long",
        "key": "refmap",
        "title": "--refmap=<refspec>",
        "description": "When fetching refs listed on the command line, use the specified refspec (can be given more than once) to map the refs to remote-tracking branches, instead of the values of remote.*.fetch configuration variables for the remote repository. Providing an empty <refspec> to the --refmap option causes Git to ignore the configured refspecs and rely entirely on the refspecs supplied as command-line arguments. See section on \"Configured Remote-tracking Branches\" for details."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t, --tags",
        "description": "Fetch all tags from the remote (i.e., fetch remote tags refs/tags/* into local tags with the same name), in addition to whatever else would otherwise be fetched. Using this option alone does not subject tags to pruning, even if --prune is used (though tags may be pruned anyway if they are also the destination of an explicit refspec; see --prune)."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "-t, --tags",
        "description": "Fetch all tags from the remote (i.e., fetch remote tags refs/tags/* into local tags with the same name), in addition to whatever else would otherwise be fetched. Using this option alone does not subject tags to pruning, even if --prune is used (though tags may be pruned anyway if they are also the destination of an explicit refspec; see --prune)."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j, --jobs=<n>",
        "description": "Number of parallel children to be used for all forms of fetching.\n\nIf the --multiple option was specified, the different remotes will be fetched in parallel. If multiple submodules are fetched, they will be fetched in parallel. To control them independently, use the config settings fetch.parallel and submodule.fetchJobs (see git-config[1]).\n\nTypically, parallel recursive and multi-remote fetches will be faster. By default fetches are performed sequentially, not in parallel."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j, --jobs=<n>",
        "description": "Number of parallel children to be used for all forms of fetching.\n\nIf the --multiple option was specified, the different remotes will be fetched in parallel. If multiple submodules are fetched, they will be fetched in parallel. To control them independently, use the config settings fetch.parallel and submodule.fetchJobs (see git-config[1]).\n\nTypically, parallel recursive and multi-remote fetches will be faster. By default fetches are performed sequentially, not in parallel."
      },
      {
        "type": "long",
        "key": "set-upstream",
        "title": "--set-upstream",
        "description": "If the remote is fetched successfully, add upstream (tracking) reference, used by argument-less git-pull[1] and other commands. For more information, see branch.<name>.merge and branch.<name>.remote in git-config[1]."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <option>, --server-option=<option>",
        "description": "Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. The server’s handling of server options, including unknown ones, is server-specific. When multiple --server-option=<option> are given, they are all sent to the other side in the order listed on the command line."
      },
      {
        "type": "long",
        "key": "server-option",
        "title": "-o <option>, --server-option=<option>",
        "description": "Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. The server’s handling of server options, including unknown ones, is server-specific. When multiple --server-option=<option> are given, they are all sent to the other side in the order listed on the command line."
      },
      {
        "type": "long",
        "key": "show-forced-updates",
        "title": "--show-forced-updates",
        "description": "By default, git checks if a branch is force-updated during fetch. This can be disabled through fetch.showForcedUpdates, but the --show-forced-updates option guarantees this check occurs. See git-config[1]."
      },
      {
        "type": "long",
        "key": "no-show-forced-updates",
        "title": "--no-show-forced-updates",
        "description": "By default, git checks if a branch is force-updated during fetch. Pass --no-show-forced-updates or set fetch.showForcedUpdates to false to skip this check for performance reasons. If used during git-pull the --ff-only option will still check for forced updates before attempting a fast-forward update. See git-config[1]."
      },
      {
        "type": "short",
        "key": "4",
        "title": "-4, --ipv4",
        "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
      },
      {
        "type": "long",
        "key": "ipv4",
        "title": "-4, --ipv4",
        "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
      },
      {
        "type": "short",
        "key": "6",
        "title": "-6, --ipv6",
        "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
      },
      {
        "type": "long",
        "key": "ipv6",
        "title": "-6, --ipv6",
        "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
      }
    ]
  },
  {
    "name": "git push",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Push all branches (i.e. refs under refs/heads/); cannot be used with other <refspec>."
      },
      {
        "type": "long",
        "key": "prune",
        "title": "--prune",
        "description": "Remove remote branches that don’t have a local counterpart. For example a remote branch tmp will be removed if a local branch with the same name doesn’t exist any more. This also respects refspecs, e.g. git push --prune remote refs/heads/*:refs/tmp/* would make sure that remote refs/tmp/foo will be removed if refs/heads/foo doesn’t exist."
      },
      {
        "type": "long",
        "key": "mirror",
        "title": "--mirror",
        "description": "Instead of naming each ref to push, specifies that all refs under refs/ (which includes but is not limited to refs/heads/, refs/remotes/, and refs/tags/) be mirrored to the remote repository. Newly created local refs will be pushed to the remote end, locally updated refs will be force updated on the remote end, and deleted refs will be removed from the remote end. This is the default if the configuration option remote.<remote>.mirror is set."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Do everything except actually send the updates."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Do everything except actually send the updates."
      },
      {
        "type": "long",
        "key": "porcelain",
        "title": "--porcelain",
        "description": "Produce machine-readable output. The output status line for each ref will be tab-separated and sent to stdout instead of stderr. The full symbolic names of the refs will be given."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --delete",
        "description": "All listed refs are deleted from the remote repository. This is the same as prefixing all refs with a colon."
      },
      {
        "type": "long",
        "key": "delete",
        "title": "-d, --delete",
        "description": "All listed refs are deleted from the remote repository. This is the same as prefixing all refs with a colon."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--tags",
        "description": "All refs under refs/tags are pushed, in addition to refspecs explicitly listed on the command line."
      },
      {
        "type": "long",
        "key": "follow-tags",
        "title": "--follow-tags",
        "description": "Push all the refs that would be pushed without this option, and also push annotated tags in refs/tags that are missing from the remote but are pointing at commit-ish that are reachable from the refs being pushed. This can also be specified with configuration variable push.followTags. For more information, see push.followTags in git-config[1]."
      },
      {
        "type": "long",
        "key": "signed",
        "title": "--[no-]signed, --signed=(true|false|if-asked)",
        "description": "GPG-sign the push request to update refs on the receiving side, to allow it to be checked by the hooks and/or be logged. If false or --no-signed, no signing will be attempted. If true or --signed, the push will fail if the server does not support signed pushes. If set to if-asked, sign if and only if the server supports signed pushes. The push will also fail if the actual call to gpg --sign fails. See git-receive-pack[1] for the details on the receiving end."
      },
      {
        "type": "long",
        "key": "atomic",
        "title": "--[no-]atomic",
        "description": "Use an atomic transaction on the remote side if available. Either all refs are updated, or on error, no refs are updated. If the server does not support atomic pushes the push will fail."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <option>, --push-option=<option>",
        "description": "Transmit the given string to the server, which passes them to the pre-receive as well as the post-receive hook. The given string must not contain a NUL or LF character. When multiple --push-option=<option> are given, they are all sent to the other side in the order listed on the command line. When no --push-option=<option> is given from the command line, the values of configuration variable push.pushOption are used instead."
      },
      {
        "type": "long",
        "key": "push-option",
        "title": "-o <option>, --push-option=<option>",
        "description": "Transmit the given string to the server, which passes them to the pre-receive as well as the post-receive hook. The given string must not contain a NUL or LF character. When multiple --push-option=<option> are given, they are all sent to the other side in the order listed on the command line. When no --push-option=<option> is given from the command line, the values of configuration variable push.pushOption are used instead."
      },
      {
        "type": "long",
        "key": "receive-pack",
        "title": "--receive-pack=<git-receive-pack>, --exec=<git-receive-pack>",
        "description": "Path to the git-receive-pack program on the remote end. Sometimes useful when pushing to a remote repository over ssh, and you do not have the program in a directory on the default $PATH."
      },
      {
        "type": "long",
        "key": "exec",
        "title": "--receive-pack=<git-receive-pack>, --exec=<git-receive-pack>",
        "description": "Path to the git-receive-pack program on the remote end. Sometimes useful when pushing to a remote repository over ssh, and you do not have the program in a directory on the default $PATH."
      },
      {
        "type": "long",
        "key": "force-with-lease",
        "title": "--[no-]force-with-lease, --force-with-lease=<refname>, --force-with-lease=<refname>:<expect>",
        "description": "Usually, \"git push\" refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it.\n\nThis option overrides this restriction if the current value of the remote ref is the expected value. \"git push\" fails otherwise.\n\nImagine that you have to rebase what you have already published. You will have to bypass the \"must fast-forward\" rule in order to replace the history you originally published with the rebased history. If somebody else built on top of your original history while you are rebasing, the tip of the branch at the remote may advance with their commit, and blindly pushing with --force will lose their work.\n\nThis option allows you to say that you expect the history you are updating is what you rebased and want to replace. If the remote ref still points at the commit you specified, you can be sure that no other people did anything to the ref. It is like taking a \"lease\" on the ref without explicitly locking it, and the remote ref is updated only if the \"lease\" is still valid.\n\n--force-with-lease alone, without specifying the details, will protect all remote refs that are going to be updated by requiring their current value to be the same as the remote-tracking branch we have for them.\n\n--force-with-lease=<refname>, without specifying the expected value, will protect the named ref (alone), if it is going to be updated, by requiring its current value to be the same as the remote-tracking branch we have for it.\n\n--force-with-lease=<refname>:<expect> will protect the named ref (alone), if it is going to be updated, by requiring its current value to be the same as the specified value <expect> (which is allowed to be different from the remote-tracking branch we have for the refname, or we do not even have to have such a remote-tracking branch when this form is used). If <expect> is the empty string, then the named ref must not already exist.\n\nNote that all forms other than --force-with-lease=<refname>:<expect> that specifies the expected current value of the ref explicitly are still experimental and their semantics may change as we gain experience with this feature.\n\n\"--no-force-with-lease\" will cancel all the previous --force-with-lease on the command line.\n\nA general note on safety: supplying this option without an expected value, i.e. as --force-with-lease or --force-with-lease=<refname> interacts very badly with anything that implicitly runs git fetch on the remote to be pushed to in the background, e.g. git fetch origin on your repository in a cronjob.\n\nThe protection it offers over --force is ensuring that subsequent changes your work wasn’t based on aren’t clobbered, but this is trivially defeated if some background process is updating refs in the background. We don’t have anything except the remote tracking info to go by as a heuristic for refs you’re expected to have seen & are willing to clobber.\n\nIf your editor or some other system is running git fetch in the background for you a way to mitigate this is to simply set up another remote:\n\ngit remote add origin-push $(git config remote.origin.url)\ngit fetch origin-push\n\nNow when the background process runs git fetch origin the references on origin-push won’t be updated, and thus commands like:\n\ngit push --force-with-lease origin-push\n\nWill fail unless you manually run git fetch origin-push. This method is of course entirely defeated by something that runs git fetch --all, in that case you’d need to either disable it or do something more tedious like:\n\ngit fetch              # update 'master' from remote\ngit tag base master    # mark our base point\ngit rebase -i master   # rewrite some commits\ngit push --force-with-lease=master:base master:master\n\nI.e. create a base tag for versions of the upstream code that you’ve seen and are willing to overwrite, then rewrite history, and finally force push changes to master if the remote version is still at base, regardless of what your local remotes/origin/master has been updated to in the background.\n\nAlternatively, specifying --force-if-includes as an ancillary option along with --force-with-lease[=<refname>] (i.e., without saying what exact commit the ref on the remote side must be pointing at, or which refs on the remote side are being protected) at the time of \"push\" will verify if updates from the remote-tracking refs that may have been implicitly updated in the background are integrated locally before allowing a forced update."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. Also, when --force-with-lease option is used, the command refuses to update a remote ref whose current value does not match what is expected.\n\nThis flag disables these checks, and can cause the remote repository to lose commits; use it with care.\n\nNote that --force applies to all the refs that are pushed, hence using it with push.default set to matching or with multiple push destinations configured with remote.*.push may overwrite refs other than the current branch (including local refs that are strictly behind their remote counterpart). To force a push to only one branch, use a + in front of the refspec to push (e.g git push origin +master to force a push to the master branch). See the <refspec>... section above for details."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. Also, when --force-with-lease option is used, the command refuses to update a remote ref whose current value does not match what is expected.\n\nThis flag disables these checks, and can cause the remote repository to lose commits; use it with care.\n\nNote that --force applies to all the refs that are pushed, hence using it with push.default set to matching or with multiple push destinations configured with remote.*.push may overwrite refs other than the current branch (including local refs that are strictly behind their remote counterpart). To force a push to only one branch, use a + in front of the refspec to push (e.g git push origin +master to force a push to the master branch). See the <refspec>... section above for details."
      },
      {
        "type": "long",
        "key": "force-if-includes",
        "title": "--[no-]force-if-includes",
        "description": "Force an update only if the tip of the remote-tracking ref has been integrated locally.\n\nThis option enables a check that verifies if the tip of the remote-tracking ref is reachable from one of the \"reflog\" entries of the local branch based in it for a rewrite. The check ensures that any updates from the remote have been incorporated locally by rejecting the forced update if that is not the case.\n\nIf the option is passed without specifying --force-with-lease, or specified along with --force-with-lease=<refname>:<expect>, it is a \"no-op\".\n\nSpecifying --no-force-if-includes disables this behavior."
      },
      {
        "type": "long",
        "key": "repo",
        "title": "--repo=<repository>",
        "description": "This option is equivalent to the <repository> argument. If both are specified, the command-line argument takes precedence."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u, --set-upstream",
        "description": "For every branch that is up to date or successfully pushed, add upstream (tracking) reference, used by argument-less git-pull[1] and other commands. For more information, see branch.<name>.merge in git-config[1]."
      },
      {
        "type": "long",
        "key": "set-upstream",
        "title": "-u, --set-upstream",
        "description": "For every branch that is up to date or successfully pushed, add upstream (tracking) reference, used by argument-less git-pull[1] and other commands. For more information, see branch.<name>.merge in git-config[1]."
      },
      {
        "type": "long",
        "key": "thin",
        "title": "--[no-]thin",
        "description": "These options are passed to git-send-pack[1]. A thin transfer significantly reduces the amount of sent data when the sender and receiver share many of the same objects in common. The default is --thin."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Suppress all output, including the listing of updated refs, unless an error occurs. Progress is not reported to the standard error stream."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Suppress all output, including the listing of updated refs, unless an error occurs. Progress is not reported to the standard error stream."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Run verbosely."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Run verbosely."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal."
      },
      {
        "type": "long",
        "key": "no-recurse-submodules",
        "title": "--no-recurse-submodules, --recurse-submodules=check|on-demand|only|no",
        "description": "May be used to make sure all submodule commits used by the revisions to be pushed are available on a remote-tracking branch. If check is used Git will verify that all submodule commits that changed in the revisions to be pushed are available on at least one remote of the submodule. If any commits are missing the push will be aborted and exit with non-zero status. If on-demand is used all submodules that changed in the revisions to be pushed will be pushed. If on-demand was not able to push all necessary revisions it will also be aborted and exit with non-zero status. If only is used all submodules will be recursively pushed while the superproject is left unpushed. A value of no or using --no-recurse-submodules can be used to override the push.recurseSubmodules configuration variable when no submodule recursion is required."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--no-recurse-submodules, --recurse-submodules=check|on-demand|only|no",
        "description": "May be used to make sure all submodule commits used by the revisions to be pushed are available on a remote-tracking branch. If check is used Git will verify that all submodule commits that changed in the revisions to be pushed are available on at least one remote of the submodule. If any commits are missing the push will be aborted and exit with non-zero status. If on-demand is used all submodules that changed in the revisions to be pushed will be pushed. If on-demand was not able to push all necessary revisions it will also be aborted and exit with non-zero status. If only is used all submodules will be recursively pushed while the superproject is left unpushed. A value of no or using --no-recurse-submodules can be used to override the push.recurseSubmodules configuration variable when no submodule recursion is required."
      },
      {
        "type": "long",
        "key": "verify",
        "title": "--[no-]verify",
        "description": "Toggle the pre-push hook (see githooks[5]). The default is --verify, giving the hook a chance to prevent the push. With --no-verify, the hook is bypassed completely."
      },
      {
        "type": "short",
        "key": "4",
        "title": "-4, --ipv4",
        "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
      },
      {
        "type": "long",
        "key": "ipv4",
        "title": "-4, --ipv4",
        "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
      },
      {
        "type": "short",
        "key": "6",
        "title": "-6, --ipv6",
        "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
      },
      {
        "type": "long",
        "key": "ipv6",
        "title": "-6, --ipv6",
        "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
      }
    ]
  },
  {
    "name": "git range-diff",
    "options": [
      {
        "type": "long",
        "key": "no-dual-color",
        "title": "--no-dual-color",
        "description": "When the commit diffs differ, git range-diff recreates the original diffs' coloring, and adds outer -/+ diff markers with the background being red/green to make it easier to see e.g. when there was a change in what exact lines were added.\n\nAdditionally, the commit diff lines that are only present in the first commit range are shown \"dimmed\" (this can be overridden using the color.diff.<slot> config setting where <slot> is one of contextDimmed, oldDimmed and newDimmed), and the commit diff lines that are only present in the second commit range are shown in bold (which can be overridden using the config settings color.diff.<slot> with <slot> being one of contextBold, oldBold or newBold).\n\nThis is known to range-diff as \"dual coloring\". Use --no-dual-color to revert to color all lines according to the outer diff markers (and completely ignore the inner diff when it comes to color)."
      },
      {
        "type": "long",
        "key": "creation-factor",
        "title": "--creation-factor=<percent>",
        "description": "Set the creation/deletion cost fudge factor to <percent>. Defaults to 60. Try a larger value if git range-diff erroneously considers a large change a total rewrite (deletion of one commit and addition of another), and a smaller one in the reverse case. See the ``Algorithm`` section below for an explanation why this is needed."
      },
      {
        "type": "long",
        "key": "left-only",
        "title": "--left-only",
        "description": "Suppress commits that are missing from the first specified range (or the \"left range\" when using the <rev1>...<rev2> format)."
      },
      {
        "type": "long",
        "key": "right-only",
        "title": "--right-only",
        "description": "Suppress commits that are missing from the second specified range (or the \"right range\" when using the <rev1>...<rev2> format)."
      }
    ]
  },
  {
    "name": "git rebase",
    "options": [
      {
        "type": "long",
        "key": "keep-base",
        "title": "--keep-base",
        "description": "Set the starting point at which to create the new commits to the merge base of <upstream> <branch>. Running git rebase --keep-base <upstream> <branch> is equivalent to running git rebase --onto <upstream>… <upstream>.\n\nThis option is useful in the case where one is developing a feature on top of an upstream branch. While the feature is being worked on, the upstream branch may advance and it may not be the best idea to keep rebasing on top of the upstream but to keep the base commit as-is.\n\nAlthough both this option and --fork-point find the merge base between <upstream> and <branch>, this option uses the merge base as the starting point on which new commits will be created, whereas --fork-point uses the merge base to determine the set of commits which will be rebased.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "continue",
        "title": "--continue",
        "description": "Restart the rebasing process after having resolved a merge conflict."
      },
      {
        "type": "long",
        "key": "abort",
        "title": "--abort",
        "description": "Abort the rebase operation and reset HEAD to the original branch. If <branch> was provided when the rebase operation was started, then HEAD will be reset to <branch>. Otherwise HEAD will be reset to where it was when the rebase operation was started."
      },
      {
        "type": "long",
        "key": "quit",
        "title": "--quit",
        "description": "Abort the rebase operation but HEAD is not reset back to the original branch. The index and working tree are also left unchanged as a result. If a temporary stash entry was created using --autostash, it will be saved to the stash list."
      },
      {
        "type": "long",
        "key": "apply",
        "title": "--apply",
        "description": "Use applying strategies to rebase (calling git-am internally). This option may become a no-op in the future once the merge backend handles everything the apply one does.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "empty",
        "title": "--empty={drop, keep, ask}",
        "description": "How to handle commits that are not empty to start and are not clean cherry-picks of any upstream commit, but which become empty after rebasing (because they contain a subset of already upstream changes). With drop (the default), commits that become empty are dropped. With keep, such commits are kept. With ask (implied by --interactive), the rebase will halt when an empty commit is applied allowing you to choose whether to drop it, edit files more, or just commit the empty changes. Other options, like --exec, will use the default of drop unless -i/--interactive is explicitly specified.\n\nNote that commits which start empty are kept (unless --no-keep-empty is specified), and commits which are clean cherry-picks (as determined by git log --cherry-mark ...) are detected and dropped as a preliminary step (unless --reapply-cherry-picks is passed).\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "no-keep-empty",
        "title": "--no-keep-empty, --keep-empty",
        "description": "Do not keep commits that start empty before the rebase (i.e. that do not change anything from its parent) in the result. The default is to keep commits which start empty, since creating such commits requires passing the --allow-empty override flag to git commit, signifying that a user is very intentionally creating such a commit and thus wants to keep it.\n\nUsage of this flag will probably be rare, since you can get rid of commits that start empty by just firing up an interactive rebase and removing the lines corresponding to the commits you don’t want. This flag exists as a convenient shortcut, such as for cases where external tools generate many empty commits and you want them all removed.\n\nFor commits which do not start empty but become empty after rebasing, see the --empty flag.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "keep-empty",
        "title": "--no-keep-empty, --keep-empty",
        "description": "Do not keep commits that start empty before the rebase (i.e. that do not change anything from its parent) in the result. The default is to keep commits which start empty, since creating such commits requires passing the --allow-empty override flag to git commit, signifying that a user is very intentionally creating such a commit and thus wants to keep it.\n\nUsage of this flag will probably be rare, since you can get rid of commits that start empty by just firing up an interactive rebase and removing the lines corresponding to the commits you don’t want. This flag exists as a convenient shortcut, such as for cases where external tools generate many empty commits and you want them all removed.\n\nFor commits which do not start empty but become empty after rebasing, see the --empty flag.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "reapply-cherry-picks",
        "title": "--reapply-cherry-picks, --no-reapply-cherry-picks",
        "description": "Reapply all clean cherry-picks of any upstream commit instead of preemptively dropping them. (If these commits then become empty after rebasing, because they contain a subset of already upstream changes, the behavior towards them is controlled by the --empty flag.)\n\nBy default (or if --no-reapply-cherry-picks is given), these commits will be automatically dropped. Because this necessitates reading all upstream commits, this can be expensive in repos with a large number of upstream commits that need to be read.\n\n--reapply-cherry-picks allows rebase to forgo reading all upstream commits, potentially improving performance.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "no-reapply-cherry-picks",
        "title": "--reapply-cherry-picks, --no-reapply-cherry-picks",
        "description": "Reapply all clean cherry-picks of any upstream commit instead of preemptively dropping them. (If these commits then become empty after rebasing, because they contain a subset of already upstream changes, the behavior towards them is controlled by the --empty flag.)\n\nBy default (or if --no-reapply-cherry-picks is given), these commits will be automatically dropped. Because this necessitates reading all upstream commits, this can be expensive in repos with a large number of upstream commits that need to be read.\n\n--reapply-cherry-picks allows rebase to forgo reading all upstream commits, potentially improving performance.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "allow-empty-message",
        "title": "--allow-empty-message",
        "description": "No-op. Rebasing commits with an empty message used to fail and this option would override that behavior, allowing commits with empty messages to be rebased. Now commits with an empty message do not cause rebasing to halt.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "skip",
        "title": "--skip",
        "description": "Restart the rebasing process by skipping the current patch."
      },
      {
        "type": "long",
        "key": "edit-todo",
        "title": "--edit-todo",
        "description": "Edit the todo list during an interactive rebase."
      },
      {
        "type": "long",
        "key": "show-current-patch",
        "title": "--show-current-patch",
        "description": "Show the current patch in an interactive rebase or when rebase is stopped because of conflicts. This is the equivalent of git show REBASE_HEAD."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --merge",
        "description": "Using merging strategies to rebase (default).\n\nNote that a rebase merge works by replaying each commit from the working branch on top of the <upstream> branch. Because of this, when a merge conflict happens, the side reported as ours is the so-far rebased series, starting with <upstream>, and theirs is the working branch. In other words, the sides are swapped.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "-m, --merge",
        "description": "Using merging strategies to rebase (default).\n\nNote that a rebase merge works by replaying each commit from the working branch on top of the <upstream> branch. Because of this, when a merge conflict happens, the side reported as ours is the so-far rebased series, starting with <upstream>, and theirs is the working branch. In other words, the sides are swapped.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "Use the given merge strategy, instead of the default recursive. This implies --merge.\n\nBecause git rebase replays each commit from the working branch on top of the <upstream> branch using the given strategy, using the ours strategy simply empties all patches from the <branch>, which makes little sense.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "Use the given merge strategy, instead of the default recursive. This implies --merge.\n\nBecause git rebase replays each commit from the working branch on top of the <upstream> branch using the given strategy, using the ours strategy simply empties all patches from the <branch>, which makes little sense.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X <strategy-option>, --strategy-option=<strategy-option>",
        "description": "Pass the <strategy-option> through to the merge strategy. This implies --merge and, if no strategy has been specified, -s recursive. Note the reversal of ours and theirs as noted above for the -m option.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "strategy-option",
        "title": "-X <strategy-option>, --strategy-option=<strategy-option>",
        "description": "Pass the <strategy-option> through to the merge strategy. This implies --merge and, if no strategy has been specified, -s recursive. Note the reversal of ours and theirs as noted above for the -m option.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "no-rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Be quiet. Implies --no-stat."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Be quiet. Implies --no-stat."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Be verbose. Implies --stat."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Be verbose. Implies --stat."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat",
        "description": "Show a diffstat of what changed upstream since the last rebase. The diffstat is also controlled by the configuration option rebase.stat."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-stat",
        "description": "Do not show a diffstat as part of the rebase process."
      },
      {
        "type": "long",
        "key": "no-stat",
        "title": "-n, --no-stat",
        "description": "Do not show a diffstat as part of the rebase process."
      },
      {
        "type": "long",
        "key": "no-verify",
        "title": "--no-verify",
        "description": "This option bypasses the pre-rebase hook. See also githooks[5]."
      },
      {
        "type": "long",
        "key": "verify",
        "title": "--verify",
        "description": "Allows the pre-rebase hook to run, which is the default. This option can be used to override --no-verify. See also githooks[5]."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C<n>",
        "description": "Ensure at least <n> lines of surrounding context match before and after each change. When fewer lines of surrounding context exist they all must match. By default no context is ever ignored. Implies --apply.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "no-ff",
        "title": "--no-ff, --force-rebase, -f",
        "description": "Individually replay all rebased commits instead of fast-forwarding over the unchanged ones. This ensures that the entire history of the rebased branch is composed of new commits.\n\nYou may find this helpful after reverting a topic branch merge, as this option recreates the topic branch with fresh commits so it can be remerged successfully without needing to \"revert the reversion\" (see the revert-a-faulty-merge How-To for details)."
      },
      {
        "type": "long",
        "key": "force-rebase",
        "title": "--no-ff, --force-rebase, -f",
        "description": "Individually replay all rebased commits instead of fast-forwarding over the unchanged ones. This ensures that the entire history of the rebased branch is composed of new commits.\n\nYou may find this helpful after reverting a topic branch merge, as this option recreates the topic branch with fresh commits so it can be remerged successfully without needing to \"revert the reversion\" (see the revert-a-faulty-merge How-To for details)."
      },
      {
        "type": "short",
        "key": "f",
        "title": "--no-ff, --force-rebase, -f",
        "description": "Individually replay all rebased commits instead of fast-forwarding over the unchanged ones. This ensures that the entire history of the rebased branch is composed of new commits.\n\nYou may find this helpful after reverting a topic branch merge, as this option recreates the topic branch with fresh commits so it can be remerged successfully without needing to \"revert the reversion\" (see the revert-a-faulty-merge How-To for details)."
      },
      {
        "type": "long",
        "key": "fork-point",
        "title": "--fork-point, --no-fork-point",
        "description": "Use reflog to find a better common ancestor between <upstream> and <branch> when calculating which commits have been introduced by <branch>.\n\nWhen --fork-point is active, fork_point will be used instead of <upstream> to calculate the set of commits to rebase, where fork_point is the result of git merge-base --fork-point <upstream> <branch> command (see git-merge-base[1]). If fork_point ends up being empty, the <upstream> will be used as a fallback.\n\nIf <upstream> is given on the command line, then the default is --no-fork-point, otherwise the default is --fork-point.\n\nIf your branch was based on <upstream> but <upstream> was rewound and your branch contains commits which were dropped, this option can be used with --keep-base in order to drop those commits from your branch.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "no-fork-point",
        "title": "--fork-point, --no-fork-point",
        "description": "Use reflog to find a better common ancestor between <upstream> and <branch> when calculating which commits have been introduced by <branch>.\n\nWhen --fork-point is active, fork_point will be used instead of <upstream> to calculate the set of commits to rebase, where fork_point is the result of git merge-base --fork-point <upstream> <branch> command (see git-merge-base[1]). If fork_point ends up being empty, the <upstream> will be used as a fallback.\n\nIf <upstream> is given on the command line, then the default is --no-fork-point, otherwise the default is --fork-point.\n\nIf your branch was based on <upstream> but <upstream> was rewound and your branch contains commits which were dropped, this option can be used with --keep-base in order to drop those commits from your branch.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "ignore-whitespace",
        "title": "--ignore-whitespace",
        "description": "Ignore whitespace differences when trying to reconcile differences. Currently, each backend implements an approximation of this behavior:\n\napply backend: When applying a patch, ignore changes in whitespace in context lines. Unfortunately, this means that if the \"old\" lines being replaced by the patch differ only in whitespace from the existing file, you will get a merge conflict instead of a successful patch application.\n\nmerge backend: Treat lines with only whitespace changes as unchanged when merging. Unfortunately, this means that any patch hunks that were intended to modify whitespace and nothing else will be dropped, even if the other side had no changes that conflicted."
      },
      {
        "type": "long",
        "key": "whitespace",
        "title": "--whitespace=<option>",
        "description": "This flag is passed to the git apply program (see git-apply[1]) that applies the patch. Implies --apply.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "committer-date-is-author-date",
        "title": "--committer-date-is-author-date",
        "description": "Instead of using the current time as the committer date, use the author date of the commit being rebased as the committer date. This option implies --force-rebase."
      },
      {
        "type": "long",
        "key": "ignore-date",
        "title": "--ignore-date, --reset-author-date",
        "description": "Instead of using the author date of the original commit, use the current time as the author date of the rebased commit. This option implies --force-rebase.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "reset-author-date",
        "title": "--ignore-date, --reset-author-date",
        "description": "Instead of using the author date of the original commit, use the current time as the author date of the rebased commit. This option implies --force-rebase.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "--signoff",
        "description": "Add a Signed-off-by trailer to all the rebased commits. Note that if --interactive is given then only commits marked to be picked, edited or reworded will have the trailer added.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --interactive",
        "description": "Make a list of the commits which are about to be rebased. Let the user edit that list before rebasing. This mode can also be used to split commits (see SPLITTING COMMITS below).\n\nThe commit list format can be changed by setting the configuration option rebase.instructionFormat. A customized instruction format will automatically have the long commit hash prepended to the format.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "interactive",
        "title": "-i, --interactive",
        "description": "Make a list of the commits which are about to be rebased. Let the user edit that list before rebasing. This mode can also be used to split commits (see SPLITTING COMMITS below).\n\nThe commit list format can be changed by setting the configuration option rebase.instructionFormat. A customized instruction format will automatically have the long commit hash prepended to the format.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r, --rebase-merges[=(rebase-cousins|no-rebase-cousins)]",
        "description": "By default, a rebase will simply drop merge commits from the todo list, and put the rebased commits into a single, linear branch. With --rebase-merges, the rebase will instead try to preserve the branching structure within the commits that are to be rebased, by recreating the merge commits. Any resolved merge conflicts or manual amendments in these merge commits will have to be resolved/re-applied manually.\n\nBy default, or when no-rebase-cousins was specified, commits which do not have <upstream> as direct ancestor will keep their original branch point, i.e. commits that would be excluded by git-log[1]'s --ancestry-path option will keep their original ancestry by default. If the rebase-cousins mode is turned on, such commits are instead rebased onto <upstream> (or <onto>, if specified).\n\nThe --rebase-merges mode is similar in spirit to the deprecated --preserve-merges but works with interactive rebases, where commits can be reordered, inserted and dropped at will.\n\nIt is currently only possible to recreate the merge commits using the recursive merge strategy; different merge strategies can be used only via explicit exec git merge -s <strategy> [...] commands.\n\nSee also REBASING MERGES and INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "rebase-merges",
        "title": "-r, --rebase-merges[=(rebase-cousins|no-rebase-cousins)]",
        "description": "By default, a rebase will simply drop merge commits from the todo list, and put the rebased commits into a single, linear branch. With --rebase-merges, the rebase will instead try to preserve the branching structure within the commits that are to be rebased, by recreating the merge commits. Any resolved merge conflicts or manual amendments in these merge commits will have to be resolved/re-applied manually.\n\nBy default, or when no-rebase-cousins was specified, commits which do not have <upstream> as direct ancestor will keep their original branch point, i.e. commits that would be excluded by git-log[1]'s --ancestry-path option will keep their original ancestry by default. If the rebase-cousins mode is turned on, such commits are instead rebased onto <upstream> (or <onto>, if specified).\n\nThe --rebase-merges mode is similar in spirit to the deprecated --preserve-merges but works with interactive rebases, where commits can be reordered, inserted and dropped at will.\n\nIt is currently only possible to recreate the merge commits using the recursive merge strategy; different merge strategies can be used only via explicit exec git merge -s <strategy> [...] commands.\n\nSee also REBASING MERGES and INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --preserve-merges",
        "description": "[DEPRECATED: use --rebase-merges instead] Recreate merge commits instead of flattening the history by replaying commits a merge commit introduces. Merge conflict resolutions or manual amendments to merge commits are not preserved.\n\nThis uses the --interactive machinery internally, but combining it with the --interactive option explicitly is generally not a good idea unless you know what you are doing (see BUGS below).\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "preserve-merges",
        "title": "-p, --preserve-merges",
        "description": "[DEPRECATED: use --rebase-merges instead] Recreate merge commits instead of flattening the history by replaying commits a merge commit introduces. Merge conflict resolutions or manual amendments to merge commits are not preserved.\n\nThis uses the --interactive machinery internally, but combining it with the --interactive option explicitly is generally not a good idea unless you know what you are doing (see BUGS below).\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "short",
        "key": "x",
        "title": "-x <cmd>, --exec <cmd>",
        "description": "Append \"exec <cmd>\" after each line creating a commit in the final history. <cmd> will be interpreted as one or more shell commands. Any command that fails will interrupt the rebase, with exit code 1.\n\nYou may execute several commands by either using one instance of --exec with several commands:\n\ngit rebase -i --exec \"cmd1 && cmd2 && ...\"\n\nor by giving more than one --exec:\n\ngit rebase -i --exec \"cmd1\" --exec \"cmd2\" --exec ...\n\nIf --autosquash is used, \"exec\" lines will not be appended for the intermediate commits, and will only appear at the end of each squash/fixup series.\n\nThis uses the --interactive machinery internally, but it can be run without an explicit --interactive.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root",
        "description": "Rebase all commits reachable from <branch>, instead of limiting them with an <upstream>. This allows you to rebase the root commit(s) on a branch. When used with --onto, it will skip changes already contained in <newbase> (instead of <upstream>) whereas without --onto it will operate on every change. When used together with both --onto and --preserve-merges, all root commits will be rewritten to have <newbase> as parent instead.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "autosquash",
        "title": "--autosquash, --no-autosquash",
        "description": "When the commit log message begins with \"squash! … \" or \"fixup! … \" or \"amend! … \", and there is already a commit in the todo list that matches the same ..., automatically modify the todo list of rebase -i, so that the commit marked for squashing comes right after the commit to be modified, and change the action of the moved commit from pick to squash or fixup or fixup -C respectively. A commit matches the ... if the commit subject matches, or if the ... refers to the commit’s hash. As a fall-back, partial matches of the commit subject work, too. The recommended way to create fixup/amend/squash commits is by using the --fixup, --fixup=amend: or --fixup=reword: and --squash options respectively of git-commit[1].\n\nIf the --autosquash option is enabled by default using the configuration variable rebase.autoSquash, this option can be used to override and disable this setting.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "no-autosquash",
        "title": "--autosquash, --no-autosquash",
        "description": "When the commit log message begins with \"squash! … \" or \"fixup! … \" or \"amend! … \", and there is already a commit in the todo list that matches the same ..., automatically modify the todo list of rebase -i, so that the commit marked for squashing comes right after the commit to be modified, and change the action of the moved commit from pick to squash or fixup or fixup -C respectively. A commit matches the ... if the commit subject matches, or if the ... refers to the commit’s hash. As a fall-back, partial matches of the commit subject work, too. The recommended way to create fixup/amend/squash commits is by using the --fixup, --fixup=amend: or --fixup=reword: and --squash options respectively of git-commit[1].\n\nIf the --autosquash option is enabled by default using the configuration variable rebase.autoSquash, this option can be used to override and disable this setting.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "autostash",
        "title": "--autostash, --no-autostash",
        "description": "Automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. This means that you can run rebase on a dirty worktree. However, use with care: the final stash application after a successful rebase might result in non-trivial conflicts."
      },
      {
        "type": "long",
        "key": "no-autostash",
        "title": "--autostash, --no-autostash",
        "description": "Automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. This means that you can run rebase on a dirty worktree. However, use with care: the final stash application after a successful rebase might result in non-trivial conflicts."
      },
      {
        "type": "long",
        "key": "reschedule-failed-exec",
        "title": "--reschedule-failed-exec, --no-reschedule-failed-exec",
        "description": "Automatically reschedule exec commands that failed. This only makes sense in interactive mode (or when an --exec option was provided).\n\nEven though this option applies once a rebase is started, it’s set for the whole rebase at the start based on either the rebase.rescheduleFailedExec configuration (see git-config[1] or \"CONFIGURATION\" below) or whether this option is provided. Otherwise an explicit --no-reschedule-failed-exec at the start would be overridden by the presence of rebase.rescheduleFailedExec=true configuration."
      },
      {
        "type": "long",
        "key": "no-reschedule-failed-exec",
        "title": "--reschedule-failed-exec, --no-reschedule-failed-exec",
        "description": "Automatically reschedule exec commands that failed. This only makes sense in interactive mode (or when an --exec option was provided).\n\nEven though this option applies once a rebase is started, it’s set for the whole rebase at the start based on either the rebase.rescheduleFailedExec configuration (see git-config[1] or \"CONFIGURATION\" below) or whether this option is provided. Otherwise an explicit --no-reschedule-failed-exec at the start would be overridden by the presence of rebase.rescheduleFailedExec=true configuration."
      }
    ]
  },
  {
    "name": "git reset",
    "options": [
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet, --no-quiet",
        "description": "Be quiet, only report errors. The default behavior is set by the reset.quiet config option. --quiet and --no-quiet will override the default behavior."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet, --no-quiet",
        "description": "Be quiet, only report errors. The default behavior is set by the reset.quiet config option. --quiet and --no-quiet will override the default behavior."
      },
      {
        "type": "long",
        "key": "no-quiet",
        "title": "-q, --quiet, --no-quiet",
        "description": "Be quiet, only report errors. The default behavior is set by the reset.quiet config option. --quiet and --no-quiet will override the default behavior."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable core.quotePath (see git-config[1]). See also --pathspec-file-nul and global --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "Only meaningful with --pathspec-from-file. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes)."
      }
    ]
  },
  {
    "name": "git restore",
    "options": [
      {
        "type": "short",
        "key": "s",
        "title": "-s <tree>, --source=<tree>",
        "description": "Restore the working tree files with the content from the given tree. It is common to specify the source tree by naming a commit, branch or tag associated with it.\n\nIf not specified, the contents are restored from HEAD if --staged is given, otherwise from the index.\n\nAs a special case, you may use \"A...B\" as a shortcut for the merge base of A and B if there is exactly one merge base. You can leave out at most one of A and B, in which case it defaults to HEAD."
      },
      {
        "type": "long",
        "key": "source",
        "title": "-s <tree>, --source=<tree>",
        "description": "Restore the working tree files with the content from the given tree. It is common to specify the source tree by naming a commit, branch or tag associated with it.\n\nIf not specified, the contents are restored from HEAD if --staged is given, otherwise from the index.\n\nAs a special case, you may use \"A...B\" as a shortcut for the merge base of A and B if there is exactly one merge base. You can leave out at most one of A and B, in which case it defaults to HEAD."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --patch",
        "description": "Interactively select hunks in the difference between the restore source and the restore location. See the “Interactive Mode” section of git-add[1] to learn how to operate the --patch mode.\n\nNote that --patch can accept no pathspec and will prompt to restore all modified paths."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, --patch",
        "description": "Interactively select hunks in the difference between the restore source and the restore location. See the “Interactive Mode” section of git-add[1] to learn how to operate the --patch mode.\n\nNote that --patch can accept no pathspec and will prompt to restore all modified paths."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --worktree, -S, --staged",
        "description": "Specify the restore location. If neither option is specified, by default the working tree is restored. Specifying --staged will only restore the index. Specifying both restores both."
      },
      {
        "type": "long",
        "key": "worktree",
        "title": "-W, --worktree, -S, --staged",
        "description": "Specify the restore location. If neither option is specified, by default the working tree is restored. Specifying --staged will only restore the index. Specifying both restores both."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-W, --worktree, -S, --staged",
        "description": "Specify the restore location. If neither option is specified, by default the working tree is restored. Specifying --staged will only restore the index. Specifying both restores both."
      },
      {
        "type": "long",
        "key": "staged",
        "title": "-W, --worktree, -S, --staged",
        "description": "Specify the restore location. If neither option is specified, by default the working tree is restored. Specifying --staged will only restore the index. Specifying both restores both."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages. Implies --no-progress."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages. Implies --no-progress."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress, --no-progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not attached to a terminal, regardless of --quiet."
      },
      {
        "type": "long",
        "key": "no-progress",
        "title": "--progress, --no-progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not attached to a terminal, regardless of --quiet."
      },
      {
        "type": "long",
        "key": "ours",
        "title": "--ours, --theirs",
        "description": "When restoring files in the working tree from the index, use stage #2 (ours) or #3 (theirs) for unmerged paths.\n\nNote that during git rebase and git pull --rebase, ours and theirs may appear swapped. See the explanation of the same options in git-checkout[1] for details."
      },
      {
        "type": "long",
        "key": "theirs",
        "title": "--ours, --theirs",
        "description": "When restoring files in the working tree from the index, use stage #2 (ours) or #3 (theirs) for unmerged paths.\n\nNote that during git rebase and git pull --rebase, ours and theirs may appear swapped. See the explanation of the same options in git-checkout[1] for details."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --merge",
        "description": "When restoring files on the working tree from the index, recreate the conflicted merge in the unmerged paths."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "-m, --merge",
        "description": "When restoring files on the working tree from the index, recreate the conflicted merge in the unmerged paths."
      },
      {
        "type": "long",
        "key": "conflict",
        "title": "--conflict=<style>",
        "description": "The same as --merge option above, but changes the way the conflicting hunks are presented, overriding the merge.conflictStyle configuration variable. Possible values are \"merge\" (default) and \"diff3\" (in addition to what is shown by \"merge\" style, shows the original contents)."
      },
      {
        "type": "long",
        "key": "ignore-unmerged",
        "title": "--ignore-unmerged",
        "description": "When restoring files on the working tree from the index, do not abort the operation if there are unmerged entries and neither --ours, --theirs, --merge or --conflict is specified. Unmerged paths on the working tree are left alone."
      },
      {
        "type": "long",
        "key": "ignore-skip-worktree-bits",
        "title": "--ignore-skip-worktree-bits",
        "description": "In sparse checkout mode, by default is to only update entries matched by <pathspec> and sparse patterns in $GIT_DIR/info/sparse-checkout. This option ignores the sparse patterns and unconditionally restores any files in <pathspec>."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules, --no-recurse-submodules",
        "description": "If <pathspec> names an active submodule and the restore location includes the working tree, the submodule will only be updated if this option is given, in which case its working tree will be restored to the commit recorded in the superproject, and any local modifications overwritten. If nothing (or --no-recurse-submodules) is used, submodules working trees will not be updated. Just like git-checkout[1], this will detach HEAD of the submodule."
      },
      {
        "type": "long",
        "key": "no-recurse-submodules",
        "title": "--recurse-submodules, --no-recurse-submodules",
        "description": "If <pathspec> names an active submodule and the restore location includes the working tree, the submodule will only be updated if this option is given, in which case its working tree will be restored to the commit recorded in the superproject, and any local modifications overwritten. If nothing (or --no-recurse-submodules) is used, submodules working trees will not be updated. Just like git-checkout[1], this will detach HEAD of the submodule."
      },
      {
        "type": "long",
        "key": "overlay",
        "title": "--overlay, --no-overlay",
        "description": "In overlay mode, the command never removes files when restoring. In no-overlay mode, tracked files that do not appear in the --source tree are removed, to make them match <tree> exactly. The default is no-overlay mode."
      },
      {
        "type": "long",
        "key": "no-overlay",
        "title": "--overlay, --no-overlay",
        "description": "In overlay mode, the command never removes files when restoring. In no-overlay mode, tracked files that do not appear in the --source tree are removed, to make them match <tree> exactly. The default is no-overlay mode."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable core.quotePath (see git-config[1]). See also --pathspec-file-nul and global --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "Only meaningful with --pathspec-from-file. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes)."
      }
    ]
  },
  {
    "name": "git revert",
    "options": [
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "With this option, git revert will let you edit the commit message prior to committing the revert. This is the default if you run the command from a terminal."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "With this option, git revert will let you edit the commit message prior to committing the revert. This is the default if you run the command from a terminal."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m parent-number, --mainline parent-number",
        "description": "Usually you cannot revert a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and allows revert to reverse the change relative to the specified parent.\n\nReverting a merge commit declares that you will never want the tree changes brought in by the merge. As a result, later merges will only bring in tree changes introduced by commits that are not ancestors of the previously reverted merge. This may or may not be what you want.\n\nSee the revert-a-faulty-merge How-To for more details."
      },
      {
        "type": "long",
        "key": "no-edit",
        "title": "--no-edit",
        "description": "With this option, git revert will not start the commit message editor."
      },
      {
        "type": "long",
        "key": "cleanup",
        "title": "--cleanup=<mode>",
        "description": "This option determines how the commit message will be cleaned up before being passed on to the commit machinery. See git-commit[1] for more details. In particular, if the <mode> is given a value of scissors, scissors will be appended to MERGE_MSG before being passed on in the case of a conflict."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-commit",
        "description": "Usually the command automatically creates some commits with commit log messages stating which commits were reverted. This flag applies the changes necessary to revert the named commits to your working tree and the index, but does not make the commits. In addition, when this option is used, your index does not have to match the HEAD commit. The revert is done against the beginning state of your index.\n\nThis is useful when reverting more than one commits' effect to your index in a row."
      },
      {
        "type": "long",
        "key": "no-commit",
        "title": "-n, --no-commit",
        "description": "Usually the command automatically creates some commits with commit log messages stating which commits were reverted. This flag applies the changes necessary to revert the named commits to your working tree and the index, but does not make the commits. In addition, when this option is used, your index does not have to match the HEAD commit. The revert is done against the beginning state of your index.\n\nThis is useful when reverting more than one commits' effect to your index in a row."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable, and earlier --gpg-sign."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer at the end of the commit message. See the signoff option in git-commit[1] for more information."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer at the end of the commit message. See the signoff option in git-commit[1] for more information."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "--strategy=<strategy>",
        "description": "Use the given merge strategy. Should only be used once. See the MERGE STRATEGIES section in git-merge[1] for details."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X<option>, --strategy-option=<option>",
        "description": "Pass the merge strategy-specific option through to the merge strategy. See git-merge[1] for details."
      },
      {
        "type": "long",
        "key": "strategy-option",
        "title": "-X<option>, --strategy-option=<option>",
        "description": "Pass the merge strategy-specific option through to the merge strategy. See git-merge[1] for details."
      },
      {
        "type": "long",
        "key": "rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "no-rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible."
      }
    ]
  },
  {
    "name": "git rm",
    "options": [
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Override the up-to-date check."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Override the up-to-date check."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Don’t actually remove any file(s). Instead, just show if they exist in the index and would otherwise be removed by the command."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Don’t actually remove any file(s). Instead, just show if they exist in the index and would otherwise be removed by the command."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r",
        "description": "Allow recursive removal when a leading directory name is given."
      },
      {
        "type": "long",
        "key": "cached",
        "title": "--cached",
        "description": "Use this option to unstage and remove paths only from the index. Working tree files, whether modified or not, will be left alone."
      },
      {
        "type": "long",
        "key": "ignore-unmatch",
        "title": "--ignore-unmatch",
        "description": "Exit with a zero status even if no files matched."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "git rm normally outputs one line (in the form of an rm command) for each file removed. This option suppresses that output."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "git rm normally outputs one line (in the form of an rm command) for each file removed. This option suppresses that output."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "Pathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable core.quotePath (see git-config[1]). See also --pathspec-file-nul and global --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "Only meaningful with --pathspec-from-file. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes)."
      }
    ]
  },
  {
    "name": "git shortlog",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-n, --numbered",
        "description": "Sort output according to the number of commits per author instead of author alphabetic order."
      },
      {
        "type": "long",
        "key": "numbered",
        "title": "-n, --numbered",
        "description": "Sort output according to the number of commits per author instead of author alphabetic order."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --summary",
        "description": "Suppress commit description and provide a commit count summary only."
      },
      {
        "type": "long",
        "key": "summary",
        "title": "-s, --summary",
        "description": "Suppress commit description and provide a commit count summary only."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --email",
        "description": "Show the email address of each author."
      },
      {
        "type": "long",
        "key": "email",
        "title": "-e, --email",
        "description": "Show the email address of each author."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--format[=<format>]",
        "description": "Instead of the commit subject, use some other information to describe each commit. <format> can be any string accepted by the --format option of git log, such as * [%h] %s. (See the \"PRETTY FORMATS\" section of git-log[1].)\n\nEach pretty-printed commit will be rewrapped before it is shown."
      },
      {
        "type": "long",
        "key": "group",
        "title": "--group=<type>",
        "description": "Group commits based on <type>. If no --group option is specified, the default is author. <type> is one of:\n\n * author, commits are grouped by author\n\n * committer, commits are grouped by committer (the same as -c)\n\n * trailer:<field>, the <field> is interpreted as a case-insensitive commit message trailer (see git-interpret-trailers[1]). For example, if your project uses Reviewed-by trailers, you might want to see who has been reviewing with git shortlog -ns --group=trailer:reviewed-by.\n   \n   Note that commits that do not include the trailer will not be counted. Likewise, commits with multiple trailers (e.g., multiple signoffs) may be counted more than once (but only once per unique trailer value in that commit).\n   \n   Shortlog will attempt to parse each trailer value as a name <email> identity. If successful, the mailmap is applied and the email is omitted unless the --email option is specified. If the value cannot be parsed as an identity, it will be taken literally and completely.\n\nIf --group is specified multiple times, commits are counted under each value (but again, only once per unique value in that commit). For example, git shortlog --group=author --group=trailer:co-authored-by counts both authors and co-authors."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --committer",
        "description": "This is an alias for --group=committer."
      },
      {
        "type": "long",
        "key": "committer",
        "title": "-c, --committer",
        "description": "This is an alias for --group=committer."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w[<width>[, <indent1>[, <indent2>]]]",
        "description": "Linewrap the output by wrapping each line at width. The first line of each entry is indented by indent1 spaces, and the second and subsequent lines are indented by indent2 spaces. width, indent1, and indent2 default to 76, 6 and 9 respectively.\n\nIf width is 0 (zero) then indent the lines of the output without wrapping them."
      },
      {
        "type": "long",
        "key": "max-count",
        "title": "-<number>, -n <number>, --max-count=<number>",
        "description": "Limit the number of commits to output."
      },
      {
        "type": "long",
        "key": "skip",
        "title": "--skip=<number>",
        "description": "Skip number commits before starting to show the commit output."
      },
      {
        "type": "long",
        "key": "since",
        "title": "--since=<date>, --after=<date>",
        "description": "Show commits more recent than a specific date."
      },
      {
        "type": "long",
        "key": "after",
        "title": "--since=<date>, --after=<date>",
        "description": "Show commits more recent than a specific date."
      },
      {
        "type": "long",
        "key": "until",
        "title": "--until=<date>, --before=<date>",
        "description": "Show commits older than a specific date."
      },
      {
        "type": "long",
        "key": "before",
        "title": "--until=<date>, --before=<date>",
        "description": "Show commits older than a specific date."
      },
      {
        "type": "long",
        "key": "author",
        "title": "--author=<pattern>, --committer=<pattern>",
        "description": "Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression). With more than one --author=<pattern>, commits whose author matches any of the given patterns are chosen (similarly for multiple --committer=<pattern>)."
      },
      {
        "type": "long",
        "key": "grep-reflog",
        "title": "--grep-reflog=<pattern>",
        "description": "Limit the commits output to ones with reflog entries that match the specified pattern (regular expression). With more than one --grep-reflog, commits whose reflog message matches any of the given patterns are chosen. It is an error to use this option unless --walk-reflogs is in use."
      },
      {
        "type": "long",
        "key": "grep",
        "title": "--grep=<pattern>",
        "description": "Limit the commits output to ones with log message that matches the specified pattern (regular expression). With more than one --grep=<pattern>, commits whose message matches any of the given patterns are chosen (but see --all-match).\n\nWhen --notes is in effect, the message from the notes is matched as if it were part of the log message."
      },
      {
        "type": "long",
        "key": "all-match",
        "title": "--all-match",
        "description": "Limit the commits output to ones that match all given --grep, instead of ones that match at least one."
      },
      {
        "type": "long",
        "key": "invert-grep",
        "title": "--invert-grep",
        "description": "Limit the commits output to ones with log message that do not match the pattern specified with --grep=<pattern>."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --regexp-ignore-case",
        "description": "Match the regular expression limiting patterns without regard to letter case."
      },
      {
        "type": "long",
        "key": "regexp-ignore-case",
        "title": "-i, --regexp-ignore-case",
        "description": "Match the regular expression limiting patterns without regard to letter case."
      },
      {
        "type": "long",
        "key": "basic-regexp",
        "title": "--basic-regexp",
        "description": "Consider the limiting patterns to be basic regular expressions; this is the default."
      },
      {
        "type": "short",
        "key": "E",
        "title": "-E, --extended-regexp",
        "description": "Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions."
      },
      {
        "type": "long",
        "key": "extended-regexp",
        "title": "-E, --extended-regexp",
        "description": "Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F, --fixed-strings",
        "description": "Consider the limiting patterns to be fixed strings (don’t interpret pattern as a regular expression)."
      },
      {
        "type": "long",
        "key": "fixed-strings",
        "title": "-F, --fixed-strings",
        "description": "Consider the limiting patterns to be fixed strings (don’t interpret pattern as a regular expression)."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P, --perl-regexp",
        "description": "Consider the limiting patterns to be Perl-compatible regular expressions.\n\nSupport for these types of regular expressions is an optional compile-time dependency. If Git wasn’t compiled with support for them providing this option will cause it to die."
      },
      {
        "type": "long",
        "key": "perl-regexp",
        "title": "-P, --perl-regexp",
        "description": "Consider the limiting patterns to be Perl-compatible regular expressions.\n\nSupport for these types of regular expressions is an optional compile-time dependency. If Git wasn’t compiled with support for them providing this option will cause it to die."
      },
      {
        "type": "long",
        "key": "remove-empty",
        "title": "--remove-empty",
        "description": "Stop when a given path disappears from the tree."
      },
      {
        "type": "long",
        "key": "merges",
        "title": "--merges",
        "description": "Print only merge commits. This is exactly the same as --min-parents=2."
      },
      {
        "type": "long",
        "key": "no-merges",
        "title": "--no-merges",
        "description": "Do not print commits with more than one parent. This is exactly the same as --max-parents=1."
      },
      {
        "type": "long",
        "key": "min-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more parents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "max-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more parents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "no-min-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more parents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "no-max-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more parents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge commit. This option can give a better overview when viewing the evolution of a particular topic branch, because merges into a topic branch tend to be only about adjusting to updated upstream from time to time, and this option allows you to ignore the individual commits brought in to your history by such a merge."
      },
      {
        "type": "long",
        "key": "not",
        "title": "--not",
        "description": "Reverses the meaning of the ^ prefix (or lack thereof) for all following revision specifiers, up to the next --not."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Pretend as if all the refs in refs/, along with HEAD, are listed on the command line as <commit>."
      },
      {
        "type": "long",
        "key": "branches",
        "title": "--branches[=<pattern>]",
        "description": "Pretend as if all the refs in refs/heads are listed on the command line as <commit>. If <pattern> is given, limit branches to ones matching given shell glob. If pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--tags[=<pattern>]",
        "description": "Pretend as if all the refs in refs/tags are listed on the command line as <commit>. If <pattern> is given, limit tags to ones matching given shell glob. If pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "remotes",
        "title": "--remotes[=<pattern>]",
        "description": "Pretend as if all the refs in refs/remotes are listed on the command line as <commit>. If <pattern> is given, limit remote-tracking branches to ones matching given shell glob. If pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "glob",
        "title": "--glob=<glob-pattern>",
        "description": "Pretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit>. Leading refs/, is automatically prepended if missing. If pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude=<glob-pattern>",
        "description": "Do not include refs matching <glob-pattern> that the next --all, --branches, --tags, --remotes, or --glob would otherwise consider. Repetitions of this option accumulate exclusion patterns up to the next --all, --branches, --tags, --remotes, or --glob option (other options or arguments do not clear accumulated patterns).\n\nThe patterns given should not begin with refs/heads, refs/tags, or refs/remotes when applied to --branches, --tags, or --remotes, respectively, and they must begin with refs/ when applied to --glob or --all. If a trailing /* is intended, it must be given explicitly."
      },
      {
        "type": "long",
        "key": "reflog",
        "title": "--reflog",
        "description": "Pretend as if all objects mentioned by reflogs are listed on the command line as <commit>."
      },
      {
        "type": "long",
        "key": "alternate-refs",
        "title": "--alternate-refs",
        "description": "Pretend as if all objects mentioned as ref tips of alternate repositories were listed on the command line. An alternate repository is any repository whose object directory is specified in objects/info/alternates. The set of included objects may be modified by core.alternateRefsCommand, etc. See git-config[1]."
      },
      {
        "type": "long",
        "key": "single-worktree",
        "title": "--single-worktree",
        "description": "By default, all working trees will be examined by the following options when there are more than one (see git-worktree[1]): --all, --reflog and --indexed-objects. This option forces them to examine the current working tree only."
      },
      {
        "type": "long",
        "key": "ignore-missing",
        "title": "--ignore-missing",
        "description": "Upon seeing an invalid object name in the input, pretend as if the bad input was not given."
      },
      {
        "type": "long",
        "key": "bisect",
        "title": "--bisect",
        "description": "Pretend as if the bad bisection ref refs/bisect/bad was listed and as if it was followed by --not and the good bisection refs refs/bisect/good-* on the command line."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "In addition to the <commit> listed on the command line, read them from the standard input. If a -- separator is seen, stop reading commits and start reading paths to limit the result."
      },
      {
        "type": "long",
        "key": "cherry-mark",
        "title": "--cherry-mark",
        "description": "Like --cherry-pick (see below) but mark equivalent commits with = rather than omitting them, and inequivalent ones with +."
      },
      {
        "type": "long",
        "key": "cherry-pick",
        "title": "--cherry-pick",
        "description": "Omit any commit that introduces the same change as another commit on the “other side” when the set of commits are limited with symmetric difference.\n\nFor example, if you have two branches, A and B, a usual way to list all commits on only one side of them is with --left-right (see the example below in the description of the --left-right option). However, it shows the commits that were cherry-picked from the other branch (for example, “3rd on b” may be cherry-picked from branch A). With this option, such pairs of commits are excluded from the output."
      },
      {
        "type": "long",
        "key": "left-only",
        "title": "--left-only, --right-only",
        "description": "List only commits on the respective side of a symmetric difference, i.e. only those which would be marked < resp. > by --left-right.\n\nFor example, --cherry-pick --right-only A...B omits those commits from B which are in A or are patch-equivalent to a commit in A. In other words, this lists the + commits from git cherry A B. More precisely, --cherry-pick --right-only --no-merges gives the exact list."
      },
      {
        "type": "long",
        "key": "right-only",
        "title": "--left-only, --right-only",
        "description": "List only commits on the respective side of a symmetric difference, i.e. only those which would be marked < resp. > by --left-right.\n\nFor example, --cherry-pick --right-only A...B omits those commits from B which are in A or are patch-equivalent to a commit in A. In other words, this lists the + commits from git cherry A B. More precisely, --cherry-pick --right-only --no-merges gives the exact list."
      },
      {
        "type": "long",
        "key": "cherry",
        "title": "--cherry",
        "description": "A synonym for --right-only --cherry-mark --no-merges; useful to limit the output to the commits on our side and mark those that have been applied to the other side of a forked history with git log --cherry upstream...mybranch, similar to git cherry upstream mybranch."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --walk-reflogs",
        "description": "Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones. When this option is used you cannot specify commits to exclude (that is, ^commit, commit1..commit2, and commit1...commit2 notations cannot be used).\n\nWith --pretty format other than oneline and reference (for obvious reasons), this causes the output to have two extra lines of information taken from the reflog. The reflog designator in the output may be shown as ref@{Nth} (where Nth is the reverse-chronological index in the reflog) or as ref@{timestamp} (with the timestamp for that entry), depending on a few rules:\n\n 1. If the starting point is specified as ref@{Nth}, show the index format.\n\n 2. If the starting point was specified as ref@{now}, show the timestamp format.\n\n 3. If neither was used, but --date was given on the command line, show the timestamp in the format requested by --date.\n\n 4. Otherwise, show the index format.\n\nUnder --pretty=oneline, the commit message is prefixed with this information on the same line. This option cannot be combined with --reverse. See also git-reflog[1].\n\nUnder --pretty=reference, this information will not be shown at all."
      },
      {
        "type": "long",
        "key": "walk-reflogs",
        "title": "-g, --walk-reflogs",
        "description": "Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones. When this option is used you cannot specify commits to exclude (that is, ^commit, commit1..commit2, and commit1...commit2 notations cannot be used).\n\nWith --pretty format other than oneline and reference (for obvious reasons), this causes the output to have two extra lines of information taken from the reflog. The reflog designator in the output may be shown as ref@{Nth} (where Nth is the reverse-chronological index in the reflog) or as ref@{timestamp} (with the timestamp for that entry), depending on a few rules:\n\n 1. If the starting point is specified as ref@{Nth}, show the index format.\n\n 2. If the starting point was specified as ref@{now}, show the timestamp format.\n\n 3. If neither was used, but --date was given on the command line, show the timestamp in the format requested by --date.\n\n 4. Otherwise, show the index format.\n\nUnder --pretty=oneline, the commit message is prefixed with this information on the same line. This option cannot be combined with --reverse. See also git-reflog[1].\n\nUnder --pretty=reference, this information will not be shown at all."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "--merge",
        "description": "After a failed merge, show refs that touch files having a conflict and don’t exist on all heads to merge."
      },
      {
        "type": "long",
        "key": "boundary",
        "title": "--boundary",
        "description": "Output excluded boundary commits. Boundary commits are prefixed with -."
      },
      {
        "type": "long",
        "key": "simplify-by-decoration",
        "title": "--simplify-by-decoration",
        "description": "Commits that are referred by some branch or tag are selected."
      },
      {
        "type": "long",
        "key": "show-pulls",
        "title": "--show-pulls",
        "description": "Include all commits from the default mode, but also any merge commits that are not TREESAME to the first parent but are TREESAME to a later parent. This mode is helpful for showing the merge commits that \"first introduced\" a change to a branch."
      },
      {
        "type": "long",
        "key": "full-history",
        "title": "--full-history",
        "description": "Same as the default mode, but does not prune some history."
      },
      {
        "type": "long",
        "key": "dense",
        "title": "--dense",
        "description": "Only the selected commits are shown, plus some to have a meaningful history."
      },
      {
        "type": "long",
        "key": "sparse",
        "title": "--sparse",
        "description": "All commits in the simplified history are shown."
      },
      {
        "type": "long",
        "key": "simplify-merges",
        "title": "--simplify-merges",
        "description": "Additional option to --full-history to remove some needless merges from the resulting history, as there are no selected commits contributing to this merge."
      },
      {
        "type": "long",
        "key": "ancestry-path",
        "title": "--ancestry-path",
        "description": "When given a range of commits to display (e.g. commit1..commit2 or commit2 ^commit1), only display commits that exist directly on the ancestry chain between the commit1 and commit2, i.e. commits that are both descendants of commit1, and ancestors of commit2."
      }
    ]
  },
  {
    "name": "git show",
    "options": [
      {
        "type": "long",
        "key": "pretty",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format, where <format> can be one of oneline, short, medium, full, fuller, reference, email, raw, format:<string> and tformat:<string>. When <format> is none of the above, and has %placeholder in it, it acts as if --pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each format. When =<format> part is omitted, it defaults to medium.\n\nNote: you can specify the default pretty format in the repository configuration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format, where <format> can be one of oneline, short, medium, full, fuller, reference, email, raw, format:<string> and tformat:<string>. When <format> is none of the above, and has %placeholder in it, it acts as if --pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each format. When =<format> part is omitted, it defaults to medium.\n\nNote: you can specify the default pretty format in the repository configuration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "abbrev-commit",
        "title": "--abbrev-commit",
        "description": "Instead of showing the full 40-byte hexadecimal commit object name, show a prefix that names the object uniquely. \"--abbrev=<n>\" (which also modifies diff output, if it is displayed) option can be used to specify the minimum length of the prefix.\n\nThis should make \"--pretty=oneline\" a whole lot more readable for people using 80-column terminals."
      },
      {
        "type": "long",
        "key": "no-abbrev-commit",
        "title": "--no-abbrev-commit",
        "description": "Show the full 40-byte hexadecimal commit object name. This negates --abbrev-commit, either explicit or implied by other options such as \"--oneline\". It also overrides the log.abbrevCommit variable."
      },
      {
        "type": "long",
        "key": "oneline",
        "title": "--oneline",
        "description": "This is a shorthand for \"--pretty=oneline --abbrev-commit\" used together."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "Commit objects record the character encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in X and we are outputting in X, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output. Likewise, if iconv(3) fails to convert the commit, we will output the original object verbatim, along with a warning."
      },
      {
        "type": "long",
        "key": "expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <n>) in the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8, and --no-expand-tabs is a short-hand for --expand-tabs=0, which disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. medium, which is the default, full, and fuller)."
      },
      {
        "type": "long",
        "key": "no-expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <n>) in the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8, and --no-expand-tabs is a short-hand for --expand-tabs=0, which disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. medium, which is the default, full, and fuller)."
      },
      {
        "type": "long",
        "key": "notes",
        "title": "--notes[=<ref>]",
        "description": "Show the notes (see git-notes[1]) that annotate the commit, when showing the commit log message. This is the default for git log, git show and git whatchanged commands when there is no --pretty, --format, or --oneline option given on the command line.\n\nBy default, the notes shown are from the notes refs listed in the core.notesRef and notes.displayRef variables (or corresponding environment overrides). See git-config[1] for more details.\n\nWith an optional <ref> argument, use the ref to find the notes to display. The ref can specify the full refname when it begins with refs/notes/; when it begins with notes/, refs/ and otherwise refs/notes/ is prefixed to form a full name of the ref.\n\nMultiple --notes options can be combined to control which notes are being displayed. Examples: \"--notes=foo\" will show only notes from \"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from \"refs/notes/foo\" and from the default notes ref(s)."
      },
      {
        "type": "long",
        "key": "no-notes",
        "title": "--no-notes",
        "description": "Do not show notes. This negates the above --notes option, by resetting the list of notes refs from which notes are shown. Options are parsed in the order given on the command line, so e.g. \"--notes --notes=foo --no-notes --notes=bar\" will only show notes from \"refs/notes/bar\"."
      },
      {
        "type": "long",
        "key": "show-notes",
        "title": "--show-notes[=<ref>], --[no-]standard-notes",
        "description": "These options are deprecated. Use the above --notes/--no-notes options instead."
      },
      {
        "type": "long",
        "key": "standard-notes",
        "title": "--show-notes[=<ref>], --[no-]standard-notes",
        "description": "These options are deprecated. Use the above --notes/--no-notes options instead."
      },
      {
        "type": "long",
        "key": "show-signature",
        "title": "--show-signature",
        "description": "Check the validity of a signed commit object by passing the signature to gpg --verify and show the output."
      }
    ]
  },
  {
    "name": "git sparse-checkout",
    "options": []
  },
  {
    "name": "git stash",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "This option is only valid for push and save commands.\n\nAll ignored and untracked files are also stashed and then cleaned up with git clean."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "This option is only valid for push and save commands.\n\nAll ignored and untracked files are also stashed and then cleaned up with git clean."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u, --include-untracked, --no-include-untracked",
        "description": "When used with the push and save commands, all untracked files are also stashed and then cleaned up with git clean.\n\nWhen used with the show command, show the untracked files in the stash entry as part of the diff."
      },
      {
        "type": "long",
        "key": "include-untracked",
        "title": "-u, --include-untracked, --no-include-untracked",
        "description": "When used with the push and save commands, all untracked files are also stashed and then cleaned up with git clean.\n\nWhen used with the show command, show the untracked files in the stash entry as part of the diff."
      },
      {
        "type": "long",
        "key": "no-include-untracked",
        "title": "-u, --include-untracked, --no-include-untracked",
        "description": "When used with the push and save commands, all untracked files are also stashed and then cleaned up with git clean.\n\nWhen used with the show command, show the untracked files in the stash entry as part of the diff."
      },
      {
        "type": "long",
        "key": "only-untracked",
        "title": "--only-untracked",
        "description": "This option is only valid for the show command.\n\nShow only the untracked files in the stash entry as part of the diff."
      },
      {
        "type": "long",
        "key": "index",
        "title": "--index",
        "description": "This option is only valid for pop and apply commands.\n\nTries to reinstate not only the working tree’s changes, but also the index’s ones. However, this can fail, when you have conflicts (which are stored in the index, where you therefore can no longer apply the changes as they were originally)."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep-index, --no-keep-index",
        "description": "This option is only valid for push and save commands.\n\nAll changes already added to the index are left intact."
      },
      {
        "type": "long",
        "key": "keep-index",
        "title": "-k, --keep-index, --no-keep-index",
        "description": "This option is only valid for push and save commands.\n\nAll changes already added to the index are left intact."
      },
      {
        "type": "long",
        "key": "no-keep-index",
        "title": "-k, --keep-index, --no-keep-index",
        "description": "This option is only valid for push and save commands.\n\nAll changes already added to the index are left intact."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --patch",
        "description": "This option is only valid for push and save commands.\n\nInteractively select hunks from the diff between HEAD and the working tree to be stashed. The stash entry is constructed such that its index state is the same as the index state of your repository, and its worktree contains only the changes you selected interactively. The selected changes are then rolled back from your worktree. See the “Interactive Mode” section of git-add[1] to learn how to operate the --patch mode.\n\nThe --patch option implies --keep-index. You can use --no-keep-index to override this."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, --patch",
        "description": "This option is only valid for push and save commands.\n\nInteractively select hunks from the diff between HEAD and the working tree to be stashed. The stash entry is constructed such that its index state is the same as the index state of your repository, and its worktree contains only the changes you selected interactively. The selected changes are then rolled back from your worktree. See the “Interactive Mode” section of git-add[1] to learn how to operate the --patch mode.\n\nThe --patch option implies --keep-index. You can use --no-keep-index to override this."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "This option is only valid for push command.\n\nPathspec is passed in <file> instead of commandline args. If <file> is exactly - then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable core.quotePath (see git-config[1]). See also --pathspec-file-nul and global --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "This option is only valid for push command.\n\nOnly meaningful with --pathspec-from-file. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes)."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "This option is only valid for apply, drop, pop, push, save, store commands.\n\nQuiet, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "This option is only valid for apply, drop, pop, push, save, store commands.\n\nQuiet, suppress feedback messages."
      }
    ]
  },
  {
    "name": "git status",
    "options": [
      {
        "type": "short",
        "key": "s",
        "title": "-s, --short",
        "description": "Give the output in the short-format."
      },
      {
        "type": "long",
        "key": "short",
        "title": "-s, --short",
        "description": "Give the output in the short-format."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --branch",
        "description": "Show the branch and tracking info even in short-format."
      },
      {
        "type": "long",
        "key": "branch",
        "title": "-b, --branch",
        "description": "Show the branch and tracking info even in short-format."
      },
      {
        "type": "long",
        "key": "show-stash",
        "title": "--show-stash",
        "description": "Show the number of entries currently stashed away."
      },
      {
        "type": "long",
        "key": "porcelain",
        "title": "--porcelain[=<version>]",
        "description": "Give the output in an easy-to-parse format for scripts. This is similar to the short output, but will remain stable across Git versions and regardless of user configuration. See below for details.\n\nThe version parameter is used to specify the format version. This is optional and defaults to the original version v1 format."
      },
      {
        "type": "long",
        "key": "long",
        "title": "--long",
        "description": "Give the output in the long-format. This is the default."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "In addition to the names of files that have been changed, also show the textual changes that are staged to be committed (i.e., like the output of git diff --cached). If -v is specified twice, then also show the changes in the working tree that have not yet been staged (i.e., like the output of git diff)."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "In addition to the names of files that have been changed, also show the textual changes that are staged to be committed (i.e., like the output of git diff --cached). If -v is specified twice, then also show the changes in the working tree that have not yet been staged (i.e., like the output of git diff)."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u[<mode>], --untracked-files[=<mode>]",
        "description": "Show untracked files.\n\nThe mode parameter is used to specify the handling of untracked files. It is optional: it defaults to all, and if specified, it must be stuck to the option (e.g. -uno, but not -u no).\n\nThe possible options are:\n\n * no - Show no untracked files.\n\n * normal - Shows untracked files and directories.\n\n * all - Also shows individual files in untracked directories.\n\nWhen -u option is not used, untracked files and directories are shown (i.e. the same as specifying normal), to help you avoid forgetting to add newly created files. Because it takes extra work to find untracked files in the filesystem, this mode may take some time in a large working tree. Consider enabling untracked cache and split index if supported (see git update-index --untracked-cache and git update-index --split-index), Otherwise you can use no to have git status return more quickly without showing untracked files.\n\nThe default can be changed using the status.showUntrackedFiles configuration variable documented in git-config[1]."
      },
      {
        "type": "long",
        "key": "untracked-files",
        "title": "-u[<mode>], --untracked-files[=<mode>]",
        "description": "Show untracked files.\n\nThe mode parameter is used to specify the handling of untracked files. It is optional: it defaults to all, and if specified, it must be stuck to the option (e.g. -uno, but not -u no).\n\nThe possible options are:\n\n * no - Show no untracked files.\n\n * normal - Shows untracked files and directories.\n\n * all - Also shows individual files in untracked directories.\n\nWhen -u option is not used, untracked files and directories are shown (i.e. the same as specifying normal), to help you avoid forgetting to add newly created files. Because it takes extra work to find untracked files in the filesystem, this mode may take some time in a large working tree. Consider enabling untracked cache and split index if supported (see git update-index --untracked-cache and git update-index --split-index), Otherwise you can use no to have git status return more quickly without showing untracked files.\n\nThe default can be changed using the status.showUntrackedFiles configuration variable documented in git-config[1]."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules[=<when>]",
        "description": "Ignore changes to submodules when looking for changes. <when> can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the ignore option in git-config[1] or gitmodules[5]. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior before 1.7.0). Using \"all\" hides all changes to submodules (and suppresses the output of submodule summaries when the config option status.submoduleSummary is set)."
      },
      {
        "type": "long",
        "key": "ignored",
        "title": "--ignored[=<mode>]",
        "description": "Show ignored files as well.\n\nThe mode parameter is used to specify the handling of ignored files. It is optional: it defaults to traditional.\n\nThe possible options are:\n\n * traditional - Shows ignored files and directories, unless --untracked-files=all is specified, in which case individual files in ignored directories are displayed.\n\n * no - Show no ignored files.\n\n * matching - Shows ignored files and directories matching an ignore pattern.\n\nWhen matching mode is specified, paths that explicitly match an ignored pattern are shown. If a directory matches an ignore pattern, then it is shown, but not paths contained in the ignored directory. If a directory does not match an ignore pattern, but all contents are ignored, then the directory is not shown, but all contents are shown."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "Terminate entries with NUL, instead of LF. This implies the --porcelain=v1 output format if no other format is given."
      },
      {
        "type": "long",
        "key": "column",
        "title": "--column[=<options>], --no-column",
        "description": "Display untracked files in columns. See configuration variable column.status for option syntax. --column and --no-column without options are equivalent to always and never respectively."
      },
      {
        "type": "long",
        "key": "no-column",
        "title": "--column[=<options>], --no-column",
        "description": "Display untracked files in columns. See configuration variable column.status for option syntax. --column and --no-column without options are equivalent to always and never respectively."
      },
      {
        "type": "long",
        "key": "ahead-behind",
        "title": "--ahead-behind, --no-ahead-behind",
        "description": "Display or do not display detailed ahead/behind counts for the branch relative to its upstream branch. Defaults to true."
      },
      {
        "type": "long",
        "key": "no-ahead-behind",
        "title": "--ahead-behind, --no-ahead-behind",
        "description": "Display or do not display detailed ahead/behind counts for the branch relative to its upstream branch. Defaults to true."
      },
      {
        "type": "long",
        "key": "renames",
        "title": "--renames, --no-renames",
        "description": "Turn on/off rename detection regardless of user configuration. See also git-diff[1] --no-renames."
      },
      {
        "type": "long",
        "key": "no-renames",
        "title": "--renames, --no-renames",
        "description": "Turn on/off rename detection regardless of user configuration. See also git-diff[1] --no-renames."
      },
      {
        "type": "long",
        "key": "find-renames",
        "title": "--find-renames[=<n>]",
        "description": "Turn on rename detection, optionally setting the similarity threshold. See also git-diff[1] --find-renames."
      }
    ]
  },
  {
    "name": "git submodule",
    "options": [
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Only print error messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Only print error messages."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "This option is only valid for add and update commands. Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "This option is only valid for the deinit command. Unregister all submodules in the working tree."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b <branch>, --branch <branch>",
        "description": "Branch of repository to add as submodule. The name of the branch is recorded as submodule.<name>.branch in .gitmodules for update --remote. A special value of . is used to indicate that the name of the branch in the submodule should be the same name as the current branch in the current repository. If the option is not specified, it defaults to the remote HEAD."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "This option is only valid for add, deinit and update commands. When running add, allow adding an otherwise ignored submodule path. When running deinit the submodule working trees will be removed even if they contain local changes. When running update (only effective with the checkout procedure), throw away local changes in submodules when switching to a different commit; and always run a checkout operation in the submodule, even if the commit listed in the index of the containing repository matches the commit checked out in the submodule."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "This option is only valid for add, deinit and update commands. When running add, allow adding an otherwise ignored submodule path. When running deinit the submodule working trees will be removed even if they contain local changes. When running update (only effective with the checkout procedure), throw away local changes in submodules when switching to a different commit; and always run a checkout operation in the submodule, even if the commit listed in the index of the containing repository matches the commit checked out in the submodule."
      },
      {
        "type": "long",
        "key": "cached",
        "title": "--cached",
        "description": "This option is only valid for status and summary commands. These commands typically use the commit found in the submodule HEAD, but with this option, the commit stored in the index is used instead."
      },
      {
        "type": "long",
        "key": "files",
        "title": "--files",
        "description": "This option is only valid for the summary command. This command compares the commit in the index with that in the submodule HEAD when this option is used."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --summary-limit",
        "description": "This option is only valid for the summary command. Limit the summary size (number of commits shown in total). Giving 0 will disable the summary; a negative number means unlimited (the default). This limit only applies to modified submodules. The size is always limited to 1 for added/deleted/typechanged submodules."
      },
      {
        "type": "long",
        "key": "summary-limit",
        "title": "-n, --summary-limit",
        "description": "This option is only valid for the summary command. Limit the summary size (number of commits shown in total). Giving 0 will disable the summary; a negative number means unlimited (the default). This limit only applies to modified submodules. The size is always limited to 1 for added/deleted/typechanged submodules."
      },
      {
        "type": "long",
        "key": "remote",
        "title": "--remote",
        "description": "This option is only valid for the update command. Instead of using the superproject’s recorded SHA-1 to update the submodule, use the status of the submodule’s remote-tracking branch. The remote used is branch’s remote (branch.<name>.remote), defaulting to origin. The remote branch used defaults to the remote HEAD, but the branch name may be overridden by setting the submodule.<name>.branch option in either .gitmodules or .git/config (with .git/config taking precedence).\n\nThis works for any of the supported update procedures (--checkout, --rebase, etc.). The only change is the source of the target SHA-1. For example, submodule update --remote --merge will merge upstream submodule changes into the submodules, while submodule update --merge will merge superproject gitlink changes into the submodules.\n\nIn order to ensure a current tracking branch state, update --remote fetches the submodule’s remote repository before calculating the SHA-1. If you don’t want to fetch, you should use submodule update --remote --no-fetch.\n\nUse this option to integrate changes from the upstream subproject with your submodule’s current HEAD. Alternatively, you can run git pull from the submodule, which is equivalent except for the remote branch name: update --remote uses the default upstream repository and submodule.<name>.branch, while git pull uses the submodule’s branch.<name>.merge. Prefer submodule.<name>.branch if you want to distribute the default upstream branch with the superproject and branch.<name>.merge if you want a more native feel while working in the submodule itself."
      },
      {
        "type": "short",
        "key": "N",
        "title": "-N, --no-fetch",
        "description": "This option is only valid for the update command. Don’t fetch new objects from the remote site."
      },
      {
        "type": "long",
        "key": "no-fetch",
        "title": "-N, --no-fetch",
        "description": "This option is only valid for the update command. Don’t fetch new objects from the remote site."
      },
      {
        "type": "long",
        "key": "checkout",
        "title": "--checkout",
        "description": "This option is only valid for the update command. Checkout the commit recorded in the superproject on a detached HEAD in the submodule. This is the default behavior, the main use of this option is to override submodule.$name.update when set to a value other than checkout. If the key submodule.$name.update is either not explicitly set or set to checkout, this option is implicit."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "--merge",
        "description": "This option is only valid for the update command. Merge the commit recorded in the superproject into the current branch of the submodule. If this option is given, the submodule’s HEAD will not be detached. If a merge failure prevents this process, you will have to resolve the resulting conflicts within the submodule with the usual conflict resolution tools. If the key submodule.$name.update is set to merge, this option is implicit."
      },
      {
        "type": "long",
        "key": "rebase",
        "title": "--rebase",
        "description": "This option is only valid for the update command. Rebase the current branch onto the commit recorded in the superproject. If this option is given, the submodule’s HEAD will not be detached. If a merge failure prevents this process, you will have to resolve these failures with git-rebase[1]. If the key submodule.$name.update is set to rebase, this option is implicit."
      },
      {
        "type": "long",
        "key": "init",
        "title": "--init",
        "description": "This option is only valid for the update command. Initialize all submodules for which \"git submodule init\" has not been called so far before updating."
      },
      {
        "type": "long",
        "key": "name",
        "title": "--name",
        "description": "This option is only valid for the add command. It sets the submodule’s name to the given string instead of defaulting to its path. The name must be valid as a directory name and may not end with a /."
      },
      {
        "type": "long",
        "key": "dissociate",
        "title": "--dissociate",
        "description": "This option is only valid for add and update commands. These commands sometimes need to clone a remote repository. In this case, this option will be passed to the git-clone[1] command.\n\nNOTE: see the NOTE for the --reference option."
      },
      {
        "type": "long",
        "key": "recursive",
        "title": "--recursive",
        "description": "This option is only valid for foreach, update, status and sync commands. Traverse submodules recursively. The operation is performed not only in the submodules of the current repo, but also in any nested submodules inside those submodules (and so on)."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--depth",
        "description": "This option is valid for add and update commands. Create a shallow clone with a history truncated to the specified number of revisions. See git-clone[1]"
      },
      {
        "type": "long",
        "key": "recommend-shallow",
        "title": "--[no-]recommend-shallow",
        "description": "This option is only valid for the update command. The initial clone of a submodule will use the recommended submodule.<name>.shallow as provided by the .gitmodules file by default. To ignore the suggestions use --no-recommend-shallow."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j <n>, --jobs <n>",
        "description": "This option is only valid for the update command. Clone new submodules in parallel with as many jobs. Defaults to the submodule.fetchJobs option."
      },
      {
        "type": "long",
        "key": "single-branch",
        "title": "--[no-]single-branch",
        "description": "This option is only valid for the update command. Clone only one branch during update: HEAD or one specified by --branch."
      }
    ]
  },
  {
    "name": "git switch",
    "options": [
      {
        "type": "short",
        "key": "c",
        "title": "-c <new-branch>, --create <new-branch>",
        "description": "Create a new branch named <new-branch> starting at <start-point> before switching to the branch. This is a convenient shortcut for:\n\n$ git branch <new-branch>\n$ git switch <new-branch>"
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C <new-branch>, --force-create <new-branch>",
        "description": "Similar to --create except that if <new-branch> already exists, it will be reset to <start-point>. This is a convenient shortcut for:\n\n$ git branch -f <new-branch>\n$ git switch <new-branch>"
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --detach",
        "description": "Switch to a commit for inspection and discardable experiments. See the \"DETACHED HEAD\" section in git-checkout[1] for details."
      },
      {
        "type": "long",
        "key": "detach",
        "title": "-d, --detach",
        "description": "Switch to a commit for inspection and discardable experiments. See the \"DETACHED HEAD\" section in git-checkout[1] for details."
      },
      {
        "type": "long",
        "key": "guess",
        "title": "--guess, --no-guess",
        "description": "If <branch> is not found but there does exist a tracking branch in exactly one remote (call it <remote>) with a matching name, treat as equivalent to\n\n$ git switch -c <branch> --track <remote>/<branch>\n\nIf the branch exists in multiple remotes and one of them is named by the checkout.defaultRemote configuration variable, we’ll use that one for the purposes of disambiguation, even if the <branch> isn’t unique across all remotes. Set it to e.g. checkout.defaultRemote=origin to always checkout remote branches from there if <branch> is ambiguous but exists on the origin remote. See also checkout.defaultRemote in git-config[1].\n\n--guess is the default behavior. Use --no-guess to disable it.\n\nThe default behavior can be set via the checkout.guess configuration variable."
      },
      {
        "type": "long",
        "key": "no-guess",
        "title": "--guess, --no-guess",
        "description": "If <branch> is not found but there does exist a tracking branch in exactly one remote (call it <remote>) with a matching name, treat as equivalent to\n\n$ git switch -c <branch> --track <remote>/<branch>\n\nIf the branch exists in multiple remotes and one of them is named by the checkout.defaultRemote configuration variable, we’ll use that one for the purposes of disambiguation, even if the <branch> isn’t unique across all remotes. Set it to e.g. checkout.defaultRemote=origin to always checkout remote branches from there if <branch> is ambiguous but exists on the origin remote. See also checkout.defaultRemote in git-config[1].\n\n--guess is the default behavior. Use --no-guess to disable it.\n\nThe default behavior can be set via the checkout.guess configuration variable."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "An alias for --discard-changes."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "An alias for --discard-changes."
      },
      {
        "type": "long",
        "key": "discard-changes",
        "title": "--discard-changes",
        "description": "Proceed even if the index or the working tree differs from HEAD. Both the index and working tree are restored to match the switching target. If --recurse-submodules is specified, submodule content is also restored to match the switching target. This is used to throw away local changes."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --merge",
        "description": "If you have local modifications to one or more files that are different between the current branch and the branch to which you are switching, the command refuses to switch branches in order to preserve your modifications in context. However, with this option, a three-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch.\n\nWhen a merge conflict happens, the index entries for conflicting paths are left unmerged, and you need to resolve the conflicts and mark the resolved paths with git add (or git rm if the merge should result in deletion of the path)."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "-m, --merge",
        "description": "If you have local modifications to one or more files that are different between the current branch and the branch to which you are switching, the command refuses to switch branches in order to preserve your modifications in context. However, with this option, a three-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch.\n\nWhen a merge conflict happens, the index entries for conflicting paths are left unmerged, and you need to resolve the conflicts and mark the resolved paths with git add (or git rm if the merge should result in deletion of the path)."
      },
      {
        "type": "long",
        "key": "conflict",
        "title": "--conflict=<style>",
        "description": "The same as --merge option above, but changes the way the conflicting hunks are presented, overriding the merge.conflictStyle configuration variable. Possible values are \"merge\" (default) and \"diff3\" (in addition to what is shown by \"merge\" style, shows the original contents)."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress, --no-progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not attached to a terminal, regardless of --quiet."
      },
      {
        "type": "long",
        "key": "no-progress",
        "title": "--progress, --no-progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not attached to a terminal, regardless of --quiet."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t, --track",
        "description": "When creating a new branch, set up \"upstream\" configuration. -c is implied. See --track in git-branch[1] for details.\n\nIf no -c option is given, the name of the new branch will be derived from the remote-tracking branch, by looking at the local part of the refspec configured for the corresponding remote, and then stripping the initial part up to the \"*\". This would tell us to use hack as the local branch when branching off of origin/hack (or remotes/origin/hack, or even refs/remotes/origin/hack). If the given name has no slash, or the above guessing results in an empty name, the guessing is aborted. You can explicitly give a name with -c in such a case."
      },
      {
        "type": "long",
        "key": "track",
        "title": "-t, --track",
        "description": "When creating a new branch, set up \"upstream\" configuration. -c is implied. See --track in git-branch[1] for details.\n\nIf no -c option is given, the name of the new branch will be derived from the remote-tracking branch, by looking at the local part of the refspec configured for the corresponding remote, and then stripping the initial part up to the \"*\". This would tell us to use hack as the local branch when branching off of origin/hack (or remotes/origin/hack, or even refs/remotes/origin/hack). If the given name has no slash, or the above guessing results in an empty name, the guessing is aborted. You can explicitly give a name with -c in such a case."
      },
      {
        "type": "long",
        "key": "no-track",
        "title": "--no-track",
        "description": "Do not set up \"upstream\" configuration, even if the branch.autoSetupMerge configuration variable is true."
      },
      {
        "type": "long",
        "key": "ignore-other-worktrees",
        "title": "--ignore-other-worktrees",
        "description": "git switch refuses when the wanted ref is already checked out by another worktree. This option makes it check the ref out anyway. In other words, the ref can be held by more than one worktree."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules, --no-recurse-submodules",
        "description": "Using --recurse-submodules will update the content of all active submodules according to the commit recorded in the superproject. If nothing (or --no-recurse-submodules) is used, submodules working trees will not be updated. Just like git-submodule[1], this will detach HEAD of the submodules."
      },
      {
        "type": "long",
        "key": "no-recurse-submodules",
        "title": "--recurse-submodules, --no-recurse-submodules",
        "description": "Using --recurse-submodules will update the content of all active submodules according to the commit recorded in the superproject. If nothing (or --no-recurse-submodules) is used, submodules working trees will not be updated. Just like git-submodule[1], this will detach HEAD of the submodules."
      }
    ]
  },
  {
    "name": "git tag",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --annotate",
        "description": "Make an unsigned, annotated tag object"
      },
      {
        "type": "long",
        "key": "annotate",
        "title": "-a, --annotate",
        "description": "Make an unsigned, annotated tag object"
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --sign",
        "description": "Make a GPG-signed tag, using the default e-mail address’s key. The default behavior of tag GPG-signing is controlled by tag.gpgSign configuration variable if it exists, or disabled otherwise. See git-config[1]."
      },
      {
        "type": "long",
        "key": "sign",
        "title": "-s, --sign",
        "description": "Make a GPG-signed tag, using the default e-mail address’s key. The default behavior of tag GPG-signing is controlled by tag.gpgSign configuration variable if it exists, or disabled otherwise. See git-config[1]."
      },
      {
        "type": "long",
        "key": "no-sign",
        "title": "--no-sign",
        "description": "Override tag.gpgSign configuration variable that is set to force each and every tag to be signed."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u <keyid>, --local-user=<keyid>",
        "description": "Make a GPG-signed tag, using the given key."
      },
      {
        "type": "long",
        "key": "local-user",
        "title": "-u <keyid>, --local-user=<keyid>",
        "description": "Make a GPG-signed tag, using the given key."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Replace an existing tag with the given name (instead of failing)"
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Replace an existing tag with the given name (instead of failing)"
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --delete",
        "description": "Delete existing tags with the given names."
      },
      {
        "type": "long",
        "key": "delete",
        "title": "-d, --delete",
        "description": "Delete existing tags with the given names."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verify",
        "description": "Verify the GPG signature of the given tag names."
      },
      {
        "type": "long",
        "key": "verify",
        "title": "-v, --verify",
        "description": "Verify the GPG signature of the given tag names."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n<num>",
        "description": "<num> specifies how many lines from the annotation, if any, are printed when using -l. Implies --list.\n\nThe default is not to print any annotation lines. If no number is given to -n, only the first line is printed. If the tag is not annotated, the commit message is displayed instead."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --list",
        "description": "List tags. With optional <pattern>..., e.g. git tag --list 'v-*', list only the tags that match the pattern(s).\n\nRunning \"git tag\" without arguments also lists all tags. The pattern is a shell wildcard (i.e., matched using fnmatch(3)). Multiple patterns may be given; if any of them matches, the tag is shown.\n\nThis option is implicitly supplied if any other list-like option such as --contains is provided. See the documentation for each of those options for details."
      },
      {
        "type": "long",
        "key": "list",
        "title": "-l, --list",
        "description": "List tags. With optional <pattern>..., e.g. git tag --list 'v-*', list only the tags that match the pattern(s).\n\nRunning \"git tag\" without arguments also lists all tags. The pattern is a shell wildcard (i.e., matched using fnmatch(3)). Multiple patterns may be given; if any of them matches, the tag is shown.\n\nThis option is implicitly supplied if any other list-like option such as --contains is provided. See the documentation for each of those options for details."
      },
      {
        "type": "long",
        "key": "sort",
        "title": "--sort=<key>",
        "description": "Sort based on the key given. Prefix - to sort in descending order of the value. You may use the --sort=<key> option multiple times, in which case the last key becomes the primary key. Also supports \"version:refname\" or \"v:refname\" (tag names are treated as versions). The \"version:refname\" sort order can also be affected by the \"versionsort.suffix\" configuration variable. The keys supported are the same as those in git for-each-ref. Sort order defaults to the value configured for the tag.sort variable if it exists, or lexicographic order otherwise. See git-config[1]."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Respect any colors specified in the --format option. The <when> field must be one of always, never, or auto (if <when> is absent, behave as if always was given)."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --ignore-case",
        "description": "Sorting and filtering tags are case insensitive."
      },
      {
        "type": "long",
        "key": "ignore-case",
        "title": "-i, --ignore-case",
        "description": "Sorting and filtering tags are case insensitive."
      },
      {
        "type": "long",
        "key": "column",
        "title": "--column[=<options>], --no-column",
        "description": "Display tag listing in columns. See configuration variable column.tag for option syntax. --column and --no-column without options are equivalent to always and never respectively.\n\nThis option is only applicable when listing tags without annotation lines."
      },
      {
        "type": "long",
        "key": "no-column",
        "title": "--column[=<options>], --no-column",
        "description": "Display tag listing in columns. See configuration variable column.tag for option syntax. --column and --no-column without options are equivalent to always and never respectively.\n\nThis option is only applicable when listing tags without annotation lines."
      },
      {
        "type": "long",
        "key": "contains",
        "title": "--contains [<commit>]",
        "description": "Only list tags which contain the specified commit (HEAD if not specified). Implies --list."
      },
      {
        "type": "long",
        "key": "no-contains",
        "title": "--no-contains [<commit>]",
        "description": "Only list tags which don’t contain the specified commit (HEAD if not specified). Implies --list."
      },
      {
        "type": "long",
        "key": "merged",
        "title": "--merged [<commit>]",
        "description": "Only list tags whose commits are reachable from the specified commit (HEAD if not specified)."
      },
      {
        "type": "long",
        "key": "no-merged",
        "title": "--no-merged [<commit>]",
        "description": "Only list tags whose commits are not reachable from the specified commit (HEAD if not specified)."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m <msg>, --message=<msg>",
        "description": "Use the given tag message (instead of prompting). If multiple -m options are given, their values are concatenated as separate paragraphs. Implies -a if none of -a, -s, or -u <keyid> is given."
      },
      {
        "type": "long",
        "key": "message",
        "title": "-m <msg>, --message=<msg>",
        "description": "Use the given tag message (instead of prompting). If multiple -m options are given, their values are concatenated as separate paragraphs. Implies -a if none of -a, -s, or -u <keyid> is given."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F <file>, --file=<file>",
        "description": "Take the tag message from the given file. Use - to read the message from the standard input. Implies -a if none of -a, -s, or -u <keyid> is given."
      },
      {
        "type": "long",
        "key": "file",
        "title": "-F <file>, --file=<file>",
        "description": "Take the tag message from the given file. Use - to read the message from the standard input. Implies -a if none of -a, -s, or -u <keyid> is given."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "The message taken from file with -F and command line with -m are usually used as the tag message unmodified. This option lets you further edit the message taken from these sources."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "The message taken from file with -F and command line with -m are usually used as the tag message unmodified. This option lets you further edit the message taken from these sources."
      },
      {
        "type": "long",
        "key": "cleanup",
        "title": "--cleanup=<mode>",
        "description": "This option sets how the tag message is cleaned up. The <mode> can be one of verbatim, whitespace and strip. The strip mode is default. The verbatim mode does not change message at all, whitespace removes just leading/trailing whitespace lines and strip removes both whitespace and commentary."
      },
      {
        "type": "long",
        "key": "create-reflog",
        "title": "--create-reflog",
        "description": "Create a reflog for the tag. To globally enable reflogs for tags, see core.logAllRefUpdates in git-config[1]. The negated form --no-create-reflog only overrides an earlier --create-reflog, but currently does not negate the setting of core.logAllRefUpdates."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--format=<format>",
        "description": "A string that interpolates %(fieldname) from a tag ref being shown and the object it points at. The format is the same as that of git-for-each-ref[1]. When unspecified, defaults to %(refname:strip=2)."
      }
    ]
  },
  {
    "name": "git worktree",
    "options": [
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "By default, add refuses to create a new working tree when <commit-ish> is a branch name and is already checked out by another working tree, or if <path> is already assigned to some working tree but is missing (for instance, if <path> was deleted manually). This option overrides these safeguards. To add a missing but locked working tree path, specify --force twice.\n\nmove refuses to move a locked working tree unless --force is specified twice. If the destination is already assigned to some other working tree but is missing (for instance, if <new-path> was deleted manually), then --force allows the move to proceed; use --force twice if the destination is locked.\n\nremove refuses to remove an unclean working tree unless --force is used. To remove a locked working tree, specify --force twice."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "By default, add refuses to create a new working tree when <commit-ish> is a branch name and is already checked out by another working tree, or if <path> is already assigned to some working tree but is missing (for instance, if <path> was deleted manually). This option overrides these safeguards. To add a missing but locked working tree path, specify --force twice.\n\nmove refuses to move a locked working tree unless --force is specified twice. If the destination is already assigned to some other working tree but is missing (for instance, if <new-path> was deleted manually), then --force allows the move to proceed; use --force twice if the destination is locked.\n\nremove refuses to remove an unclean working tree unless --force is used. To remove a locked working tree, specify --force twice."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b <new-branch>, -B <new-branch>",
        "description": "With add, create a new branch named <new-branch> starting at <commit-ish>, and check out <new-branch> into the new working tree. If <commit-ish> is omitted, it defaults to HEAD. By default, -b refuses to create a new branch if it already exists. -B overrides this safeguard, resetting <new-branch> to <commit-ish>."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-b <new-branch>, -B <new-branch>",
        "description": "With add, create a new branch named <new-branch> starting at <commit-ish>, and check out <new-branch> into the new working tree. If <commit-ish> is omitted, it defaults to HEAD. By default, -b refuses to create a new branch if it already exists. -B overrides this safeguard, resetting <new-branch> to <commit-ish>."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --detach",
        "description": "With add, detach HEAD in the new working tree. See \"DETACHED HEAD\" in git-checkout[1]."
      },
      {
        "type": "long",
        "key": "detach",
        "title": "-d, --detach",
        "description": "With add, detach HEAD in the new working tree. See \"DETACHED HEAD\" in git-checkout[1]."
      },
      {
        "type": "long",
        "key": "checkout",
        "title": "--[no-]checkout",
        "description": "By default, add checks out <commit-ish>, however, --no-checkout can be used to suppress checkout in order to make customizations, such as configuring sparse-checkout. See \"Sparse checkout\" in git-read-tree[1]."
      },
      {
        "type": "long",
        "key": "guess-remote",
        "title": "--[no-]guess-remote",
        "description": "With worktree add <path>, without <commit-ish>, instead of creating a new branch from HEAD, if there exists a tracking branch in exactly one remote matching the basename of <path>, base the new branch on the remote-tracking branch, and mark the remote-tracking branch as \"upstream\" from the new branch.\n\nThis can also be set up as the default behaviour by using the worktree.guessRemote config option."
      },
      {
        "type": "long",
        "key": "track",
        "title": "--[no-]track",
        "description": "When creating a new branch, if <commit-ish> is a branch, mark it as \"upstream\" from the new branch. This is the default if <commit-ish> is a remote-tracking branch. See --track in git-branch[1] for details."
      },
      {
        "type": "long",
        "key": "lock",
        "title": "--lock",
        "description": "Keep the working tree locked after creation. This is the equivalent of git worktree lock after git worktree add, but without a race condition."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "With prune, do not remove anything; just report what it would remove."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "With prune, do not remove anything; just report what it would remove."
      },
      {
        "type": "long",
        "key": "porcelain",
        "title": "--porcelain",
        "description": "With list, output in an easy-to-parse format for scripts. This format will remain stable across Git versions and regardless of user configuration. See below for details."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "With add, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "With add, suppress feedback messages."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "With prune, report all removals.\n\nWith list, output additional information about worktrees (see below)."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "With prune, report all removals.\n\nWith list, output additional information about worktrees (see below)."
      }
    ]
  },
  {
    "name": "git fast-export",
    "options": [
      {
        "type": "long",
        "key": "progress",
        "title": "--progress=<n>",
        "description": "Insert progress statements every <n> objects, to be shown by git fast-import during import."
      },
      {
        "type": "long",
        "key": "signed-tags",
        "title": "--signed-tags=(verbatim|warn|warn-strip|strip|abort)",
        "description": "Specify how to handle signed tags. Since any transformation after the export can change the tag names (which can also happen when excluding revisions) the signatures will not match.\n\nWhen asking to abort (which is the default), this program will die when encountering a signed tag. With strip, the tags will silently be made unsigned, with warn-strip they will be made unsigned but a warning will be displayed, with verbatim, they will be silently exported and with warn, they will be exported, but you will see a warning."
      },
      {
        "type": "long",
        "key": "tag-of-filtered-object",
        "title": "--tag-of-filtered-object=(abort|drop|rewrite)",
        "description": "Specify how to handle tags whose tagged object is filtered out. Since revisions and files to export can be limited by path, tagged objects may be filtered completely.\n\nWhen asking to abort (which is the default), this program will die when encountering such a tag. With drop it will omit such tags from the output. With rewrite, if the tagged object is a commit, it will rewrite the tag to tag an ancestor commit (via parent rewriting; see git-rev-list[1])"
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M, -C",
        "description": "Perform move and/or copy detection, as described in the git-diff[1] manual page, and use it to generate rename and copy commands in the output dump.\n\nNote that earlier versions of this command did not complain and produced incorrect results if you gave these options."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-M, -C",
        "description": "Perform move and/or copy detection, as described in the git-diff[1] manual page, and use it to generate rename and copy commands in the output dump.\n\nNote that earlier versions of this command did not complain and produced incorrect results if you gave these options."
      },
      {
        "type": "long",
        "key": "export-marks",
        "title": "--export-marks=<file>",
        "description": "Dumps the internal marks table to <file> when complete. Marks are written one per line as :markid SHA-1. Only marks for revisions are dumped; marks for blobs are ignored. Backends can use this file to validate imports after they have been completed, or to save the marks table across incremental runs. As <file> is only opened and truncated at completion, the same path can also be safely given to --import-marks. The file will not be written if no new object has been marked/exported."
      },
      {
        "type": "long",
        "key": "import-marks",
        "title": "--import-marks=<file>",
        "description": "Before processing any input, load the marks specified in <file>. The input file must exist, must be readable, and must use the same format as produced by --export-marks."
      },
      {
        "type": "long",
        "key": "mark-tags",
        "title": "--mark-tags",
        "description": "In addition to labelling blobs and commits with mark ids, also label tags. This is useful in conjunction with --export-marks and --import-marks, and is also useful (and necessary) for exporting of nested tags. It does not hurt other cases and would be the default, but many fast-import frontends are not prepared to accept tags with mark identifiers.\n\nAny commits (or tags) that have already been marked will not be exported again. If the backend uses a similar --import-marks file, this allows for incremental bidirectional exporting of the repository by keeping the marks the same across runs."
      },
      {
        "type": "long",
        "key": "fake-missing-tagger",
        "title": "--fake-missing-tagger",
        "description": "Some old repositories have tags without a tagger. The fast-import protocol was pretty strict about that, and did not allow that. So fake a tagger to be able to fast-import the output."
      },
      {
        "type": "long",
        "key": "use-done-feature",
        "title": "--use-done-feature",
        "description": "Start the stream with a feature done stanza, and terminate it with a done command."
      },
      {
        "type": "long",
        "key": "no-data",
        "title": "--no-data",
        "description": "Skip output of blob objects and instead refer to blobs via their original SHA-1 hash. This is useful when rewriting the directory structure or history of a repository without touching the contents of individual files. Note that the resulting stream can only be used by a repository which already contains the necessary objects."
      },
      {
        "type": "long",
        "key": "full-tree",
        "title": "--full-tree",
        "description": "This option will cause fast-export to issue a \"deleteall\" directive for each commit followed by a full list of all files in the commit (as opposed to just listing the files which are different from the commit’s first parent)."
      },
      {
        "type": "long",
        "key": "anonymize",
        "title": "--anonymize",
        "description": "Anonymize the contents of the repository while still retaining the shape of the history and stored tree. See the section on ANONYMIZING below."
      },
      {
        "type": "long",
        "key": "anonymize-map",
        "title": "--anonymize-map=<from>[:<to>]",
        "description": "Convert token <from> to <to> in the anonymized output. If <to> is omitted, map <from> to itself (i.e., do not anonymize it). See the section on ANONYMIZING below."
      },
      {
        "type": "long",
        "key": "reference-excluded-parents",
        "title": "--reference-excluded-parents",
        "description": "By default, running a command such as git fast-export master~5..master will not include the commit master~5 and will make master~4 no longer have master~5 as a parent (though both the old master~4 and new master~4 will have all the same files). Use --reference-excluded-parents to instead have the stream refer to commits in the excluded range of history by their sha1sum. Note that the resulting stream can only be used by a repository which already contains the necessary parent commits."
      },
      {
        "type": "long",
        "key": "show-original-ids",
        "title": "--show-original-ids",
        "description": "Add an extra directive to the output for commits and blobs, original-oid <SHA1SUM>. While such directives will likely be ignored by importers such as git-fast-import, it may be useful for intermediary filters (e.g. for rewriting commit messages which refer to older commits, or for stripping blobs by id)."
      },
      {
        "type": "long",
        "key": "reencode",
        "title": "--reencode=(yes|no|abort)",
        "description": "Specify how to handle encoding header in commit objects. When asking to abort (which is the default), this program will die when encountering such a commit object. With yes, the commit message will be re-encoded into UTF-8. With no, the original encoding will be preserved."
      },
      {
        "type": "long",
        "key": "refspec",
        "title": "--refspec",
        "description": "Apply the specified refspec to each ref exported. Multiple of them can be specified."
      }
    ]
  },
  {
    "name": "git fast-import",
    "options": [
      {
        "type": "long",
        "key": "force",
        "title": "--force",
        "description": "Force updating modified existing branches, even if doing so would cause commits to be lost (as the new commit does not contain the old commit)."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Disable the output shown by --stats, making fast-import usually be silent when it is successful. However, if the import stream has directives intended to show user output (e.g. progress directives), the corresponding messages will still be shown."
      },
      {
        "type": "long",
        "key": "stats",
        "title": "--stats",
        "description": "Display some basic statistics about the objects fast-import has created, the packfiles they were stored into, and the memory used by fast-import during this run. Showing this output is currently the default, but can be disabled with --quiet."
      },
      {
        "type": "long",
        "key": "allow-unsafe-features",
        "title": "--allow-unsafe-features",
        "description": "Many command-line options can be provided as part of the fast-import stream itself by using the feature or option commands. However, some of these options are unsafe (e.g., allowing fast-import to access the filesystem outside of the repository). These options are disabled by default, but can be allowed by providing this option on the command line. This currently impacts only the export-marks, import-marks, and import-marks-if-exists feature commands.\n\nOnly enable this option if you trust the program generating the\nfast-import stream! This option is enabled automatically for\nremote-helpers that use the `import` capability, as they are\nalready trusted to run their own code."
      },
      {
        "type": "long",
        "key": "cat-blob-fd",
        "title": "--cat-blob-fd=<fd>",
        "description": "Write responses to get-mark, cat-blob, and ls queries to the file descriptor <fd> instead of stdout. Allows progress output intended for the end-user to be separated from other output."
      },
      {
        "type": "long",
        "key": "date-format",
        "title": "--date-format=<fmt>",
        "description": "Specify the type of dates the frontend will supply to fast-import within author, committer and tagger commands. See “Date Formats” below for details about which formats are supported, and their syntax."
      },
      {
        "type": "long",
        "key": "done",
        "title": "--done",
        "description": "Terminate with error if there is no done command at the end of the stream. This option might be useful for detecting errors that cause the frontend to terminate before it has started to write a stream."
      },
      {
        "type": "long",
        "key": "export-marks",
        "title": "--export-marks=<file>",
        "description": "Dumps the internal marks table to <file> when complete. Marks are written one per line as :markid SHA-1. Frontends can use this file to validate imports after they have been completed, or to save the marks table across incremental runs. As <file> is only opened and truncated at checkpoint (or completion) the same path can also be safely given to --import-marks."
      },
      {
        "type": "long",
        "key": "import-marks",
        "title": "--import-marks=<file>",
        "description": "Before processing any input, load the marks specified in <file>. The input file must exist, must be readable, and must use the same format as produced by --export-marks. Multiple options may be supplied to import more than one set of marks. If a mark is defined to different values, the last file wins."
      },
      {
        "type": "long",
        "key": "import-marks-if-exists",
        "title": "--import-marks-if-exists=<file>",
        "description": "Like --import-marks but instead of erroring out, silently skips the file if it does not exist."
      },
      {
        "type": "long",
        "key": "relative-marks",
        "title": "--[no-]relative-marks",
        "description": "After specifying --relative-marks the paths specified with --import-marks= and --export-marks= are relative to an internal directory in the current repository. In git-fast-import this means that the paths are relative to the .git/info/fast-import directory. However, other importers may use a different location.\n\nRelative and non-relative marks may be combined by interweaving --(no-)-relative-marks with the --(import|export)-marks= options."
      },
      {
        "type": "long",
        "key": "rewrite-submodules-from",
        "title": "--rewrite-submodules-from=<name>:<file>, --rewrite-submodules-to=<name>:<file>",
        "description": "Rewrite the object IDs for the submodule specified by <name> from the values used in the from <file> to those used in the to <file>. The from marks should have been created by git fast-export, and the to marks should have been created by git fast-import when importing that same submodule.\n\n<name> may be any arbitrary string not containing a colon character, but the same value must be used with both options when specifying corresponding marks. Multiple submodules may be specified with different values for <name>. It is an error not to use these options in corresponding pairs.\n\nThese options are primarily useful when converting a repository from one hash algorithm to another; without them, fast-import will fail if it encounters a submodule because it has no way of writing the object ID into the new hash algorithm."
      },
      {
        "type": "long",
        "key": "rewrite-submodules-to",
        "title": "--rewrite-submodules-from=<name>:<file>, --rewrite-submodules-to=<name>:<file>",
        "description": "Rewrite the object IDs for the submodule specified by <name> from the values used in the from <file> to those used in the to <file>. The from marks should have been created by git fast-export, and the to marks should have been created by git fast-import when importing that same submodule.\n\n<name> may be any arbitrary string not containing a colon character, but the same value must be used with both options when specifying corresponding marks. Multiple submodules may be specified with different values for <name>. It is an error not to use these options in corresponding pairs.\n\nThese options are primarily useful when converting a repository from one hash algorithm to another; without them, fast-import will fail if it encounters a submodule because it has no way of writing the object ID into the new hash algorithm."
      },
      {
        "type": "long",
        "key": "active-branches",
        "title": "--active-branches=<n>",
        "description": "Maximum number of branches to maintain active at once. See “Memory Utilization” below for details. Default is 5."
      },
      {
        "type": "long",
        "key": "big-file-threshold",
        "title": "--big-file-threshold=<n>",
        "description": "Maximum size of a blob that fast-import will attempt to create a delta for, expressed in bytes. The default is 512m (512 MiB). Some importers may wish to lower this on systems with constrained memory."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--depth=<n>",
        "description": "Maximum delta depth, for blob and tree deltification. Default is 50."
      },
      {
        "type": "long",
        "key": "export-pack-edges",
        "title": "--export-pack-edges=<file>",
        "description": "After creating a packfile, print a line of data to <file> listing the filename of the packfile and the last commit on each branch that was written to that packfile. This information may be useful after importing projects whose total object set exceeds the 4 GiB packfile limit, as these commits can be used as edge points during calls to git pack-objects."
      },
      {
        "type": "long",
        "key": "max-pack-size",
        "title": "--max-pack-size=<n>",
        "description": "Maximum size of each output packfile. The default is unlimited."
      }
    ]
  },
  {
    "name": "git filter-branch",
    "options": [
      {
        "type": "long",
        "key": "prune-empty",
        "title": "--prune-empty",
        "description": "Some filters will generate empty commits that leave the tree untouched. This option instructs git-filter-branch to remove such commits if they have exactly one or zero non-pruned parents; merge commits will therefore remain intact. This option cannot be used together with --commit-filter, though the same effect can be achieved by using the provided git_commit_non_empty_tree function in a commit filter."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d <directory>",
        "description": "Use this option to set the path to the temporary directory used for rewriting. When applying a tree filter, the command needs to temporarily check out the tree to some directory, which may consume considerable space in case of large projects. By default it does this in the .git-rewrite/ directory but you can override that choice by this parameter."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "git filter-branch refuses to start with an existing temporary directory or when there are already refs starting with refs/original/, unless forced."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "git filter-branch refuses to start with an existing temporary directory or when there are already refs starting with refs/original/, unless forced."
      }
    ]
  },
  {
    "name": "git mergetool",
    "options": [
      {
        "type": "short",
        "key": "t",
        "title": "-t <tool>, --tool=<tool>",
        "description": "Use the merge resolution program specified by <tool>. Valid values include emerge, gvimdiff, kdiff3, meld, vimdiff, and tortoisemerge. Run git mergetool --tool-help for the list of valid <tool> settings.\n\nIf a merge resolution program is not specified, git mergetool will use the configuration variable merge.tool. If the configuration variable merge.tool is not set, git mergetool will pick a suitable default.\n\nYou can explicitly provide a full path to the tool by setting the configuration variable mergetool.<tool>.path. For example, you can configure the absolute path to kdiff3 by setting mergetool.kdiff3.path. Otherwise, git mergetool assumes the tool is available in PATH.\n\nInstead of running one of the known merge tool programs, git mergetool can be customized to run an alternative program by specifying the command line to invoke in a configuration variable mergetool.<tool>.cmd.\n\nWhen git mergetool is invoked with this tool (either through the -t or --tool option or the merge.tool configuration variable) the configured command line will be invoked with $BASE set to the name of a temporary file containing the common base for the merge, if available; $LOCAL set to the name of a temporary file containing the contents of the file on the current branch; $REMOTE set to the name of a temporary file containing the contents of the file to be merged, and $MERGED set to the name of the file to which the merge tool should write the result of the merge resolution.\n\nIf the custom merge tool correctly indicates the success of a merge resolution with its exit code, then the configuration variable mergetool.<tool>.trustExitCode can be set to true. Otherwise, git mergetool will prompt the user to indicate the success of the resolution after the custom tool has exited."
      },
      {
        "type": "long",
        "key": "tool",
        "title": "-t <tool>, --tool=<tool>",
        "description": "Use the merge resolution program specified by <tool>. Valid values include emerge, gvimdiff, kdiff3, meld, vimdiff, and tortoisemerge. Run git mergetool --tool-help for the list of valid <tool> settings.\n\nIf a merge resolution program is not specified, git mergetool will use the configuration variable merge.tool. If the configuration variable merge.tool is not set, git mergetool will pick a suitable default.\n\nYou can explicitly provide a full path to the tool by setting the configuration variable mergetool.<tool>.path. For example, you can configure the absolute path to kdiff3 by setting mergetool.kdiff3.path. Otherwise, git mergetool assumes the tool is available in PATH.\n\nInstead of running one of the known merge tool programs, git mergetool can be customized to run an alternative program by specifying the command line to invoke in a configuration variable mergetool.<tool>.cmd.\n\nWhen git mergetool is invoked with this tool (either through the -t or --tool option or the merge.tool configuration variable) the configured command line will be invoked with $BASE set to the name of a temporary file containing the common base for the merge, if available; $LOCAL set to the name of a temporary file containing the contents of the file on the current branch; $REMOTE set to the name of a temporary file containing the contents of the file to be merged, and $MERGED set to the name of the file to which the merge tool should write the result of the merge resolution.\n\nIf the custom merge tool correctly indicates the success of a merge resolution with its exit code, then the configuration variable mergetool.<tool>.trustExitCode can be set to true. Otherwise, git mergetool will prompt the user to indicate the success of the resolution after the custom tool has exited."
      },
      {
        "type": "long",
        "key": "tool-help",
        "title": "--tool-help",
        "description": "Print a list of merge tools that may be used with --tool."
      },
      {
        "type": "short",
        "key": "y",
        "title": "-y, --no-prompt",
        "description": "Don’t prompt before each invocation of the merge resolution program. This is the default if the merge resolution program is explicitly specified with the --tool option or with the merge.tool configuration variable."
      },
      {
        "type": "long",
        "key": "no-prompt",
        "title": "-y, --no-prompt",
        "description": "Don’t prompt before each invocation of the merge resolution program. This is the default if the merge resolution program is explicitly specified with the --tool option or with the merge.tool configuration variable."
      },
      {
        "type": "long",
        "key": "prompt",
        "title": "--prompt",
        "description": "Prompt before each invocation of the merge resolution program to give the user a chance to skip the path."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --gui",
        "description": "When git-mergetool is invoked with the -g or --gui option the default merge tool will be read from the configured merge.guitool variable instead of merge.tool. If merge.guitool is not set, we will fallback to the tool configured under merge.tool."
      },
      {
        "type": "long",
        "key": "gui",
        "title": "-g, --gui",
        "description": "When git-mergetool is invoked with the -g or --gui option the default merge tool will be read from the configured merge.guitool variable instead of merge.tool. If merge.guitool is not set, we will fallback to the tool configured under merge.tool."
      },
      {
        "type": "long",
        "key": "no-gui",
        "title": "--no-gui",
        "description": "This overrides a previous -g or --gui setting and reads the default merge tool will be read from the configured merge.tool variable."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O<orderfile>",
        "description": "Process files in the order specified in the <orderfile>, which has one shell glob pattern per line. This overrides the diff.orderFile configuration variable (see git-config[1]). To cancel diff.orderFile, use -O/dev/null."
      }
    ]
  },
  {
    "name": "git pack-refs",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "The command by default packs all tags and refs that are already packed, and leaves other refs alone. This is because branches are expected to be actively developed and packing their tips does not help performance. This option causes branch tips to be packed as well. Useful for a repository with many branches of historical interests."
      },
      {
        "type": "long",
        "key": "no-prune",
        "title": "--no-prune",
        "description": "The command usually removes loose refs under $GIT_DIR/refs hierarchy after packing them. This option tells it not to."
      }
    ]
  },
  {
    "name": "git prune",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Do not remove anything; just report what it would remove."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Do not remove anything; just report what it would remove."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Report all removed objects."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Report all removed objects."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Show progress."
      }
    ]
  },
  {
    "name": "git reflog",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Process the reflogs of all references."
      },
      {
        "type": "long",
        "key": "single-worktree",
        "title": "--single-worktree",
        "description": "By default when --all is specified, reflogs from all working trees are processed. This option limits the processing to reflogs from the current working tree only."
      },
      {
        "type": "long",
        "key": "expire",
        "title": "--expire=<time>",
        "description": "Prune entries older than the specified time. If this option is not specified, the expiration time is taken from the configuration setting gc.reflogExpire, which in turn defaults to 90 days. --expire=all prunes entries regardless of their age; --expire=never turns off pruning of reachable entries (but see --expire-unreachable)."
      },
      {
        "type": "long",
        "key": "expire-unreachable",
        "title": "--expire-unreachable=<time>",
        "description": "Prune entries older than <time> that are not reachable from the current tip of the branch. If this option is not specified, the expiration time is taken from the configuration setting gc.reflogExpireUnreachable, which in turn defaults to 30 days. --expire-unreachable=all prunes unreachable entries regardless of their age; --expire-unreachable=never turns off early pruning of unreachable entries (but see --expire)."
      },
      {
        "type": "long",
        "key": "updateref",
        "title": "--updateref",
        "description": "Update the reference to the value of the top reflog entry (i.e. <ref>@{0}) if the previous top entry was pruned. (This option is ignored for symbolic references.)"
      },
      {
        "type": "long",
        "key": "rewrite",
        "title": "--rewrite",
        "description": "If a reflog entry’s predecessor is pruned, adjust its \"old\" SHA-1 to be equal to the \"new\" SHA-1 field of the entry that now precedes it."
      },
      {
        "type": "long",
        "key": "stale-fix",
        "title": "--stale-fix",
        "description": "Prune any reflog entries that point to \"broken commits\". A broken commit is a commit that is not reachable from any of the reference tips and that refers, directly or indirectly, to a missing commit, tree, or blob object.\n\nThis computation involves traversing all the reachable objects, i.e. it has the same cost as git prune. It is primarily intended to fix corruption caused by garbage collecting using older versions of Git, which didn’t protect objects referred to by reflogs."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Do not actually prune any entries; just show what would have been pruned."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Do not actually prune any entries; just show what would have been pruned."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Print extra information on screen."
      }
    ]
  },
  {
    "name": "git remote",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Be a little more verbose and show remote url after name. NOTE: This must be placed between remote and subcommand."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Be a little more verbose and show remote url after name. NOTE: This must be placed between remote and subcommand."
      }
    ]
  },
  {
    "name": "git repack",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a",
        "description": "Instead of incrementally packing the unpacked objects, pack everything referenced into a single pack. Especially useful when packing a repository that is used for private development. Use with -d. This will clean up the objects that git prune leaves behind, but git fsck --full --dangling shows as dangling.\n\nNote that users fetching over dumb protocols will have to fetch the whole new pack in order to get any contained object, no matter how many other objects in that pack they already have locally.\n\nPromisor packfiles are repacked separately: if there are packfiles that have an associated \".promisor\" file, these packfiles will be repacked into another separate pack, and an empty \".promisor\" file corresponding to the new separate pack will be written."
      },
      {
        "type": "short",
        "key": "A",
        "title": "-A",
        "description": "Same as -a, unless -d is used. Then any unreachable objects in a previous pack become loose, unpacked objects, instead of being left in the old pack. Unreachable objects are never intentionally added to a pack, even when repacking. This option prevents unreachable objects from being immediately deleted by way of being left in the old pack and then removed. Instead, the loose unreachable objects will be pruned according to normal expiry rules with the next git gc invocation. See git-gc[1]."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d",
        "description": "After packing, if the newly created packs make some existing packs redundant, remove the redundant packs. Also run git prune-packed to remove redundant loose object files."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l",
        "description": "Pass the --local option to git pack-objects. See git-pack-objects[1]."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f",
        "description": "Pass the --no-reuse-delta option to git-pack-objects, see git-pack-objects[1]."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F",
        "description": "Pass the --no-reuse-object option to git-pack-objects, see git-pack-objects[1]."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "Pass the -q option to git pack-objects. See git-pack-objects[1]."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n",
        "description": "Do not update the server information with git update-server-info. This option skips updating local catalog files needed to publish this repository (or a direct copy of it) over HTTP or FTP. See git-update-server-info[1]."
      },
      {
        "type": "long",
        "key": "window",
        "title": "--window=<n>, --depth=<n>",
        "description": "These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within --window to see if using delta compression saves space. --depth limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object.\n\nThe default value for --window is 10 and --depth is 50. The maximum depth is 4095."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--window=<n>, --depth=<n>",
        "description": "These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within --window to see if using delta compression saves space. --depth limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object.\n\nThe default value for --window is 10 and --depth is 50. The maximum depth is 4095."
      },
      {
        "type": "long",
        "key": "threads",
        "title": "--threads=<n>",
        "description": "This option is passed through to git pack-objects."
      },
      {
        "type": "long",
        "key": "window-memory",
        "title": "--window-memory=<n>",
        "description": "This option provides an additional limit on top of --window; the window size will dynamically scale down so as to not take up more than <n> bytes in memory. This is useful in repositories with a mix of large and small objects to not run out of memory with a large window, but still be able to take advantage of the large window for the smaller objects. The size can be suffixed with \"k\", \"m\", or \"g\". --window-memory=0 makes memory usage unlimited. The default is taken from the pack.windowMemory configuration variable. Note that the actual memory usage will be the limit multiplied by the number of threads used by git-pack-objects[1]."
      },
      {
        "type": "long",
        "key": "max-pack-size",
        "title": "--max-pack-size=<n>",
        "description": "Maximum size of each output pack file. The size can be suffixed with \"k\", \"m\", or \"g\". The minimum size allowed is limited to 1 MiB. If specified, multiple packfiles may be created, which also prevents the creation of a bitmap index. The default is unlimited, unless the config variable pack.packSizeLimit is set. Note that this option may result in a larger and slower repository; see the discussion in pack.packSizeLimit."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --write-bitmap-index",
        "description": "Write a reachability bitmap index as part of the repack. This only makes sense when used with -a or -A, as the bitmaps must be able to refer to all reachable objects. This option overrides the setting of repack.writeBitmaps. This option has no effect if multiple packfiles are created."
      },
      {
        "type": "long",
        "key": "write-bitmap-index",
        "title": "-b, --write-bitmap-index",
        "description": "Write a reachability bitmap index as part of the repack. This only makes sense when used with -a or -A, as the bitmaps must be able to refer to all reachable objects. This option overrides the setting of repack.writeBitmaps. This option has no effect if multiple packfiles are created."
      },
      {
        "type": "long",
        "key": "pack-kept-objects",
        "title": "--pack-kept-objects",
        "description": "Include objects in .keep files when repacking. Note that we still do not delete .keep packs after pack-objects finishes. This means that we may duplicate objects, but this makes the option safe to use when there are concurrent pushes or fetches. This option is generally only useful if you are writing bitmaps with -b or repack.writeBitmaps, as it ensures that the bitmapped packfile has the necessary objects."
      },
      {
        "type": "long",
        "key": "keep-pack",
        "title": "--keep-pack=<pack-name>",
        "description": "Exclude the given pack from repacking. This is the equivalent of having .keep file on the pack. <pack-name> is the pack file name without leading directory (e.g. pack-123.pack). The option could be specified multiple times to keep multiple packs."
      },
      {
        "type": "long",
        "key": "unpack-unreachable",
        "title": "--unpack-unreachable=<when>",
        "description": "When loosening unreachable objects, do not bother loosening any objects older than <when>. This can be used to optimize out the write of any objects that would be immediately pruned by a follow-up git prune."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep-unreachable",
        "description": "When used with -ad, any unreachable objects from existing packs will be appended to the end of the packfile instead of being removed. In addition, any unreachable loose objects will be packed (and their loose counterparts removed)."
      },
      {
        "type": "long",
        "key": "keep-unreachable",
        "title": "-k, --keep-unreachable",
        "description": "When used with -ad, any unreachable objects from existing packs will be appended to the end of the packfile instead of being removed. In addition, any unreachable loose objects will be packed (and their loose counterparts removed)."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --delta-islands",
        "description": "Pass the --delta-islands option to git-pack-objects, see git-pack-objects[1]."
      },
      {
        "type": "long",
        "key": "delta-islands",
        "title": "-i, --delta-islands",
        "description": "Pass the --delta-islands option to git-pack-objects, see git-pack-objects[1]."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g=<factor>, --geometric=<factor>",
        "description": "Arrange resulting pack structure so that each successive pack contains at least <factor> times the number of objects as the next-largest pack.\n\ngit repack ensures this by determining a \"cut\" of packfiles that need to be repacked into one in order to ensure a geometric progression. It picks the smallest set of packfiles such that as many of the larger packfiles (by count of objects contained in that pack) may be left intact.\n\nUnlike other repack modes, the set of objects to pack is determined uniquely by the set of packs being \"rolled-up\"; in other words, the packs determined to need to be combined in order to restore a geometric progression.\n\nWhen --unpacked is specified, loose objects are implicitly included in this \"roll-up\", without respect to their reachability. This is subject to change in the future. This option (implying a drastically different repack mode) is not guaranteed to work with all other combinations of option to git repack."
      },
      {
        "type": "long",
        "key": "geometric",
        "title": "-g=<factor>, --geometric=<factor>",
        "description": "Arrange resulting pack structure so that each successive pack contains at least <factor> times the number of objects as the next-largest pack.\n\ngit repack ensures this by determining a \"cut\" of packfiles that need to be repacked into one in order to ensure a geometric progression. It picks the smallest set of packfiles such that as many of the larger packfiles (by count of objects contained in that pack) may be left intact.\n\nUnlike other repack modes, the set of objects to pack is determined uniquely by the set of packs being \"rolled-up\"; in other words, the packs determined to need to be combined in order to restore a geometric progression.\n\nWhen --unpacked is specified, loose objects are implicitly included in this \"roll-up\", without respect to their reachability. This is subject to change in the future. This option (implying a drastically different repack mode) is not guaranteed to work with all other combinations of option to git repack."
      }
    ]
  },
  {
    "name": "git annotate",
    "options": [
      {
        "type": "short",
        "key": "b",
        "title": "-b",
        "description": "Show blank SHA-1 for boundary commits. This can also be controlled via the blame.blankBoundary config option."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root",
        "description": "Do not treat root commits as boundaries. This can also be controlled via the blame.showRoot config option."
      },
      {
        "type": "long",
        "key": "show-stats",
        "title": "--show-stats",
        "description": "Include additional statistics at the end of blame output."
      },
      {
        "type": "short",
        "key": "L",
        "title": "-L <start>, <end>, -L :<funcname>",
        "description": "Annotate only the line range given by <start>,<end>, or by the function name regex <funcname>. May be specified multiple times. Overlapping ranges are allowed.\n\n<start> and <end> are optional. -L <start> or -L <start>, spans from <start> to end of file. -L ,<end> spans from start of file to <end>.\n\n<start> and <end> can take one of these forms:\n\n * number\n   \n   If <start> or <end> is a number, it specifies an absolute line number (lines count from 1).\n\n * /regex/\n   \n   This form will use the first line matching the given POSIX regex. If <start> is a regex, it will search from the end of the previous -L range, if any, otherwise from the start of file. If <start> is ^/regex/, it will search from the start of file. If <end> is a regex, it will search starting at the line given by <start>.\n\n * +offset or -offset\n   \n   This is only valid for <end> and will specify a number of lines before or after the line given by <start>.\n\nIf :<funcname> is given in place of <start> and <end>, it is a regular expression that denotes the range from the first funcname line that matches <funcname>, up to the next funcname line. :<funcname> searches from the end of the previous -L range, if any, otherwise from the start of file. ^:<funcname> searches from the start of file. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l",
        "description": "Show long rev (Default: off)."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t",
        "description": "Show raw timestamp (Default: off)."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S <revs-file>",
        "description": "Use revisions from revs-file instead of calling git-rev-list[1]."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge commit. This option can be used to determine when a line was introduced to a particular integration branch, rather than when it was introduced to the history overall."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --porcelain",
        "description": "Show in a format designed for machine consumption."
      },
      {
        "type": "long",
        "key": "porcelain",
        "title": "-p, --porcelain",
        "description": "Show in a format designed for machine consumption."
      },
      {
        "type": "long",
        "key": "line-porcelain",
        "title": "--line-porcelain",
        "description": "Show the porcelain format, but output commit information for each line, not just the first time a commit is referenced. Implies --porcelain."
      },
      {
        "type": "long",
        "key": "incremental",
        "title": "--incremental",
        "description": "Show the result incrementally in a format designed for machine consumption."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "Specifies the encoding used to output author names and commit summaries. Setting it to none makes blame output unconverted data. For more information see the discussion about encoding in the git-log[1] manual page."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--[no-]progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal. This flag enables progress reporting even if not attached to a terminal. Can’t use --progress together with --porcelain or --incremental."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<num>]",
        "description": "Detect moved or copied lines within a file. When a commit moves or copies a block of lines (e.g. the original file has A and then B, and the commit changes it to B and then A), the traditional blame algorithm notices only half of the movement and typically blames the lines that were moved up (i.e. B) to the parent and assigns blame to the lines that were moved down (i.e. A) to the child commit. With this option, both groups of lines are blamed on the parent by running extra passes of inspection.\n\n<num> is optional but it is the lower bound on the number of alphanumeric characters that Git must detect as moving/copying within a file for it to associate those lines with the parent commit. The default value is 20."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<num>]",
        "description": "In addition to -M, detect lines moved or copied from other files that were modified in the same commit. This is useful when you reorganize your program and move code around across files. When this option is given twice, the command additionally looks for copies from other files in the commit that creates the file. When this option is given three times, the command additionally looks for copies from other files in any commit.\n\n<num> is optional but it is the lower bound on the number of alphanumeric characters that Git must detect as moving/copying between files for it to associate those lines with the parent commit. And the default value is 40. If there are more than one -C options given, the <num> argument of the last -C will take effect."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h",
        "description": "Show help message."
      }
    ]
  },
  {
    "name": "git blame",
    "options": [
      {
        "type": "short",
        "key": "b",
        "title": "-b",
        "description": "Show blank SHA-1 for boundary commits. This can also be controlled via the blame.blankBoundary config option."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root",
        "description": "Do not treat root commits as boundaries. This can also be controlled via the blame.showRoot config option."
      },
      {
        "type": "long",
        "key": "show-stats",
        "title": "--show-stats",
        "description": "Include additional statistics at the end of blame output."
      },
      {
        "type": "short",
        "key": "L",
        "title": "-L <start>, <end>, -L :<funcname>",
        "description": "Annotate only the line range given by <start>,<end>, or by the function name regex <funcname>. May be specified multiple times. Overlapping ranges are allowed.\n\n<start> and <end> are optional. -L <start> or -L <start>, spans from <start> to end of file. -L ,<end> spans from start of file to <end>.\n\n<start> and <end> can take one of these forms:\n\n * number\n   \n   If <start> or <end> is a number, it specifies an absolute line number (lines count from 1).\n\n * /regex/\n   \n   This form will use the first line matching the given POSIX regex. If <start> is a regex, it will search from the end of the previous -L range, if any, otherwise from the start of file. If <start> is ^/regex/, it will search from the start of file. If <end> is a regex, it will search starting at the line given by <start>.\n\n * +offset or -offset\n   \n   This is only valid for <end> and will specify a number of lines before or after the line given by <start>.\n\nIf :<funcname> is given in place of <start> and <end>, it is a regular expression that denotes the range from the first funcname line that matches <funcname>, up to the next funcname line. :<funcname> searches from the end of the previous -L range, if any, otherwise from the start of file. ^:<funcname> searches from the start of file. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l",
        "description": "Show long rev (Default: off)."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t",
        "description": "Show raw timestamp (Default: off)."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S <revs-file>",
        "description": "Use revisions from revs-file instead of calling git-rev-list[1]."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge commit. This option can be used to determine when a line was introduced to a particular integration branch, rather than when it was introduced to the history overall."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --porcelain",
        "description": "Show in a format designed for machine consumption."
      },
      {
        "type": "long",
        "key": "porcelain",
        "title": "-p, --porcelain",
        "description": "Show in a format designed for machine consumption."
      },
      {
        "type": "long",
        "key": "line-porcelain",
        "title": "--line-porcelain",
        "description": "Show the porcelain format, but output commit information for each line, not just the first time a commit is referenced. Implies --porcelain."
      },
      {
        "type": "long",
        "key": "incremental",
        "title": "--incremental",
        "description": "Show the result incrementally in a format designed for machine consumption."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "Specifies the encoding used to output author names and commit summaries. Setting it to none makes blame output unconverted data. For more information see the discussion about encoding in the git-log[1] manual page."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--[no-]progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal. This flag enables progress reporting even if not attached to a terminal. Can’t use --progress together with --porcelain or --incremental."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<num>]",
        "description": "Detect moved or copied lines within a file. When a commit moves or copies a block of lines (e.g. the original file has A and then B, and the commit changes it to B and then A), the traditional blame algorithm notices only half of the movement and typically blames the lines that were moved up (i.e. B) to the parent and assigns blame to the lines that were moved down (i.e. A) to the child commit. With this option, both groups of lines are blamed on the parent by running extra passes of inspection.\n\n<num> is optional but it is the lower bound on the number of alphanumeric characters that Git must detect as moving/copying within a file for it to associate those lines with the parent commit. The default value is 20."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<num>]",
        "description": "In addition to -M, detect lines moved or copied from other files that were modified in the same commit. This is useful when you reorganize your program and move code around across files. When this option is given twice, the command additionally looks for copies from other files in the commit that creates the file. When this option is given three times, the command additionally looks for copies from other files in any commit.\n\n<num> is optional but it is the lower bound on the number of alphanumeric characters that Git must detect as moving/copying between files for it to associate those lines with the parent commit. And the default value is 40. If there are more than one -C options given, the <num> argument of the last -C will take effect."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h",
        "description": "Show help message."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c",
        "description": "Use the same output mode as git-annotate[1] (Default: off)."
      },
      {
        "type": "long",
        "key": "score-debug",
        "title": "--score-debug",
        "description": "Include debugging information related to the movement of lines between files (see -C) and lines moved within a file (see -M). The first number listed is the score. This is the number of alphanumeric characters detected as having been moved between or within files. This must be above a certain threshold for git blame to consider those lines of code to have been moved."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --show-name",
        "description": "Show the filename in the original commit. By default the filename is shown if there is any line that came from a file with a different name, due to rename detection."
      },
      {
        "type": "long",
        "key": "show-name",
        "title": "-f, --show-name",
        "description": "Show the filename in the original commit. By default the filename is shown if there is any line that came from a file with a different name, due to rename detection."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --show-number",
        "description": "Show the line number in the original commit (Default: off)."
      },
      {
        "type": "long",
        "key": "show-number",
        "title": "-n, --show-number",
        "description": "Show the line number in the original commit (Default: off)."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s",
        "description": "Suppress the author name and timestamp from the output."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --show-email",
        "description": "Show the author email instead of author name (Default: off). This can also be controlled via the blame.showEmail config option."
      },
      {
        "type": "long",
        "key": "show-email",
        "title": "-e, --show-email",
        "description": "Show the author email instead of author name (Default: off). This can also be controlled via the blame.showEmail config option."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w",
        "description": "Ignore whitespace when comparing the parent’s version and the child’s to find where the lines came from."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev=<n>",
        "description": "Instead of using the default 7+1 hexadecimal digits as the abbreviated object name, use <m>+1 digits, where <m> is at least <n> but ensures the commit object names are unique. Note that 1 column is used for a caret to mark the boundary commit."
      }
    ]
  },
  {
    "name": "git bugreport",
    "options": [
      {
        "type": "short",
        "key": "o",
        "title": "-o <path>, --output-directory <path>",
        "description": "Place the resulting bug report file in <path> instead of the current directory."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s <format>, --suffix <format>",
        "description": "Specify an alternate suffix for the bugreport name, to create a file named git-bugreport-<formatted suffix>. This should take the form of a strftime(3) format string; the current local time will be used."
      }
    ]
  },
  {
    "name": "git count-objects",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Report in more detail:\n\ncount: the number of loose objects\n\nsize: disk space consumed by loose objects, in KiB (unless -H is specified)\n\nin-pack: the number of in-pack objects\n\nsize-pack: disk space consumed by the packs, in KiB (unless -H is specified)\n\nprune-packable: the number of loose objects that are also present in the packs. These objects could be pruned using git prune-packed.\n\ngarbage: the number of files in object database that are neither valid loose objects nor valid packs\n\nsize-garbage: disk space consumed by garbage files, in KiB (unless -H is specified)\n\nalternate: absolute path of alternate object databases; may appear multiple times, one line per path. Note that if the path contains non-printable characters, it may be surrounded by double-quotes and contain C-style backslashed escape sequences."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Report in more detail:\n\ncount: the number of loose objects\n\nsize: disk space consumed by loose objects, in KiB (unless -H is specified)\n\nin-pack: the number of in-pack objects\n\nsize-pack: disk space consumed by the packs, in KiB (unless -H is specified)\n\nprune-packable: the number of loose objects that are also present in the packs. These objects could be pruned using git prune-packed.\n\ngarbage: the number of files in object database that are neither valid loose objects nor valid packs\n\nsize-garbage: disk space consumed by garbage files, in KiB (unless -H is specified)\n\nalternate: absolute path of alternate object databases; may appear multiple times, one line per path. Note that if the path contains non-printable characters, it may be surrounded by double-quotes and contain C-style backslashed escape sequences."
      },
      {
        "type": "short",
        "key": "H",
        "title": "-H, --human-readable",
        "description": "Print sizes in human readable format"
      },
      {
        "type": "long",
        "key": "human-readable",
        "title": "-H, --human-readable",
        "description": "Print sizes in human readable format"
      }
    ]
  },
  {
    "name": "git difftool",
    "options": [
      {
        "type": "short",
        "key": "d",
        "title": "-d, --dir-diff",
        "description": "Copy the modified files to a temporary location and perform a directory diff on them. This mode never prompts before launching the diff tool."
      },
      {
        "type": "long",
        "key": "dir-diff",
        "title": "-d, --dir-diff",
        "description": "Copy the modified files to a temporary location and perform a directory diff on them. This mode never prompts before launching the diff tool."
      },
      {
        "type": "short",
        "key": "y",
        "title": "-y, --no-prompt",
        "description": "Do not prompt before launching a diff tool."
      },
      {
        "type": "long",
        "key": "no-prompt",
        "title": "-y, --no-prompt",
        "description": "Do not prompt before launching a diff tool."
      },
      {
        "type": "long",
        "key": "prompt",
        "title": "--prompt",
        "description": "Prompt before each invocation of the diff tool. This is the default behaviour; the option is provided to override any configuration settings."
      },
      {
        "type": "long",
        "key": "rotate-to",
        "title": "--rotate-to=<file>",
        "description": "Start showing the diff for the given path, the paths before it will move to end and output."
      },
      {
        "type": "long",
        "key": "skip-to",
        "title": "--skip-to=<file>",
        "description": "Start showing the diff for the given path, skipping all the paths before it."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t <tool>, --tool=<tool>",
        "description": "Use the diff tool specified by <tool>. Valid values include emerge, kompare, meld, and vimdiff. Run git difftool --tool-help for the list of valid <tool> settings.\n\nIf a diff tool is not specified, git difftool will use the configuration variable diff.tool. If the configuration variable diff.tool is not set, git difftool will pick a suitable default.\n\nYou can explicitly provide a full path to the tool by setting the configuration variable difftool.<tool>.path. For example, you can configure the absolute path to kdiff3 by setting difftool.kdiff3.path. Otherwise, git difftool assumes the tool is available in PATH.\n\nInstead of running one of the known diff tools, git difftool can be customized to run an alternative program by specifying the command line to invoke in a configuration variable difftool.<tool>.cmd.\n\nWhen git difftool is invoked with this tool (either through the -t or --tool option or the diff.tool configuration variable) the configured command line will be invoked with the following variables available: $LOCAL is set to the name of the temporary file containing the contents of the diff pre-image and $REMOTE is set to the name of the temporary file containing the contents of the diff post-image. $MERGED is the name of the file which is being compared. $BASE is provided for compatibility with custom merge tool commands and has the same value as $MERGED."
      },
      {
        "type": "long",
        "key": "tool",
        "title": "-t <tool>, --tool=<tool>",
        "description": "Use the diff tool specified by <tool>. Valid values include emerge, kompare, meld, and vimdiff. Run git difftool --tool-help for the list of valid <tool> settings.\n\nIf a diff tool is not specified, git difftool will use the configuration variable diff.tool. If the configuration variable diff.tool is not set, git difftool will pick a suitable default.\n\nYou can explicitly provide a full path to the tool by setting the configuration variable difftool.<tool>.path. For example, you can configure the absolute path to kdiff3 by setting difftool.kdiff3.path. Otherwise, git difftool assumes the tool is available in PATH.\n\nInstead of running one of the known diff tools, git difftool can be customized to run an alternative program by specifying the command line to invoke in a configuration variable difftool.<tool>.cmd.\n\nWhen git difftool is invoked with this tool (either through the -t or --tool option or the diff.tool configuration variable) the configured command line will be invoked with the following variables available: $LOCAL is set to the name of the temporary file containing the contents of the diff pre-image and $REMOTE is set to the name of the temporary file containing the contents of the diff post-image. $MERGED is the name of the file which is being compared. $BASE is provided for compatibility with custom merge tool commands and has the same value as $MERGED."
      },
      {
        "type": "long",
        "key": "tool-help",
        "title": "--tool-help",
        "description": "Print a list of diff tools that may be used with --tool."
      },
      {
        "type": "long",
        "key": "symlinks",
        "title": "--[no-]symlinks",
        "description": "git difftool's default behavior is create symlinks to the working tree when run in --dir-diff mode and the right-hand side of the comparison yields the same content as the file in the working tree.\n\nSpecifying --no-symlinks instructs git difftool to create copies instead. --no-symlinks is the default on Windows."
      },
      {
        "type": "short",
        "key": "x",
        "title": "-x <command>, --extcmd=<command>",
        "description": "Specify a custom command for viewing diffs. git-difftool ignores the configured defaults and runs $command $LOCAL $REMOTE when this option is specified. Additionally, $BASE is set in the environment."
      },
      {
        "type": "long",
        "key": "extcmd",
        "title": "-x <command>, --extcmd=<command>",
        "description": "Specify a custom command for viewing diffs. git-difftool ignores the configured defaults and runs $command $LOCAL $REMOTE when this option is specified. Additionally, $BASE is set in the environment."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --[no-]gui",
        "description": "When git-difftool is invoked with the -g or --gui option the default diff tool will be read from the configured diff.guitool variable instead of diff.tool. The --no-gui option can be used to override this setting. If diff.guitool is not set, we will fallback in the order of merge.guitool, diff.tool, merge.tool until a tool is found."
      },
      {
        "type": "long",
        "key": "gui",
        "title": "-g, --[no-]gui",
        "description": "When git-difftool is invoked with the -g or --gui option the default diff tool will be read from the configured diff.guitool variable instead of diff.tool. The --no-gui option can be used to override this setting. If diff.guitool is not set, we will fallback in the order of merge.guitool, diff.tool, merge.tool until a tool is found."
      },
      {
        "type": "long",
        "key": "trust-exit-code",
        "title": "--[no-]trust-exit-code",
        "description": "git-difftool invokes a diff tool individually on each file. Errors reported by the diff tool are ignored by default. Use --trust-exit-code to make git-difftool exit when an invoked diff tool returns a non-zero exit code.\n\ngit-difftool will forward the exit code of the invoked tool when --trust-exit-code is used."
      }
    ]
  },
  {
    "name": "git fsck",
    "options": [
      {
        "type": "long",
        "key": "unreachable",
        "title": "--unreachable",
        "description": "Print out objects that exist but that aren’t reachable from any of the reference nodes."
      },
      {
        "type": "long",
        "key": "dangling",
        "title": "--[no-]dangling",
        "description": "Print objects that exist but that are never directly used (default). --no-dangling can be used to omit this information from the output."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root",
        "description": "Report root nodes."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--tags",
        "description": "Report tags."
      },
      {
        "type": "long",
        "key": "cache",
        "title": "--cache",
        "description": "Consider any object recorded in the index also as a head node for an unreachability trace."
      },
      {
        "type": "long",
        "key": "no-reflogs",
        "title": "--no-reflogs",
        "description": "Do not consider commits that are referenced only by an entry in a reflog to be reachable. This option is meant only to search for commits that used to be in a ref, but now aren’t, but are still in that corresponding reflog."
      },
      {
        "type": "long",
        "key": "full",
        "title": "--full",
        "description": "Check not just objects in GIT_OBJECT_DIRECTORY ($GIT_DIR/objects), but also the ones found in alternate object pools listed in GIT_ALTERNATE_OBJECT_DIRECTORIES or $GIT_DIR/objects/info/alternates, and in packed Git archives found in $GIT_DIR/objects/pack and corresponding pack subdirectories in alternate object pools. This is now default; you can turn it off with --no-full."
      },
      {
        "type": "long",
        "key": "connectivity-only",
        "title": "--connectivity-only",
        "description": "Check only the connectivity of reachable objects, making sure that any objects referenced by a reachable tag, commit, or tree is present. This speeds up the operation by avoiding reading blobs entirely (though it does still check that referenced blobs exist). This will detect corruption in commits and trees, but not do any semantic checks (e.g., for format errors). Corruption in blob objects will not be detected at all.\n\nUnreachable tags, commits, and trees will also be accessed to find the tips of dangling segments of history. Use --no-dangling if you don’t care about this output and want to speed it up further."
      },
      {
        "type": "long",
        "key": "strict",
        "title": "--strict",
        "description": "Enable more strict checking, namely to catch a file mode recorded with g+w bit set, which was created by older versions of Git. Existing repositories, including the Linux kernel, Git itself, and sparse repository have old objects that triggers this check, but it is recommended to check new projects with this flag."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Be chatty."
      },
      {
        "type": "long",
        "key": "lost-found",
        "title": "--lost-found",
        "description": "Write dangling objects into .git/lost-found/commit/ or .git/lost-found/other/, depending on type. If the object is a blob, the contents are written into the file, rather than its object name."
      },
      {
        "type": "long",
        "key": "name-objects",
        "title": "--name-objects",
        "description": "When displaying names of reachable objects, in addition to the SHA-1 also display a name that describes how they are reachable, compatible with git-rev-parse[1], e.g. HEAD@{1234567890}~25^2:src/."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--[no-]progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --no-progress or --verbose is specified. --progress forces progress status even if the standard error stream is not directed to a terminal."
      }
    ]
  },
  {
    "name": "git instaweb",
    "options": [
      {
        "type": "short",
        "key": "l",
        "title": "-l, --local",
        "description": "Only bind the web server to the local IP (127.0.0.1)."
      },
      {
        "type": "long",
        "key": "local",
        "title": "-l, --local",
        "description": "Only bind the web server to the local IP (127.0.0.1)."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --httpd",
        "description": "The HTTP daemon command-line that will be executed. Command-line options may be specified here, and the configuration file will be added at the end of the command-line. Currently apache2, lighttpd, mongoose, plackup, python and webrick are supported. (Default: lighttpd)"
      },
      {
        "type": "long",
        "key": "httpd",
        "title": "-d, --httpd",
        "description": "The HTTP daemon command-line that will be executed. Command-line options may be specified here, and the configuration file will be added at the end of the command-line. Currently apache2, lighttpd, mongoose, plackup, python and webrick are supported. (Default: lighttpd)"
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --module-path",
        "description": "The module path (only needed if httpd is Apache). (Default: /usr/lib/apache2/modules)"
      },
      {
        "type": "long",
        "key": "module-path",
        "title": "-m, --module-path",
        "description": "The module path (only needed if httpd is Apache). (Default: /usr/lib/apache2/modules)"
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --port",
        "description": "The port number to bind the httpd to. (Default: 1234)"
      },
      {
        "type": "long",
        "key": "port",
        "title": "-p, --port",
        "description": "The port number to bind the httpd to. (Default: 1234)"
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --browser",
        "description": "The web browser that should be used to view the gitweb page. This will be passed to the git web--browse helper script along with the URL of the gitweb instance. See git-web--browse[1] for more information about this. If the script fails, the URL will be printed to stdout."
      },
      {
        "type": "long",
        "key": "browser",
        "title": "-b, --browser",
        "description": "The web browser that should be used to view the gitweb page. This will be passed to the git web--browse helper script along with the URL of the gitweb instance. See git-web--browse[1] for more information about this. If the script fails, the URL will be printed to stdout."
      },
      {
        "type": "long",
        "key": "start",
        "title": "start, --start",
        "description": "Start the httpd instance and exit. Regenerate configuration files as necessary for spawning a new instance."
      },
      {
        "type": "long",
        "key": "stop",
        "title": "stop, --stop",
        "description": "Stop the httpd instance and exit. This does not generate any of the configuration files for spawning a new instance, nor does it close the browser."
      },
      {
        "type": "long",
        "key": "restart",
        "title": "restart, --restart",
        "description": "Restart the httpd instance and exit. Regenerate configuration files as necessary for spawning a new instance."
      }
    ]
  },
  {
    "name": "git merge-tree",
    "options": []
  },
  {
    "name": "git rerere",
    "options": []
  },
  {
    "name": "git show-branch",
    "options": [
      {
        "type": "short",
        "key": "r",
        "title": "-r, --remotes",
        "description": "Show the remote-tracking branches."
      },
      {
        "type": "long",
        "key": "remotes",
        "title": "-r, --remotes",
        "description": "Show the remote-tracking branches."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "Show both remote-tracking branches and local branches."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "Show both remote-tracking branches and local branches."
      },
      {
        "type": "long",
        "key": "current",
        "title": "--current",
        "description": "With this option, the command includes the current branch to the list of revs to be shown when it is not given on the command line."
      },
      {
        "type": "long",
        "key": "topo-order",
        "title": "--topo-order",
        "description": "By default, the branches and their commits are shown in reverse chronological order. This option makes them appear in topological order (i.e., descendant commits are shown before their parents)."
      },
      {
        "type": "long",
        "key": "date-order",
        "title": "--date-order",
        "description": "This option is similar to --topo-order in the sense that no parent comes before all of its children, but otherwise commits are ordered according to their commit date."
      },
      {
        "type": "long",
        "key": "sparse",
        "title": "--sparse",
        "description": "By default, the output omits merges that are reachable from only one tip being shown. This option makes them visible."
      },
      {
        "type": "long",
        "key": "more",
        "title": "--more=<n>",
        "description": "Usually the command stops output upon showing the commit that is the common ancestor of all the branches. This flag tells the command to go <n> more common commits beyond that. When <n> is negative, display only the <reference>s given, without showing the commit ancestry tree."
      },
      {
        "type": "long",
        "key": "list",
        "title": "--list",
        "description": "Synonym to --more=-1"
      },
      {
        "type": "long",
        "key": "merge-base",
        "title": "--merge-base",
        "description": "Instead of showing the commit list, determine possible merge bases for the specified commits. All merge bases will be contained in all specified commits. This is different from how git-merge-base[1] handles the case of three or more commits."
      },
      {
        "type": "long",
        "key": "independent",
        "title": "--independent",
        "description": "Among the <reference>s given, display only the ones that cannot be reached from any other <reference>."
      },
      {
        "type": "long",
        "key": "no-name",
        "title": "--no-name",
        "description": "Do not show naming strings for each commit."
      },
      {
        "type": "long",
        "key": "sha1-name",
        "title": "--sha1-name",
        "description": "Instead of naming the commits using the path to reach them from heads (e.g. \"master~2\" to mean the grandparent of \"master\"), name them with the unique prefix of their object names."
      },
      {
        "type": "long",
        "key": "topics",
        "title": "--topics",
        "description": "Shows only commits that are NOT on the first branch given. This helps track topic branches by hiding any commit that is already in the main line of development. When given \"git show-branch --topics master topic1 topic2\", this will show the revisions given by \"git rev-list ^master topic1 topic2\""
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --reflog[=<n>[, <base>]] [<ref>]",
        "description": "Shows <n> most recent ref-log entries for the given ref. If <base> is given, <n> entries going back from that entry. <base> can be specified as count or date. When no explicit <ref> parameter is given, it defaults to the current branch (or HEAD if it is detached)."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Color the status sign (one of these: * ! + -) of each commit corresponding to the branch it’s in. The value must be always (the default), never, or auto."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off colored output, even when the configuration file gives the default to color output. Same as --color=never."
      }
    ]
  },
  {
    "name": "git verify-commit",
    "options": [
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "Print the raw gpg status output to standard error instead of the normal human-readable output."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Print the contents of the commit object before validating it."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Print the contents of the commit object before validating it."
      }
    ]
  },
  {
    "name": "git verify-tag",
    "options": [
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "Print the raw gpg status output to standard error instead of the normal human-readable output."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Print the contents of the tag object before validating it."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Print the contents of the tag object before validating it."
      }
    ]
  },
  {
    "name": "git whatchanged",
    "options": []
  },
  {
    "name": "git archimport",
    "options": [
      {
        "type": "short",
        "key": "h",
        "title": "-h",
        "description": "Display usage."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Verbose output."
      },
      {
        "type": "short",
        "key": "T",
        "title": "-T",
        "description": "Many tags. Will create a tag for every commit, reflecting the commit name in the Arch repository."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f",
        "description": "Use the fast patchset import strategy. This can be significantly faster for large trees, but cannot handle directory renames or permissions changes. The default strategy is slow and safe."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o",
        "description": "Use this for compatibility with old-style branch names used by earlier versions of git archimport. Old-style branch names were category--branch, whereas new-style branch names are archive,category--branch--version. In both cases, names given on the command-line will override the automatically-generated ones."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D <depth>",
        "description": "Follow merge ancestry and attempt to import trees that have been merged from. Specify a depth greater than 1 if patch logs have been pruned."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a",
        "description": "Attempt to auto-register archives at http://mirrors.sourcecontrol.net This is particularly useful with the -D option."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t <tmpdir>",
        "description": "Override the default tempdir."
      }
    ]
  },
  {
    "name": "git cvsexportcommit",
    "options": [
      {
        "type": "short",
        "key": "c",
        "title": "-c",
        "description": "Commit automatically if the patch applied cleanly. It will not commit if any hunks fail to apply or there were other problems."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p",
        "description": "Be pedantic (paranoid) when applying patches. Invokes patch with --fuzz=0"
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a",
        "description": "Add authorship information. Adds Author line, and Committer (if different from Author) to the message."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d",
        "description": "Set an alternative CVSROOT to use. This corresponds to the CVS -d parameter. Usually users will not want to set this, except if using CVS in an asymmetric fashion."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f",
        "description": "Force the merge even if the files are not up to date."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P",
        "description": "Force the parent commit, even if it is not a direct parent."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m",
        "description": "Prepend the commit message with the provided prefix. Useful for patch series and the like."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u",
        "description": "Update affected files from CVS repository before attempting export."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k",
        "description": "Reverse CVS keyword expansion (e.g. $Revision: 1.2.3.4$ becomes $Revision$) in working CVS checkout before applying patch."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w",
        "description": "Specify the location of the CVS checkout to use for the export. This option does not require GIT_DIR to be set before execution if the current directory is within a Git repository. The default is the value of cvsexportcommit.cvsdir."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W",
        "description": "Tell cvsexportcommit that the current working directory is not only a Git checkout, but also the CVS checkout. Therefore, Git will reset the working directory to the parent commit before proceeding."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Verbose."
      }
    ]
  },
  {
    "name": "git cvsimport",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Verbosity: let cvsimport report what it is doing."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d <CVSROOT>",
        "description": "The root of the CVS archive. May be local (a simple path) or remote; currently, only the :local:, :ext: and :pserver: access methods are supported. If not given, git cvsimport will try to read it from CVS/Root. If no such file exists, it checks for the CVSROOT environment variable."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C <target-dir>",
        "description": "The Git repository to import to. If the directory doesn’t exist, it will be created. Default is the current directory."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r <remote>",
        "description": "The Git remote to import this CVS repository into. Moves all CVS branches into remotes/<remote>/<branch> akin to the way git clone uses origin by default."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <branch-for-HEAD>",
        "description": "When no remote is specified (via -r) the HEAD branch from CVS is imported to the origin branch within the Git repository, as HEAD already has a special meaning for Git. When a remote is specified the HEAD branch is named remotes/<remote>/master mirroring git clone behaviour. Use this option if you want to import into a different branch.\n\nUse -o master for continuing an import that was initially done by the old cvs2git tool."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i",
        "description": "Import-only: don’t perform a checkout after importing. This option ensures the working directory and index remain untouched and will not create them if they do not exist."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k",
        "description": "Kill keywords: will extract files with -kk from the CVS archive to avoid noisy changesets. Highly recommended, but off by default to preserve compatibility with early imported trees."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u",
        "description": "Convert underscores in tag and branch names to dots."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s <subst>",
        "description": "Substitute the character \"/\" in branch names with <subst>"
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p <options-for-cvsps>",
        "description": "Additional options for cvsps. The options -u and -A are implicit and should not be used here.\n\nIf you need to pass multiple options, separate them with a comma."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z <fuzz>",
        "description": "Pass the timestamp fuzz factor to cvsps, in seconds. If unset, cvsps defaults to 300s."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P <cvsps-output-file>",
        "description": "Instead of calling cvsps, read the provided cvsps output file. Useful for debugging or when cvsps is being handled outside cvsimport."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m",
        "description": "Attempt to detect merges based on the commit message. This option will enable default regexes that try to capture the source branch name from the commit message."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M <regex>",
        "description": "Attempt to detect merges based on the commit message with a custom regex. It can be used with -m to enable the default regexes as well. You must escape forward slashes.\n\nThe regex must capture the source branch name in $1.\n\nThis option can be used several times to provide several detection regexes."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S <regex>",
        "description": "Skip paths matching the regex."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a",
        "description": "Import all commits, including recent ones. cvsimport by default skips commits that have a timestamp less than 10 minutes ago."
      },
      {
        "type": "short",
        "key": "L",
        "title": "-L <limit>",
        "description": "Limit the number of commits imported. Workaround for cases where cvsimport leaks memory."
      },
      {
        "type": "short",
        "key": "A",
        "title": "-A <author-conv-file>",
        "description": "CVS by default uses the Unix username when writing its commit logs. Using this option and an author-conv-file maps the name recorded in CVS to author name, e-mail and optional time zone:\n\n\texon=Andreas Ericsson <ae@op5.se>\n\tspawn=Simon Pawn <spawn@frog-pond.org> America/Chicago\n\ngit cvsimport will make it appear as those authors had their GIT_AUTHOR_NAME and GIT_AUTHOR_EMAIL set properly all along. If a time zone is specified, GIT_AUTHOR_DATE will have the corresponding offset applied.\n\nFor convenience, this data is saved to $GIT_DIR/cvs-authors each time the -A option is provided and read from that same file each time git cvsimport is run.\n\nIt is not recommended to use this feature if you intend to export changes back to CVS again later with git cvsexportcommit."
      },
      {
        "type": "short",
        "key": "R",
        "title": "-R",
        "description": "Generate a $GIT_DIR/cvs-revisions file containing a mapping from CVS revision numbers to newly-created Git commit IDs. The generated file will contain one line for each (filename, revision) pair imported; each line will look like\n\nsrc/widget.c 1.1 1d862f173cdc7325b6fa6d2ae1cfd61fd1b512b7\n\nThe revision data is appended to the file if it already exists, for use when doing incremental imports.\n\nThis option may be useful if you have CVS revision numbers stored in commit messages, bug-tracking systems, email archives, and the like."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h",
        "description": "Print a short usage message and exit."
      }
    ]
  },
  {
    "name": "git cvsserver",
    "options": [
      {
        "type": "long",
        "key": "strict-paths",
        "title": "--strict-paths",
        "description": "Don’t allow recursing into subdirectories"
      },
      {
        "type": "long",
        "key": "export-all",
        "title": "--export-all",
        "description": "Don’t check for gitcvs.enabled in config. You also have to specify a list of allowed directories (see below) if you want to use this option."
      },
      {
        "type": "short",
        "key": "V",
        "title": "-V, --version",
        "description": "Print version information and exit"
      },
      {
        "type": "long",
        "key": "version",
        "title": "-V, --version",
        "description": "Print version information and exit"
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, -H, --help",
        "description": "Print usage information and exit"
      },
      {
        "type": "short",
        "key": "H",
        "title": "-h, -H, --help",
        "description": "Print usage information and exit"
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, -H, --help",
        "description": "Print usage information and exit"
      }
    ]
  },
  {
    "name": "git imap-send",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Be quiet."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Be quiet."
      },
      {
        "type": "long",
        "key": "curl",
        "title": "--curl",
        "description": "Use libcurl to communicate with the IMAP server, unless tunneling into it. Ignored if Git was built without the USE_CURL_FOR_IMAP_SEND option set."
      },
      {
        "type": "long",
        "key": "no-curl",
        "title": "--no-curl",
        "description": "Talk to the IMAP server using git’s own IMAP routines instead of using libcurl. Ignored if Git was built with the NO_OPENSSL option set."
      }
    ]
  },
  {
    "name": "git p4",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Provide more progress information."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Provide more progress information."
      },
      {
        "type": "long",
        "key": "detect-branches",
        "title": "--detect-branches",
        "description": "Use the branch detection algorithm to find new paths in p4. It is documented below in \"BRANCH DETECTION\"."
      },
      {
        "type": "long",
        "key": "silent",
        "title": "--silent",
        "description": "Do not print any progress information."
      },
      {
        "type": "long",
        "key": "detect-labels",
        "title": "--detect-labels",
        "description": "Query p4 for labels associated with the depot paths, and add them as tags in Git. Limited usefulness as only imports labels associated with new changelists. Deprecated."
      },
      {
        "type": "long",
        "key": "import-labels",
        "title": "--import-labels",
        "description": "Import labels from p4 into Git."
      },
      {
        "type": "long",
        "key": "import-local",
        "title": "--import-local",
        "description": "By default, p4 branches are stored in refs/remotes/p4/, where they will be treated as remote-tracking branches by git-branch[1] and other commands. This option instead puts p4 branches in refs/heads/p4/. Note that future sync operations must specify --import-local as well so that they can find the p4 branches in refs/heads."
      },
      {
        "type": "long",
        "key": "keep-path",
        "title": "--keep-path",
        "description": "The mapping of file names from the p4 depot path to Git, by default, involves removing the entire depot path. With this option, the full p4 depot path is retained in Git. For example, path //depot/main/foo/bar.c, when imported from //depot/main/, becomes foo/bar.c. With --keep-path, the Git path is instead depot/main/foo/bar.c."
      },
      {
        "type": "long",
        "key": "use-client-spec",
        "title": "--use-client-spec",
        "description": "Use a client spec to find the list of interesting files in p4. See the \"CLIENT SPEC\" section below."
      },
      {
        "type": "long",
        "key": "bare",
        "title": "--bare",
        "description": "Perform a bare clone. See git-clone[1]."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M",
        "description": "Detect renames. See git-diff[1]. Renames will be represented in p4 using explicit move operations. There is no corresponding option to detect copies, but there are variables for both moves and copies."
      },
      {
        "type": "long",
        "key": "preserve-user",
        "title": "--preserve-user",
        "description": "Re-author p4 changes before submitting to p4. This option requires p4 admin privileges."
      },
      {
        "type": "long",
        "key": "export-labels",
        "title": "--export-labels",
        "description": "Export tags from Git as p4 labels. Tags found in Git are applied to the perforce working directory."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Show just what commits would be submitted to p4; do not change state in Git or p4."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Show just what commits would be submitted to p4; do not change state in Git or p4."
      },
      {
        "type": "long",
        "key": "prepare-p4-only",
        "title": "--prepare-p4-only",
        "description": "Apply a commit to the p4 workspace, opening, adding and deleting files in p4 as for a normal submit operation. Do not issue the final \"p4 submit\", but instead print a message about how to submit manually or revert. This option always stops after the first (oldest) commit. Git tags are not exported to p4."
      },
      {
        "type": "long",
        "key": "shelve",
        "title": "--shelve",
        "description": "Instead of submitting create a series of shelved changelists. After creating each shelve, the relevant files are reverted/deleted. If you have multiple commits pending multiple shelves will be created."
      },
      {
        "type": "long",
        "key": "conflict",
        "title": "--conflict=(ask|skip|quit)",
        "description": "Conflicts can occur when applying a commit to p4. When this happens, the default behavior (\"ask\") is to prompt whether to skip this commit and continue, or quit. This option can be used to bypass the prompt, causing conflicting commits to be automatically skipped, or to quit trying to apply commits, without prompting."
      },
      {
        "type": "long",
        "key": "disable-rebase",
        "title": "--disable-rebase",
        "description": "Disable the automatic rebase after all commits have been successfully submitted. Can also be set with git-p4.disableRebase."
      },
      {
        "type": "long",
        "key": "disable-p4sync",
        "title": "--disable-p4sync",
        "description": "Disable the automatic sync of p4/master from Perforce after commits have been submitted. Implies --disable-rebase. Can also be set with git-p4.disableP4Sync. Sync with origin/master still goes ahead if possible."
      }
    ]
  },
  {
    "name": "git quiltimport",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Walk through the patches in the series and warn if we cannot find all of the necessary information to commit a patch. At the time of this writing only missing author information is warned about."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Walk through the patches in the series and warn if we cannot find all of the necessary information to commit a patch. At the time of this writing only missing author information is warned about."
      },
      {
        "type": "long",
        "key": "keep-non-patch",
        "title": "--keep-non-patch",
        "description": "Pass -b flag to git mailinfo (see git-mailinfo[1])."
      }
    ]
  },
  {
    "name": "git request-pull",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p",
        "description": "Include patch text in the output."
      }
    ]
  },
  {
    "name": "git send-email",
    "options": [
      {
        "type": "long",
        "key": "annotate",
        "title": "--annotate",
        "description": "Review and edit each patch you’re about to send. Default is the value of sendemail.annotate. See the CONFIGURATION section for sendemail.multiEdit."
      },
      {
        "type": "long",
        "key": "bcc",
        "title": "--bcc=<address>, …",
        "description": "Specify a \"Bcc:\" value for each email. Default is the value of sendemail.bcc.\n\nThis option may be specified multiple times."
      },
      {
        "type": "long",
        "key": "cc",
        "title": "--cc=<address>, …",
        "description": "Specify a starting \"Cc:\" value for each email. Default is the value of sendemail.cc.\n\nThis option may be specified multiple times."
      },
      {
        "type": "long",
        "key": "compose",
        "title": "--compose",
        "description": "Invoke a text editor (see GIT_EDITOR in git-var[1]) to edit an introductory message for the patch series.\n\nWhen --compose is used, git send-email will use the From, Subject, and In-Reply-To headers specified in the message. If the body of the message (what you type after the headers and a blank line) only contains blank (or Git: prefixed) lines, the summary won’t be sent, but From, Subject, and In-Reply-To headers will be used unless they are removed.\n\nMissing From or In-Reply-To headers will be prompted for.\n\nSee the CONFIGURATION section for sendemail.multiEdit."
      },
      {
        "type": "long",
        "key": "from",
        "title": "--from=<address>",
        "description": "Specify the sender of the emails. If not specified on the command line, the value of the sendemail.from configuration option is used. If neither the command-line option nor sendemail.from are set, then the user will be prompted for the value. The default for the prompt will be the value of GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not set, as returned by \"git var -l\"."
      },
      {
        "type": "long",
        "key": "reply-to",
        "title": "--reply-to=<address>",
        "description": "Specify the address where replies from recipients should go to. Use this if replies to messages should go to another address than what is specified with the --from parameter."
      },
      {
        "type": "long",
        "key": "in-reply-to",
        "title": "--in-reply-to=<identifier>",
        "description": "Make the first mail (or all the mails with --no-thread) appear as a reply to the given Message-Id, which avoids breaking threads to provide a new patch series. The second and subsequent emails will be sent as replies according to the --[no-]chain-reply-to setting.\n\nSo for example when --thread and --no-chain-reply-to are specified, the second and subsequent patches will be replies to the first one like in the illustration below where [PATCH v2 0/3] is in reply to [PATCH 0/2]:\n\n[PATCH 0/2] Here is what I did...\n  [PATCH 1/2] Clean up and tests\n  [PATCH 2/2] Implementation\n  [PATCH v2 0/3] Here is a reroll\n    [PATCH v2 1/3] Clean up\n    [PATCH v2 2/3] New tests\n    [PATCH v2 3/3] Implementation\n\nOnly necessary if --compose is also set. If --compose is not set, this will be prompted for."
      },
      {
        "type": "long",
        "key": "subject",
        "title": "--subject=<string>",
        "description": "Specify the initial subject of the email thread. Only necessary if --compose is also set. If --compose is not set, this will be prompted for."
      },
      {
        "type": "long",
        "key": "to",
        "title": "--to=<address>, …",
        "description": "Specify the primary recipient of the emails generated. Generally, this will be the upstream maintainer of the project involved. Default is the value of the sendemail.to configuration value; if that is unspecified, and --to-cmd is not specified, this will be prompted for.\n\nThis option may be specified multiple times."
      },
      {
        "type": "long",
        "key": "8bit-encoding",
        "title": "--8bit-encoding=<encoding>",
        "description": "When encountering a non-ASCII message or subject that does not declare its encoding, add headers/quoting to indicate it is encoded in <encoding>. Default is the value of the sendemail.assume8bitEncoding; if that is unspecified, this will be prompted for if any non-ASCII files are encountered.\n\nNote that no attempts whatsoever are made to validate the encoding."
      },
      {
        "type": "long",
        "key": "compose-encoding",
        "title": "--compose-encoding=<encoding>",
        "description": "Specify encoding of compose message. Default is the value of the sendemail.composeencoding; if that is unspecified, UTF-8 is assumed."
      },
      {
        "type": "long",
        "key": "transfer-encoding",
        "title": "--transfer-encoding=(7bit|8bit|quoted-printable|base64|auto)",
        "description": "Specify the transfer encoding to be used to send the message over SMTP. 7bit will fail upon encountering a non-ASCII message. quoted-printable can be useful when the repository contains files that contain carriage returns, but makes the raw patch email file (as saved from a MUA) much harder to inspect manually. base64 is even more fool proof, but also even more opaque. auto will use 8bit when possible, and quoted-printable otherwise.\n\nDefault is the value of the sendemail.transferEncoding configuration value; if that is unspecified, default to auto."
      },
      {
        "type": "long",
        "key": "xmailer",
        "title": "--xmailer, --no-xmailer",
        "description": "Add (or prevent adding) the \"X-Mailer:\" header. By default, the header is added, but it can be turned off by setting the sendemail.xmailer configuration variable to false."
      },
      {
        "type": "long",
        "key": "no-xmailer",
        "title": "--xmailer, --no-xmailer",
        "description": "Add (or prevent adding) the \"X-Mailer:\" header. By default, the header is added, but it can be turned off by setting the sendemail.xmailer configuration variable to false."
      },
      {
        "type": "long",
        "key": "envelope-sender",
        "title": "--envelope-sender=<address>",
        "description": "Specify the envelope sender used to send the emails. This is useful if your default address is not the address that is subscribed to a list. In order to use the From address, set the value to \"auto\". If you use the sendmail binary, you must have suitable privileges for the -f parameter. Default is the value of the sendemail.envelopeSender configuration variable; if that is unspecified, choosing the envelope sender is left to your MTA."
      },
      {
        "type": "long",
        "key": "sendmail-cmd",
        "title": "--sendmail-cmd=<command>",
        "description": "Specify a command to run to send the email. The command should be sendmail-like; specifically, it must support the -i option. The command will be executed in the shell if necessary. Default is the value of sendemail.sendmailcmd. If unspecified, and if --smtp-server is also unspecified, git-send-email will search for sendmail in /usr/sbin, /usr/lib and $PATH."
      },
      {
        "type": "long",
        "key": "smtp-encryption",
        "title": "--smtp-encryption=<encryption>",
        "description": "Specify the encryption to use, either ssl or tls. Any other value reverts to plain SMTP. Default is the value of sendemail.smtpEncryption."
      },
      {
        "type": "long",
        "key": "smtp-domain",
        "title": "--smtp-domain=<FQDN>",
        "description": "Specifies the Fully Qualified Domain Name (FQDN) used in the HELO/EHLO command to the SMTP server. Some servers require the FQDN to match your IP address. If not set, git send-email attempts to determine your FQDN automatically. Default is the value of sendemail.smtpDomain."
      },
      {
        "type": "long",
        "key": "smtp-auth",
        "title": "--smtp-auth=<mechanisms>",
        "description": "Whitespace-separated list of allowed SMTP-AUTH mechanisms. This setting forces using only the listed mechanisms. Example:\n\n$ git send-email --smtp-auth=\"PLAIN LOGIN GSSAPI\" ...\n\nIf at least one of the specified mechanisms matches the ones advertised by the SMTP server and if it is supported by the utilized SASL library, the mechanism is used for authentication. If neither sendemail.smtpAuth nor --smtp-auth is specified, all mechanisms supported by the SASL library can be used. The special value none maybe specified to completely disable authentication independently of --smtp-user"
      },
      {
        "type": "long",
        "key": "smtp-pass",
        "title": "--smtp-pass[=<password>]",
        "description": "Password for SMTP-AUTH. The argument is optional: If no argument is specified, then the empty string is used as the password. Default is the value of sendemail.smtpPass, however --smtp-pass always overrides this value.\n\nFurthermore, passwords need not be specified in configuration files or on the command line. If a username has been specified (with --smtp-user or a sendemail.smtpUser), but no password has been specified (with --smtp-pass or sendemail.smtpPass), then a password is obtained using git-credential."
      },
      {
        "type": "long",
        "key": "no-smtp-auth",
        "title": "--no-smtp-auth",
        "description": "Disable SMTP authentication. Short hand for --smtp-auth=none"
      },
      {
        "type": "long",
        "key": "smtp-server",
        "title": "--smtp-server=<host>",
        "description": "If set, specifies the outgoing SMTP server to use (e.g. smtp.example.com or a raw IP address). If unspecified, and if --sendmail-cmd is also unspecified, the default is to search for sendmail in /usr/sbin, /usr/lib and $PATH if such a program is available, falling back to localhost otherwise.\n\nFor backward compatibility, this option can also specify a full pathname of a sendmail-like program instead; the program must support the -i option. This method does not support passing arguments or using plain command names. For those use cases, consider using --sendmail-cmd instead."
      },
      {
        "type": "long",
        "key": "smtp-server-port",
        "title": "--smtp-server-port=<port>",
        "description": "Specifies a port different from the default port (SMTP servers typically listen to smtp port 25, but may also listen to submission port 587, or the common SSL smtp port 465); symbolic port names (e.g. \"submission\" instead of 587) are also accepted. The port can also be set with the sendemail.smtpServerPort configuration variable."
      },
      {
        "type": "long",
        "key": "smtp-server-option",
        "title": "--smtp-server-option=<option>",
        "description": "If set, specifies the outgoing SMTP server option to use. Default value can be specified by the sendemail.smtpServerOption configuration option.\n\nThe --smtp-server-option option must be repeated for each option you want to pass to the server. Likewise, different lines in the configuration files must be used for each option."
      },
      {
        "type": "long",
        "key": "smtp-ssl",
        "title": "--smtp-ssl",
        "description": "Legacy alias for --smtp-encryption ssl."
      },
      {
        "type": "long",
        "key": "smtp-ssl-cert-path",
        "title": "--smtp-ssl-cert-path",
        "description": "Path to a store of trusted CA certificates for SMTP SSL/TLS certificate validation (either a directory that has been processed by c_rehash, or a single file containing one or more PEM format certificates concatenated together: see verify(1) -CAfile and -CApath for more information on these). Set it to an empty string to disable certificate verification. Defaults to the value of the sendemail.smtpsslcertpath configuration variable, if set, or the backing SSL library’s compiled-in default otherwise (which should be the best choice on most platforms)."
      },
      {
        "type": "long",
        "key": "smtp-user",
        "title": "--smtp-user=<user>",
        "description": "Username for SMTP-AUTH. Default is the value of sendemail.smtpUser; if a username is not specified (with --smtp-user or sendemail.smtpUser), then authentication is not attempted."
      },
      {
        "type": "long",
        "key": "smtp-debug",
        "title": "--smtp-debug=0|1",
        "description": "Enable (1) or disable (0) debug output. If enabled, SMTP commands and replies will be printed. Useful to debug TLS connection and authentication problems."
      },
      {
        "type": "long",
        "key": "batch-size",
        "title": "--batch-size=<num>",
        "description": "Some email servers (e.g. smtp.163.com) limit the number emails to be sent per session (connection) and this will lead to a failure when sending many messages. With this option, send-email will disconnect after sending $<num> messages and wait for a few seconds (see --relogin-delay) and reconnect, to work around such a limit. You may want to use some form of credential helper to avoid having to retype your password every time this happens. Defaults to the sendemail.smtpBatchSize configuration variable."
      },
      {
        "type": "long",
        "key": "relogin-delay",
        "title": "--relogin-delay=<int>",
        "description": "Waiting $<int> seconds before reconnecting to SMTP server. Used together with --batch-size option. Defaults to the sendemail.smtpReloginDelay configuration variable."
      },
      {
        "type": "long",
        "key": "no-",
        "title": "--no-[to|cc|bcc]",
        "description": "Clears any list of \"To:\", \"Cc:\", \"Bcc:\" addresses previously set via config."
      },
      {
        "type": "long",
        "key": "no-identity",
        "title": "--no-identity",
        "description": "Clears the previously read value of sendemail.identity set via config, if any."
      },
      {
        "type": "long",
        "key": "to-cmd",
        "title": "--to-cmd=<command>",
        "description": "Specify a command to execute once per patch file which should generate patch file specific \"To:\" entries. Output of this command must be single email address per line. Default is the value of sendemail.tocmd configuration value."
      },
      {
        "type": "long",
        "key": "cc-cmd",
        "title": "--cc-cmd=<command>",
        "description": "Specify a command to execute once per patch file which should generate patch file specific \"Cc:\" entries. Output of this command must be single email address per line. Default is the value of sendemail.ccCmd configuration value."
      },
      {
        "type": "long",
        "key": "chain-reply-to",
        "title": "--[no-]chain-reply-to",
        "description": "If this is set, each email will be sent as a reply to the previous email sent. If disabled with \"--no-chain-reply-to\", all emails after the first will be sent as replies to the first email sent. When using this, it is recommended that the first file given be an overview of the entire patch series. Disabled by default, but the sendemail.chainReplyTo configuration variable can be used to enable it."
      },
      {
        "type": "long",
        "key": "identity",
        "title": "--identity=<identity>",
        "description": "A configuration identity. When given, causes values in the sendemail.<identity> subsection to take precedence over values in the sendemail section. The default identity is the value of sendemail.identity."
      },
      {
        "type": "long",
        "key": "signed-off-by-cc",
        "title": "--[no-]signed-off-by-cc",
        "description": "If this is set, add emails found in the Signed-off-by trailer or Cc: lines to the cc list. Default is the value of sendemail.signedoffbycc configuration value; if that is unspecified, default to --signed-off-by-cc."
      },
      {
        "type": "long",
        "key": "cc-cover",
        "title": "--[no-]cc-cover",
        "description": "If this is set, emails found in Cc: headers in the first patch of the series (typically the cover letter) are added to the cc list for each email set. Default is the value of sendemail.cccover configuration value; if that is unspecified, default to --no-cc-cover."
      },
      {
        "type": "long",
        "key": "to-cover",
        "title": "--[no-]to-cover",
        "description": "If this is set, emails found in To: headers in the first patch of the series (typically the cover letter) are added to the to list for each email set. Default is the value of sendemail.tocover configuration value; if that is unspecified, default to --no-to-cover."
      },
      {
        "type": "long",
        "key": "suppress-cc",
        "title": "--suppress-cc=<category>",
        "description": "Specify an additional category of recipients to suppress the auto-cc of:\n\n * author will avoid including the patch author.\n\n * self will avoid including the sender.\n\n * cc will avoid including anyone mentioned in Cc lines in the patch header except for self (use self for that).\n\n * bodycc will avoid including anyone mentioned in Cc lines in the patch body (commit message) except for self (use self for that).\n\n * sob will avoid including anyone mentioned in the Signed-off-by trailers except for self (use self for that).\n\n * misc-by will avoid including anyone mentioned in Acked-by, Reviewed-by, Tested-by and other \"-by\" lines in the patch body, except Signed-off-by (use sob for that).\n\n * cccmd will avoid running the --cc-cmd.\n\n * body is equivalent to sob + bodycc + misc-by.\n\n * all will suppress all auto cc values.\n\nDefault is the value of sendemail.suppresscc configuration value; if that is unspecified, default to self if --suppress-from is specified, as well as body if --no-signed-off-cc is specified."
      },
      {
        "type": "long",
        "key": "suppress-from",
        "title": "--[no-]suppress-from",
        "description": "If this is set, do not add the From: address to the cc: list. Default is the value of sendemail.suppressFrom configuration value; if that is unspecified, default to --no-suppress-from."
      },
      {
        "type": "long",
        "key": "thread",
        "title": "--[no-]thread",
        "description": "If this is set, the In-Reply-To and References headers will be added to each email sent. Whether each mail refers to the previous email (deep threading per git format-patch wording) or to the first email (shallow threading) is governed by \"--[no-]chain-reply-to\".\n\nIf disabled with \"--no-thread\", those headers will not be added (unless specified with --in-reply-to). Default is the value of the sendemail.thread configuration value; if that is unspecified, default to --thread.\n\nIt is up to the user to ensure that no In-Reply-To header already exists when git send-email is asked to add it (especially note that git format-patch can be configured to do the threading itself). Failure to do so may not produce the expected result in the recipient’s MUA."
      },
      {
        "type": "long",
        "key": "confirm",
        "title": "--confirm=<mode>",
        "description": "Confirm just before sending:\n\n * always will always confirm before sending\n\n * never will never confirm before sending\n\n * cc will confirm before sending when send-email has automatically added addresses from the patch to the Cc list\n\n * compose will confirm before sending the first message when using --compose.\n\n * auto is equivalent to cc + compose\n\nDefault is the value of sendemail.confirm configuration value; if that is unspecified, default to auto unless any of the suppress options have been specified, in which case default to compose."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Do everything except actually send the emails."
      },
      {
        "type": "long",
        "key": "format-patch",
        "title": "--[no-]format-patch",
        "description": "When an argument may be understood either as a reference or as a file name, choose to understand it as a format-patch argument (--format-patch) or as a file name (--no-format-patch). By default, when such a conflict occurs, git send-email will fail."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Make git-send-email less verbose. One line per email should be all that is output."
      },
      {
        "type": "long",
        "key": "validate",
        "title": "--[no-]validate",
        "description": "Perform sanity checks on patches. Currently, validation means the following:\n\n * Invoke the sendemail-validate hook if present (see githooks[5]).\n\n * Warn of patches that contain lines longer than 998 characters unless a suitable transfer encoding (auto, base64, or quoted-printable) is used; this is due to SMTP limits as described by http://www.ietf.org/rfc/rfc5322.txt.\n\nDefault is the value of sendemail.validate; if this is not set, default to --validate."
      },
      {
        "type": "long",
        "key": "force",
        "title": "--force",
        "description": "Send emails even if safety checks would prevent it."
      },
      {
        "type": "long",
        "key": "dump-aliases",
        "title": "--dump-aliases",
        "description": "Instead of the normal operation, dump the shorthand alias names from the configured alias file(s), one per line in alphabetical order. Note, this only includes the alias name and not its expanded email addresses. See sendemail.aliasesfile for more information about aliases."
      }
    ]
  },
  {
    "name": "git svn",
    "options": [
      {
        "type": "long",
        "key": "shared",
        "title": "--shared[=(false|true|umask|group|all|world|everybody)], --template=<template_directory>",
        "description": "Only used with the init command. These are passed directly to git init."
      },
      {
        "type": "long",
        "key": "template",
        "title": "--shared[=(false|true|umask|group|all|world|everybody)], --template=<template_directory>",
        "description": "Only used with the init command. These are passed directly to git init."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r <arg>, --revision <arg>",
        "description": "Used with the fetch command.\n\nThis allows revision ranges for partial/cauterized history to be supported. $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges), $NUMBER:HEAD, and BASE:$NUMBER are all supported.\n\nThis can allow you to make partial mirrors when running fetch; but is generally not recommended because history will be skipped and lost."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "-, --stdin",
        "description": "Only used with the set-tree command.\n\nRead a list of commits from stdin and commit them in reverse order. Only the leading sha1 is read from each line, so git rev-list --pretty=oneline output can be used."
      },
      {
        "type": "long",
        "key": "rmdir",
        "title": "--rmdir",
        "description": "Only used with the dcommit, set-tree and commit-diff commands.\n\nRemove directories from the SVN tree if there are no files left behind. SVN can version empty directories, and they are not removed by default if there are no files left in them. Git cannot version empty directories. Enabling this flag will make the commit to SVN act like Git.\n\nconfig key: svn.rmdir"
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "Only used with the dcommit, set-tree and commit-diff commands.\n\nEdit the commit message before committing to SVN. This is off by default for objects that are commits, and forced on when committing tree objects.\n\nconfig key: svn.edit"
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "Only used with the dcommit, set-tree and commit-diff commands.\n\nEdit the commit message before committing to SVN. This is off by default for objects that are commits, and forced on when committing tree objects.\n\nconfig key: svn.edit"
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l<num>, --find-copies-harder",
        "description": "Only used with the dcommit, set-tree and commit-diff commands.\n\nThey are both passed directly to git diff-tree; see git-diff-tree[1] for more information.\n\nconfig key: svn.l\nconfig key: svn.findcopiesharder"
      },
      {
        "type": "long",
        "key": "find-copies-harder",
        "title": "-l<num>, --find-copies-harder",
        "description": "Only used with the dcommit, set-tree and commit-diff commands.\n\nThey are both passed directly to git diff-tree; see git-diff-tree[1] for more information.\n\nconfig key: svn.l\nconfig key: svn.findcopiesharder"
      },
      {
        "type": "short",
        "key": "A",
        "title": "-A<filename>, --authors-file=<filename>",
        "description": "Syntax is compatible with the file used by git cvsimport but an empty email address can be supplied with <>:\n\n\tloginname = Joe User <user@example.com>\n\nIf this option is specified and git svn encounters an SVN committer name that does not exist in the authors-file, git svn will abort operation. The user will then have to add the appropriate entry. Re-running the previous git svn command after the authors-file is modified should continue operation.\n\nconfig key: svn.authorsfile"
      },
      {
        "type": "long",
        "key": "authors-file",
        "title": "-A<filename>, --authors-file=<filename>",
        "description": "Syntax is compatible with the file used by git cvsimport but an empty email address can be supplied with <>:\n\n\tloginname = Joe User <user@example.com>\n\nIf this option is specified and git svn encounters an SVN committer name that does not exist in the authors-file, git svn will abort operation. The user will then have to add the appropriate entry. Re-running the previous git svn command after the authors-file is modified should continue operation.\n\nconfig key: svn.authorsfile"
      },
      {
        "type": "long",
        "key": "authors-prog",
        "title": "--authors-prog=<filename>",
        "description": "If this option is specified, for each SVN committer name that does not exist in the authors file, the given file is executed with the committer name as the first argument. The program is expected to return a single line of the form \"Name <email>\" or \"Name <>\", which will be treated as if included in the authors file.\n\nDue to historical reasons a relative filename is first searched relative to the current directory for init and clone and relative to the root of the working tree for fetch. If filename is not found, it is searched like any other command in $PATH.\n\nconfig key: svn.authorsProg"
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Make git svn less verbose. Specify a second time to make it even less verbose."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Make git svn less verbose. Specify a second time to make it even less verbose."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --merge, -s<strategy>, --strategy=<strategy>, -p, --rebase-merges, --preserve-merges (DEPRECATED)",
        "description": "These are only used with the dcommit and rebase commands.\n\nPassed directly to git rebase when using dcommit if a git reset cannot be used (see dcommit)."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "-m, --merge, -s<strategy>, --strategy=<strategy>, -p, --rebase-merges, --preserve-merges (DEPRECATED)",
        "description": "These are only used with the dcommit and rebase commands.\n\nPassed directly to git rebase when using dcommit if a git reset cannot be used (see dcommit)."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-m, --merge, -s<strategy>, --strategy=<strategy>, -p, --rebase-merges, --preserve-merges (DEPRECATED)",
        "description": "These are only used with the dcommit and rebase commands.\n\nPassed directly to git rebase when using dcommit if a git reset cannot be used (see dcommit)."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "-m, --merge, -s<strategy>, --strategy=<strategy>, -p, --rebase-merges, --preserve-merges (DEPRECATED)",
        "description": "These are only used with the dcommit and rebase commands.\n\nPassed directly to git rebase when using dcommit if a git reset cannot be used (see dcommit)."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-m, --merge, -s<strategy>, --strategy=<strategy>, -p, --rebase-merges, --preserve-merges (DEPRECATED)",
        "description": "These are only used with the dcommit and rebase commands.\n\nPassed directly to git rebase when using dcommit if a git reset cannot be used (see dcommit)."
      },
      {
        "type": "long",
        "key": "rebase-merges",
        "title": "-m, --merge, -s<strategy>, --strategy=<strategy>, -p, --rebase-merges, --preserve-merges (DEPRECATED)",
        "description": "These are only used with the dcommit and rebase commands.\n\nPassed directly to git rebase when using dcommit if a git reset cannot be used (see dcommit)."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "This can be used with the dcommit, rebase, branch and tag commands.\n\nFor dcommit, print out the series of Git arguments that would show which diffs would be committed to SVN.\n\nFor rebase, display the local branch associated with the upstream svn repository associated with the current branch and the URL of svn repository that will be fetched from.\n\nFor branch and tag, display the urls that will be used for copying when creating the branch or tag."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "This can be used with the dcommit, rebase, branch and tag commands.\n\nFor dcommit, print out the series of Git arguments that would show which diffs would be committed to SVN.\n\nFor rebase, display the local branch associated with the upstream svn repository associated with the current branch and the URL of svn repository that will be fetched from.\n\nFor branch and tag, display the urls that will be used for copying when creating the branch or tag."
      },
      {
        "type": "long",
        "key": "use-log-author",
        "title": "--use-log-author",
        "description": "When retrieving svn commits into Git (as part of fetch, rebase, or dcommit operations), look for the first From: line or Signed-off-by trailer in the log message and use that as the author string.\n\nconfig key: svn.useLogAuthor"
      },
      {
        "type": "long",
        "key": "add-author-from",
        "title": "--add-author-from",
        "description": "When committing to svn from Git (as part of set-tree or dcommit operations), if the existing log message doesn’t already have a From: or Signed-off-by trailer, append a From: line based on the Git commit’s author string. If you use this, then --use-log-author will retrieve a valid author string for all commits.\n\nconfig key: svn.addAuthorFrom"
      }
    ]
  },
  {
    "name": "git update-index",
    "options": [
      {
        "type": "long",
        "key": "add",
        "title": "--add",
        "description": "If a specified file isn’t in the index already then it’s added. Default behaviour is to ignore new files."
      },
      {
        "type": "long",
        "key": "remove",
        "title": "--remove",
        "description": "If a specified file is in the index but is missing then it’s removed. Default behavior is to ignore removed file."
      },
      {
        "type": "long",
        "key": "refresh",
        "title": "--refresh",
        "description": "Looks at the current index and checks to see if merges or updates are needed by checking stat() information."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "Quiet. If --refresh finds that the index needs an update, the default behavior is to error out. This option makes git update-index continue anyway."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules",
        "description": "Do not try to update submodules. This option is only respected when passed before --refresh."
      },
      {
        "type": "long",
        "key": "unmerged",
        "title": "--unmerged",
        "description": "If --refresh finds unmerged changes in the index, the default behavior is to error out. This option makes git update-index continue anyway."
      },
      {
        "type": "long",
        "key": "ignore-missing",
        "title": "--ignore-missing",
        "description": "Ignores missing files during a --refresh"
      },
      {
        "type": "long",
        "key": "index-info",
        "title": "--index-info",
        "description": "Read index information from stdin."
      },
      {
        "type": "long",
        "key": "chmod",
        "title": "--chmod=(+|-)x",
        "description": "Set the execute permissions on the updated files."
      },
      {
        "type": "long",
        "key": "assume-unchanged",
        "title": "--[no-]assume-unchanged",
        "description": "When this flag is specified, the object names recorded for the paths are not updated. Instead, this option sets/unsets the \"assume unchanged\" bit for the paths. When the \"assume unchanged\" bit is on, the user promises not to change the file and allows Git to assume that the working tree file matches what is recorded in the index. If you want to change the working tree file, you need to unset the bit to tell Git. This is sometimes helpful when working with a big project on a filesystem that has very slow lstat(2) system call (e.g. cifs).\n\nGit will fail (gracefully) in case it needs to modify this file in the index e.g. when merging in a commit; thus, in case the assumed-untracked file is changed upstream, you will need to handle the situation manually."
      },
      {
        "type": "long",
        "key": "really-refresh",
        "title": "--really-refresh",
        "description": "Like --refresh, but checks stat information unconditionally, without regard to the \"assume unchanged\" setting."
      },
      {
        "type": "long",
        "key": "skip-worktree",
        "title": "--[no-]skip-worktree",
        "description": "When one of these flags is specified, the object name recorded for the paths are not updated. Instead, these options set and unset the \"skip-worktree\" bit for the paths. See section \"Skip-worktree bit\" below for more information."
      },
      {
        "type": "long",
        "key": "ignore-skip-worktree-entries",
        "title": "--[no-]ignore-skip-worktree-entries",
        "description": "Do not remove skip-worktree (AKA \"index-only\") entries even when the --remove option was specified."
      },
      {
        "type": "long",
        "key": "fsmonitor-valid",
        "title": "--[no-]fsmonitor-valid",
        "description": "When one of these flags is specified, the object name recorded for the paths are not updated. Instead, these options set and unset the \"fsmonitor valid\" bit for the paths. See section \"File System Monitor\" below for more information."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --again",
        "description": "Runs git update-index itself on the paths whose index entries are different from those from the HEAD commit."
      },
      {
        "type": "long",
        "key": "again",
        "title": "-g, --again",
        "description": "Runs git update-index itself on the paths whose index entries are different from those from the HEAD commit."
      },
      {
        "type": "long",
        "key": "unresolve",
        "title": "--unresolve",
        "description": "Restores the unmerged or needs updating state of a file during a merge if it was cleared by accident."
      },
      {
        "type": "long",
        "key": "info-only",
        "title": "--info-only",
        "description": "Do not create objects in the object database for all <file> arguments that follow this flag; just insert their object IDs into the index."
      },
      {
        "type": "long",
        "key": "force-remove",
        "title": "--force-remove",
        "description": "Remove the file from the index even when the working directory still has such a file. (Implies --remove.)"
      },
      {
        "type": "long",
        "key": "replace",
        "title": "--replace",
        "description": "By default, when a file path exists in the index, git update-index refuses an attempt to add path/file. Similarly if a file path/file exists, a file path cannot be added. With --replace flag, existing entries that conflict with the entry being added are automatically removed with warning messages."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Instead of taking list of paths from the command line, read list of paths from the standard input. Paths are separated by LF (i.e. one path per line) by default."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Report what is being added and removed from index."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "Only meaningful with --stdin or --index-info; paths are separated with NUL character instead of LF."
      },
      {
        "type": "long",
        "key": "split-index",
        "title": "--split-index, --no-split-index",
        "description": "Enable or disable split index mode. If split-index mode is already enabled and --split-index is given again, all changes in $GIT_DIR/index are pushed back to the shared index file.\n\nThese options take effect whatever the value of the core.splitIndex configuration variable (see git-config[1]). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option."
      },
      {
        "type": "long",
        "key": "no-split-index",
        "title": "--split-index, --no-split-index",
        "description": "Enable or disable split index mode. If split-index mode is already enabled and --split-index is given again, all changes in $GIT_DIR/index are pushed back to the shared index file.\n\nThese options take effect whatever the value of the core.splitIndex configuration variable (see git-config[1]). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option."
      },
      {
        "type": "long",
        "key": "untracked-cache",
        "title": "--untracked-cache, --no-untracked-cache",
        "description": "Enable or disable untracked cache feature. Please use --test-untracked-cache before enabling it.\n\nThese options take effect whatever the value of the core.untrackedCache configuration variable (see git-config[1]). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option."
      },
      {
        "type": "long",
        "key": "no-untracked-cache",
        "title": "--untracked-cache, --no-untracked-cache",
        "description": "Enable or disable untracked cache feature. Please use --test-untracked-cache before enabling it.\n\nThese options take effect whatever the value of the core.untrackedCache configuration variable (see git-config[1]). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option."
      },
      {
        "type": "long",
        "key": "test-untracked-cache",
        "title": "--test-untracked-cache",
        "description": "Only perform tests on the working directory to make sure untracked cache can be used. You have to manually enable untracked cache using --untracked-cache or --force-untracked-cache or the core.untrackedCache configuration variable afterwards if you really want to use it. If a test fails the exit code is 1 and a message explains what is not working as needed, otherwise the exit code is 0 and OK is printed."
      },
      {
        "type": "long",
        "key": "force-untracked-cache",
        "title": "--force-untracked-cache",
        "description": "Same as --untracked-cache. Provided for backwards compatibility with older versions of Git where --untracked-cache used to imply --test-untracked-cache but this option would enable the extension unconditionally."
      },
      {
        "type": "long",
        "key": "fsmonitor",
        "title": "--fsmonitor, --no-fsmonitor",
        "description": "Enable or disable files system monitor feature. These options take effect whatever the value of the core.fsmonitor configuration variable (see git-config[1]). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option."
      },
      {
        "type": "long",
        "key": "no-fsmonitor",
        "title": "--fsmonitor, --no-fsmonitor",
        "description": "Enable or disable files system monitor feature. These options take effect whatever the value of the core.fsmonitor configuration variable (see git-config[1]). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option."
      }
    ]
  },
  {
    "name": "git read-tree",
    "options": [
      {
        "type": "short",
        "key": "m",
        "title": "-m",
        "description": "Perform a merge, not just a read. The command will refuse to run if your index file has unmerged entries, indicating that you have not finished previous merge you started."
      },
      {
        "type": "long",
        "key": "reset",
        "title": "--reset",
        "description": "Same as -m, except that unmerged entries are discarded instead of failing. When used with -u, updates leading to loss of working tree changes will not abort the operation."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u",
        "description": "After a successful merge, update the files in the work tree with the result of the merge."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i",
        "description": "Usually a merge requires the index file as well as the files in the working tree to be up to date with the current head commit, in order not to lose local changes. This flag disables the check with the working tree and is meant to be used when creating a merge of trees that are not directly related to the current working tree status into a temporary index file."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Check if the command would error out, without updating the index or the files in the working tree for real."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Check if the command would error out, without updating the index or the files in the working tree for real."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Show the progress of checking files out."
      },
      {
        "type": "long",
        "key": "trivial",
        "title": "--trivial",
        "description": "Restrict three-way merge by git read-tree to happen only if there is no file-level merging required, instead of resolving merge for trivial cases and leaving conflicting files unresolved in the index."
      },
      {
        "type": "long",
        "key": "aggressive",
        "title": "--aggressive",
        "description": "Usually a three-way merge by git read-tree resolves the merge for really trivial cases and leaves other cases unresolved in the index, so that porcelains can implement different merge policies. This flag makes the command resolve a few more cases internally:\n\n * when one side removes a path and the other side leaves the path unmodified. The resolution is to remove that path.\n\n * when both sides remove a path. The resolution is to remove that path.\n\n * when both sides add a path identically. The resolution is to add that path."
      },
      {
        "type": "long",
        "key": "prefix",
        "title": "--prefix=<prefix>",
        "description": "Keep the current index contents, and read the contents of the named tree-ish under the directory at <prefix>. The command will refuse to overwrite entries that already existed in the original index file."
      },
      {
        "type": "long",
        "key": "exclude-per-directory",
        "title": "--exclude-per-directory=<gitignore>",
        "description": "When running the command with -u and -m options, the merge result may need to overwrite paths that are not tracked in the current branch. The command usually refuses to proceed with the merge to avoid losing such a path. However this safety valve sometimes gets in the way. For example, it often happens that the other branch added a file that used to be a generated file in your branch, and the safety valve triggers when you try to switch to that branch after you ran make but before running make clean to remove the generated file. This option tells the command to read per-directory exclude file (usually .gitignore) and allows such an untracked but explicitly ignored file to be overwritten."
      },
      {
        "type": "long",
        "key": "index-output",
        "title": "--index-output=<file>",
        "description": "Instead of writing the results out to $GIT_INDEX_FILE, write the resulting index in the named file. While the command is operating, the original index file is locked with the same mechanism as usual. The file must allow to be rename(2)ed into from a temporary file that is created next to the usual index file; typically this means it needs to be on the same filesystem as the index file itself, and you need write permission to the directories the index file and index output file are located in."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--[no-]recurse-submodules",
        "description": "Using --recurse-submodules will update the content of all active submodules according to the commit recorded in the superproject by calling read-tree recursively, also setting the submodules' HEAD to be detached at that commit."
      },
      {
        "type": "long",
        "key": "no-sparse-checkout",
        "title": "--no-sparse-checkout",
        "description": "Disable sparse checkout support even if core.sparseCheckout is true."
      },
      {
        "type": "long",
        "key": "empty",
        "title": "--empty",
        "description": "Instead of reading tree object(s) into the index, just empty it."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages."
      }
    ]
  },
  {
    "name": "git apply",
    "options": [
      {
        "type": "long",
        "key": "stat",
        "title": "--stat",
        "description": "Instead of applying the patch, output diffstat for the input. Turns off \"apply\"."
      },
      {
        "type": "long",
        "key": "numstat",
        "title": "--numstat",
        "description": "Similar to --stat, but shows the number of added and deleted lines in decimal notation and the pathname without abbreviation, to make it more machine friendly. For binary files, outputs two - instead of saying 0 0. Turns off \"apply\"."
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary",
        "description": "Instead of applying the patch, output a condensed summary of information obtained from git diff extended headers, such as creations, renames and mode changes. Turns off \"apply\"."
      },
      {
        "type": "long",
        "key": "check",
        "title": "--check",
        "description": "Instead of applying the patch, see if the patch is applicable to the current working tree and/or the index file and detects errors. Turns off \"apply\"."
      },
      {
        "type": "long",
        "key": "index",
        "title": "--index",
        "description": "Apply the patch to both the index and the working tree (or merely check that it would apply cleanly to both if --check is in effect). Note that --index expects index entries and working tree copies for relevant paths to be identical (their contents and metadata such as file mode must match), and will raise an error if they are not, even if the patch would apply cleanly to both the index and the working tree in isolation."
      },
      {
        "type": "long",
        "key": "cached",
        "title": "--cached",
        "description": "Apply the patch to just the index, without touching the working tree. If --check is in effect, merely check that it would apply cleanly to the index entry."
      },
      {
        "type": "long",
        "key": "intent-to-add",
        "title": "--intent-to-add",
        "description": "When applying the patch only to the working tree, mark new files to be added to the index later (see --intent-to-add option in git-add[1]). This option is ignored unless running in a Git repository and --index is not specified. Note that --index could be implied by other options such as --cached or --3way."
      },
      {
        "type": "short",
        "key": "3",
        "title": "-3, --3way",
        "description": "Attempt 3-way merge if the patch records the identity of blobs it is supposed to apply to and we have those blobs available locally, possibly leaving the conflict markers in the files in the working tree for the user to resolve. This option implies the --index option unless the --cached option is used, and is incompatible with the --reject option. When used with the --cached option, any conflicts are left at higher stages in the cache."
      },
      {
        "type": "long",
        "key": "3way",
        "title": "-3, --3way",
        "description": "Attempt 3-way merge if the patch records the identity of blobs it is supposed to apply to and we have those blobs available locally, possibly leaving the conflict markers in the files in the working tree for the user to resolve. This option implies the --index option unless the --cached option is used, and is incompatible with the --reject option. When used with the --cached option, any conflicts are left at higher stages in the cache."
      },
      {
        "type": "long",
        "key": "build-fake-ancestor",
        "title": "--build-fake-ancestor=<file>",
        "description": "Newer git diff output has embedded index information for each blob to help identify the original version that the patch applies to. When this flag is given, and if the original versions of the blobs are available locally, builds a temporary index containing those blobs.\n\nWhen a pure mode change is encountered (which has no index information), the information is read from the current index instead."
      },
      {
        "type": "short",
        "key": "R",
        "title": "-R, --reverse",
        "description": "Apply the patch in reverse."
      },
      {
        "type": "long",
        "key": "reverse",
        "title": "-R, --reverse",
        "description": "Apply the patch in reverse."
      },
      {
        "type": "long",
        "key": "reject",
        "title": "--reject",
        "description": "For atomicity, git apply by default fails the whole patch and does not touch the working tree when some of the hunks do not apply. This option makes it apply the parts of the patch that are applicable, and leave the rejected hunks in corresponding *.rej files."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "When --numstat has been given, do not munge pathnames, but use a NUL-terminated machine-readable format.\n\nWithout this option, pathnames with \"unusual\" characters are quoted as explained for the configuration variable core.quotePath (see git-config[1])."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p<n>",
        "description": "Remove <n> leading path components (separated by slashes) from traditional diff paths. E.g., with -p2, a patch against a/dir/file will be applied directly to file. The default is 1."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C<n>",
        "description": "Ensure at least <n> lines of surrounding context match before and after each change. When fewer lines of surrounding context exist they all must match. By default no context is ever ignored."
      },
      {
        "type": "long",
        "key": "unidiff-zero",
        "title": "--unidiff-zero",
        "description": "By default, git apply expects that the patch being applied is a unified diff with at least one line of context. This provides good safety measures, but breaks down when applying a diff generated with --unified=0. To bypass these checks use --unidiff-zero.\n\nNote, for the reasons stated above usage of context-free patches is discouraged."
      },
      {
        "type": "long",
        "key": "apply",
        "title": "--apply",
        "description": "If you use any of the options marked \"Turns off apply\" above, git apply reads and outputs the requested information without actually applying the patch. Give this flag after those flags to also apply the patch."
      },
      {
        "type": "long",
        "key": "no-add",
        "title": "--no-add",
        "description": "When applying a patch, ignore additions made by the patch. This can be used to extract the common part between two files by first running diff on them and applying the result with this option, which would apply the deletion part but not the addition part."
      },
      {
        "type": "long",
        "key": "allow-binary-replacement",
        "title": "--allow-binary-replacement, --binary",
        "description": "Historically we did not allow binary patch applied without an explicit permission from the user, and this flag was the way to do so. Currently we always allow binary patch application, so this is a no-op."
      },
      {
        "type": "long",
        "key": "binary",
        "title": "--allow-binary-replacement, --binary",
        "description": "Historically we did not allow binary patch applied without an explicit permission from the user, and this flag was the way to do so. Currently we always allow binary patch application, so this is a no-op."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude=<path-pattern>",
        "description": "Don’t apply changes to files matching the given path pattern. This can be useful when importing patchsets, where you want to exclude certain files or directories."
      },
      {
        "type": "long",
        "key": "include",
        "title": "--include=<path-pattern>",
        "description": "Apply changes to files matching the given path pattern. This can be useful when importing patchsets, where you want to include certain files or directories.\n\nWhen --exclude and --include patterns are used, they are examined in the order they appear on the command line, and the first match determines if a patch to each path is used. A patch to a path that does not match any include/exclude pattern is used by default if there is no include pattern on the command line, and ignored if there is any include pattern."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "--ignore-space-change, --ignore-whitespace",
        "description": "When applying a patch, ignore changes in whitespace in context lines if necessary. Context lines will preserve their whitespace, and they will not undergo whitespace fixing regardless of the value of the --whitespace option. New lines will still be fixed, though."
      },
      {
        "type": "long",
        "key": "ignore-whitespace",
        "title": "--ignore-space-change, --ignore-whitespace",
        "description": "When applying a patch, ignore changes in whitespace in context lines if necessary. Context lines will preserve their whitespace, and they will not undergo whitespace fixing regardless of the value of the --whitespace option. New lines will still be fixed, though."
      },
      {
        "type": "long",
        "key": "whitespace",
        "title": "--whitespace=<action>",
        "description": "When applying a patch, detect a new or modified line that has whitespace errors. What are considered whitespace errors is controlled by core.whitespace configuration. By default, trailing whitespaces (including lines that solely consist of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors.\n\nBy default, the command outputs warning messages but applies the patch. When git-apply is used for statistics and not applying a patch, it defaults to nowarn.\n\nYou can use different <action> values to control this behavior:\n\n * nowarn turns off the trailing whitespace warning.\n\n * warn outputs warnings for a few such errors, but applies the patch as-is (default).\n\n * fix outputs warnings for a few such errors, and applies the patch after fixing them (strip is a synonym --- the tool used to consider only trailing whitespace characters as errors, and the fix involved stripping them, but modern Gits do more).\n\n * error outputs warnings for a few such errors, and refuses to apply the patch.\n\n * error-all is similar to error but shows all errors."
      },
      {
        "type": "long",
        "key": "inaccurate-eof",
        "title": "--inaccurate-eof",
        "description": "Under certain circumstances, some versions of diff do not correctly detect a missing new-line at the end of the file. As a result, patches created by such diff programs do not record incomplete lines correctly. This option adds support for applying such patches by working around this bug."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Report progress to stderr. By default, only a message about the current patch being applied will be printed. This option will cause additional information to be reported."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Report progress to stderr. By default, only a message about the current patch being applied will be printed. This option will cause additional information to be reported."
      },
      {
        "type": "long",
        "key": "recount",
        "title": "--recount",
        "description": "Do not trust the line counts in the hunk headers, but infer them by inspecting the patch (e.g. after editing the patch without adjusting the hunk headers appropriately)."
      },
      {
        "type": "long",
        "key": "directory",
        "title": "--directory=<root>",
        "description": "Prepend <root> to all filenames. If a \"-p\" argument was also passed, it is applied before prepending the new root.\n\nFor example, a patch that talks about updating a/git-gui.sh to b/git-gui.sh can be applied to the file in the working tree modules/git-gui/git-gui.sh by running git apply --directory=modules/git-gui."
      },
      {
        "type": "long",
        "key": "unsafe-paths",
        "title": "--unsafe-paths",
        "description": "By default, a patch that affects outside the working area (either a Git controlled working tree, or the current working directory when \"git apply\" is used as a replacement of GNU patch) is rejected as a mistake (or a mischief).\n\nWhen git apply is used as a \"better GNU patch\", the user can pass the --unsafe-paths option to override this safety check. This option has no effect when --index or --cached is in use."
      }
    ]
  },
  {
    "name": "git checkout-index",
    "options": [
      {
        "type": "short",
        "key": "u",
        "title": "-u, --index",
        "description": "update stat information for the checked out entries in the index file."
      },
      {
        "type": "long",
        "key": "index",
        "title": "-u, --index",
        "description": "update stat information for the checked out entries in the index file."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "be quiet if files exist or are not in the index"
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "be quiet if files exist or are not in the index"
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "forces overwrite of existing files"
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "forces overwrite of existing files"
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "checks out all files in the index. Cannot be used together with explicit filenames."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "checks out all files in the index. Cannot be used together with explicit filenames."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-create",
        "description": "Don’t checkout new files, only refresh files already checked out."
      },
      {
        "type": "long",
        "key": "no-create",
        "title": "-n, --no-create",
        "description": "Don’t checkout new files, only refresh files already checked out."
      },
      {
        "type": "long",
        "key": "prefix",
        "title": "--prefix=<string>",
        "description": "When creating files, prepend <string> (usually a directory including a trailing /)"
      },
      {
        "type": "long",
        "key": "stage",
        "title": "--stage=<number>|all",
        "description": "Instead of checking out unmerged entries, copy out the files from named stage. <number> must be between 1 and 3. Note: --stage=all automatically implies --temp."
      },
      {
        "type": "long",
        "key": "temp",
        "title": "--temp",
        "description": "Instead of copying the files to the working directory write the content to temporary files. The temporary name associations will be written to stdout."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Instead of taking list of paths from the command line, read list of paths from the standard input. Paths are separated by LF (i.e. one path per line) by default."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "Only meaningful with --stdin; paths are separated with NUL character instead of LF."
      }
    ]
  },
  {
    "name": "git commit-graph",
    "options": [
      {
        "type": "long",
        "key": "object-dir",
        "title": "--object-dir",
        "description": "Use given directory for the location of packfiles and commit-graph file. This parameter exists to specify the location of an alternate that only has the objects directory, not a full .git directory. The commit-graph file is expected to be in the <dir>/info directory and the packfiles are expected to be in <dir>/pack. If the directory could not be made into an absolute path, or does not match any known object directory, git commit-graph ... will exit with non-zero status."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--[no-]progress",
        "description": "Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal."
      }
    ]
  },
  {
    "name": "git commit-tree",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p <parent>",
        "description": "Each -p indicates the id of a parent commit object."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m <message>",
        "description": "A paragraph in the commit log message. This can be given more than once and each <message> becomes its own paragraph."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F <file>",
        "description": "Read the commit log message from the given file. Use - to read from the standard input. This can be given more than once and the content of each file becomes its own paragraph."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand a --gpg-sign option given earlier on the command line."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand a --gpg-sign option given earlier on the command line."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space. --no-gpg-sign is useful to countermand a --gpg-sign option given earlier on the command line."
      }
    ]
  },
  {
    "name": "git hash-object",
    "options": [
      {
        "type": "short",
        "key": "t",
        "title": "-t <type>",
        "description": "Specify the type (default: \"blob\")."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w",
        "description": "Actually write the object into the object database."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Read the object from standard input instead of from a file."
      },
      {
        "type": "long",
        "key": "stdin-paths",
        "title": "--stdin-paths",
        "description": "Read file names from the standard input, one per line, instead of from the command-line."
      },
      {
        "type": "long",
        "key": "path",
        "title": "--path",
        "description": "Hash object as it were located at the given path. The location of file does not directly influence on the hash value, but path is used to determine what Git filters should be applied to the object before it can be placed to the object database, and, as result of applying filters, the actual blob put into the object database may differ from the given file. This option is mainly useful for hashing temporary files located outside of the working directory or files read from stdin."
      },
      {
        "type": "long",
        "key": "no-filters",
        "title": "--no-filters",
        "description": "Hash the contents as is, ignoring any input filter that would have been chosen by the attributes mechanism, including the end-of-line conversion. If the file is read from standard input then this is always implied, unless the --path option is given."
      },
      {
        "type": "long",
        "key": "literally",
        "title": "--literally",
        "description": "Allow --stdin to hash any garbage into a loose object which might not otherwise pass standard object parsing or git-fsck checks. Useful for stress-testing Git itself or reproducing characteristics of corrupt or bogus objects encountered in the wild."
      }
    ]
  },
  {
    "name": "git index-pack",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Be verbose about what is going on, including progress status."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <index-file>",
        "description": "Write the generated pack index into the specified file. Without this option the name of pack index file is constructed from the name of packed archive file by replacing .pack with .idx (and the program fails if the name of packed archive does not end with .pack)."
      },
      {
        "type": "long",
        "key": "rev-index",
        "title": "--[no-]rev-index",
        "description": "When this flag is provided, generate a reverse index (a .rev file) corresponding to the given pack. If --verify is given, ensure that the existing reverse index is correct. Takes precedence over pack.writeReverseIndex."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "When this flag is provided, the pack is read from stdin instead and a copy is then written to <pack-file>. If <pack-file> is not specified, the pack is written to objects/pack/ directory of the current Git repository with a default name determined from the pack content. If <pack-file> is not specified consider using --keep to prevent a race condition between this process and git repack."
      },
      {
        "type": "long",
        "key": "fix-thin",
        "title": "--fix-thin",
        "description": "Fix a \"thin\" pack produced by git pack-objects --thin (see git-pack-objects[1] for details) by adding the excluded objects the deltified objects are based on to the pack. This option only makes sense in conjunction with --stdin."
      },
      {
        "type": "long",
        "key": "keep",
        "title": "--keep",
        "description": "Before moving the index into its final destination create an empty .keep file for the associated pack file. This option is usually necessary with --stdin to prevent a simultaneous git repack process from deleting the newly constructed pack and index before refs can be updated to use objects contained in the pack."
      },
      {
        "type": "long",
        "key": "index-version",
        "title": "--index-version=<version>[, <offset>]",
        "description": "This is intended to be used by the test suite only. It allows to force the version for the generated pack index, and to force 64-bit index entries on objects located above the given offset."
      },
      {
        "type": "long",
        "key": "strict",
        "title": "--strict",
        "description": "Die, if the pack contains broken objects or links."
      },
      {
        "type": "long",
        "key": "check-self-contained-and-connected",
        "title": "--check-self-contained-and-connected",
        "description": "Die if the pack contains broken links. For internal use only."
      },
      {
        "type": "long",
        "key": "fsck-objects",
        "title": "--fsck-objects",
        "description": "For internal use only.\n\nDie if the pack contains broken objects. If the pack contains a tree pointing to a .gitmodules blob that does not exist, prints the hash of that blob (for the caller to check) after the hash that goes into the name of the pack/idx file (see \"Notes\")."
      },
      {
        "type": "long",
        "key": "threads",
        "title": "--threads=<n>",
        "description": "Specifies the number of threads to spawn when resolving deltas. This requires that index-pack be compiled with pthreads otherwise this option is ignored with a warning. This is meant to reduce packing time on multiprocessor machines. The required amount of memory for the delta search window is however multiplied by the number of threads. Specifying 0 will cause Git to auto-detect the number of CPU’s and use maximum 3 threads."
      },
      {
        "type": "long",
        "key": "max-input-size",
        "title": "--max-input-size=<size>",
        "description": "Die, if the pack is larger than <size>."
      },
      {
        "type": "long",
        "key": "object-format",
        "title": "--object-format=<hash-algorithm>",
        "description": "Specify the given object format (hash algorithm) for the pack. The valid values are sha1 and (if enabled) sha256. The default is the algorithm for the current repository (set by extensions.objectFormat), or sha1 if no value is set or outside a repository.\n\nThis option cannot be used with --stdin.\n\nTHIS OPTION IS EXPERIMENTAL! SHA-256 support is experimental and still in an early stage. A SHA-256 repository will in general not be able to share work with \"regular\" SHA-1 repositories. It should be assumed that, e.g., Git internal file formats in relation to SHA-256 repositories may change in backwards-incompatible ways. Only use --object-format=sha256 for testing purposes."
      }
    ]
  },
  {
    "name": "git merge-file",
    "options": [
      {
        "type": "short",
        "key": "L",
        "title": "-L <label>",
        "description": "This option may be given up to three times, and specifies labels to be used in place of the corresponding file names in conflict reports. That is, git merge-file -L x -L y -L z a b c generates output that looks like it came from files x, y and z instead of from files a, b and c."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p",
        "description": "Send results to standard output instead of overwriting <current-file>."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "Quiet; do not warn about conflicts."
      },
      {
        "type": "long",
        "key": "diff3",
        "title": "--diff3",
        "description": "Show conflicts in \"diff3\" style."
      },
      {
        "type": "long",
        "key": "ours",
        "title": "--ours, --theirs, --union",
        "description": "Instead of leaving conflicts in the file, resolve conflicts favouring our (or their or both) side of the lines."
      },
      {
        "type": "long",
        "key": "theirs",
        "title": "--ours, --theirs, --union",
        "description": "Instead of leaving conflicts in the file, resolve conflicts favouring our (or their or both) side of the lines."
      },
      {
        "type": "long",
        "key": "union",
        "title": "--ours, --theirs, --union",
        "description": "Instead of leaving conflicts in the file, resolve conflicts favouring our (or their or both) side of the lines."
      }
    ]
  },
  {
    "name": "git merge-index",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a",
        "description": "Run merge against all files in the index that need merging."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o",
        "description": "Instead of stopping at the first failed merge, do all of them in one shot - continue with merging even when previous merges returned errors, and only return the error code after all the merges."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "Do not complain about a failed merge program (a merge program failure usually indicates conflicts during the merge). This is for porcelains which might want to emit custom messages."
      }
    ]
  },
  {
    "name": "git multi-pack-index",
    "options": [
      {
        "type": "long",
        "key": "object-dir",
        "title": "--object-dir=<dir>",
        "description": "Use given directory for the location of Git objects. We check <dir>/packs/multi-pack-index for the current MIDX file, and <dir>/packs for the pack-files to index."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--[no-]progress",
        "description": "Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal."
      },
      {
        "type": "long",
        "key": "preferred-pack",
        "title": "--preferred-pack=<pack>",
        "description": "Optionally specify the tie-breaking pack used when multiple packs contain the same object. If not given, ties are broken in favor of the pack with the lowest mtime."
      }
    ]
  },
  {
    "name": "git mktag",
    "options": [
      {
        "type": "long",
        "key": "strict",
        "title": "--strict",
        "description": "By default mktag turns on the equivalent of git-fsck[1] --strict mode. Use --no-strict to disable it."
      }
    ]
  },
  {
    "name": "git mktree",
    "options": [
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "Read the NUL-terminated ls-tree -z output instead."
      },
      {
        "type": "long",
        "key": "missing",
        "title": "--missing",
        "description": "Allow missing objects. The default behaviour (without this option) is to verify that each tree entry’s sha1 identifies an existing object. This option has no effect on the treatment of gitlink entries (aka \"submodules\") which are always allowed to be missing."
      },
      {
        "type": "long",
        "key": "batch",
        "title": "--batch",
        "description": "Allow building of more than one tree object before exiting. Each tree is separated by as single blank line. The final new-line is optional. Note - if the -z option is used, lines are terminated with NUL."
      }
    ]
  },
  {
    "name": "git pack-objects",
    "options": [
      {
        "type": "long",
        "key": "stdout",
        "title": "--stdout",
        "description": "Write the pack contents (what would have been written to .pack file) out to the standard output."
      },
      {
        "type": "long",
        "key": "revs",
        "title": "--revs",
        "description": "Read the revision arguments from the standard input, instead of individual object names. The revision arguments are processed the same way as git rev-list with the --objects flag uses its commit arguments to build the list of objects it outputs. The objects on the resulting list are packed. Besides revisions, --not or --shallow <SHA-1> lines are also accepted."
      },
      {
        "type": "long",
        "key": "unpacked",
        "title": "--unpacked",
        "description": "This implies --revs. When processing the list of revision arguments read from the standard input, limit the objects packed to those that are not already packed."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "This implies --revs. In addition to the list of revision arguments read from the standard input, pretend as if all refs under refs/ are specified to be included."
      },
      {
        "type": "long",
        "key": "include-tag",
        "title": "--include-tag",
        "description": "Include unasked-for annotated tags if the object they reference was included in the resulting packfile. This can be useful to send new tags to native Git clients."
      },
      {
        "type": "long",
        "key": "stdin-packs",
        "title": "--stdin-packs",
        "description": "Read the basenames of packfiles (e.g., pack-1234abcd.pack) from the standard input, instead of object names or revision arguments. The resulting pack contains all objects listed in the included packs (those not beginning with ^), excluding any objects listed in the excluded packs (beginning with ^).\n\nIncompatible with --revs, or options that imply --revs (such as --all), with the exception of --unpacked, which is compatible."
      },
      {
        "type": "long",
        "key": "window",
        "title": "--window=<n>, --depth=<n>",
        "description": "These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within --window to see if using delta compression saves space. --depth limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object.\n\nThe default value for --window is 10 and --depth is 50. The maximum depth is 4095."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--window=<n>, --depth=<n>",
        "description": "These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within --window to see if using delta compression saves space. --depth limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object.\n\nThe default value for --window is 10 and --depth is 50. The maximum depth is 4095."
      },
      {
        "type": "long",
        "key": "window-memory",
        "title": "--window-memory=<n>",
        "description": "This option provides an additional limit on top of --window; the window size will dynamically scale down so as to not take up more than <n> bytes in memory. This is useful in repositories with a mix of large and small objects to not run out of memory with a large window, but still be able to take advantage of the large window for the smaller objects. The size can be suffixed with \"k\", \"m\", or \"g\". --window-memory=0 makes memory usage unlimited. The default is taken from the pack.windowMemory configuration variable."
      },
      {
        "type": "long",
        "key": "max-pack-size",
        "title": "--max-pack-size=<n>",
        "description": "In unusual scenarios, you may not be able to create files larger than a certain size on your filesystem, and this option can be used to tell the command to split the output packfile into multiple independent packfiles, each not larger than the given size. The size can be suffixed with \"k\", \"m\", or \"g\". The minimum size allowed is limited to 1 MiB. The default is unlimited, unless the config variable pack.packSizeLimit is set. Note that this option may result in a larger and slower repository; see the discussion in pack.packSizeLimit."
      },
      {
        "type": "long",
        "key": "honor-pack-keep",
        "title": "--honor-pack-keep",
        "description": "This flag causes an object already in a local pack that has a .keep file to be ignored, even if it would have otherwise been packed."
      },
      {
        "type": "long",
        "key": "keep-pack",
        "title": "--keep-pack=<pack-name>",
        "description": "This flag causes an object already in the given pack to be ignored, even if it would have otherwise been packed. <pack-name> is the pack file name without leading directory (e.g. pack-123.pack). The option could be specified multiple times to keep multiple packs."
      },
      {
        "type": "long",
        "key": "incremental",
        "title": "--incremental",
        "description": "This flag causes an object already in a pack to be ignored even if it would have otherwise been packed."
      },
      {
        "type": "long",
        "key": "local",
        "title": "--local",
        "description": "This flag causes an object that is borrowed from an alternate object store to be ignored even if it would have otherwise been packed."
      },
      {
        "type": "long",
        "key": "non-empty",
        "title": "--non-empty",
        "description": "Only create a packed archive if it would contain at least one object."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal."
      },
      {
        "type": "long",
        "key": "all-progress",
        "title": "--all-progress",
        "description": "When --stdout is specified then progress report is displayed during the object count and compression phases but inhibited during the write-out phase. The reason is that in some cases the output stream is directly linked to another command which may wish to display progress status of its own as it processes incoming pack data. This flag is like --progress except that it forces progress report for the write-out phase as well even if --stdout is used."
      },
      {
        "type": "long",
        "key": "all-progress-implied",
        "title": "--all-progress-implied",
        "description": "This is used to imply --all-progress whenever progress display is activated. Unlike --all-progress this flag doesn’t actually force any progress display by itself."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "This flag makes the command not to report its progress on the standard error stream."
      },
      {
        "type": "long",
        "key": "no-reuse-delta",
        "title": "--no-reuse-delta",
        "description": "When creating a packed archive in a repository that has existing packs, the command reuses existing deltas. This sometimes results in a slightly suboptimal pack. This flag tells the command not to reuse existing deltas but compute them from scratch."
      },
      {
        "type": "long",
        "key": "no-reuse-object",
        "title": "--no-reuse-object",
        "description": "This flag tells the command not to reuse existing object data at all, including non deltified object, forcing recompression of everything. This implies --no-reuse-delta. Useful only in the obscure case where wholesale enforcement of a different compression level on the packed data is desired."
      },
      {
        "type": "long",
        "key": "compression",
        "title": "--compression=<n>",
        "description": "Specifies compression level for newly-compressed data in the generated pack. If not specified, pack compression level is determined first by pack.compression, then by core.compression, and defaults to -1, the zlib default, if neither is set. Add --no-reuse-object if you want to force a uniform compression level on all data no matter the source."
      },
      {
        "type": "long",
        "key": "sparse",
        "title": "--[no-]sparse",
        "description": "Toggle the \"sparse\" algorithm to determine which objects to include in the pack, when combined with the \"--revs\" option. This algorithm only walks trees that appear in paths that introduce new objects. This can have significant performance benefits when computing a pack to send a small change. However, it is possible that extra objects are added to the pack-file if the included commits contain certain types of direct renames. If this option is not included, it defaults to the value of pack.useSparse, which is true unless otherwise specified."
      },
      {
        "type": "long",
        "key": "thin",
        "title": "--thin",
        "description": "Create a \"thin\" pack by omitting the common objects between a sender and a receiver in order to reduce network transfer. This option only makes sense in conjunction with --stdout.\n\nNote: A thin pack violates the packed archive format by omitting required objects and is thus unusable by Git without making it self-contained. Use git index-pack --fix-thin (see git-index-pack[1]) to restore the self-contained property."
      },
      {
        "type": "long",
        "key": "shallow",
        "title": "--shallow",
        "description": "Optimize a pack that will be provided to a client with a shallow repository. This option, combined with --thin, can result in a smaller pack at the cost of speed."
      },
      {
        "type": "long",
        "key": "delta-base-offset",
        "title": "--delta-base-offset",
        "description": "A packed archive can express the base object of a delta as either a 20-byte object name or as an offset in the stream, but ancient versions of Git don’t understand the latter. By default, git pack-objects only uses the former format for better compatibility. This option allows the command to use the latter format for compactness. Depending on the average delta chain length, this option typically shrinks the resulting packfile by 3-5 per-cent.\n\nNote: Porcelain commands such as git gc (see git-gc[1]), git repack (see git-repack[1]) pass this option by default in modern Git when they put objects in your repository into pack files. So does git bundle (see git-bundle[1]) when it creates a bundle."
      },
      {
        "type": "long",
        "key": "threads",
        "title": "--threads=<n>",
        "description": "Specifies the number of threads to spawn when searching for best delta matches. This requires that pack-objects be compiled with pthreads otherwise this option is ignored with a warning. This is meant to reduce packing time on multiprocessor machines. The required amount of memory for the delta search window is however multiplied by the number of threads. Specifying 0 will cause Git to auto-detect the number of CPU’s and set the number of threads accordingly."
      },
      {
        "type": "long",
        "key": "index-version",
        "title": "--index-version=<version>[, <offset>]",
        "description": "This is intended to be used by the test suite only. It allows to force the version for the generated pack index, and to force 64-bit index entries on objects located above the given offset."
      },
      {
        "type": "long",
        "key": "keep-true-parents",
        "title": "--keep-true-parents",
        "description": "With this option, parents that are hidden by grafts are packed nevertheless."
      },
      {
        "type": "long",
        "key": "filter",
        "title": "--filter=<filter-spec>",
        "description": "Requires --stdout. Omits certain objects (usually blobs) from the resulting packfile. See git-rev-list[1] for valid <filter-spec> forms."
      },
      {
        "type": "long",
        "key": "no-filter",
        "title": "--no-filter",
        "description": "Turns off any previous --filter= argument."
      },
      {
        "type": "long",
        "key": "missing",
        "title": "--missing=<missing-action>",
        "description": "A debug option to help with future \"partial clone\" development. This option specifies how missing objects are handled.\n\nThe form --missing=error requests that pack-objects stop with an error if a missing object is encountered. If the repository is a partial clone, an attempt to fetch missing objects will be made before declaring them missing. This is the default action.\n\nThe form --missing=allow-any will allow object traversal to continue if a missing object is encountered. No fetch of a missing object will occur. Missing objects will silently be omitted from the results.\n\nThe form --missing=allow-promisor is like allow-any, but will only allow object traversal to continue for EXPECTED promisor missing objects. No fetch of a missing object will occur. An unexpected missing object will raise an error."
      },
      {
        "type": "long",
        "key": "exclude-promisor-objects",
        "title": "--exclude-promisor-objects",
        "description": "Omit objects that are known to be in the promisor remote. (This option has the purpose of operating only on locally created objects, so that when we repack, we still maintain a distinction between locally created objects [without .promisor] and objects from the promisor remote [with .promisor].) This is used with partial clone."
      },
      {
        "type": "long",
        "key": "keep-unreachable",
        "title": "--keep-unreachable",
        "description": "Objects unreachable from the refs in packs named with --unpacked= option are added to the resulting pack, in addition to the reachable objects that are not in packs marked with *.keep files. This implies --revs."
      },
      {
        "type": "long",
        "key": "pack-loose-unreachable",
        "title": "--pack-loose-unreachable",
        "description": "Pack unreachable loose objects (and their loose counterparts removed). This implies --revs."
      },
      {
        "type": "long",
        "key": "unpack-unreachable",
        "title": "--unpack-unreachable",
        "description": "Keep unreachable objects in loose form. This implies --revs."
      },
      {
        "type": "long",
        "key": "delta-islands",
        "title": "--delta-islands",
        "description": "Restrict delta matches based on \"islands\". See DELTA ISLANDS below."
      }
    ]
  },
  {
    "name": "git prune-packed",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Don’t actually remove any objects, only show those that would have been removed."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Don’t actually remove any objects, only show those that would have been removed."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Squelch the progress indicator."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Squelch the progress indicator."
      }
    ]
  },
  {
    "name": "git symbolic-ref",
    "options": [
      {
        "type": "short",
        "key": "d",
        "title": "-d, --delete",
        "description": "Delete the symbolic ref <name>."
      },
      {
        "type": "long",
        "key": "delete",
        "title": "-d, --delete",
        "description": "Delete the symbolic ref <name>."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Do not issue an error message if the <name> is not a symbolic ref but a detached HEAD; instead exit with non-zero status silently."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Do not issue an error message if the <name> is not a symbolic ref but a detached HEAD; instead exit with non-zero status silently."
      },
      {
        "type": "long",
        "key": "short",
        "title": "--short",
        "description": "When showing the value of <name> as a symbolic ref, try to shorten the value, e.g. from refs/heads/master to master."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m",
        "description": "Update the reflog for <name> with <reason>. This is valid only when creating or updating a symbolic ref."
      }
    ]
  },
  {
    "name": "git unpack-objects",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-n",
        "description": "Dry run. Check the pack file without actually unpacking the objects."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "The command usually shows percentage progress. This flag suppresses it."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r",
        "description": "When unpacking a corrupt packfile, the command dies at the first corruption. This flag tells it to keep going and make the best effort to recover as many objects as possible."
      },
      {
        "type": "long",
        "key": "strict",
        "title": "--strict",
        "description": "Don’t write objects with broken content or links."
      },
      {
        "type": "long",
        "key": "max-input-size",
        "title": "--max-input-size=<size>",
        "description": "Die, if the pack is larger than <size>."
      }
    ]
  },
  {
    "name": "git update-ref",
    "options": []
  },
  {
    "name": "git write-tree",
    "options": [
      {
        "type": "long",
        "key": "missing-ok",
        "title": "--missing-ok",
        "description": "Normally git write-tree ensures that the objects referenced by the directory exist in the object database. This option disables this check."
      },
      {
        "type": "long",
        "key": "prefix",
        "title": "--prefix=<prefix>/",
        "description": "Writes a tree object that represents a subdirectory <prefix>. This can be used to write the tree object for a subproject that is in the named subdirectory."
      }
    ]
  },
  {
    "name": "git cat-file",
    "options": [
      {
        "type": "short",
        "key": "t",
        "title": "-t",
        "description": "Instead of the content, show the object type identified by <object>."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s",
        "description": "Instead of the content, show the object size identified by <object>."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e",
        "description": "Exit with zero status if <object> exists and is a valid object. If <object> is of an invalid format exit with non-zero and emits an error on stderr."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p",
        "description": "Pretty-print the contents of <object> based on its type."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv",
        "description": "Show the content as transformed by a textconv filter. In this case, <object> has to be of the form <tree-ish>:<path>, or :<path> in order to apply the filter to the content recorded in the index at <path>."
      },
      {
        "type": "long",
        "key": "filters",
        "title": "--filters",
        "description": "Show the content as converted by the filters configured in the current working tree for the given <path> (i.e. smudge filters, end-of-line conversion, etc). In this case, <object> has to be of the form <tree-ish>:<path>, or :<path>."
      },
      {
        "type": "long",
        "key": "path",
        "title": "--path=<path>",
        "description": "For use with --textconv or --filters, to allow specifying an object name and a path separately, e.g. when it is difficult to figure out the revision from which the blob came."
      },
      {
        "type": "long",
        "key": "batch",
        "title": "--batch, --batch=<format>",
        "description": "Print object information and contents for each object provided on stdin. May not be combined with any other options or arguments except --textconv or --filters, in which case the input lines also need to specify the path, separated by whitespace. See the section BATCH OUTPUT below for details."
      },
      {
        "type": "long",
        "key": "batch-check",
        "title": "--batch-check, --batch-check=<format>",
        "description": "Print object information for each object provided on stdin. May not be combined with any other options or arguments except --textconv or --filters, in which case the input lines also need to specify the path, separated by whitespace. See the section BATCH OUTPUT below for details."
      },
      {
        "type": "long",
        "key": "batch-all-objects",
        "title": "--batch-all-objects",
        "description": "Instead of reading a list of objects on stdin, perform the requested batch operation on all objects in the repository and any alternate object stores (not just reachable objects). Requires --batch or --batch-check be specified. Note that the objects are visited in order sorted by their hashes."
      },
      {
        "type": "long",
        "key": "buffer",
        "title": "--buffer",
        "description": "Normally batch output is flushed after each object is output, so that a process can interactively read and write from cat-file. With this option, the output uses normal stdio buffering; this is much more efficient when invoking --batch-check on a large number of objects."
      },
      {
        "type": "long",
        "key": "unordered",
        "title": "--unordered",
        "description": "When --batch-all-objects is in use, visit objects in an order which may be more efficient for accessing the object contents than hash order. The exact details of the order are unspecified, but if you do not require a specific order, this should generally result in faster output, especially with --batch. Note that cat-file will still show each object only once, even if it is stored multiple times in the repository."
      },
      {
        "type": "long",
        "key": "allow-unknown-type",
        "title": "--allow-unknown-type",
        "description": "Allow -s or -t to query broken/corrupt objects of unknown type."
      },
      {
        "type": "long",
        "key": "follow-symlinks",
        "title": "--follow-symlinks",
        "description": "With --batch or --batch-check, follow symlinks inside the repository when requesting objects with extended SHA-1 expressions of the form tree-ish:path-in-tree. Instead of providing output about the link itself, provide output about the linked-to object. If a symlink points outside the tree-ish (e.g. a link to /foo or a root-level link to ../foo), the portion of the link which is outside the tree will be printed.\n\nThis option does not (currently) work correctly when an object in the index is specified (e.g. :link instead of HEAD:link) rather than one in the tree.\n\nThis option cannot (currently) be used unless --batch or --batch-check is used.\n\nFor example, consider a git repository containing:\n\nf: a file containing \"hello\\n\"\nlink: a symlink to f\ndir/link: a symlink to ../f\nplink: a symlink to ../f\nalink: a symlink to /etc/passwd\n\nFor a regular file f, echo HEAD:f | git cat-file --batch would print\n\nce013625030ba8dba906f756967f9e9ca394464a blob 6\n\nAnd echo HEAD:link | git cat-file --batch --follow-symlinks would print the same thing, as would HEAD:dir/link, as they both point at HEAD:f.\n\nWithout --follow-symlinks, these would print data about the symlink itself. In the case of HEAD:link, you would see\n\n4d1ae35ba2c8ec712fa2a379db44ad639ca277bd blob 1\n\nBoth plink and alink point outside the tree, so they would respectively print:\n\nsymlink 4\n../f\n\nsymlink 11\n/etc/passwd"
      }
    ]
  },
  {
    "name": "git cherry",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Show the commit subjects next to the SHA1s."
      }
    ]
  },
  {
    "name": "git diff-files",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "long",
        "key": "no-patch",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "short",
        "key": "U",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of the usual three. Implies --patch."
      },
      {
        "type": "long",
        "key": "unified",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of the usual three. Implies --patch."
      },
      {
        "type": "long",
        "key": "output",
        "title": "--output=<file>",
        "description": "Output to a specific file instead of stdout."
      },
      {
        "type": "long",
        "key": "output-indicator-new",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-old",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-context",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "Generate the diff in raw format. This is the default."
      },
      {
        "type": "long",
        "key": "patch-with-raw",
        "title": "--patch-with-raw",
        "description": "Synonym for -p --raw."
      },
      {
        "type": "long",
        "key": "indent-heuristic",
        "title": "--indent-heuristic",
        "description": "Enable the heuristic that shifts diff hunk boundaries to make patches easier to read. This is the default."
      },
      {
        "type": "long",
        "key": "no-indent-heuristic",
        "title": "--no-indent-heuristic",
        "description": "Disable the indent heuristic."
      },
      {
        "type": "long",
        "key": "minimal",
        "title": "--minimal",
        "description": "Spend extra time to make sure the smallest possible diff is produced."
      },
      {
        "type": "long",
        "key": "patience",
        "title": "--patience",
        "description": "Generate a diff using the \"patience diff\" algorithm."
      },
      {
        "type": "long",
        "key": "histogram",
        "title": "--histogram",
        "description": "Generate a diff using the \"histogram diff\" algorithm."
      },
      {
        "type": "long",
        "key": "anchored",
        "title": "--anchored=<text>",
        "description": "Generate a diff using the \"anchored diff\" algorithm.\n\nThis option may be specified more than once.\n\nIf a line exists in both the source and destination, exists only once, and starts with this text, this algorithm attempts to prevent it from appearing as a deletion or addition in the output. It uses the \"patience diff\" algorithm internally."
      },
      {
        "type": "long",
        "key": "diff-algorithm",
        "title": "--diff-algorithm={patience|minimal|histogram|myers}",
        "description": "Choose a diff algorithm. The variants are as follows:\n\ndefault, myers\n\nThe basic greedy diff algorithm. Currently, this is the default.\n\nminimal\n\nSpend extra time to make sure the smallest possible diff is produced.\n\npatience\n\nUse \"patience diff\" algorithm when generating patches.\n\nhistogram\n\nThis algorithm extends the patience algorithm to \"support low-occurrence common elements\".\n\nFor instance, if you configured the diff.algorithm variable to a non-default value and want to use the default one, then you have to use --diff-algorithm=default option."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat[=<width>[, <name-width>[, <count>]]]",
        "description": "Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <width>. The width of the filename part can be limited by giving another width <name-width> after a comma. The width of the graph part can be limited by using --stat-graph-width=<width> (affects all commands generating a stat graph) or by setting diff.statGraphWidth=<width> (does not affect git format-patch). By giving a third parameter <count>, you can limit the output to the first <count> lines, followed by ... if there are more.\n\nThese parameters can also be set individually with --stat-width=<width>, --stat-name-width=<name-width> and --stat-count=<count>."
      },
      {
        "type": "long",
        "key": "compact-summary",
        "title": "--compact-summary",
        "description": "Output a condensed summary of extended header information such as file creations or deletions (\"new\" or \"gone\", optionally \"+l\" if it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding or removing executable bit respectively) in diffstat. The information is put between the filename part and the graph part. Implies --stat."
      },
      {
        "type": "long",
        "key": "numstat",
        "title": "--numstat",
        "description": "Similar to --stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two - instead of saying 0 0."
      },
      {
        "type": "long",
        "key": "shortstat",
        "title": "--shortstat",
        "description": "Output only the last line of the --stat format containing total number of modified files, as well as number of added and deleted lines."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X[<param1, param2, … >], --dirstat[=<param1, param2, … >]",
        "description": "Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config[1]). The following parameters are available:\n\nchanges\n\nCompute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.\n\nlines\n\nCompute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other --*stat options.\n\nfiles\n\nCompute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest --dirstat behavior, since it does not have to look at the file contents at all.\n\ncumulative\n\nCount changes in a child directory for the parent directory as well. Note that when using cumulative, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the noncumulative parameter.\n\n<limit>\n\nAn integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.\n\nExample: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "dirstat",
        "title": "-X[<param1, param2, … >], --dirstat[=<param1, param2, … >]",
        "description": "Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config[1]). The following parameters are available:\n\nchanges\n\nCompute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.\n\nlines\n\nCompute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other --*stat options.\n\nfiles\n\nCompute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest --dirstat behavior, since it does not have to look at the file contents at all.\n\ncumulative\n\nCount changes in a child directory for the parent directory as well. Note that when using cumulative, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the noncumulative parameter.\n\n<limit>\n\nAn integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.\n\nExample: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "cumulative",
        "title": "--cumulative",
        "description": "Synonym for --dirstat=cumulative"
      },
      {
        "type": "long",
        "key": "dirstat-by-file",
        "title": "--dirstat-by-file[=<param1, param2>… ]",
        "description": "Synonym for --dirstat=files,param1,param2…"
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary",
        "description": "Output a condensed summary of extended header information such as creations, renames and mode changes."
      },
      {
        "type": "long",
        "key": "patch-with-stat",
        "title": "--patch-with-stat",
        "description": "Synonym for -p --stat."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "When --raw, --numstat, --name-only or --name-status has been given, do not munge pathnames and use NULs as output field terminators.\n\nWithout this option, pathnames with \"unusual\" characters are quoted as explained for the configuration variable core.quotePath (see git-config[1])."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only",
        "description": "Show only names of changed files. The file names are often encoded in UTF-8. For more information see the discussion about encoding in the git-log[1] manual page."
      },
      {
        "type": "long",
        "key": "name-status",
        "title": "--name-status",
        "description": "Show only names and status of changed files. See the description of the --diff-filter option on what the status letters mean. Just like --name-only the file names are often encoded in UTF-8."
      },
      {
        "type": "long",
        "key": "submodule",
        "title": "--submodule[=<format>]",
        "description": "Specify how differences in submodules are shown. When specifying --submodule=short the short format is used. This format just shows the names of the commits at the beginning and end of the range. When --submodule or --submodule=log is specified, the log format is used. This format lists the commits in the range like git-submodule[1] summary does. When --submodule=diff is specified, the diff format is used. This format shows an inline diff of the changes in the submodule contents between the commit range. Defaults to diff.submodule or the short format if the config option is unset."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Show colored diff. --color (i.e. without =<when>) is the same as --color=always. <when> can be one of always, never, or auto."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off colored diff. It is the same as --color=never."
      },
      {
        "type": "long",
        "key": "color-moved",
        "title": "--color-moved[=<mode>]",
        "description": "Moved lines of code are colored differently. The <mode> defaults to no if the option is not given and to zebra if the option with no mode is given. The mode must be one of:\n\nno\n\nMoved lines are not highlighted.\n\ndefault\n\nIs a synonym for zebra. This may change to a more sensible mode in the future.\n\nplain\n\nAny line that is added in one location and was removed in another location will be colored with color.diff.newMoved. Similarly color.diff.oldMoved will be used for removed lines that are added somewhere else in the diff. This mode picks up any moved line, but it is not very useful in a review to determine if a block of code was moved without permutation.\n\nblocks\n\nBlocks of moved text of at least 20 alphanumeric characters are detected greedily. The detected blocks are painted using either the color.diff.{old,new}Moved color. Adjacent blocks cannot be told apart.\n\nzebra\n\nBlocks of moved text are detected as in blocks mode. The blocks are painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative. The change between the two colors indicates that a new block was detected.\n\ndimmed-zebra\n\nSimilar to zebra, but additional dimming of uninteresting parts of moved code is performed. The bordering lines of two adjacent blocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."
      },
      {
        "type": "long",
        "key": "no-color-moved",
        "title": "--no-color-moved",
        "description": "Turn off move detection. This can be used to override configuration settings. It is the same as --color-moved=no."
      },
      {
        "type": "long",
        "key": "color-moved-ws",
        "title": "--color-moved-ws=<modes>",
        "description": "This configures how whitespace is ignored when performing the move detection for --color-moved. These modes can be given as a comma separated list:\n\nno\n\nDo not ignore whitespace when performing move detection.\n\nignore-space-at-eol\n\nIgnore changes in whitespace at EOL.\n\nignore-space-change\n\nIgnore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.\n\nignore-all-space\n\nIgnore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.\n\nallow-indentation-change\n\nInitially ignore any whitespace in the move detection, then group the moved code blocks only into a block if the change in whitespace is the same per line. This is incompatible with the other modes."
      },
      {
        "type": "long",
        "key": "no-color-moved-ws",
        "title": "--no-color-moved-ws",
        "description": "Do not ignore whitespace when performing move detection. This can be used to override configuration settings. It is the same as --color-moved-ws=no."
      },
      {
        "type": "long",
        "key": "word-diff",
        "title": "--word-diff[=<mode>]",
        "description": "Show a word diff, using the <mode> to delimit changed words. By default, words are delimited by whitespace; see --word-diff-regex below. The <mode> defaults to plain, and must be one of:\n\ncolor\n\nHighlight changed words using only colors. Implies --color.\n\nplain\n\nShow words as [-removed-] and {+added+}. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous.\n\nporcelain\n\nUse a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a +/-/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde ~ on a line of its own.\n\nnone\n\nDisable word diff again.\n\nNote that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled."
      },
      {
        "type": "long",
        "key": "word-diff-regex",
        "title": "--word-diff-regex=<regex>",
        "description": "Use <regex> to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies --word-diff unless it was already enabled.\n\nEvery non-overlapping match of the <regex> is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences. You may want to append |[^[:space:]] to your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is silently truncated(!) at the newline.\n\nFor example, --word-diff-regex=. will treat each character as a word and, correspondingly, show differences character by character.\n\nThe regex can also be set via a diff driver or configuration option, see gitattributes[5] or git-config[1]. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings."
      },
      {
        "type": "long",
        "key": "color-words",
        "title": "--color-words[=<regex>]",
        "description": "Equivalent to --word-diff=color plus (if a regex was specified) --word-diff-regex=<regex>."
      },
      {
        "type": "long",
        "key": "no-renames",
        "title": "--no-renames",
        "description": "Turn off rename detection, even when the configuration file gives the default to do so."
      },
      {
        "type": "long",
        "key": "rename-empty",
        "title": "--[no-]rename-empty",
        "description": "Whether to use empty blobs as rename source."
      },
      {
        "type": "long",
        "key": "check",
        "title": "--check",
        "description": "Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by core.whitespace configuration. By default, trailing whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code."
      },
      {
        "type": "long",
        "key": "ws-error-highlight",
        "title": "--ws-error-highlight=<kind>",
        "description": "Highlight whitespace errors in the context, old or new lines of the diff. Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context. When this option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored with color.diff.whitespace."
      },
      {
        "type": "long",
        "key": "full-index",
        "title": "--full-index",
        "description": "Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output."
      },
      {
        "type": "long",
        "key": "binary",
        "title": "--binary",
        "description": "In addition to --full-index, output a binary diff that can be applied with git-apply. Implies --patch."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. In diff-patch output format, --full-index takes higher precedence, i.e. if --full-index is specified, full blob names will be shown regardless of --abbrev. Non default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and create. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number m controls this aspect of the -B option (defaults to 60%). -B/70% specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).\n\nWhen used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number n controls this aspect of the -B option (defaults to 50%). -B20% specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file."
      },
      {
        "type": "long",
        "key": "break-rewrites",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and create. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number m controls this aspect of the -B option (defaults to 60%). -B/70% specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).\n\nWhen used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number n controls this aspect of the -B option (defaults to 50%). -B20% specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%."
      },
      {
        "type": "long",
        "key": "find-renames",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies-harder",
        "title": "--find-copies-harder",
        "description": "For performance reasons, by default, -C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one -C option has the same effect."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part of a delete/create pair."
      },
      {
        "type": "long",
        "key": "irreversible-delete",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part of a delete/create pair."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l<num>",
        "description": "The -M and -C options involve some preliminary steps that can detect subsets of renames/copies cheaply, followed by an exhaustive fallback portion that compares all remaining unpaired destinations to all relevant sources. (For renames, only remaining unpaired sources are relevant; for copies, all original sources are relevant.) For N sources and destinations, this exhaustive check is O(N^2). This option prevents the exhaustive portion of rename/copy detection from running if the number of source/destination files involved exceeds the specified number. Defaults to diff.renameLimit. Note that a value of 0 is treated as unlimited."
      },
      {
        "type": "long",
        "key": "diff-filter",
        "title": "--diff-filter=[(A|C|D|M|R|T|U|X|B)… [*]]",
        "description": "Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (i.e. regular file, symlink, submodule, … ) changed (T), are Unmerged (U), are Unknown (X), or have had their pairing Broken (B). Any combination of the filter characters (including none) can be used. When * (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.\n\nAlso, these upper-case letters can be downcased to exclude. E.g. --diff-filter=ad excludes added and deleted paths.\n\nNote that not all diffs can feature all types. For instance, diffs from the index to the working tree can never have Added entries (because the set of paths included in the diff is limited by what is in the index). Similarly, copied and renamed entries cannot appear if detection for those types is disabled."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S<string>",
        "description": "Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.\n\nIt is useful when you’re looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into -S, and keep going until you get the very first version of the block.\n\nBinary files are searched as well."
      },
      {
        "type": "short",
        "key": "G",
        "title": "-G<regex>",
        "description": "Look for differences whose patch text contains added/removed lines that match <regex>.\n\nTo illustrate the difference between -S<regex> --pickaxe-regex and -G<regex>, consider a commit with the following diff in the same file:\n\n+    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0);\n\nWhile git log -G\"frotz\\(nitfol\" will show this commit, git log -S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of occurrences of that string did not change).\n\nUnless --text is supplied patches of binary files without a textconv filter will be ignored.\n\nSee the pickaxe entry in gitdiffcore[7] for more information."
      },
      {
        "type": "long",
        "key": "find-object",
        "title": "--find-object=<object-id>",
        "description": "Look for differences that change the number of occurrences of the specified object. Similar to -S, just the argument is different in that it doesn’t search for a specific string but for a specific object id.\n\nThe object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."
      },
      {
        "type": "long",
        "key": "pickaxe-all",
        "title": "--pickaxe-all",
        "description": "When -S or -G finds a change, show all the changes in that changeset, not just the files that contain the change in <string>."
      },
      {
        "type": "long",
        "key": "pickaxe-regex",
        "title": "--pickaxe-regex",
        "description": "Treat the <string> given to -S as an extended POSIX regular expression to match."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O<orderfile>",
        "description": "Control the order in which files appear in the output. This overrides the diff.orderFile configuration variable (see git-config[1]). To cancel diff.orderFile, use -O/dev/null.\n\nThe output order is determined by the order of glob patterns in <orderfile>. All files with pathnames that match the first pattern are output first, all files with pathnames that match the second pattern (but not the first) are output next, and so on. All files with pathnames that do not match any pattern are output last, as if there was an implicit match-all pattern at the end of the file. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order relative to each other is the normal order.\n\n<orderfile> is parsed as follows:\n\n * Blank lines are ignored, so they can be used as separators for readability.\n\n * Lines starting with a hash (\"#\") are ignored, so they can be used for comments. Add a backslash (\"\\\") to the beginning of the pattern if it starts with a hash.\n\n * Each other line contains a single pattern.\n\nPatterns have the same syntax and semantics as patterns used for fnmatch(3) without the FNM_PATHNAME flag, except a pathname also matches a pattern if removing any number of the final pathname components matches the pattern. For example, the pattern \"foo*bar\" matches \"fooasdfbar\" and \"foo/bar/baz/asdf\" but not \"foobarx\"."
      },
      {
        "type": "long",
        "key": "skip-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise."
      },
      {
        "type": "long",
        "key": "rotate-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise."
      },
      {
        "type": "short",
        "key": "R",
        "title": "-R",
        "description": "Swap two inputs; that is, show differences from index or on-disk file to tree contents."
      },
      {
        "type": "long",
        "key": "relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative."
      },
      {
        "type": "long",
        "key": "no-relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "text",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "ignore-cr-at-eol",
        "title": "--ignore-cr-at-eol",
        "description": "Ignore carriage-return at the end of line when doing a comparison."
      },
      {
        "type": "long",
        "key": "ignore-space-at-eol",
        "title": "--ignore-space-at-eol",
        "description": "Ignore changes in whitespace at EOL."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none."
      },
      {
        "type": "long",
        "key": "ignore-all-space",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none."
      },
      {
        "type": "long",
        "key": "ignore-blank-lines",
        "title": "--ignore-blank-lines",
        "description": "Ignore changes whose lines are all blank."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>. This option may be specified more than once."
      },
      {
        "type": "long",
        "key": "ignore-matching-lines",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>. This option may be specified more than once."
      },
      {
        "type": "long",
        "key": "inter-hunk-context",
        "title": "--inter-hunk-context=<lines>",
        "description": "Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other. Defaults to diff.interHunkContext or 0 if the config option is unset."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "function-context",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "exit-code",
        "title": "--exit-code",
        "description": "Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Disable all output of the program. Implies --exit-code."
      },
      {
        "type": "long",
        "key": "ext-diff",
        "title": "--ext-diff",
        "description": "Allow an external diff helper to be executed. If you set an external diff driver with gitattributes[5], you need to use this option with git-log[1] and friends."
      },
      {
        "type": "long",
        "key": "no-ext-diff",
        "title": "--no-ext-diff",
        "description": "Disallow external diff drivers."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes[5] for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff[1] and git-log[1], but not for git-format-patch[1] or diff plumbing commands."
      },
      {
        "type": "long",
        "key": "no-textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes[5] for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff[1] and git-log[1], but not for git-format-patch[1] or diff plumbing commands."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules[=<when>]",
        "description": "Ignore changes to submodules in the diff generation. <when> can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the ignore option in git-config[1] or gitmodules[5]. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using \"all\" hides all changes to submodules."
      },
      {
        "type": "long",
        "key": "src-prefix",
        "title": "--src-prefix=<prefix>",
        "description": "Show the given source prefix instead of \"a/\"."
      },
      {
        "type": "long",
        "key": "dst-prefix",
        "title": "--dst-prefix=<prefix>",
        "description": "Show the given destination prefix instead of \"b/\"."
      },
      {
        "type": "long",
        "key": "no-prefix",
        "title": "--no-prefix",
        "description": "Do not show any source or destination prefix."
      },
      {
        "type": "long",
        "key": "line-prefix",
        "title": "--line-prefix=<prefix>",
        "description": "Prepend an additional prefix to every line of output."
      },
      {
        "type": "long",
        "key": "ita-invisible-in-index",
        "title": "--ita-invisible-in-index",
        "description": "By default entries added by \"git add -N\" appear as an existing empty file in \"git diff\" and a new file in \"git diff --cached\". This option makes the entry appear as a new file in \"git diff\" and non-existent in \"git diff --cached\". This option could be reverted with --ita-visible-in-index. Both options are experimental and could be removed in future."
      },
      {
        "type": "short",
        "key": "0",
        "title": "-1 --base, -2 --ours, -3 --theirs, -0",
        "description": "Diff against the \"base\" version, \"our branch\" or \"their branch\" respectively. With these options, diffs for merged entries are not shown.\n\nThe default is to diff against our branch (-2) and the cleanly resolved paths. The option -0 can be given to omit diff output for unmerged entries and just show \"Unmerged\"."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --cc",
        "description": "This compares stage 2 (our branch), stage 3 (their branch) and the working tree file and outputs a combined diff, similar to the way diff-tree shows a merge commit with these flags."
      },
      {
        "type": "long",
        "key": "cc",
        "title": "-c, --cc",
        "description": "This compares stage 2 (our branch), stage 3 (their branch) and the working tree file and outputs a combined diff, similar to the way diff-tree shows a merge commit with these flags."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "Remain silent even on nonexistent files"
      }
    ]
  },
  {
    "name": "git diff-index",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "long",
        "key": "no-patch",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "short",
        "key": "U",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of the usual three. Implies --patch."
      },
      {
        "type": "long",
        "key": "unified",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of the usual three. Implies --patch."
      },
      {
        "type": "long",
        "key": "output",
        "title": "--output=<file>",
        "description": "Output to a specific file instead of stdout."
      },
      {
        "type": "long",
        "key": "output-indicator-new",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-old",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-context",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "Generate the diff in raw format. This is the default."
      },
      {
        "type": "long",
        "key": "patch-with-raw",
        "title": "--patch-with-raw",
        "description": "Synonym for -p --raw."
      },
      {
        "type": "long",
        "key": "indent-heuristic",
        "title": "--indent-heuristic",
        "description": "Enable the heuristic that shifts diff hunk boundaries to make patches easier to read. This is the default."
      },
      {
        "type": "long",
        "key": "no-indent-heuristic",
        "title": "--no-indent-heuristic",
        "description": "Disable the indent heuristic."
      },
      {
        "type": "long",
        "key": "minimal",
        "title": "--minimal",
        "description": "Spend extra time to make sure the smallest possible diff is produced."
      },
      {
        "type": "long",
        "key": "patience",
        "title": "--patience",
        "description": "Generate a diff using the \"patience diff\" algorithm."
      },
      {
        "type": "long",
        "key": "histogram",
        "title": "--histogram",
        "description": "Generate a diff using the \"histogram diff\" algorithm."
      },
      {
        "type": "long",
        "key": "anchored",
        "title": "--anchored=<text>",
        "description": "Generate a diff using the \"anchored diff\" algorithm.\n\nThis option may be specified more than once.\n\nIf a line exists in both the source and destination, exists only once, and starts with this text, this algorithm attempts to prevent it from appearing as a deletion or addition in the output. It uses the \"patience diff\" algorithm internally."
      },
      {
        "type": "long",
        "key": "diff-algorithm",
        "title": "--diff-algorithm={patience|minimal|histogram|myers}",
        "description": "Choose a diff algorithm. The variants are as follows:\n\ndefault, myers\n\nThe basic greedy diff algorithm. Currently, this is the default.\n\nminimal\n\nSpend extra time to make sure the smallest possible diff is produced.\n\npatience\n\nUse \"patience diff\" algorithm when generating patches.\n\nhistogram\n\nThis algorithm extends the patience algorithm to \"support low-occurrence common elements\".\n\nFor instance, if you configured the diff.algorithm variable to a non-default value and want to use the default one, then you have to use --diff-algorithm=default option."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat[=<width>[, <name-width>[, <count>]]]",
        "description": "Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <width>. The width of the filename part can be limited by giving another width <name-width> after a comma. The width of the graph part can be limited by using --stat-graph-width=<width> (affects all commands generating a stat graph) or by setting diff.statGraphWidth=<width> (does not affect git format-patch). By giving a third parameter <count>, you can limit the output to the first <count> lines, followed by ... if there are more.\n\nThese parameters can also be set individually with --stat-width=<width>, --stat-name-width=<name-width> and --stat-count=<count>."
      },
      {
        "type": "long",
        "key": "compact-summary",
        "title": "--compact-summary",
        "description": "Output a condensed summary of extended header information such as file creations or deletions (\"new\" or \"gone\", optionally \"+l\" if it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding or removing executable bit respectively) in diffstat. The information is put between the filename part and the graph part. Implies --stat."
      },
      {
        "type": "long",
        "key": "numstat",
        "title": "--numstat",
        "description": "Similar to --stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two - instead of saying 0 0."
      },
      {
        "type": "long",
        "key": "shortstat",
        "title": "--shortstat",
        "description": "Output only the last line of the --stat format containing total number of modified files, as well as number of added and deleted lines."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X[<param1, param2, … >], --dirstat[=<param1, param2, … >]",
        "description": "Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config[1]). The following parameters are available:\n\nchanges\n\nCompute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.\n\nlines\n\nCompute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other --*stat options.\n\nfiles\n\nCompute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest --dirstat behavior, since it does not have to look at the file contents at all.\n\ncumulative\n\nCount changes in a child directory for the parent directory as well. Note that when using cumulative, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the noncumulative parameter.\n\n<limit>\n\nAn integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.\n\nExample: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "dirstat",
        "title": "-X[<param1, param2, … >], --dirstat[=<param1, param2, … >]",
        "description": "Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config[1]). The following parameters are available:\n\nchanges\n\nCompute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.\n\nlines\n\nCompute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other --*stat options.\n\nfiles\n\nCompute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest --dirstat behavior, since it does not have to look at the file contents at all.\n\ncumulative\n\nCount changes in a child directory for the parent directory as well. Note that when using cumulative, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the noncumulative parameter.\n\n<limit>\n\nAn integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.\n\nExample: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "cumulative",
        "title": "--cumulative",
        "description": "Synonym for --dirstat=cumulative"
      },
      {
        "type": "long",
        "key": "dirstat-by-file",
        "title": "--dirstat-by-file[=<param1, param2>… ]",
        "description": "Synonym for --dirstat=files,param1,param2…"
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary",
        "description": "Output a condensed summary of extended header information such as creations, renames and mode changes."
      },
      {
        "type": "long",
        "key": "patch-with-stat",
        "title": "--patch-with-stat",
        "description": "Synonym for -p --stat."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "When --raw, --numstat, --name-only or --name-status has been given, do not munge pathnames and use NULs as output field terminators.\n\nWithout this option, pathnames with \"unusual\" characters are quoted as explained for the configuration variable core.quotePath (see git-config[1])."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only",
        "description": "Show only names of changed files. The file names are often encoded in UTF-8. For more information see the discussion about encoding in the git-log[1] manual page."
      },
      {
        "type": "long",
        "key": "name-status",
        "title": "--name-status",
        "description": "Show only names and status of changed files. See the description of the --diff-filter option on what the status letters mean. Just like --name-only the file names are often encoded in UTF-8."
      },
      {
        "type": "long",
        "key": "submodule",
        "title": "--submodule[=<format>]",
        "description": "Specify how differences in submodules are shown. When specifying --submodule=short the short format is used. This format just shows the names of the commits at the beginning and end of the range. When --submodule or --submodule=log is specified, the log format is used. This format lists the commits in the range like git-submodule[1] summary does. When --submodule=diff is specified, the diff format is used. This format shows an inline diff of the changes in the submodule contents between the commit range. Defaults to diff.submodule or the short format if the config option is unset."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Show colored diff. --color (i.e. without =<when>) is the same as --color=always. <when> can be one of always, never, or auto."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off colored diff. It is the same as --color=never."
      },
      {
        "type": "long",
        "key": "color-moved",
        "title": "--color-moved[=<mode>]",
        "description": "Moved lines of code are colored differently. The <mode> defaults to no if the option is not given and to zebra if the option with no mode is given. The mode must be one of:\n\nno\n\nMoved lines are not highlighted.\n\ndefault\n\nIs a synonym for zebra. This may change to a more sensible mode in the future.\n\nplain\n\nAny line that is added in one location and was removed in another location will be colored with color.diff.newMoved. Similarly color.diff.oldMoved will be used for removed lines that are added somewhere else in the diff. This mode picks up any moved line, but it is not very useful in a review to determine if a block of code was moved without permutation.\n\nblocks\n\nBlocks of moved text of at least 20 alphanumeric characters are detected greedily. The detected blocks are painted using either the color.diff.{old,new}Moved color. Adjacent blocks cannot be told apart.\n\nzebra\n\nBlocks of moved text are detected as in blocks mode. The blocks are painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative. The change between the two colors indicates that a new block was detected.\n\ndimmed-zebra\n\nSimilar to zebra, but additional dimming of uninteresting parts of moved code is performed. The bordering lines of two adjacent blocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."
      },
      {
        "type": "long",
        "key": "no-color-moved",
        "title": "--no-color-moved",
        "description": "Turn off move detection. This can be used to override configuration settings. It is the same as --color-moved=no."
      },
      {
        "type": "long",
        "key": "color-moved-ws",
        "title": "--color-moved-ws=<modes>",
        "description": "This configures how whitespace is ignored when performing the move detection for --color-moved. These modes can be given as a comma separated list:\n\nno\n\nDo not ignore whitespace when performing move detection.\n\nignore-space-at-eol\n\nIgnore changes in whitespace at EOL.\n\nignore-space-change\n\nIgnore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.\n\nignore-all-space\n\nIgnore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.\n\nallow-indentation-change\n\nInitially ignore any whitespace in the move detection, then group the moved code blocks only into a block if the change in whitespace is the same per line. This is incompatible with the other modes."
      },
      {
        "type": "long",
        "key": "no-color-moved-ws",
        "title": "--no-color-moved-ws",
        "description": "Do not ignore whitespace when performing move detection. This can be used to override configuration settings. It is the same as --color-moved-ws=no."
      },
      {
        "type": "long",
        "key": "word-diff",
        "title": "--word-diff[=<mode>]",
        "description": "Show a word diff, using the <mode> to delimit changed words. By default, words are delimited by whitespace; see --word-diff-regex below. The <mode> defaults to plain, and must be one of:\n\ncolor\n\nHighlight changed words using only colors. Implies --color.\n\nplain\n\nShow words as [-removed-] and {+added+}. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous.\n\nporcelain\n\nUse a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a +/-/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde ~ on a line of its own.\n\nnone\n\nDisable word diff again.\n\nNote that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled."
      },
      {
        "type": "long",
        "key": "word-diff-regex",
        "title": "--word-diff-regex=<regex>",
        "description": "Use <regex> to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies --word-diff unless it was already enabled.\n\nEvery non-overlapping match of the <regex> is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences. You may want to append |[^[:space:]] to your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is silently truncated(!) at the newline.\n\nFor example, --word-diff-regex=. will treat each character as a word and, correspondingly, show differences character by character.\n\nThe regex can also be set via a diff driver or configuration option, see gitattributes[5] or git-config[1]. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings."
      },
      {
        "type": "long",
        "key": "color-words",
        "title": "--color-words[=<regex>]",
        "description": "Equivalent to --word-diff=color plus (if a regex was specified) --word-diff-regex=<regex>."
      },
      {
        "type": "long",
        "key": "no-renames",
        "title": "--no-renames",
        "description": "Turn off rename detection, even when the configuration file gives the default to do so."
      },
      {
        "type": "long",
        "key": "rename-empty",
        "title": "--[no-]rename-empty",
        "description": "Whether to use empty blobs as rename source."
      },
      {
        "type": "long",
        "key": "check",
        "title": "--check",
        "description": "Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by core.whitespace configuration. By default, trailing whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code."
      },
      {
        "type": "long",
        "key": "ws-error-highlight",
        "title": "--ws-error-highlight=<kind>",
        "description": "Highlight whitespace errors in the context, old or new lines of the diff. Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context. When this option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored with color.diff.whitespace."
      },
      {
        "type": "long",
        "key": "full-index",
        "title": "--full-index",
        "description": "Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output."
      },
      {
        "type": "long",
        "key": "binary",
        "title": "--binary",
        "description": "In addition to --full-index, output a binary diff that can be applied with git-apply. Implies --patch."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. In diff-patch output format, --full-index takes higher precedence, i.e. if --full-index is specified, full blob names will be shown regardless of --abbrev. Non default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and create. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number m controls this aspect of the -B option (defaults to 60%). -B/70% specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).\n\nWhen used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number n controls this aspect of the -B option (defaults to 50%). -B20% specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file."
      },
      {
        "type": "long",
        "key": "break-rewrites",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and create. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number m controls this aspect of the -B option (defaults to 60%). -B/70% specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).\n\nWhen used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number n controls this aspect of the -B option (defaults to 50%). -B20% specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%."
      },
      {
        "type": "long",
        "key": "find-renames",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies-harder",
        "title": "--find-copies-harder",
        "description": "For performance reasons, by default, -C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one -C option has the same effect."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part of a delete/create pair."
      },
      {
        "type": "long",
        "key": "irreversible-delete",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part of a delete/create pair."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l<num>",
        "description": "The -M and -C options involve some preliminary steps that can detect subsets of renames/copies cheaply, followed by an exhaustive fallback portion that compares all remaining unpaired destinations to all relevant sources. (For renames, only remaining unpaired sources are relevant; for copies, all original sources are relevant.) For N sources and destinations, this exhaustive check is O(N^2). This option prevents the exhaustive portion of rename/copy detection from running if the number of source/destination files involved exceeds the specified number. Defaults to diff.renameLimit. Note that a value of 0 is treated as unlimited."
      },
      {
        "type": "long",
        "key": "diff-filter",
        "title": "--diff-filter=[(A|C|D|M|R|T|U|X|B)… [*]]",
        "description": "Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (i.e. regular file, symlink, submodule, … ) changed (T), are Unmerged (U), are Unknown (X), or have had their pairing Broken (B). Any combination of the filter characters (including none) can be used. When * (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.\n\nAlso, these upper-case letters can be downcased to exclude. E.g. --diff-filter=ad excludes added and deleted paths.\n\nNote that not all diffs can feature all types. For instance, diffs from the index to the working tree can never have Added entries (because the set of paths included in the diff is limited by what is in the index). Similarly, copied and renamed entries cannot appear if detection for those types is disabled."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S<string>",
        "description": "Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.\n\nIt is useful when you’re looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into -S, and keep going until you get the very first version of the block.\n\nBinary files are searched as well."
      },
      {
        "type": "short",
        "key": "G",
        "title": "-G<regex>",
        "description": "Look for differences whose patch text contains added/removed lines that match <regex>.\n\nTo illustrate the difference between -S<regex> --pickaxe-regex and -G<regex>, consider a commit with the following diff in the same file:\n\n+    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0);\n\nWhile git log -G\"frotz\\(nitfol\" will show this commit, git log -S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of occurrences of that string did not change).\n\nUnless --text is supplied patches of binary files without a textconv filter will be ignored.\n\nSee the pickaxe entry in gitdiffcore[7] for more information."
      },
      {
        "type": "long",
        "key": "find-object",
        "title": "--find-object=<object-id>",
        "description": "Look for differences that change the number of occurrences of the specified object. Similar to -S, just the argument is different in that it doesn’t search for a specific string but for a specific object id.\n\nThe object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."
      },
      {
        "type": "long",
        "key": "pickaxe-all",
        "title": "--pickaxe-all",
        "description": "When -S or -G finds a change, show all the changes in that changeset, not just the files that contain the change in <string>."
      },
      {
        "type": "long",
        "key": "pickaxe-regex",
        "title": "--pickaxe-regex",
        "description": "Treat the <string> given to -S as an extended POSIX regular expression to match."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O<orderfile>",
        "description": "Control the order in which files appear in the output. This overrides the diff.orderFile configuration variable (see git-config[1]). To cancel diff.orderFile, use -O/dev/null.\n\nThe output order is determined by the order of glob patterns in <orderfile>. All files with pathnames that match the first pattern are output first, all files with pathnames that match the second pattern (but not the first) are output next, and so on. All files with pathnames that do not match any pattern are output last, as if there was an implicit match-all pattern at the end of the file. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order relative to each other is the normal order.\n\n<orderfile> is parsed as follows:\n\n * Blank lines are ignored, so they can be used as separators for readability.\n\n * Lines starting with a hash (\"#\") are ignored, so they can be used for comments. Add a backslash (\"\\\") to the beginning of the pattern if it starts with a hash.\n\n * Each other line contains a single pattern.\n\nPatterns have the same syntax and semantics as patterns used for fnmatch(3) without the FNM_PATHNAME flag, except a pathname also matches a pattern if removing any number of the final pathname components matches the pattern. For example, the pattern \"foo*bar\" matches \"fooasdfbar\" and \"foo/bar/baz/asdf\" but not \"foobarx\"."
      },
      {
        "type": "long",
        "key": "skip-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise."
      },
      {
        "type": "long",
        "key": "rotate-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise."
      },
      {
        "type": "short",
        "key": "R",
        "title": "-R",
        "description": "Swap two inputs; that is, show differences from index or on-disk file to tree contents."
      },
      {
        "type": "long",
        "key": "relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative."
      },
      {
        "type": "long",
        "key": "no-relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "text",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "ignore-cr-at-eol",
        "title": "--ignore-cr-at-eol",
        "description": "Ignore carriage-return at the end of line when doing a comparison."
      },
      {
        "type": "long",
        "key": "ignore-space-at-eol",
        "title": "--ignore-space-at-eol",
        "description": "Ignore changes in whitespace at EOL."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none."
      },
      {
        "type": "long",
        "key": "ignore-all-space",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none."
      },
      {
        "type": "long",
        "key": "ignore-blank-lines",
        "title": "--ignore-blank-lines",
        "description": "Ignore changes whose lines are all blank."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>. This option may be specified more than once."
      },
      {
        "type": "long",
        "key": "ignore-matching-lines",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>. This option may be specified more than once."
      },
      {
        "type": "long",
        "key": "inter-hunk-context",
        "title": "--inter-hunk-context=<lines>",
        "description": "Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other. Defaults to diff.interHunkContext or 0 if the config option is unset."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "function-context",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "exit-code",
        "title": "--exit-code",
        "description": "Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Disable all output of the program. Implies --exit-code."
      },
      {
        "type": "long",
        "key": "ext-diff",
        "title": "--ext-diff",
        "description": "Allow an external diff helper to be executed. If you set an external diff driver with gitattributes[5], you need to use this option with git-log[1] and friends."
      },
      {
        "type": "long",
        "key": "no-ext-diff",
        "title": "--no-ext-diff",
        "description": "Disallow external diff drivers."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes[5] for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff[1] and git-log[1], but not for git-format-patch[1] or diff plumbing commands."
      },
      {
        "type": "long",
        "key": "no-textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes[5] for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff[1] and git-log[1], but not for git-format-patch[1] or diff plumbing commands."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules[=<when>]",
        "description": "Ignore changes to submodules in the diff generation. <when> can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the ignore option in git-config[1] or gitmodules[5]. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using \"all\" hides all changes to submodules."
      },
      {
        "type": "long",
        "key": "src-prefix",
        "title": "--src-prefix=<prefix>",
        "description": "Show the given source prefix instead of \"a/\"."
      },
      {
        "type": "long",
        "key": "dst-prefix",
        "title": "--dst-prefix=<prefix>",
        "description": "Show the given destination prefix instead of \"b/\"."
      },
      {
        "type": "long",
        "key": "no-prefix",
        "title": "--no-prefix",
        "description": "Do not show any source or destination prefix."
      },
      {
        "type": "long",
        "key": "line-prefix",
        "title": "--line-prefix=<prefix>",
        "description": "Prepend an additional prefix to every line of output."
      },
      {
        "type": "long",
        "key": "ita-invisible-in-index",
        "title": "--ita-invisible-in-index",
        "description": "By default entries added by \"git add -N\" appear as an existing empty file in \"git diff\" and a new file in \"git diff --cached\". This option makes the entry appear as a new file in \"git diff\" and non-existent in \"git diff --cached\". This option could be reverted with --ita-visible-in-index. Both options are experimental and could be removed in future."
      },
      {
        "type": "long",
        "key": "cached",
        "title": "--cached",
        "description": "Do not consider the on-disk file at all."
      },
      {
        "type": "long",
        "key": "merge-base",
        "title": "--merge-base",
        "description": "Instead of comparing <tree-ish> directly, use the merge base between <tree-ish> and HEAD instead. <tree-ish> must be a commit."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m",
        "description": "By default, files recorded in the index but not checked out are reported as deleted. This flag makes git diff-index say that all non-checked-out files are up to date."
      }
    ]
  },
  {
    "name": "git diff-tree",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "long",
        "key": "no-patch",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that show the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "short",
        "key": "U",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of the usual three. Implies --patch."
      },
      {
        "type": "long",
        "key": "unified",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of the usual three. Implies --patch."
      },
      {
        "type": "long",
        "key": "output",
        "title": "--output=<file>",
        "description": "Output to a specific file instead of stdout."
      },
      {
        "type": "long",
        "key": "output-indicator-new",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-old",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-context",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context lines in the generated patch. Normally they are +, - and ' ' respectively."
      },
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "Generate the diff in raw format. This is the default."
      },
      {
        "type": "long",
        "key": "patch-with-raw",
        "title": "--patch-with-raw",
        "description": "Synonym for -p --raw."
      },
      {
        "type": "long",
        "key": "indent-heuristic",
        "title": "--indent-heuristic",
        "description": "Enable the heuristic that shifts diff hunk boundaries to make patches easier to read. This is the default."
      },
      {
        "type": "long",
        "key": "no-indent-heuristic",
        "title": "--no-indent-heuristic",
        "description": "Disable the indent heuristic."
      },
      {
        "type": "long",
        "key": "minimal",
        "title": "--minimal",
        "description": "Spend extra time to make sure the smallest possible diff is produced."
      },
      {
        "type": "long",
        "key": "patience",
        "title": "--patience",
        "description": "Generate a diff using the \"patience diff\" algorithm."
      },
      {
        "type": "long",
        "key": "histogram",
        "title": "--histogram",
        "description": "Generate a diff using the \"histogram diff\" algorithm."
      },
      {
        "type": "long",
        "key": "anchored",
        "title": "--anchored=<text>",
        "description": "Generate a diff using the \"anchored diff\" algorithm.\n\nThis option may be specified more than once.\n\nIf a line exists in both the source and destination, exists only once, and starts with this text, this algorithm attempts to prevent it from appearing as a deletion or addition in the output. It uses the \"patience diff\" algorithm internally."
      },
      {
        "type": "long",
        "key": "diff-algorithm",
        "title": "--diff-algorithm={patience|minimal|histogram|myers}",
        "description": "Choose a diff algorithm. The variants are as follows:\n\ndefault, myers\n\nThe basic greedy diff algorithm. Currently, this is the default.\n\nminimal\n\nSpend extra time to make sure the smallest possible diff is produced.\n\npatience\n\nUse \"patience diff\" algorithm when generating patches.\n\nhistogram\n\nThis algorithm extends the patience algorithm to \"support low-occurrence common elements\".\n\nFor instance, if you configured the diff.algorithm variable to a non-default value and want to use the default one, then you have to use --diff-algorithm=default option."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat[=<width>[, <name-width>[, <count>]]]",
        "description": "Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <width>. The width of the filename part can be limited by giving another width <name-width> after a comma. The width of the graph part can be limited by using --stat-graph-width=<width> (affects all commands generating a stat graph) or by setting diff.statGraphWidth=<width> (does not affect git format-patch). By giving a third parameter <count>, you can limit the output to the first <count> lines, followed by ... if there are more.\n\nThese parameters can also be set individually with --stat-width=<width>, --stat-name-width=<name-width> and --stat-count=<count>."
      },
      {
        "type": "long",
        "key": "compact-summary",
        "title": "--compact-summary",
        "description": "Output a condensed summary of extended header information such as file creations or deletions (\"new\" or \"gone\", optionally \"+l\" if it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding or removing executable bit respectively) in diffstat. The information is put between the filename part and the graph part. Implies --stat."
      },
      {
        "type": "long",
        "key": "numstat",
        "title": "--numstat",
        "description": "Similar to --stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two - instead of saying 0 0."
      },
      {
        "type": "long",
        "key": "shortstat",
        "title": "--shortstat",
        "description": "Output only the last line of the --stat format containing total number of modified files, as well as number of added and deleted lines."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X[<param1, param2, … >], --dirstat[=<param1, param2, … >]",
        "description": "Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config[1]). The following parameters are available:\n\nchanges\n\nCompute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.\n\nlines\n\nCompute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other --*stat options.\n\nfiles\n\nCompute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest --dirstat behavior, since it does not have to look at the file contents at all.\n\ncumulative\n\nCount changes in a child directory for the parent directory as well. Note that when using cumulative, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the noncumulative parameter.\n\n<limit>\n\nAn integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.\n\nExample: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "dirstat",
        "title": "-X[<param1, param2, … >], --dirstat[=<param1, param2, … >]",
        "description": "Output the distribution of relative amount of changes for each sub-directory. The behavior of --dirstat can be customized by passing it a comma separated list of parameters. The defaults are controlled by the diff.dirstat configuration variable (see git-config[1]). The following parameters are available:\n\nchanges\n\nCompute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.\n\nlines\n\nCompute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other --*stat options.\n\nfiles\n\nCompute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest --dirstat behavior, since it does not have to look at the file contents at all.\n\ncumulative\n\nCount changes in a child directory for the parent directory as well. Note that when using cumulative, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the noncumulative parameter.\n\n<limit>\n\nAn integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.\n\nExample: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: --dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "cumulative",
        "title": "--cumulative",
        "description": "Synonym for --dirstat=cumulative"
      },
      {
        "type": "long",
        "key": "dirstat-by-file",
        "title": "--dirstat-by-file[=<param1, param2>… ]",
        "description": "Synonym for --dirstat=files,param1,param2…"
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary",
        "description": "Output a condensed summary of extended header information such as creations, renames and mode changes."
      },
      {
        "type": "long",
        "key": "patch-with-stat",
        "title": "--patch-with-stat",
        "description": "Synonym for -p --stat."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "When --raw, --numstat, --name-only or --name-status has been given, do not munge pathnames and use NULs as output field terminators.\n\nWithout this option, pathnames with \"unusual\" characters are quoted as explained for the configuration variable core.quotePath (see git-config[1])."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only",
        "description": "Show only names of changed files. The file names are often encoded in UTF-8. For more information see the discussion about encoding in the git-log[1] manual page."
      },
      {
        "type": "long",
        "key": "name-status",
        "title": "--name-status",
        "description": "Show only names and status of changed files. See the description of the --diff-filter option on what the status letters mean. Just like --name-only the file names are often encoded in UTF-8."
      },
      {
        "type": "long",
        "key": "submodule",
        "title": "--submodule[=<format>]",
        "description": "Specify how differences in submodules are shown. When specifying --submodule=short the short format is used. This format just shows the names of the commits at the beginning and end of the range. When --submodule or --submodule=log is specified, the log format is used. This format lists the commits in the range like git-submodule[1] summary does. When --submodule=diff is specified, the diff format is used. This format shows an inline diff of the changes in the submodule contents between the commit range. Defaults to diff.submodule or the short format if the config option is unset."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Show colored diff. --color (i.e. without =<when>) is the same as --color=always. <when> can be one of always, never, or auto."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off colored diff. It is the same as --color=never."
      },
      {
        "type": "long",
        "key": "color-moved",
        "title": "--color-moved[=<mode>]",
        "description": "Moved lines of code are colored differently. The <mode> defaults to no if the option is not given and to zebra if the option with no mode is given. The mode must be one of:\n\nno\n\nMoved lines are not highlighted.\n\ndefault\n\nIs a synonym for zebra. This may change to a more sensible mode in the future.\n\nplain\n\nAny line that is added in one location and was removed in another location will be colored with color.diff.newMoved. Similarly color.diff.oldMoved will be used for removed lines that are added somewhere else in the diff. This mode picks up any moved line, but it is not very useful in a review to determine if a block of code was moved without permutation.\n\nblocks\n\nBlocks of moved text of at least 20 alphanumeric characters are detected greedily. The detected blocks are painted using either the color.diff.{old,new}Moved color. Adjacent blocks cannot be told apart.\n\nzebra\n\nBlocks of moved text are detected as in blocks mode. The blocks are painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative. The change between the two colors indicates that a new block was detected.\n\ndimmed-zebra\n\nSimilar to zebra, but additional dimming of uninteresting parts of moved code is performed. The bordering lines of two adjacent blocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."
      },
      {
        "type": "long",
        "key": "no-color-moved",
        "title": "--no-color-moved",
        "description": "Turn off move detection. This can be used to override configuration settings. It is the same as --color-moved=no."
      },
      {
        "type": "long",
        "key": "color-moved-ws",
        "title": "--color-moved-ws=<modes>",
        "description": "This configures how whitespace is ignored when performing the move detection for --color-moved. These modes can be given as a comma separated list:\n\nno\n\nDo not ignore whitespace when performing move detection.\n\nignore-space-at-eol\n\nIgnore changes in whitespace at EOL.\n\nignore-space-change\n\nIgnore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.\n\nignore-all-space\n\nIgnore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.\n\nallow-indentation-change\n\nInitially ignore any whitespace in the move detection, then group the moved code blocks only into a block if the change in whitespace is the same per line. This is incompatible with the other modes."
      },
      {
        "type": "long",
        "key": "no-color-moved-ws",
        "title": "--no-color-moved-ws",
        "description": "Do not ignore whitespace when performing move detection. This can be used to override configuration settings. It is the same as --color-moved-ws=no."
      },
      {
        "type": "long",
        "key": "word-diff",
        "title": "--word-diff[=<mode>]",
        "description": "Show a word diff, using the <mode> to delimit changed words. By default, words are delimited by whitespace; see --word-diff-regex below. The <mode> defaults to plain, and must be one of:\n\ncolor\n\nHighlight changed words using only colors. Implies --color.\n\nplain\n\nShow words as [-removed-] and {+added+}. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous.\n\nporcelain\n\nUse a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a +/-/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde ~ on a line of its own.\n\nnone\n\nDisable word diff again.\n\nNote that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled."
      },
      {
        "type": "long",
        "key": "word-diff-regex",
        "title": "--word-diff-regex=<regex>",
        "description": "Use <regex> to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies --word-diff unless it was already enabled.\n\nEvery non-overlapping match of the <regex> is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences. You may want to append |[^[:space:]] to your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is silently truncated(!) at the newline.\n\nFor example, --word-diff-regex=. will treat each character as a word and, correspondingly, show differences character by character.\n\nThe regex can also be set via a diff driver or configuration option, see gitattributes[5] or git-config[1]. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings."
      },
      {
        "type": "long",
        "key": "color-words",
        "title": "--color-words[=<regex>]",
        "description": "Equivalent to --word-diff=color plus (if a regex was specified) --word-diff-regex=<regex>."
      },
      {
        "type": "long",
        "key": "no-renames",
        "title": "--no-renames",
        "description": "Turn off rename detection, even when the configuration file gives the default to do so."
      },
      {
        "type": "long",
        "key": "rename-empty",
        "title": "--[no-]rename-empty",
        "description": "Whether to use empty blobs as rename source."
      },
      {
        "type": "long",
        "key": "check",
        "title": "--check",
        "description": "Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by core.whitespace configuration. By default, trailing whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code."
      },
      {
        "type": "long",
        "key": "ws-error-highlight",
        "title": "--ws-error-highlight=<kind>",
        "description": "Highlight whitespace errors in the context, old or new lines of the diff. Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context. When this option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored with color.diff.whitespace."
      },
      {
        "type": "long",
        "key": "full-index",
        "title": "--full-index",
        "description": "Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output."
      },
      {
        "type": "long",
        "key": "binary",
        "title": "--binary",
        "description": "In addition to --full-index, output a binary diff that can be applied with git-apply. Implies --patch."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. In diff-patch output format, --full-index takes higher precedence, i.e. if --full-index is specified, full blob names will be shown regardless of --abbrev. Non default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and create. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number m controls this aspect of the -B option (defaults to 60%). -B/70% specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).\n\nWhen used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number n controls this aspect of the -B option (defaults to 50%). -B20% specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file."
      },
      {
        "type": "long",
        "key": "break-rewrites",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and create. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number m controls this aspect of the -B option (defaults to 60%). -B/70% specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).\n\nWhen used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number n controls this aspect of the -B option (defaults to 50%). -B20% specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%."
      },
      {
        "type": "long",
        "key": "find-renames",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames. If n is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, -M90% means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a % sign, the number is to be read as a fraction, with a decimal point before it. I.e., -M5 becomes 0.5, and is thus the same as -M50%. Similarly, -M05 is the same as -M5%. To limit detection to exact renames, use -M100%. The default similarity index is 50%."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames. See also --find-copies-harder. If n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies-harder",
        "title": "--find-copies-harder",
        "description": "For performance reasons, by default, -C option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one -C option has the same effect."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part of a delete/create pair."
      },
      {
        "type": "long",
        "key": "irreversible-delete",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and /dev/null. The resulting patch is not meant to be applied with patch or git apply; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part of a delete/create pair."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l<num>",
        "description": "The -M and -C options involve some preliminary steps that can detect subsets of renames/copies cheaply, followed by an exhaustive fallback portion that compares all remaining unpaired destinations to all relevant sources. (For renames, only remaining unpaired sources are relevant; for copies, all original sources are relevant.) For N sources and destinations, this exhaustive check is O(N^2). This option prevents the exhaustive portion of rename/copy detection from running if the number of source/destination files involved exceeds the specified number. Defaults to diff.renameLimit. Note that a value of 0 is treated as unlimited."
      },
      {
        "type": "long",
        "key": "diff-filter",
        "title": "--diff-filter=[(A|C|D|M|R|T|U|X|B)… [*]]",
        "description": "Select only files that are Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (i.e. regular file, symlink, submodule, … ) changed (T), are Unmerged (U), are Unknown (X), or have had their pairing Broken (B). Any combination of the filter characters (including none) can be used. When * (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.\n\nAlso, these upper-case letters can be downcased to exclude. E.g. --diff-filter=ad excludes added and deleted paths.\n\nNote that not all diffs can feature all types. For instance, diffs from the index to the working tree can never have Added entries (because the set of paths included in the diff is limited by what is in the index). Similarly, copied and renamed entries cannot appear if detection for those types is disabled."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S<string>",
        "description": "Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.\n\nIt is useful when you’re looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into -S, and keep going until you get the very first version of the block.\n\nBinary files are searched as well."
      },
      {
        "type": "short",
        "key": "G",
        "title": "-G<regex>",
        "description": "Look for differences whose patch text contains added/removed lines that match <regex>.\n\nTo illustrate the difference between -S<regex> --pickaxe-regex and -G<regex>, consider a commit with the following diff in the same file:\n\n+    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0);\n\nWhile git log -G\"frotz\\(nitfol\" will show this commit, git log -S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of occurrences of that string did not change).\n\nUnless --text is supplied patches of binary files without a textconv filter will be ignored.\n\nSee the pickaxe entry in gitdiffcore[7] for more information."
      },
      {
        "type": "long",
        "key": "find-object",
        "title": "--find-object=<object-id>",
        "description": "Look for differences that change the number of occurrences of the specified object. Similar to -S, just the argument is different in that it doesn’t search for a specific string but for a specific object id.\n\nThe object can be a blob or a submodule commit. It implies the -t option in git-log to also find trees."
      },
      {
        "type": "long",
        "key": "pickaxe-all",
        "title": "--pickaxe-all",
        "description": "When -S or -G finds a change, show all the changes in that changeset, not just the files that contain the change in <string>."
      },
      {
        "type": "long",
        "key": "pickaxe-regex",
        "title": "--pickaxe-regex",
        "description": "Treat the <string> given to -S as an extended POSIX regular expression to match."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O<orderfile>",
        "description": "Control the order in which files appear in the output. This overrides the diff.orderFile configuration variable (see git-config[1]). To cancel diff.orderFile, use -O/dev/null.\n\nThe output order is determined by the order of glob patterns in <orderfile>. All files with pathnames that match the first pattern are output first, all files with pathnames that match the second pattern (but not the first) are output next, and so on. All files with pathnames that do not match any pattern are output last, as if there was an implicit match-all pattern at the end of the file. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order relative to each other is the normal order.\n\n<orderfile> is parsed as follows:\n\n * Blank lines are ignored, so they can be used as separators for readability.\n\n * Lines starting with a hash (\"#\") are ignored, so they can be used for comments. Add a backslash (\"\\\") to the beginning of the pattern if it starts with a hash.\n\n * Each other line contains a single pattern.\n\nPatterns have the same syntax and semantics as patterns used for fnmatch(3) without the FNM_PATHNAME flag, except a pathname also matches a pattern if removing any number of the final pathname components matches the pattern. For example, the pattern \"foo*bar\" matches \"fooasdfbar\" and \"foo/bar/baz/asdf\" but not \"foobarx\"."
      },
      {
        "type": "long",
        "key": "skip-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise."
      },
      {
        "type": "long",
        "key": "rotate-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These were invented primarily for use of the git difftool command, and may not be very useful otherwise."
      },
      {
        "type": "short",
        "key": "R",
        "title": "-R",
        "description": "Swap two inputs; that is, show differences from index or on-disk file to tree contents."
      },
      {
        "type": "long",
        "key": "relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative."
      },
      {
        "type": "long",
        "key": "no-relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config option and previous --relative."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "text",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "ignore-cr-at-eol",
        "title": "--ignore-cr-at-eol",
        "description": "Ignore carriage-return at the end of line when doing a comparison."
      },
      {
        "type": "long",
        "key": "ignore-space-at-eol",
        "title": "--ignore-space-at-eol",
        "description": "Ignore changes in whitespace at EOL."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none."
      },
      {
        "type": "long",
        "key": "ignore-all-space",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none."
      },
      {
        "type": "long",
        "key": "ignore-blank-lines",
        "title": "--ignore-blank-lines",
        "description": "Ignore changes whose lines are all blank."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>. This option may be specified more than once."
      },
      {
        "type": "long",
        "key": "ignore-matching-lines",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>. This option may be specified more than once."
      },
      {
        "type": "long",
        "key": "inter-hunk-context",
        "title": "--inter-hunk-context=<lines>",
        "description": "Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other. Defaults to diff.interHunkContext or 0 if the config option is unset."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "function-context",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change. The function names are determined in the same way as git diff works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "exit-code",
        "title": "--exit-code",
        "description": "Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Disable all output of the program. Implies --exit-code."
      },
      {
        "type": "long",
        "key": "ext-diff",
        "title": "--ext-diff",
        "description": "Allow an external diff helper to be executed. If you set an external diff driver with gitattributes[5], you need to use this option with git-log[1] and friends."
      },
      {
        "type": "long",
        "key": "no-ext-diff",
        "title": "--no-ext-diff",
        "description": "Disallow external diff drivers."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes[5] for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff[1] and git-log[1], but not for git-format-patch[1] or diff plumbing commands."
      },
      {
        "type": "long",
        "key": "no-textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes[5] for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff[1] and git-log[1], but not for git-format-patch[1] or diff plumbing commands."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules[=<when>]",
        "description": "Ignore changes to submodules in the diff generation. <when> can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the ignore option in git-config[1] or gitmodules[5]. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using \"all\" hides all changes to submodules."
      },
      {
        "type": "long",
        "key": "src-prefix",
        "title": "--src-prefix=<prefix>",
        "description": "Show the given source prefix instead of \"a/\"."
      },
      {
        "type": "long",
        "key": "dst-prefix",
        "title": "--dst-prefix=<prefix>",
        "description": "Show the given destination prefix instead of \"b/\"."
      },
      {
        "type": "long",
        "key": "no-prefix",
        "title": "--no-prefix",
        "description": "Do not show any source or destination prefix."
      },
      {
        "type": "long",
        "key": "line-prefix",
        "title": "--line-prefix=<prefix>",
        "description": "Prepend an additional prefix to every line of output."
      },
      {
        "type": "long",
        "key": "ita-invisible-in-index",
        "title": "--ita-invisible-in-index",
        "description": "By default entries added by \"git add -N\" appear as an existing empty file in \"git diff\" and a new file in \"git diff --cached\". This option makes the entry appear as a new file in \"git diff\" and non-existent in \"git diff --cached\". This option could be reverted with --ita-visible-in-index. Both options are experimental and could be removed in future."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r",
        "description": "recurse into sub-trees"
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t",
        "description": "show tree entry itself as well as subtrees. Implies -r."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root",
        "description": "When --root is specified the initial commit will be shown as a big creation event. This is equivalent to a diff against the NULL tree."
      },
      {
        "type": "long",
        "key": "merge-base",
        "title": "--merge-base",
        "description": "Instead of comparing the <tree-ish>s directly, use the merge base between the two <tree-ish>s as the \"before\" side. There must be two <tree-ish>s given and they must both be commits."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "When --stdin is specified, the command does not take <tree-ish> arguments from the command line. Instead, it reads lines containing either two <tree>, one <commit>, or a list of <commit> from its standard input. (Use a single space as separator.)\n\nWhen two trees are given, it compares the first tree with the second. When a single commit is given, it compares the commit with its parents. The remaining commits, when given, are used as if they are parents of the first commit.\n\nWhen comparing two trees, the ID of both trees (separated by a space and terminated by a newline) is printed before the difference. When comparing commits, the ID of the first (or only) commit, followed by a newline, is printed.\n\nThe following flags further affect the behavior when comparing commits (but not trees)."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m",
        "description": "By default, git diff-tree --stdin does not show differences for merge commits. With this flag, it shows differences to that commit from all of its parents. See also -c."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "This flag causes git diff-tree --stdin to also show the commit message before the differences."
      },
      {
        "type": "long",
        "key": "pretty",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format, where <format> can be one of oneline, short, medium, full, fuller, reference, email, raw, format:<string> and tformat:<string>. When <format> is none of the above, and has %placeholder in it, it acts as if --pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each format. When =<format> part is omitted, it defaults to medium.\n\nNote: you can specify the default pretty format in the repository configuration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format, where <format> can be one of oneline, short, medium, full, fuller, reference, email, raw, format:<string> and tformat:<string>. When <format> is none of the above, and has %placeholder in it, it acts as if --pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each format. When =<format> part is omitted, it defaults to medium.\n\nNote: you can specify the default pretty format in the repository configuration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "abbrev-commit",
        "title": "--abbrev-commit",
        "description": "Instead of showing the full 40-byte hexadecimal commit object name, show a prefix that names the object uniquely. \"--abbrev=<n>\" (which also modifies diff output, if it is displayed) option can be used to specify the minimum length of the prefix.\n\nThis should make \"--pretty=oneline\" a whole lot more readable for people using 80-column terminals."
      },
      {
        "type": "long",
        "key": "no-abbrev-commit",
        "title": "--no-abbrev-commit",
        "description": "Show the full 40-byte hexadecimal commit object name. This negates --abbrev-commit, either explicit or implied by other options such as \"--oneline\". It also overrides the log.abbrevCommit variable."
      },
      {
        "type": "long",
        "key": "oneline",
        "title": "--oneline",
        "description": "This is a shorthand for \"--pretty=oneline --abbrev-commit\" used together."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "Commit objects record the character encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in X and we are outputting in X, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output. Likewise, if iconv(3) fails to convert the commit, we will output the original object verbatim, along with a warning."
      },
      {
        "type": "long",
        "key": "expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <n>) in the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8, and --no-expand-tabs is a short-hand for --expand-tabs=0, which disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. medium, which is the default, full, and fuller)."
      },
      {
        "type": "long",
        "key": "no-expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <n>) in the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8, and --no-expand-tabs is a short-hand for --expand-tabs=0, which disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. medium, which is the default, full, and fuller)."
      },
      {
        "type": "long",
        "key": "notes",
        "title": "--notes[=<ref>]",
        "description": "Show the notes (see git-notes[1]) that annotate the commit, when showing the commit log message. This is the default for git log, git show and git whatchanged commands when there is no --pretty, --format, or --oneline option given on the command line.\n\nBy default, the notes shown are from the notes refs listed in the core.notesRef and notes.displayRef variables (or corresponding environment overrides). See git-config[1] for more details.\n\nWith an optional <ref> argument, use the ref to find the notes to display. The ref can specify the full refname when it begins with refs/notes/; when it begins with notes/, refs/ and otherwise refs/notes/ is prefixed to form a full name of the ref.\n\nMultiple --notes options can be combined to control which notes are being displayed. Examples: \"--notes=foo\" will show only notes from \"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from \"refs/notes/foo\" and from the default notes ref(s)."
      },
      {
        "type": "long",
        "key": "no-notes",
        "title": "--no-notes",
        "description": "Do not show notes. This negates the above --notes option, by resetting the list of notes refs from which notes are shown. Options are parsed in the order given on the command line, so e.g. \"--notes --notes=foo --no-notes --notes=bar\" will only show notes from \"refs/notes/bar\"."
      },
      {
        "type": "long",
        "key": "show-notes",
        "title": "--show-notes[=<ref>], --[no-]standard-notes",
        "description": "These options are deprecated. Use the above --notes/--no-notes options instead."
      },
      {
        "type": "long",
        "key": "standard-notes",
        "title": "--show-notes[=<ref>], --[no-]standard-notes",
        "description": "These options are deprecated. Use the above --notes/--no-notes options instead."
      },
      {
        "type": "long",
        "key": "show-signature",
        "title": "--show-signature",
        "description": "Check the validity of a signed commit object by passing the signature to gpg --verify and show the output."
      },
      {
        "type": "long",
        "key": "no-commit-id",
        "title": "--no-commit-id",
        "description": "git diff-tree outputs a line with the commit ID when applicable. This flag suppressed the commit ID output."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c",
        "description": "This flag changes the way a merge commit is displayed (which means it is useful only when the command is given one <tree-ish>, or --stdin). It shows the differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time (which is what the -m option does). Furthermore, it lists only files which were modified from all parents."
      },
      {
        "type": "long",
        "key": "cc",
        "title": "--cc",
        "description": "This flag changes the way a merge commit patch is displayed, in a similar way to the -c option. It implies the -c and -p options and further compresses the patch output by omitting uninteresting hunks whose the contents in the parents have only two variants and the merge result picks one of them without modification. When all hunks are uninteresting, the commit itself and the commit log message is not shown, just like in any other \"empty diff\" case."
      },
      {
        "type": "long",
        "key": "combined-all-paths",
        "title": "--combined-all-paths",
        "description": "This flag causes combined diffs (used for merge commits) to list the name of the file from all parents. It thus only has effect when -c or --cc are specified, and is likely only useful if filename changes are detected (i.e. when either rename or copy detection have been requested)."
      },
      {
        "type": "long",
        "key": "always",
        "title": "--always",
        "description": "Show the commit itself and the commit log message even if the diff itself is empty."
      }
    ]
  },
  {
    "name": "git for-each-ref",
    "options": [
      {
        "type": "long",
        "key": "count",
        "title": "--count=<count>",
        "description": "By default the command shows all refs that match <pattern>. This option makes it stop after showing that many refs."
      },
      {
        "type": "long",
        "key": "sort",
        "title": "--sort=<key>",
        "description": "A field name to sort on. Prefix - to sort in descending order of the value. When unspecified, refname is used. You may use the --sort=<key> option multiple times, in which case the last key becomes the primary key."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--format=<format>",
        "description": "A string that interpolates %(fieldname) from a ref being shown and the object it points at. If fieldname is prefixed with an asterisk (*) and the ref points at a tag object, use the value for the field in the object which the tag object refers to (instead of the field in the tag object). When unspecified, <format> defaults to %(objectname) SPC %(objecttype) TAB %(refname). It also interpolates %% to %, and %xx where xx are hex digits interpolates to character with hex code xx; for example %00 interpolates to \\0 (NUL), %09 to \\t (TAB) and %0a to \\n (LF)."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Respect any colors specified in the --format option. The <when> field must be one of always, never, or auto (if <when> is absent, behave as if always was given)."
      },
      {
        "type": "long",
        "key": "shell",
        "title": "--shell, --perl, --python, --tcl",
        "description": "If given, strings that substitute %(fieldname) placeholders are quoted as string literals suitable for the specified host language. This is meant to produce a scriptlet that can directly be `eval`ed."
      },
      {
        "type": "long",
        "key": "perl",
        "title": "--shell, --perl, --python, --tcl",
        "description": "If given, strings that substitute %(fieldname) placeholders are quoted as string literals suitable for the specified host language. This is meant to produce a scriptlet that can directly be `eval`ed."
      },
      {
        "type": "long",
        "key": "python",
        "title": "--shell, --perl, --python, --tcl",
        "description": "If given, strings that substitute %(fieldname) placeholders are quoted as string literals suitable for the specified host language. This is meant to produce a scriptlet that can directly be `eval`ed."
      },
      {
        "type": "long",
        "key": "tcl",
        "title": "--shell, --perl, --python, --tcl",
        "description": "If given, strings that substitute %(fieldname) placeholders are quoted as string literals suitable for the specified host language. This is meant to produce a scriptlet that can directly be `eval`ed."
      },
      {
        "type": "long",
        "key": "points-at",
        "title": "--points-at=<object>",
        "description": "Only list refs which points at the given object."
      },
      {
        "type": "long",
        "key": "merged",
        "title": "--merged[=<object>]",
        "description": "Only list refs whose tips are reachable from the specified commit (HEAD if not specified)."
      },
      {
        "type": "long",
        "key": "no-merged",
        "title": "--no-merged[=<object>]",
        "description": "Only list refs whose tips are not reachable from the specified commit (HEAD if not specified)."
      },
      {
        "type": "long",
        "key": "contains",
        "title": "--contains[=<object>]",
        "description": "Only list refs which contain the specified commit (HEAD if not specified)."
      },
      {
        "type": "long",
        "key": "no-contains",
        "title": "--no-contains[=<object>]",
        "description": "Only list refs which don’t contain the specified commit (HEAD if not specified)."
      },
      {
        "type": "long",
        "key": "ignore-case",
        "title": "--ignore-case",
        "description": "Sorting and filtering refs are case insensitive."
      }
    ]
  },
  {
    "name": "git for-each-repo",
    "options": [
      {
        "type": "long",
        "key": "config",
        "title": "--config=<config>",
        "description": "Use the given config variable as a multi-valued list storing absolute path names. Iterate on that list of paths to run the given arguments.\n\nThese config values are loaded from system, global, and local Git config, as available. If git for-each-repo is run in a directory that is not a Git repository, then only the system and global config is used."
      }
    ]
  },
  {
    "name": "git get-tar-commit-id",
    "options": []
  },
  {
    "name": "git ls-files",
    "options": [
      {
        "type": "short",
        "key": "c",
        "title": "-c, --cached",
        "description": "Show cached files in the output (default)"
      },
      {
        "type": "long",
        "key": "cached",
        "title": "-c, --cached",
        "description": "Show cached files in the output (default)"
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --deleted",
        "description": "Show deleted files in the output"
      },
      {
        "type": "long",
        "key": "deleted",
        "title": "-d, --deleted",
        "description": "Show deleted files in the output"
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --modified",
        "description": "Show modified files in the output"
      },
      {
        "type": "long",
        "key": "modified",
        "title": "-m, --modified",
        "description": "Show modified files in the output"
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o, --others",
        "description": "Show other (i.e. untracked) files in the output"
      },
      {
        "type": "long",
        "key": "others",
        "title": "-o, --others",
        "description": "Show other (i.e. untracked) files in the output"
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --ignored",
        "description": "Show only ignored files in the output. When showing files in the index, print only those matched by an exclude pattern. When showing \"other\" files, show only those matched by an exclude pattern. Standard ignore rules are not automatically activated, therefore at least one of the --exclude* options is required."
      },
      {
        "type": "long",
        "key": "ignored",
        "title": "-i, --ignored",
        "description": "Show only ignored files in the output. When showing files in the index, print only those matched by an exclude pattern. When showing \"other\" files, show only those matched by an exclude pattern. Standard ignore rules are not automatically activated, therefore at least one of the --exclude* options is required."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --stage",
        "description": "Show staged contents' mode bits, object name and stage number in the output."
      },
      {
        "type": "long",
        "key": "stage",
        "title": "-s, --stage",
        "description": "Show staged contents' mode bits, object name and stage number in the output."
      },
      {
        "type": "long",
        "key": "directory",
        "title": "--directory",
        "description": "If a whole directory is classified as \"other\", show just its name (with a trailing slash) and not its whole contents."
      },
      {
        "type": "long",
        "key": "no-empty-directory",
        "title": "--no-empty-directory",
        "description": "Do not list empty directories. Has no effect without --directory."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u, --unmerged",
        "description": "Show unmerged files in the output (forces --stage)"
      },
      {
        "type": "long",
        "key": "unmerged",
        "title": "-u, --unmerged",
        "description": "Show unmerged files in the output (forces --stage)"
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --killed",
        "description": "Show files on the filesystem that need to be removed due to file/directory conflicts for checkout-index to succeed."
      },
      {
        "type": "long",
        "key": "killed",
        "title": "-k, --killed",
        "description": "Show files on the filesystem that need to be removed due to file/directory conflicts for checkout-index to succeed."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "\\0 line termination on output and do not quote filenames. See OUTPUT below for more information."
      },
      {
        "type": "long",
        "key": "deduplicate",
        "title": "--deduplicate",
        "description": "When only filenames are shown, suppress duplicates that may come from having multiple stages during a merge, or giving --deleted and --modified option at the same time. When any of the -t, --unmerged, or --stage option is in use, this option has no effect."
      },
      {
        "type": "short",
        "key": "x",
        "title": "-x <pattern>, --exclude=<pattern>",
        "description": "Skip untracked files matching pattern. Note that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS below for more information."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "-x <pattern>, --exclude=<pattern>",
        "description": "Skip untracked files matching pattern. Note that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS below for more information."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X <file>, --exclude-from=<file>",
        "description": "Read exclude patterns from <file>; 1 per line."
      },
      {
        "type": "long",
        "key": "exclude-from",
        "title": "-X <file>, --exclude-from=<file>",
        "description": "Read exclude patterns from <file>; 1 per line."
      },
      {
        "type": "long",
        "key": "exclude-per-directory",
        "title": "--exclude-per-directory=<file>",
        "description": "Read additional exclude patterns that apply only to the directory and its subdirectories in <file>."
      },
      {
        "type": "long",
        "key": "exclude-standard",
        "title": "--exclude-standard",
        "description": "Add the standard Git exclusions: .git/info/exclude, .gitignore in each directory, and the user’s global exclusion file."
      },
      {
        "type": "long",
        "key": "error-unmatch",
        "title": "--error-unmatch",
        "description": "If any <file> does not appear in the index, treat this as an error (return 1)."
      },
      {
        "type": "long",
        "key": "with-tree",
        "title": "--with-tree=<tree-ish>",
        "description": "When using --error-unmatch to expand the user supplied <file> (i.e. path pattern) arguments to paths, pretend that paths which were removed in the index since the named <tree-ish> are still present. Using this option with -s or -u options does not make any sense."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t",
        "description": "This feature is semi-deprecated. For scripting purpose, git-status[1] --porcelain and git-diff-files[1] --name-status are almost always superior alternatives, and users should look at git-status[1] --short or git-diff[1] --name-status for more user-friendly alternatives.\n\nThis option identifies the file status with the following tags (followed by a space) at the start of each line:\n\nH\n\ncached\n\nS\n\nskip-worktree\n\nM\n\nunmerged\n\nR\n\nremoved/deleted\n\nC\n\nmodified/changed\n\nK\n\nto be killed\n\n?\n\nother"
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Similar to -t, but use lowercase letters for files that are marked as assume unchanged (see git-update-index[1])."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f",
        "description": "Similar to -t, but use lowercase letters for files that are marked as fsmonitor valid (see git-update-index[1])."
      },
      {
        "type": "long",
        "key": "full-name",
        "title": "--full-name",
        "description": "When run from a subdirectory, the command usually outputs paths relative to the current directory. This option forces paths to be output relative to the project top directory."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules",
        "description": "Recursively calls ls-files on each active submodule in the repository. Currently there is only support for the --cached mode."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object lines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. Non default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "long",
        "key": "debug",
        "title": "--debug",
        "description": "After each line that describes a file, add more data about its cache entry. This is intended to show as much information as possible for manual inspection; the exact format may change at any time."
      },
      {
        "type": "long",
        "key": "eol",
        "title": "--eol",
        "description": "Show <eolinfo> and <eolattr> of files. <eolinfo> is the file content identification used by Git when the \"text\" attribute is \"auto\" (or not set and core.autocrlf is not false). <eolinfo> is either \"-text\", \"none\", \"lf\", \"crlf\", \"mixed\" or \"\".\n\n\"\" means the file is not a regular file, it is not in the index or not accessible in the working tree.\n\n<eolattr> is the attribute that is used when checking out or committing, it is either \"\", \"-text\", \"text\", \"text=auto\", \"text eol=lf\", \"text eol=crlf\". Since Git 2.10 \"text=auto eol=lf\" and \"text=auto eol=crlf\" are supported.\n\nBoth the <eolinfo> in the index (\"i/<eolinfo>\") and in the working tree (\"w/<eolinfo>\") are shown for regular files, followed by the (\"attr/<eolattr>\")."
      }
    ]
  },
  {
    "name": "git ls-remote",
    "options": [
      {
        "type": "short",
        "key": "h",
        "title": "-h, --heads, -t, --tags",
        "description": "Limit to only refs/heads and refs/tags, respectively. These options are not mutually exclusive; when given both, references stored in refs/heads and refs/tags are displayed. Note that git ls-remote -h used without anything else on the command line gives help, consistent with other git subcommands."
      },
      {
        "type": "long",
        "key": "heads",
        "title": "-h, --heads, -t, --tags",
        "description": "Limit to only refs/heads and refs/tags, respectively. These options are not mutually exclusive; when given both, references stored in refs/heads and refs/tags are displayed. Note that git ls-remote -h used without anything else on the command line gives help, consistent with other git subcommands."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-h, --heads, -t, --tags",
        "description": "Limit to only refs/heads and refs/tags, respectively. These options are not mutually exclusive; when given both, references stored in refs/heads and refs/tags are displayed. Note that git ls-remote -h used without anything else on the command line gives help, consistent with other git subcommands."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "-h, --heads, -t, --tags",
        "description": "Limit to only refs/heads and refs/tags, respectively. These options are not mutually exclusive; when given both, references stored in refs/heads and refs/tags are displayed. Note that git ls-remote -h used without anything else on the command line gives help, consistent with other git subcommands."
      },
      {
        "type": "long",
        "key": "refs",
        "title": "--refs",
        "description": "Do not show peeled tags or pseudorefs like HEAD in the output."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Do not print remote URL to stderr."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Do not print remote URL to stderr."
      },
      {
        "type": "long",
        "key": "upload-pack",
        "title": "--upload-pack=<exec>",
        "description": "Specify the full path of git-upload-pack on the remote host. This allows listing references from repositories accessed via SSH and where the SSH daemon does not use the PATH configured by the user."
      },
      {
        "type": "long",
        "key": "exit-code",
        "title": "--exit-code",
        "description": "Exit with status \"2\" when no matching refs are found in the remote repository. Usually the command exits with status \"0\" to indicate it successfully talked with the remote repository, whether it found any matching refs."
      },
      {
        "type": "long",
        "key": "get-url",
        "title": "--get-url",
        "description": "Expand the URL of the given remote repository taking into account any \"url.<base>.insteadOf\" config setting (See git-config[1]) and exit without talking to the remote."
      },
      {
        "type": "long",
        "key": "symref",
        "title": "--symref",
        "description": "In addition to the object pointed by it, show the underlying ref pointed by it when showing a symbolic ref. Currently, upload-pack only shows the symref HEAD, so it will be the only one shown by ls-remote."
      },
      {
        "type": "long",
        "key": "sort",
        "title": "--sort=<key>",
        "description": "Sort based on the key given. Prefix - to sort in descending order of the value. Supports \"version:refname\" or \"v:refname\" (tag names are treated as versions). The \"version:refname\" sort order can also be affected by the \"versionsort.suffix\" configuration variable. See git-for-each-ref[1] for more sort options, but be aware keys like committerdate that require access to the objects themselves will not work for refs whose objects have not yet been fetched from the remote, and will give a missing object error."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <option>, --server-option=<option>",
        "description": "Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. When multiple --server-option=<option> are given, they are all sent to the other side in the order listed on the command line."
      },
      {
        "type": "long",
        "key": "server-option",
        "title": "-o <option>, --server-option=<option>",
        "description": "Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. When multiple --server-option=<option> are given, they are all sent to the other side in the order listed on the command line."
      }
    ]
  },
  {
    "name": "git ls-tree",
    "options": [
      {
        "type": "short",
        "key": "d",
        "title": "-d",
        "description": "Show only the named tree entry itself, not its children."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r",
        "description": "Recurse into sub-trees."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t",
        "description": "Show tree entries even when going to recurse them. Has no effect if -r was not passed. -d implies -t."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --long",
        "description": "Show object size of blob (file) entries."
      },
      {
        "type": "long",
        "key": "long",
        "title": "-l, --long",
        "description": "Show object size of blob (file) entries."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "\\0 line termination on output and do not quote filenames. See OUTPUT FORMAT below for more information."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only, --name-status",
        "description": "List only filenames (instead of the \"long\" output), one per line."
      },
      {
        "type": "long",
        "key": "name-status",
        "title": "--name-only, --name-status",
        "description": "List only filenames (instead of the \"long\" output), one per line."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object lines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. Non default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "long",
        "key": "full-name",
        "title": "--full-name",
        "description": "Instead of showing the path names relative to the current working directory, show the full path names."
      },
      {
        "type": "long",
        "key": "full-tree",
        "title": "--full-tree",
        "description": "Do not limit the listing to the current working directory. Implies --full-name."
      }
    ]
  },
  {
    "name": "git merge-base",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "Output all merge bases for the commits, instead of just one."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "Output all merge bases for the commits, instead of just one."
      }
    ]
  },
  {
    "name": "git name-rev",
    "options": [
      {
        "type": "long",
        "key": "tags",
        "title": "--tags",
        "description": "Do not use branch names, but only tags to name the commits"
      },
      {
        "type": "long",
        "key": "refs",
        "title": "--refs=<pattern>",
        "description": "Only use refs whose names match a given shell pattern. The pattern can be one of branch name, tag name or fully qualified ref name. If given multiple times, use refs whose names match any of the given shell patterns. Use --no-refs to clear any previous ref patterns given."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude=<pattern>",
        "description": "Do not use any ref whose name matches a given shell pattern. The pattern can be one of branch name, tag name or fully qualified ref name. If given multiple times, a ref will be excluded when it matches any of the given patterns. When used together with --refs, a ref will be used as a match only when it matches at least one --refs pattern and does not match any --exclude patterns. Use --no-exclude to clear the list of exclude patterns."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "List all commits reachable from all refs"
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Transform stdin by substituting all the 40-character SHA-1 hexes (say $hex) with \"$hex ($rev_name)\". When used with --name-only, substitute with \"$rev_name\", omitting $hex altogether. Intended for the scripter’s use."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only",
        "description": "Instead of printing both the SHA-1 and the name, print only the name. If given with --tags the usual tag prefix of \"tags/\" is also omitted from the name, matching the output of git-describe more closely."
      },
      {
        "type": "long",
        "key": "no-undefined",
        "title": "--no-undefined",
        "description": "Die with error code != 0 when a reference is undefined, instead of printing undefined."
      },
      {
        "type": "long",
        "key": "always",
        "title": "--always",
        "description": "Show uniquely abbreviated commit object as fallback."
      }
    ]
  },
  {
    "name": "git pack-redundant",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Processes all packs. Any filenames on the command line are ignored."
      },
      {
        "type": "long",
        "key": "alt-odb",
        "title": "--alt-odb",
        "description": "Don’t require objects present in packs from alternate object directories to be present in local packs."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Outputs some statistics to stderr. Has a small performance penalty."
      }
    ]
  },
  {
    "name": "git rev-list",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-<number>, -n <number>, --max-count=<number>",
        "description": "Limit the number of commits to output."
      },
      {
        "type": "long",
        "key": "max-count",
        "title": "-<number>, -n <number>, --max-count=<number>",
        "description": "Limit the number of commits to output."
      },
      {
        "type": "long",
        "key": "skip",
        "title": "--skip=<number>",
        "description": "Skip number commits before starting to show the commit output."
      },
      {
        "type": "long",
        "key": "since",
        "title": "--since=<date>, --after=<date>",
        "description": "Show commits more recent than a specific date."
      },
      {
        "type": "long",
        "key": "after",
        "title": "--since=<date>, --after=<date>",
        "description": "Show commits more recent than a specific date."
      },
      {
        "type": "long",
        "key": "until",
        "title": "--until=<date>, --before=<date>",
        "description": "Show commits older than a specific date."
      },
      {
        "type": "long",
        "key": "before",
        "title": "--until=<date>, --before=<date>",
        "description": "Show commits older than a specific date."
      },
      {
        "type": "long",
        "key": "max-age",
        "title": "--max-age=<timestamp>, --min-age=<timestamp>",
        "description": "Limit the commits output to specified time range."
      },
      {
        "type": "long",
        "key": "min-age",
        "title": "--max-age=<timestamp>, --min-age=<timestamp>",
        "description": "Limit the commits output to specified time range."
      },
      {
        "type": "long",
        "key": "author",
        "title": "--author=<pattern>, --committer=<pattern>",
        "description": "Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression). With more than one --author=<pattern>, commits whose author matches any of the given patterns are chosen (similarly for multiple --committer=<pattern>)."
      },
      {
        "type": "long",
        "key": "committer",
        "title": "--author=<pattern>, --committer=<pattern>",
        "description": "Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression). With more than one --author=<pattern>, commits whose author matches any of the given patterns are chosen (similarly for multiple --committer=<pattern>)."
      },
      {
        "type": "long",
        "key": "grep-reflog",
        "title": "--grep-reflog=<pattern>",
        "description": "Limit the commits output to ones with reflog entries that match the specified pattern (regular expression). With more than one --grep-reflog, commits whose reflog message matches any of the given patterns are chosen. It is an error to use this option unless --walk-reflogs is in use."
      },
      {
        "type": "long",
        "key": "grep",
        "title": "--grep=<pattern>",
        "description": "Limit the commits output to ones with log message that matches the specified pattern (regular expression). With more than one --grep=<pattern>, commits whose message matches any of the given patterns are chosen (but see --all-match)."
      },
      {
        "type": "long",
        "key": "all-match",
        "title": "--all-match",
        "description": "Limit the commits output to ones that match all given --grep, instead of ones that match at least one."
      },
      {
        "type": "long",
        "key": "invert-grep",
        "title": "--invert-grep",
        "description": "Limit the commits output to ones with log message that do not match the pattern specified with --grep=<pattern>."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --regexp-ignore-case",
        "description": "Match the regular expression limiting patterns without regard to letter case."
      },
      {
        "type": "long",
        "key": "regexp-ignore-case",
        "title": "-i, --regexp-ignore-case",
        "description": "Match the regular expression limiting patterns without regard to letter case."
      },
      {
        "type": "long",
        "key": "basic-regexp",
        "title": "--basic-regexp",
        "description": "Consider the limiting patterns to be basic regular expressions; this is the default."
      },
      {
        "type": "short",
        "key": "E",
        "title": "-E, --extended-regexp",
        "description": "Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions."
      },
      {
        "type": "long",
        "key": "extended-regexp",
        "title": "-E, --extended-regexp",
        "description": "Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F, --fixed-strings",
        "description": "Consider the limiting patterns to be fixed strings (don’t interpret pattern as a regular expression)."
      },
      {
        "type": "long",
        "key": "fixed-strings",
        "title": "-F, --fixed-strings",
        "description": "Consider the limiting patterns to be fixed strings (don’t interpret pattern as a regular expression)."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P, --perl-regexp",
        "description": "Consider the limiting patterns to be Perl-compatible regular expressions.\n\nSupport for these types of regular expressions is an optional compile-time dependency. If Git wasn’t compiled with support for them providing this option will cause it to die."
      },
      {
        "type": "long",
        "key": "perl-regexp",
        "title": "-P, --perl-regexp",
        "description": "Consider the limiting patterns to be Perl-compatible regular expressions.\n\nSupport for these types of regular expressions is an optional compile-time dependency. If Git wasn’t compiled with support for them providing this option will cause it to die."
      },
      {
        "type": "long",
        "key": "remove-empty",
        "title": "--remove-empty",
        "description": "Stop when a given path disappears from the tree."
      },
      {
        "type": "long",
        "key": "merges",
        "title": "--merges",
        "description": "Print only merge commits. This is exactly the same as --min-parents=2."
      },
      {
        "type": "long",
        "key": "no-merges",
        "title": "--no-merges",
        "description": "Do not print commits with more than one parent. This is exactly the same as --max-parents=1."
      },
      {
        "type": "long",
        "key": "min-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more parents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "max-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more parents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "no-min-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more parents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "no-max-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent commits. In particular, --max-parents=1 is the same as --no-merges, --min-parents=2 is the same as --merges. --max-parents=0 gives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit) again. Equivalent forms are --min-parents=0 (any commit has 0 or more parents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge commit. This option can give a better overview when viewing the evolution of a particular topic branch, because merges into a topic branch tend to be only about adjusting to updated upstream from time to time, and this option allows you to ignore the individual commits brought in to your history by such a merge."
      },
      {
        "type": "long",
        "key": "not",
        "title": "--not",
        "description": "Reverses the meaning of the ^ prefix (or lack thereof) for all following revision specifiers, up to the next --not."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Pretend as if all the refs in refs/, along with HEAD, are listed on the command line as <commit>."
      },
      {
        "type": "long",
        "key": "branches",
        "title": "--branches[=<pattern>]",
        "description": "Pretend as if all the refs in refs/heads are listed on the command line as <commit>. If <pattern> is given, limit branches to ones matching given shell glob. If pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--tags[=<pattern>]",
        "description": "Pretend as if all the refs in refs/tags are listed on the command line as <commit>. If <pattern> is given, limit tags to ones matching given shell glob. If pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "remotes",
        "title": "--remotes[=<pattern>]",
        "description": "Pretend as if all the refs in refs/remotes are listed on the command line as <commit>. If <pattern> is given, limit remote-tracking branches to ones matching given shell glob. If pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "glob",
        "title": "--glob=<glob-pattern>",
        "description": "Pretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit>. Leading refs/, is automatically prepended if missing. If pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude=<glob-pattern>",
        "description": "Do not include refs matching <glob-pattern> that the next --all, --branches, --tags, --remotes, or --glob would otherwise consider. Repetitions of this option accumulate exclusion patterns up to the next --all, --branches, --tags, --remotes, or --glob option (other options or arguments do not clear accumulated patterns).\n\nThe patterns given should not begin with refs/heads, refs/tags, or refs/remotes when applied to --branches, --tags, or --remotes, respectively, and they must begin with refs/ when applied to --glob or --all. If a trailing /* is intended, it must be given explicitly."
      },
      {
        "type": "long",
        "key": "reflog",
        "title": "--reflog",
        "description": "Pretend as if all objects mentioned by reflogs are listed on the command line as <commit>."
      },
      {
        "type": "long",
        "key": "alternate-refs",
        "title": "--alternate-refs",
        "description": "Pretend as if all objects mentioned as ref tips of alternate repositories were listed on the command line. An alternate repository is any repository whose object directory is specified in objects/info/alternates. The set of included objects may be modified by core.alternateRefsCommand, etc. See git-config[1]."
      },
      {
        "type": "long",
        "key": "single-worktree",
        "title": "--single-worktree",
        "description": "By default, all working trees will be examined by the following options when there are more than one (see git-worktree[1]): --all, --reflog and --indexed-objects. This option forces them to examine the current working tree only."
      },
      {
        "type": "long",
        "key": "ignore-missing",
        "title": "--ignore-missing",
        "description": "Upon seeing an invalid object name in the input, pretend as if the bad input was not given."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "In addition to the <commit> listed on the command line, read them from the standard input. If a -- separator is seen, stop reading commits and start reading paths to limit the result."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Don’t print anything to standard output. This form is primarily meant to allow the caller to test the exit status to see if a range of objects is fully connected (or not). It is faster than redirecting stdout to /dev/null as the output does not have to be formatted."
      },
      {
        "type": "long",
        "key": "disk-usage",
        "title": "--disk-usage",
        "description": "Suppress normal output; instead, print the sum of the bytes used for on-disk storage by the selected commits or objects. This is equivalent to piping the output into git cat-file --batch-check='%(objectsize:disk)', except that it runs much faster (especially with --use-bitmap-index). See the CAVEATS section in git-cat-file[1] for the limitations of what \"on-disk storage\" means."
      },
      {
        "type": "long",
        "key": "cherry-mark",
        "title": "--cherry-mark",
        "description": "Like --cherry-pick (see below) but mark equivalent commits with = rather than omitting them, and inequivalent ones with +."
      },
      {
        "type": "long",
        "key": "cherry-pick",
        "title": "--cherry-pick",
        "description": "Omit any commit that introduces the same change as another commit on the “other side” when the set of commits are limited with symmetric difference.\n\nFor example, if you have two branches, A and B, a usual way to list all commits on only one side of them is with --left-right (see the example below in the description of the --left-right option). However, it shows the commits that were cherry-picked from the other branch (for example, “3rd on b” may be cherry-picked from branch A). With this option, such pairs of commits are excluded from the output."
      },
      {
        "type": "long",
        "key": "left-only",
        "title": "--left-only, --right-only",
        "description": "List only commits on the respective side of a symmetric difference, i.e. only those which would be marked < resp. > by --left-right.\n\nFor example, --cherry-pick --right-only A...B omits those commits from B which are in A or are patch-equivalent to a commit in A. In other words, this lists the + commits from git cherry A B. More precisely, --cherry-pick --right-only --no-merges gives the exact list."
      },
      {
        "type": "long",
        "key": "right-only",
        "title": "--left-only, --right-only",
        "description": "List only commits on the respective side of a symmetric difference, i.e. only those which would be marked < resp. > by --left-right.\n\nFor example, --cherry-pick --right-only A...B omits those commits from B which are in A or are patch-equivalent to a commit in A. In other words, this lists the + commits from git cherry A B. More precisely, --cherry-pick --right-only --no-merges gives the exact list."
      },
      {
        "type": "long",
        "key": "cherry",
        "title": "--cherry",
        "description": "A synonym for --right-only --cherry-mark --no-merges; useful to limit the output to the commits on our side and mark those that have been applied to the other side of a forked history with git log --cherry upstream...mybranch, similar to git cherry upstream mybranch."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --walk-reflogs",
        "description": "Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones. When this option is used you cannot specify commits to exclude (that is, ^commit, commit1..commit2, and commit1...commit2 notations cannot be used).\n\nWith --pretty format other than oneline and reference (for obvious reasons), this causes the output to have two extra lines of information taken from the reflog. The reflog designator in the output may be shown as ref@{Nth} (where Nth is the reverse-chronological index in the reflog) or as ref@{timestamp} (with the timestamp for that entry), depending on a few rules:\n\n 1. If the starting point is specified as ref@{Nth}, show the index format.\n\n 2. If the starting point was specified as ref@{now}, show the timestamp format.\n\n 3. If neither was used, but --date was given on the command line, show the timestamp in the format requested by --date.\n\n 4. Otherwise, show the index format.\n\nUnder --pretty=oneline, the commit message is prefixed with this information on the same line. This option cannot be combined with --reverse. See also git-reflog[1].\n\nUnder --pretty=reference, this information will not be shown at all."
      },
      {
        "type": "long",
        "key": "walk-reflogs",
        "title": "-g, --walk-reflogs",
        "description": "Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones. When this option is used you cannot specify commits to exclude (that is, ^commit, commit1..commit2, and commit1...commit2 notations cannot be used).\n\nWith --pretty format other than oneline and reference (for obvious reasons), this causes the output to have two extra lines of information taken from the reflog. The reflog designator in the output may be shown as ref@{Nth} (where Nth is the reverse-chronological index in the reflog) or as ref@{timestamp} (with the timestamp for that entry), depending on a few rules:\n\n 1. If the starting point is specified as ref@{Nth}, show the index format.\n\n 2. If the starting point was specified as ref@{now}, show the timestamp format.\n\n 3. If neither was used, but --date was given on the command line, show the timestamp in the format requested by --date.\n\n 4. Otherwise, show the index format.\n\nUnder --pretty=oneline, the commit message is prefixed with this information on the same line. This option cannot be combined with --reverse. See also git-reflog[1].\n\nUnder --pretty=reference, this information will not be shown at all."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "--merge",
        "description": "After a failed merge, show refs that touch files having a conflict and don’t exist on all heads to merge."
      },
      {
        "type": "long",
        "key": "boundary",
        "title": "--boundary",
        "description": "Output excluded boundary commits. Boundary commits are prefixed with -."
      },
      {
        "type": "long",
        "key": "use-bitmap-index",
        "title": "--use-bitmap-index",
        "description": "Try to speed up the traversal using the pack bitmap index (if one is available). Note that when traversing with --objects, trees and blobs will not have their associated path printed."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress=<header>",
        "description": "Show progress reports on stderr as objects are considered. The <header> text will be printed with each progress update."
      },
      {
        "type": "long",
        "key": "simplify-by-decoration",
        "title": "--simplify-by-decoration",
        "description": "Commits that are referred by some branch or tag are selected."
      },
      {
        "type": "long",
        "key": "show-pulls",
        "title": "--show-pulls",
        "description": "Include all commits from the default mode, but also any merge commits that are not TREESAME to the first parent but are TREESAME to a later parent. This mode is helpful for showing the merge commits that \"first introduced\" a change to a branch."
      },
      {
        "type": "long",
        "key": "full-history",
        "title": "--full-history",
        "description": "Same as the default mode, but does not prune some history."
      },
      {
        "type": "long",
        "key": "dense",
        "title": "--dense",
        "description": "Only the selected commits are shown, plus some to have a meaningful history."
      },
      {
        "type": "long",
        "key": "sparse",
        "title": "--sparse",
        "description": "All commits in the simplified history are shown."
      },
      {
        "type": "long",
        "key": "simplify-merges",
        "title": "--simplify-merges",
        "description": "Additional option to --full-history to remove some needless merges from the resulting history, as there are no selected commits contributing to this merge."
      },
      {
        "type": "long",
        "key": "ancestry-path",
        "title": "--ancestry-path",
        "description": "When given a range of commits to display (e.g. commit1..commit2 or commit2 ^commit1), only display commits that exist directly on the ancestry chain between the commit1 and commit2, i.e. commits that are both descendants of commit1, and ancestors of commit2."
      },
      {
        "type": "long",
        "key": "bisect",
        "title": "--bisect",
        "description": "Limit output to the one commit object which is roughly halfway between included and excluded commits. Note that the bad bisection ref refs/bisect/bad is added to the included commits (if it exists) and the good bisection refs refs/bisect/good-* are added to the excluded commits (if they exist). Thus, supposing there are no refs in refs/bisect/, if\n\n\t$ git rev-list --bisect foo ^bar ^baz\n\noutputs midpoint, the output of the two commands\n\n\t$ git rev-list foo ^midpoint\n\t$ git rev-list midpoint ^bar ^baz\n\nwould be of roughly the same length. Finding the change which introduces a regression is thus reduced to a binary search: repeatedly generate and test new 'midpoint’s until the commit chain is of length one."
      },
      {
        "type": "long",
        "key": "bisect-vars",
        "title": "--bisect-vars",
        "description": "This calculates the same as --bisect, except that refs in refs/bisect/ are not used, and except that this outputs text ready to be eval’ed by the shell. These lines will assign the name of the midpoint revision to the variable bisect_rev, and the expected number of commits to be tested after bisect_rev is tested to bisect_nr, the expected number of commits to be tested if bisect_rev turns out to be good to bisect_good, the expected number of commits to be tested if bisect_rev turns out to be bad to bisect_bad, and the number of commits we are bisecting right now to bisect_all."
      },
      {
        "type": "long",
        "key": "bisect-all",
        "title": "--bisect-all",
        "description": "This outputs all the commit objects between the included and excluded commits, ordered by their distance to the included and excluded commits. Refs in refs/bisect/ are not used. The farthest from them is displayed first. (This is the only one displayed by --bisect.)\n\nThis is useful because it makes it easy to choose a good commit to test when you want to avoid to test some of them for some reason (they may not compile for example).\n\nThis option can be used along with --bisect-vars, in this case, after all the sorted commit objects, there will be the same text as if --bisect-vars had been used alone."
      },
      {
        "type": "long",
        "key": "date-order",
        "title": "--date-order",
        "description": "Show no parents before all of its children are shown, but otherwise show commits in the commit timestamp order."
      },
      {
        "type": "long",
        "key": "author-date-order",
        "title": "--author-date-order",
        "description": "Show no parents before all of its children are shown, but otherwise show commits in the author timestamp order."
      },
      {
        "type": "long",
        "key": "topo-order",
        "title": "--topo-order",
        "description": "Show no parents before all of its children are shown, and avoid showing commits on multiple lines of history intermixed.\n\nFor example, in a commit history like this:\n\n    ---1----2----4----7\n\t\\\t       \\\n\t 3----5----6----8---\n\nwhere the numbers denote the order of commit timestamps, git rev-list and friends with --date-order show the commits in the timestamp order: 8 7 6 5 4 3 2 1.\n\nWith --topo-order, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5 3 1); some older commits are shown before newer ones in order to avoid showing the commits from two parallel development track mixed together."
      },
      {
        "type": "long",
        "key": "reverse",
        "title": "--reverse",
        "description": "Output the commits chosen to be shown (see Commit Limiting section above) in reverse order. Cannot be combined with --walk-reflogs."
      },
      {
        "type": "long",
        "key": "objects",
        "title": "--objects",
        "description": "Print the object IDs of any object referenced by the listed commits. --objects foo ^bar thus means “send me all object IDs which I need to download if I have the commit object bar but not foo”."
      },
      {
        "type": "long",
        "key": "in-commit-order",
        "title": "--in-commit-order",
        "description": "Print tree and blob ids in order of the commits. The tree and blob ids are printed after they are first referenced by a commit."
      },
      {
        "type": "long",
        "key": "objects-edge",
        "title": "--objects-edge",
        "description": "Similar to --objects, but also print the IDs of excluded commits prefixed with a “-” character. This is used by git-pack-objects[1] to build a “thin” pack, which records objects in deltified form based on objects contained in these excluded commits to reduce network traffic."
      },
      {
        "type": "long",
        "key": "objects-edge-aggressive",
        "title": "--objects-edge-aggressive",
        "description": "Similar to --objects-edge, but it tries harder to find excluded commits at the cost of increased time. This is used instead of --objects-edge to build “thin” packs for shallow repositories."
      },
      {
        "type": "long",
        "key": "indexed-objects",
        "title": "--indexed-objects",
        "description": "Pretend as if all trees and blobs used by the index are listed on the command line. Note that you probably want to use --objects, too."
      },
      {
        "type": "long",
        "key": "unpacked",
        "title": "--unpacked",
        "description": "Only useful with --objects; print the object IDs that are not in packs."
      },
      {
        "type": "long",
        "key": "object-names",
        "title": "--object-names",
        "description": "Only useful with --objects; print the names of the object IDs that are found. This is the default behavior."
      },
      {
        "type": "long",
        "key": "no-object-names",
        "title": "--no-object-names",
        "description": "Only useful with --objects; does not print the names of the object IDs that are found. This inverts --object-names. This flag allows the output to be more easily parsed by commands such as git-cat-file[1]."
      },
      {
        "type": "long",
        "key": "filter",
        "title": "--filter=<filter-spec>",
        "description": "Only useful with one of the --objects*; omits objects (usually blobs) from the list of printed objects. The <filter-spec> may be one of the following:\n\nThe form --filter=blob:none omits all blobs.\n\nThe form --filter=blob:limit=<n>[kmg] omits blobs larger than n bytes or units. n may be zero. The suffixes k, m, and g can be used to name units in KiB, MiB, or GiB. For example, blob:limit=1k is the same as blob:limit=1024.\n\nThe form --filter=object:type=(tag|commit|tree|blob) omits all objects which are not of the requested type.\n\nThe form --filter=sparse:oid=<blob-ish> uses a sparse-checkout specification contained in the blob (or blob-expression) <blob-ish> to omit blobs that would not be required for a sparse checkout on the requested refs.\n\nThe form --filter=tree:<depth> omits all blobs and trees whose depth from the root tree is >= <depth> (minimum depth if an object is located at multiple depths in the commits traversed). <depth>=0 will not include any trees or blobs unless included explicitly in the command-line (or standard input when --stdin is used). <depth>=1 will include only the tree and blobs which are referenced directly by a commit reachable from <commit> or an explicitly-given object. <depth>=2 is like <depth>=1 while also including trees and blobs one more level removed from an explicitly-given commit or tree.\n\nNote that the form --filter=sparse:path=<path> that wants to read from an arbitrary path on the filesystem has been dropped for security reasons.\n\nMultiple --filter= flags can be specified to combine filters. Only objects which are accepted by every filter are included.\n\nThe form --filter=combine:<filter1>+<filter2>+… <filterN> can also be used to combined several filters, but this is harder than just repeating the --filter flag and is usually not necessary. Filters are joined by + and individual filters are %-encoded (i.e. URL-encoded). Besides the + and % characters, the following characters are reserved and also must be encoded: ~!@#$^&*()[]{}\\;\",<>?'` as well as all characters with ASCII code <= 0x20, which includes space and newline.\n\nOther arbitrary characters can also be encoded. For instance, combine:tree:3+blob:none and combine:tree%3A3+blob%3Anone are equivalent."
      },
      {
        "type": "long",
        "key": "no-filter",
        "title": "--no-filter",
        "description": "Turn off any previous --filter= argument."
      },
      {
        "type": "long",
        "key": "filter-provided-objects",
        "title": "--filter-provided-objects",
        "description": "Filter the list of explicitly provided objects, which would otherwise always be printed even if they did not match any of the filters. Only useful with --filter=."
      },
      {
        "type": "long",
        "key": "filter-print-omitted",
        "title": "--filter-print-omitted",
        "description": "Only useful with --filter=; prints a list of the objects omitted by the filter. Object IDs are prefixed with a “~” character."
      },
      {
        "type": "long",
        "key": "missing",
        "title": "--missing=<missing-action>",
        "description": "A debug option to help with future \"partial clone\" development. This option specifies how missing objects are handled.\n\nThe form --missing=error requests that rev-list stop with an error if a missing object is encountered. This is the default action.\n\nThe form --missing=allow-any will allow object traversal to continue if a missing object is encountered. Missing objects will silently be omitted from the results.\n\nThe form --missing=allow-promisor is like allow-any, but will only allow object traversal to continue for EXPECTED promisor missing objects. Unexpected missing objects will raise an error.\n\nThe form --missing=print is like allow-any, but will also print a list of the missing objects. Object IDs are prefixed with a “?” character."
      },
      {
        "type": "long",
        "key": "exclude-promisor-objects",
        "title": "--exclude-promisor-objects",
        "description": "(For internal use only.) Prefilter object traversal at promisor boundary. This is used with partial clone. This is stronger than --missing=allow-promisor because it limits the traversal, rather than just silencing errors about missing objects."
      },
      {
        "type": "long",
        "key": "no-walk",
        "title": "--no-walk[=(sorted|unsorted)]",
        "description": "Only show the given commits, but do not traverse their ancestors. This has no effect if a range is specified. If the argument unsorted is given, the commits are shown in the order they were given on the command line. Otherwise (if sorted or no argument was given), the commits are shown in reverse chronological order by commit time. Cannot be combined with --graph."
      },
      {
        "type": "long",
        "key": "do-walk",
        "title": "--do-walk",
        "description": "Overrides a previous --no-walk."
      },
      {
        "type": "long",
        "key": "pretty",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format, where <format> can be one of oneline, short, medium, full, fuller, reference, email, raw, format:<string> and tformat:<string>. When <format> is none of the above, and has %placeholder in it, it acts as if --pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each format. When =<format> part is omitted, it defaults to medium.\n\nNote: you can specify the default pretty format in the repository configuration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format, where <format> can be one of oneline, short, medium, full, fuller, reference, email, raw, format:<string> and tformat:<string>. When <format> is none of the above, and has %placeholder in it, it acts as if --pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each format. When =<format> part is omitted, it defaults to medium.\n\nNote: you can specify the default pretty format in the repository configuration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "abbrev-commit",
        "title": "--abbrev-commit",
        "description": "Instead of showing the full 40-byte hexadecimal commit object name, show a prefix that names the object uniquely. \"--abbrev=<n>\" (which also modifies diff output, if it is displayed) option can be used to specify the minimum length of the prefix.\n\nThis should make \"--pretty=oneline\" a whole lot more readable for people using 80-column terminals."
      },
      {
        "type": "long",
        "key": "no-abbrev-commit",
        "title": "--no-abbrev-commit",
        "description": "Show the full 40-byte hexadecimal commit object name. This negates --abbrev-commit, either explicit or implied by other options such as \"--oneline\". It also overrides the log.abbrevCommit variable."
      },
      {
        "type": "long",
        "key": "oneline",
        "title": "--oneline",
        "description": "This is a shorthand for \"--pretty=oneline --abbrev-commit\" used together."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "Commit objects record the character encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in X and we are outputting in X, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output. Likewise, if iconv(3) fails to convert the commit, we will output the original object verbatim, along with a warning."
      },
      {
        "type": "long",
        "key": "expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <n>) in the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8, and --no-expand-tabs is a short-hand for --expand-tabs=0, which disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. medium, which is the default, full, and fuller)."
      },
      {
        "type": "long",
        "key": "no-expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <n>) in the log message before showing it in the output. --expand-tabs is a short-hand for --expand-tabs=8, and --no-expand-tabs is a short-hand for --expand-tabs=0, which disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. medium, which is the default, full, and fuller)."
      },
      {
        "type": "long",
        "key": "show-signature",
        "title": "--show-signature",
        "description": "Check the validity of a signed commit object by passing the signature to gpg --verify and show the output."
      },
      {
        "type": "long",
        "key": "relative-date",
        "title": "--relative-date",
        "description": "Synonym for --date=relative."
      },
      {
        "type": "long",
        "key": "date",
        "title": "--date=<format>",
        "description": "Only takes effect for dates shown in human-readable format, such as when using --pretty. log.date config variable sets a default value for the log command’s --date option. By default, dates are shown in the original time zone (either committer’s or author’s). If -local is appended to the format (e.g., iso-local), the user’s local time zone is used instead.\n\n--date=relative shows dates relative to the current time, e.g. “2 hours ago”. The -local option has no effect for --date=relative.\n\n--date=local is an alias for --date=default-local.\n\n--date=iso (or --date=iso8601) shows timestamps in a ISO 8601-like format. The differences to the strict ISO 8601 format are:\n\n * a space instead of the T date/time delimiter\n\n * a space between time and time zone\n\n * no colon between hours and minutes of the time zone\n\n--date=iso-strict (or --date=iso8601-strict) shows timestamps in strict ISO 8601 format.\n\n--date=rfc (or --date=rfc2822) shows timestamps in RFC 2822 format, often found in email messages.\n\n--date=short shows only the date, but not the time, in YYYY-MM-DD format.\n\n--date=raw shows the date as seconds since the epoch (1970-01-01 00:00:00 UTC), followed by a space, and then the timezone as an offset from UTC (a + or - with four digits; the first two are hours, and the second two are minutes). I.e., as if the timestamp were formatted with strftime(\"%s %z\")). Note that the -local option does not affect the seconds-since-epoch value (which is always measured in UTC), but does switch the accompanying timezone value.\n\n--date=human shows the timezone if the timezone does not match the current time-zone, and doesn’t print the whole date if that matches (ie skip printing year for dates that are \"this year\", but also skip the whole date itself if it’s in the last few days and we can just say what weekday it was). For older dates the hour and minute is also omitted.\n\n--date=unix shows the date as a Unix epoch timestamp (seconds since 1970). As with --raw, this is always in UTC and therefore -local has no effect.\n\n--date=format:... feeds the format ... to your system strftime, except for %z and %Z, which are handled internally. Use --date=format:%c to show the date in your system locale’s preferred format. See the strftime manual for a complete list of format placeholders. When using -local, the correct syntax is --date=format-local:....\n\n--date=default is the default format, and is similar to --date=rfc2822, with a few exceptions:\n\n * there is no comma after the day-of-week\n\n * the time zone is omitted when the local time zone is used"
      },
      {
        "type": "long",
        "key": "header",
        "title": "--header",
        "description": "Print the contents of the commit in raw-format; each record is separated with a NUL character."
      },
      {
        "type": "long",
        "key": "no-commit-header",
        "title": "--no-commit-header",
        "description": "Suppress the header line containing \"commit\" and the object ID printed before the specified format. This has no effect on the built-in formats; only custom formats are affected."
      },
      {
        "type": "long",
        "key": "commit-header",
        "title": "--commit-header",
        "description": "Overrides a previous --no-commit-header."
      },
      {
        "type": "long",
        "key": "parents",
        "title": "--parents",
        "description": "Print also the parents of the commit (in the form \"commit parent… \"). Also enables parent rewriting, see History Simplification above."
      },
      {
        "type": "long",
        "key": "children",
        "title": "--children",
        "description": "Print also the children of the commit (in the form \"commit child… \"). Also enables parent rewriting, see History Simplification above."
      },
      {
        "type": "long",
        "key": "timestamp",
        "title": "--timestamp",
        "description": "Print the raw commit timestamp."
      },
      {
        "type": "long",
        "key": "left-right",
        "title": "--left-right",
        "description": "Mark which side of a symmetric difference a commit is reachable from. Commits from the left side are prefixed with < and those from the right with >. If combined with --boundary, those commits are prefixed with -.\n\nFor example, if you have this topology:\n\n\t     y---b---b  branch B\n\t    / \\ /\n\t   /   .\n\t  /   / \\\n\t o---x---a---a  branch A\n\nyou would get an output like this:\n\n\t$ git rev-list --left-right --boundary --pretty=oneline A...B\n\n\t>bbbbbbb... 3rd on b\n\t>bbbbbbb... 2nd on b\n\t<aaaaaaa... 3rd on a\n\t<aaaaaaa... 2nd on a\n\t-yyyyyyy... 1st on b\n\t-xxxxxxx... 1st on a"
      },
      {
        "type": "long",
        "key": "graph",
        "title": "--graph",
        "description": "Draw a text-based graphical representation of the commit history on the left hand side of the output. This may cause extra lines to be printed in between commits, in order for the graph history to be drawn properly. Cannot be combined with --no-walk.\n\nThis enables parent rewriting, see History Simplification above.\n\nThis implies the --topo-order option by default, but the --date-order option may also be specified."
      },
      {
        "type": "long",
        "key": "show-linear-break",
        "title": "--show-linear-break[=<barrier>]",
        "description": "When --graph is not used, all history branches are flattened which can make it hard to see that the two consecutive commits do not belong to a linear branch. This option puts a barrier in between them in that case. If <barrier> is specified, it is the string that will be shown instead of the default one."
      },
      {
        "type": "long",
        "key": "count",
        "title": "--count",
        "description": "Print a number stating how many commits would have been listed, and suppress all other output. When used together with --left-right, instead print the counts for left and right commits, separated by a tab. When used together with --cherry-mark, omit patch equivalent commits from these counts and print the count for equivalent commits separated by a tab."
      }
    ]
  },
  {
    "name": "git rev-parse",
    "options": [
      {
        "type": "long",
        "key": "parseopt",
        "title": "--parseopt",
        "description": "Use git rev-parse in option parsing mode (see PARSEOPT section below)."
      },
      {
        "type": "long",
        "key": "sq-quote",
        "title": "--sq-quote",
        "description": "Use git rev-parse in shell quoting mode (see SQ-QUOTE section below). In contrast to the --sq option below, this mode does only quoting. Nothing else is done to command input."
      },
      {
        "type": "long",
        "key": "keep-dashdash",
        "title": "--keep-dashdash",
        "description": "Only meaningful in --parseopt mode. Tells the option parser to echo out the first -- met instead of skipping it."
      },
      {
        "type": "long",
        "key": "stop-at-non-option",
        "title": "--stop-at-non-option",
        "description": "Only meaningful in --parseopt mode. Lets the option parser stop at the first non-option argument. This can be used to parse sub-commands that take options themselves."
      },
      {
        "type": "long",
        "key": "stuck-long",
        "title": "--stuck-long",
        "description": "Only meaningful in --parseopt mode. Output the options in their long form if available, and with their arguments stuck."
      },
      {
        "type": "long",
        "key": "revs-only",
        "title": "--revs-only",
        "description": "Do not output flags and parameters not meant for git rev-list command."
      },
      {
        "type": "long",
        "key": "no-revs",
        "title": "--no-revs",
        "description": "Do not output flags and parameters meant for git rev-list command."
      },
      {
        "type": "long",
        "key": "flags",
        "title": "--flags",
        "description": "Do not output non-flag parameters."
      },
      {
        "type": "long",
        "key": "no-flags",
        "title": "--no-flags",
        "description": "Do not output flag parameters."
      },
      {
        "type": "long",
        "key": "verify",
        "title": "--verify",
        "description": "Verify that exactly one parameter is provided, and that it can be turned into a raw 20-byte SHA-1 that can be used to access the object database. If so, emit it to the standard output; otherwise, error out.\n\nIf you want to make sure that the output actually names an object in your object database and/or can be used as a specific type of object you require, you can add the ^{type} peeling operator to the parameter. For example, git rev-parse \"$VAR^{commit}\" will make sure $VAR names an existing object that is a commit-ish (i.e. a commit, or an annotated tag that points at a commit). To make sure that $VAR names an existing object of any type, git rev-parse \"$VAR^{object}\" can be used.\n\nNote that if you are verifying a name from an untrusted source, it is wise to use --end-of-options so that the name argument is not mistaken for another option."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Only meaningful in --verify mode. Do not output an error message if the first argument is not a valid object name; instead exit with non-zero status silently. SHA-1s for valid object names are printed to stdout on success."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Only meaningful in --verify mode. Do not output an error message if the first argument is not a valid object name; instead exit with non-zero status silently. SHA-1s for valid object names are printed to stdout on success."
      },
      {
        "type": "long",
        "key": "sq",
        "title": "--sq",
        "description": "Usually the output is made one line per flag and parameter. This option makes output a single line, properly quoted for consumption by shell. Useful when you expect your parameter to contain whitespaces and newlines (e.g. when using pickaxe -S with git diff-*). In contrast to the --sq-quote option, the command input is still interpreted as usual."
      },
      {
        "type": "long",
        "key": "short",
        "title": "--short[=length]",
        "description": "Same as --verify but shortens the object name to a unique prefix with at least length characters. The minimum length is 4, the default is the effective value of the core.abbrev configuration variable (see git-config[1])."
      },
      {
        "type": "long",
        "key": "not",
        "title": "--not",
        "description": "When showing object names, prefix them with ^ and strip ^ prefix from the object names that already have one."
      },
      {
        "type": "long",
        "key": "abbrev-ref",
        "title": "--abbrev-ref[=(strict|loose)]",
        "description": "A non-ambiguous short name of the objects name. The option core.warnAmbiguousRefs is used to select the strict abbreviation mode."
      },
      {
        "type": "long",
        "key": "symbolic",
        "title": "--symbolic",
        "description": "Usually the object names are output in SHA-1 form (with possible ^ prefix); this option makes them output in a form as close to the original input as possible."
      },
      {
        "type": "long",
        "key": "symbolic-full-name",
        "title": "--symbolic-full-name",
        "description": "This is similar to --symbolic, but it omits input that are not refs (i.e. branch or tag names; or more explicitly disambiguating \"heads/master\" form, when you want to name the \"master\" branch when there is an unfortunately named tag \"master\"), and show them as full refnames (e.g. \"refs/heads/master\")."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Show all refs found in refs/."
      },
      {
        "type": "long",
        "key": "branches",
        "title": "--branches[=pattern], --tags[=pattern], --remotes[=pattern]",
        "description": "Show all branches, tags, or remote-tracking branches, respectively (i.e., refs found in refs/heads, refs/tags, or refs/remotes, respectively).\n\nIf a pattern is given, only refs matching the given shell glob are shown. If the pattern does not contain a globbing character (?, *, or [), it is turned into a prefix match by appending /*."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--branches[=pattern], --tags[=pattern], --remotes[=pattern]",
        "description": "Show all branches, tags, or remote-tracking branches, respectively (i.e., refs found in refs/heads, refs/tags, or refs/remotes, respectively).\n\nIf a pattern is given, only refs matching the given shell glob are shown. If the pattern does not contain a globbing character (?, *, or [), it is turned into a prefix match by appending /*."
      },
      {
        "type": "long",
        "key": "remotes",
        "title": "--branches[=pattern], --tags[=pattern], --remotes[=pattern]",
        "description": "Show all branches, tags, or remote-tracking branches, respectively (i.e., refs found in refs/heads, refs/tags, or refs/remotes, respectively).\n\nIf a pattern is given, only refs matching the given shell glob are shown. If the pattern does not contain a globbing character (?, *, or [), it is turned into a prefix match by appending /*."
      },
      {
        "type": "long",
        "key": "glob",
        "title": "--glob=pattern",
        "description": "Show all refs matching the shell glob pattern pattern. If the pattern does not start with refs/, this is automatically prepended. If the pattern does not contain a globbing character (?, *, or [), it is turned into a prefix match by appending /*."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude=<glob-pattern>",
        "description": "Do not include refs matching <glob-pattern> that the next --all, --branches, --tags, --remotes, or --glob would otherwise consider. Repetitions of this option accumulate exclusion patterns up to the next --all, --branches, --tags, --remotes, or --glob option (other options or arguments do not clear accumulated patterns).\n\nThe patterns given should not begin with refs/heads, refs/tags, or refs/remotes when applied to --branches, --tags, or --remotes, respectively, and they must begin with refs/ when applied to --glob or --all. If a trailing /* is intended, it must be given explicitly."
      },
      {
        "type": "long",
        "key": "disambiguate",
        "title": "--disambiguate=<prefix>",
        "description": "Show every object whose name begins with the given prefix. The <prefix> must be at least 4 hexadecimal digits long to avoid listing each and every object in the repository by mistake."
      },
      {
        "type": "long",
        "key": "local-env-vars",
        "title": "--local-env-vars",
        "description": "List the GIT_* environment variables that are local to the repository (e.g. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR). Only the names of the variables are listed, not their value, even if they are set."
      },
      {
        "type": "long",
        "key": "path-format",
        "title": "--path-format=(absolute|relative)",
        "description": "Controls the behavior of certain other options. If specified as absolute, the paths printed by those options will be absolute and canonical. If specified as relative, the paths will be relative to the current working directory if that is possible. The default is option specific.\n\nThis option may be specified multiple times and affects only the arguments that follow it on the command line, either to the end of the command line or the next instance of this option."
      },
      {
        "type": "long",
        "key": "git-dir",
        "title": "--git-dir",
        "description": "Show $GIT_DIR if defined. Otherwise show the path to the .git directory. The path shown, when relative, is relative to the current working directory.\n\nIf $GIT_DIR is not defined and the current directory is not detected to lie in a Git repository or work tree print a message to stderr and exit with nonzero status."
      },
      {
        "type": "long",
        "key": "git-common-dir",
        "title": "--git-common-dir",
        "description": "Show $GIT_COMMON_DIR if defined, else $GIT_DIR."
      },
      {
        "type": "long",
        "key": "show-toplevel",
        "title": "--show-toplevel",
        "description": "Show the (by default, absolute) path of the top-level directory of the working tree. If there is no working tree, report an error."
      },
      {
        "type": "long",
        "key": "show-superproject-working-tree",
        "title": "--show-superproject-working-tree",
        "description": "Show the absolute path of the root of the superproject’s working tree (if exists) that uses the current repository as its submodule. Outputs nothing if the current repository is not used as a submodule by any project."
      },
      {
        "type": "long",
        "key": "shared-index-path",
        "title": "--shared-index-path",
        "description": "Show the path to the shared index file in split index mode, or empty if not in split-index mode."
      },
      {
        "type": "long",
        "key": "absolute-git-dir",
        "title": "--absolute-git-dir",
        "description": "Like --git-dir, but its output is always the canonicalized absolute path."
      },
      {
        "type": "long",
        "key": "is-inside-git-dir",
        "title": "--is-inside-git-dir",
        "description": "When the current working directory is below the repository directory print \"true\", otherwise \"false\"."
      },
      {
        "type": "long",
        "key": "is-inside-work-tree",
        "title": "--is-inside-work-tree",
        "description": "When the current working directory is inside the work tree of the repository print \"true\", otherwise \"false\"."
      },
      {
        "type": "long",
        "key": "is-bare-repository",
        "title": "--is-bare-repository",
        "description": "When the repository is bare print \"true\", otherwise \"false\"."
      },
      {
        "type": "long",
        "key": "is-shallow-repository",
        "title": "--is-shallow-repository",
        "description": "When the repository is shallow print \"true\", otherwise \"false\"."
      },
      {
        "type": "long",
        "key": "show-cdup",
        "title": "--show-cdup",
        "description": "When the command is invoked from a subdirectory, show the path of the top-level directory relative to the current directory (typically a sequence of \"../\", or an empty string)."
      },
      {
        "type": "long",
        "key": "show-prefix",
        "title": "--show-prefix",
        "description": "When the command is invoked from a subdirectory, show the path of the current directory relative to the top-level directory."
      },
      {
        "type": "long",
        "key": "show-object-format",
        "title": "--show-object-format[=(storage|input|output)]",
        "description": "Show the object format (hash algorithm) used for the repository for storage inside the .git directory, input, or output. For input, multiple algorithms may be printed, space-separated. If not specified, the default is \"storage\"."
      },
      {
        "type": "long",
        "key": "since",
        "title": "--since=datestring, --after=datestring",
        "description": "Parse the date string, and output the corresponding --max-age= parameter for git rev-list."
      },
      {
        "type": "long",
        "key": "after",
        "title": "--since=datestring, --after=datestring",
        "description": "Parse the date string, and output the corresponding --max-age= parameter for git rev-list."
      },
      {
        "type": "long",
        "key": "until",
        "title": "--until=datestring, --before=datestring",
        "description": "Parse the date string, and output the corresponding --min-age= parameter for git rev-list."
      },
      {
        "type": "long",
        "key": "before",
        "title": "--until=datestring, --before=datestring",
        "description": "Parse the date string, and output the corresponding --min-age= parameter for git rev-list."
      }
    ]
  },
  {
    "name": "git show-index",
    "options": [
      {
        "type": "long",
        "key": "object-format",
        "title": "--object-format=<hash-algorithm>",
        "description": "Specify the given object format (hash algorithm) for the index file. The valid values are sha1 and (if enabled) sha256. The default is the algorithm for the current repository (set by extensions.objectFormat), or sha1 if no value is set or outside a repository..\n\nTHIS OPTION IS EXPERIMENTAL! SHA-256 support is experimental and still in an early stage. A SHA-256 repository will in general not be able to share work with \"regular\" SHA-1 repositories. It should be assumed that, e.g., Git internal file formats in relation to SHA-256 repositories may change in backwards-incompatible ways. Only use --object-format=sha256 for testing purposes."
      }
    ]
  },
  {
    "name": "git show-ref",
    "options": [
      {
        "type": "long",
        "key": "head",
        "title": "--head",
        "description": "Show the HEAD reference, even if it would normally be filtered out."
      },
      {
        "type": "long",
        "key": "heads",
        "title": "--heads, --tags",
        "description": "Limit to \"refs/heads\" and \"refs/tags\", respectively. These options are not mutually exclusive; when given both, references stored in \"refs/heads\" and \"refs/tags\" are displayed."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--heads, --tags",
        "description": "Limit to \"refs/heads\" and \"refs/tags\", respectively. These options are not mutually exclusive; when given both, references stored in \"refs/heads\" and \"refs/tags\" are displayed."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --dereference",
        "description": "Dereference tags into object IDs as well. They will be shown with \"^{}\" appended."
      },
      {
        "type": "long",
        "key": "dereference",
        "title": "-d, --dereference",
        "description": "Dereference tags into object IDs as well. They will be shown with \"^{}\" appended."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --hash[=<n>]",
        "description": "Only show the SHA-1 hash, not the reference name. When combined with --dereference the dereferenced tag will still be shown after the SHA-1."
      },
      {
        "type": "long",
        "key": "hash",
        "title": "-s, --hash[=<n>]",
        "description": "Only show the SHA-1 hash, not the reference name. When combined with --dereference the dereferenced tag will still be shown after the SHA-1."
      },
      {
        "type": "long",
        "key": "verify",
        "title": "--verify",
        "description": "Enable stricter reference checking by requiring an exact ref path. Aside from returning an error code of 1, it will also print an error message if --quiet was not specified."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Abbreviate the object name. When using --hash, you do not have to say --hash --abbrev; --hash=n would do."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Do not print any results to stdout. When combined with --verify this can be used to silently check if a reference exists."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Do not print any results to stdout. When combined with --verify this can be used to silently check if a reference exists."
      },
      {
        "type": "long",
        "key": "exclude-existing",
        "title": "--exclude-existing[=<pattern>]",
        "description": "Make git show-ref act as a filter that reads refs from stdin of the form \"^(?:<anything>\\s)?<refname>(?:\\^{})?$\" and performs the following actions on each: (1) strip \"^{}\" at the end of line if any; (2) ignore if pattern is provided and does not head-match refname; (3) warn if refname is not a well-formed refname and skip; (4) ignore if refname is a ref that exists in the local repository; (5) otherwise output the line."
      }
    ]
  },
  {
    "name": "git unpack-file",
    "options": []
  },
  {
    "name": "git var",
    "options": [
      {
        "type": "short",
        "key": "l",
        "title": "-l",
        "description": "Cause the logical variables to be listed. In addition, all the variables of the Git configuration file .git/config are listed as well. (However, the configuration variables listing functionality is deprecated in favor of git config -l.)"
      }
    ]
  },
  {
    "name": "git verify-pack",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "After verifying the pack, show list of objects contained in the pack and a histogram of delta chain length."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "After verifying the pack, show list of objects contained in the pack and a histogram of delta chain length."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --stat-only",
        "description": "Do not verify the pack contents; only show the histogram of delta chain length. With --verbose, list of objects is also shown."
      },
      {
        "type": "long",
        "key": "stat-only",
        "title": "-s, --stat-only",
        "description": "Do not verify the pack contents; only show the histogram of delta chain length. With --verbose, list of objects is also shown."
      }
    ]
  },
  {
    "name": "git daemon",
    "options": [
      {
        "type": "long",
        "key": "strict-paths",
        "title": "--strict-paths",
        "description": "Match paths exactly (i.e. don’t allow \"/foo/repo\" when the real path is \"/foo/repo.git\" or \"/foo/repo/.git\") and don’t do user-relative paths. git daemon will refuse to start when this option is enabled and no whitelist is specified."
      },
      {
        "type": "long",
        "key": "base-path",
        "title": "--base-path=<path>",
        "description": "Remap all the path requests as relative to the given path. This is sort of \"Git root\" - if you run git daemon with --base-path=/srv/git on example.com, then if you later try to pull git://example.com/hello.git, git daemon will interpret the path as /srv/git/hello.git."
      },
      {
        "type": "long",
        "key": "base-path-relaxed",
        "title": "--base-path-relaxed",
        "description": "If --base-path is enabled and repo lookup fails, with this option git daemon will attempt to lookup without prefixing the base path. This is useful for switching to --base-path usage, while still allowing the old paths."
      },
      {
        "type": "long",
        "key": "interpolated-path",
        "title": "--interpolated-path=<pathtemplate>",
        "description": "To support virtual hosting, an interpolated path template can be used to dynamically construct alternate paths. The template supports %H for the target hostname as supplied by the client but converted to all lowercase, %CH for the canonical hostname, %IP for the server’s IP address, %P for the port number, and %D for the absolute path of the named repository. After interpolation, the path is validated against the directory whitelist."
      },
      {
        "type": "long",
        "key": "export-all",
        "title": "--export-all",
        "description": "Allow pulling from all directories that look like Git repositories (have the objects and refs subdirectories), even if they do not have the git-daemon-export-ok file."
      },
      {
        "type": "long",
        "key": "inetd",
        "title": "--inetd",
        "description": "Have the server run as an inetd service. Implies --syslog (may be overridden with --log-destination=). Incompatible with --detach, --port, --listen, --user and --group options."
      },
      {
        "type": "long",
        "key": "listen",
        "title": "--listen=<host_or_ipaddr>",
        "description": "Listen on a specific IP address or hostname. IP addresses can be either an IPv4 address or an IPv6 address if supported. If IPv6 is not supported, then --listen=hostname is also not supported and --listen must be given an IPv4 address. Can be given more than once. Incompatible with --inetd option."
      },
      {
        "type": "long",
        "key": "port",
        "title": "--port=<n>",
        "description": "Listen on an alternative port. Incompatible with --inetd option."
      },
      {
        "type": "long",
        "key": "init-timeout",
        "title": "--init-timeout=<n>",
        "description": "Timeout (in seconds) between the moment the connection is established and the client request is received (typically a rather low value, since that should be basically immediate)."
      },
      {
        "type": "long",
        "key": "timeout",
        "title": "--timeout=<n>",
        "description": "Timeout (in seconds) for specific client sub-requests. This includes the time it takes for the server to process the sub-request and the time spent waiting for the next client’s request."
      },
      {
        "type": "long",
        "key": "max-connections",
        "title": "--max-connections=<n>",
        "description": "Maximum number of concurrent clients, defaults to 32. Set it to zero for no limit."
      },
      {
        "type": "long",
        "key": "syslog",
        "title": "--syslog",
        "description": "Short for --log-destination=syslog."
      },
      {
        "type": "long",
        "key": "log-destination",
        "title": "--log-destination=<destination>",
        "description": "Send log messages to the specified destination. Note that this option does not imply --verbose, thus by default only error conditions will be logged. The <destination> must be one of:\n\nstderr\n\nWrite to standard error. Note that if --detach is specified, the process disconnects from the real standard error, making this destination effectively equivalent to none.\n\nsyslog\n\nWrite to syslog, using the git-daemon identifier.\n\nnone\n\nDisable all logging.\n\nThe default destination is syslog if --inetd or --detach is specified, otherwise stderr."
      },
      {
        "type": "long",
        "key": "user-path",
        "title": "--user-path, --user-path=<path>",
        "description": "Allow ~user notation to be used in requests. When specified with no parameter, requests to git://host/~alice/foo is taken as a request to access foo repository in the home directory of user alice. If --user-path=path is specified, the same request is taken as a request to access path/foo repository in the home directory of user alice."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Log details about the incoming connections and requested files."
      },
      {
        "type": "long",
        "key": "reuseaddr",
        "title": "--reuseaddr",
        "description": "Use SO_REUSEADDR when binding the listening socket. This allows the server to restart without waiting for old connections to time out."
      },
      {
        "type": "long",
        "key": "detach",
        "title": "--detach",
        "description": "Detach from the shell. Implies --syslog."
      },
      {
        "type": "long",
        "key": "pid-file",
        "title": "--pid-file=<file>",
        "description": "Save the process id in file. Ignored when the daemon is run under --inetd."
      },
      {
        "type": "long",
        "key": "user",
        "title": "--user=<user>, --group=<group>",
        "description": "Change daemon’s uid and gid before entering the service loop. When only --user is given without --group, the primary group ID for the user is used. The values of the option are given to getpwnam(3) and getgrnam(3) and numeric IDs are not supported.\n\nGiving these options is an error when used with --inetd; use the facility of inet daemon to achieve the same before spawning git daemon if needed.\n\nLike many programs that switch user id, the daemon does not reset environment variables such as $HOME when it runs git programs, e.g. upload-pack and receive-pack. When using this option, you may also want to set and export HOME to point at the home directory of <user> before starting the daemon, and make sure any Git configuration files in that directory are readable by <user>."
      },
      {
        "type": "long",
        "key": "group",
        "title": "--user=<user>, --group=<group>",
        "description": "Change daemon’s uid and gid before entering the service loop. When only --user is given without --group, the primary group ID for the user is used. The values of the option are given to getpwnam(3) and getgrnam(3) and numeric IDs are not supported.\n\nGiving these options is an error when used with --inetd; use the facility of inet daemon to achieve the same before spawning git daemon if needed.\n\nLike many programs that switch user id, the daemon does not reset environment variables such as $HOME when it runs git programs, e.g. upload-pack and receive-pack. When using this option, you may also want to set and export HOME to point at the home directory of <user> before starting the daemon, and make sure any Git configuration files in that directory are readable by <user>."
      },
      {
        "type": "long",
        "key": "enable",
        "title": "--enable=<service>, --disable=<service>",
        "description": "Enable/disable the service site-wide per default. Note that a service disabled site-wide can still be enabled per repository if it is marked overridable and the repository enables the service with a configuration item."
      },
      {
        "type": "long",
        "key": "disable",
        "title": "--enable=<service>, --disable=<service>",
        "description": "Enable/disable the service site-wide per default. Note that a service disabled site-wide can still be enabled per repository if it is marked overridable and the repository enables the service with a configuration item."
      },
      {
        "type": "long",
        "key": "allow-override",
        "title": "--allow-override=<service>, --forbid-override=<service>",
        "description": "Allow/forbid overriding the site-wide default with per repository configuration. By default, all the services may be overridden."
      },
      {
        "type": "long",
        "key": "forbid-override",
        "title": "--allow-override=<service>, --forbid-override=<service>",
        "description": "Allow/forbid overriding the site-wide default with per repository configuration. By default, all the services may be overridden."
      },
      {
        "type": "long",
        "key": "informative-errors",
        "title": "--[no-]informative-errors",
        "description": "When informative errors are turned on, git-daemon will report more verbose errors to the client, differentiating conditions like \"no such repository\" from \"repository not exported\". This is more convenient for clients, but may leak information about the existence of unexported repositories. When informative errors are not enabled, all errors report \"access denied\" to the client. The default is --no-informative-errors."
      },
      {
        "type": "long",
        "key": "access-hook",
        "title": "--access-hook=<path>",
        "description": "Every time a client connects, first run an external command specified by the <path> with service name (e.g. \"upload-pack\"), path to the repository, hostname (%H), canonical hostname (%CH), IP address (%IP), and TCP port (%P) as its command-line arguments. The external command can decide to decline the service by exiting with a non-zero status (or to allow it by exiting with a zero status). It can also look at the $REMOTE_ADDR and $REMOTE_PORT environment variables to learn about the requestor when making this decision.\n\nThe external command can optionally write a single line to its standard output to be sent to the requestor as an error message when it declines the service."
      }
    ]
  },
  {
    "name": "git fetch-pack",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Fetch all remote refs."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Take the list of refs from stdin, one per line. If there are refs specified on the command line in addition to this option, then the refs from stdin are processed after those on the command line.\n\nIf --stateless-rpc is specified together with this option then the list of refs must be in packet format (pkt-line). Each ref must be in a separate packet, and the list must end with a flush packet."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Pass -q flag to git unpack-objects; this makes the cloning process less verbose."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Pass -q flag to git unpack-objects; this makes the cloning process less verbose."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep",
        "description": "Do not invoke git unpack-objects on received data, but create a single packfile out of it instead, and store it in the object database. If provided twice then the pack is locked against repacking."
      },
      {
        "type": "long",
        "key": "keep",
        "title": "-k, --keep",
        "description": "Do not invoke git unpack-objects on received data, but create a single packfile out of it instead, and store it in the object database. If provided twice then the pack is locked against repacking."
      },
      {
        "type": "long",
        "key": "thin",
        "title": "--thin",
        "description": "Fetch a \"thin\" pack, which records objects in deltified form based on objects not included in the pack to reduce network traffic."
      },
      {
        "type": "long",
        "key": "include-tag",
        "title": "--include-tag",
        "description": "If the remote side supports it, annotated tags objects will be downloaded on the same connection as the other objects if the object the tag references is downloaded. The caller must otherwise determine the tags this option made available."
      },
      {
        "type": "long",
        "key": "upload-pack",
        "title": "--upload-pack=<git-upload-pack>",
        "description": "Use this to specify the path to git-upload-pack on the remote side, if is not found on your $PATH. Installations of sshd ignores the user’s environment setup scripts for login shells (e.g. .bash_profile) and your privately installed git may not be found on the system default $PATH. Another workaround suggested is to set up your $PATH in \".bashrc\", but this flag is for people who do not want to pay the overhead for non-interactive shells by having a lean .bashrc file (they set most of the things up in .bash_profile)."
      },
      {
        "type": "long",
        "key": "exec",
        "title": "--exec=<git-upload-pack>",
        "description": "Same as --upload-pack=<git-upload-pack>."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--depth=<n>",
        "description": "Limit fetching to ancestor-chains not longer than n. git-upload-pack treats the special depth 2147483647 as infinite even if there is an ancestor-chain that long."
      },
      {
        "type": "long",
        "key": "shallow-since",
        "title": "--shallow-since=<date>",
        "description": "Deepen or shorten the history of a shallow repository to include all reachable commits after <date>."
      },
      {
        "type": "long",
        "key": "shallow-exclude",
        "title": "--shallow-exclude=<revision>",
        "description": "Deepen or shorten the history of a shallow repository to exclude commits reachable from a specified remote branch or tag. This option can be specified multiple times."
      },
      {
        "type": "long",
        "key": "deepen-relative",
        "title": "--deepen-relative",
        "description": "Argument --depth specifies the number of commits from the current shallow boundary instead of from the tip of each remote branch history."
      },
      {
        "type": "long",
        "key": "no-progress",
        "title": "--no-progress",
        "description": "Do not show the progress."
      },
      {
        "type": "long",
        "key": "check-self-contained-and-connected",
        "title": "--check-self-contained-and-connected",
        "description": "Output \"connectivity-ok\" if the received pack is self-contained and connected."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Run verbosely."
      }
    ]
  },
  {
    "name": "git http-backend",
    "options": []
  },
  {
    "name": "git send-pack",
    "options": [
      {
        "type": "long",
        "key": "receive-pack",
        "title": "--receive-pack=<git-receive-pack>",
        "description": "Path to the git-receive-pack program on the remote end. Sometimes useful when pushing to a remote repository over ssh, and you do not have the program in a directory on the default $PATH."
      },
      {
        "type": "long",
        "key": "exec",
        "title": "--exec=<git-receive-pack>",
        "description": "Same as --receive-pack=<git-receive-pack>."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Instead of explicitly specifying which refs to update, update all heads that locally exist."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Take the list of refs from stdin, one per line. If there are refs specified on the command line in addition to this option, then the refs from stdin are processed after those on the command line.\n\nIf --stateless-rpc is specified together with this option then the list of refs must be in packet format (pkt-line). Each ref must be in a separate packet, and the list must end with a flush packet."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Do everything except actually send the updates."
      },
      {
        "type": "long",
        "key": "force",
        "title": "--force",
        "description": "Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the check. What this means is that the remote repository can lose commits; use it with care."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Run verbosely."
      },
      {
        "type": "long",
        "key": "thin",
        "title": "--thin",
        "description": "Send a \"thin\" pack, which records objects in deltified form based on objects not included in the pack to reduce network traffic."
      },
      {
        "type": "long",
        "key": "atomic",
        "title": "--atomic",
        "description": "Use an atomic transaction for updating the refs. If any of the refs fails to update then the entire push will fail without changing any refs."
      },
      {
        "type": "long",
        "key": "signed",
        "title": "--[no-]signed, --signed=(true|false|if-asked)",
        "description": "GPG-sign the push request to update refs on the receiving side, to allow it to be checked by the hooks and/or be logged. If false or --no-signed, no signing will be attempted. If true or --signed, the push will fail if the server does not support signed pushes. If set to if-asked, sign if and only if the server supports signed pushes. The push will also fail if the actual call to gpg --sign fails. See git-receive-pack[1] for the details on the receiving end."
      },
      {
        "type": "long",
        "key": "push-option",
        "title": "--push-option=<string>",
        "description": "Pass the specified string as a push option for consumption by hooks on the server side. If the server doesn’t support push options, error out. See git-push[1] and githooks[5] for details."
      }
    ]
  },
  {
    "name": "git update-server-info",
    "options": []
  },
  {
    "name": "git http-fetch",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, -c, -t",
        "description": "These options are ignored for historical reasons."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-a, -c, -t",
        "description": "These options are ignored for historical reasons."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-a, -c, -t",
        "description": "These options are ignored for historical reasons."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Report what is downloaded."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w <filename>",
        "description": "Writes the commit-id into the filename under $GIT_DIR/refs/<filename> on the local end after the transfer is complete."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Instead of a commit id on the command line (which is not expected in this case), git http-fetch expects lines on stdin in the format\n\n<commit-id>['\\t'<filename-as-in--w>]"
      },
      {
        "type": "long",
        "key": "packfile",
        "title": "--packfile=<hash>",
        "description": "For internal use only. Instead of a commit id on the command line (which is not expected in this case), git http-fetch fetches the packfile directly at the given URL and uses index-pack to generate corresponding .idx and .keep files. The hash is used to determine the name of the temporary file and is arbitrary. The output of index-pack is printed to stdout. Requires --index-pack-args."
      },
      {
        "type": "long",
        "key": "index-pack-args",
        "title": "--index-pack-args=<args>",
        "description": "For internal use only. The command to run on the contents of the downloaded pack. Arguments are URL-encoded separated by spaces."
      },
      {
        "type": "long",
        "key": "recover",
        "title": "--recover",
        "description": "Verify that everything reachable from target is fetched. Used after an earlier fetch is interrupted."
      }
    ]
  },
  {
    "name": "git http-push",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Do not assume that the remote repository is complete in its current state, and verify all objects in the entire local ref’s history exist in the remote repository."
      },
      {
        "type": "long",
        "key": "force",
        "title": "--force",
        "description": "Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the check. What this means is that the remote repository can lose commits; use it with care."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Do everything except actually send the updates."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Report the list of objects being walked locally and the list of objects successfully sent to the remote repository."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, -D",
        "description": "Remove <ref> from remote repository. The specified branch cannot be the remote HEAD. If -d is specified the following other conditions must also be met:\n\n * Remote HEAD must resolve to an object that exists locally\n\n * Specified branch resolves to an object that exists locally\n\n * Specified branch is an ancestor of the remote HEAD"
      },
      {
        "type": "short",
        "key": "D",
        "title": "-d, -D",
        "description": "Remove <ref> from remote repository. The specified branch cannot be the remote HEAD. If -d is specified the following other conditions must also be met:\n\n * Remote HEAD must resolve to an object that exists locally\n\n * Specified branch resolves to an object that exists locally\n\n * Specified branch is an ancestor of the remote HEAD"
      }
    ]
  },
  {
    "name": "git receive-pack",
    "options": []
  },
  {
    "name": "git shell",
    "options": []
  },
  {
    "name": "git upload-archive",
    "options": []
  },
  {
    "name": "git upload-pack",
    "options": [
      {
        "type": "long",
        "key": "strict",
        "title": "--[no-]strict",
        "description": "Do not try <directory>/.git/ if <directory> is no Git directory."
      },
      {
        "type": "long",
        "key": "timeout",
        "title": "--timeout=<n>",
        "description": "Interrupt transfer after <n> seconds of inactivity."
      },
      {
        "type": "long",
        "key": "stateless-rpc",
        "title": "--stateless-rpc",
        "description": "Perform only a single read-write cycle with stdin and stdout. This fits with the HTTP POST request processing model where a program may read the request, write a response, and must exit."
      },
      {
        "type": "long",
        "key": "advertise-refs",
        "title": "--advertise-refs",
        "description": "Only the initial ref advertisement is output, and the program exits immediately. This fits with the HTTP GET request model, where no request content is received but a response must be produced."
      }
    ]
  },
  {
    "name": "git check-attr",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "List all attributes that are associated with the specified paths. If this option is used, then unspecified attributes will not be included in the output."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "List all attributes that are associated with the specified paths. If this option is used, then unspecified attributes will not be included in the output."
      },
      {
        "type": "long",
        "key": "cached",
        "title": "--cached",
        "description": "Consider .gitattributes in the index only, ignoring the working tree."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Read pathnames from the standard input, one per line, instead of from the command-line."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "The output format is modified to be machine-parsable. If --stdin is also given, input paths are separated with a NUL character instead of a linefeed character."
      }
    ]
  },
  {
    "name": "git check-ignore",
    "options": [
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Don’t output anything, just set exit status. This is only valid with a single pathname."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Don’t output anything, just set exit status. This is only valid with a single pathname."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Instead of printing the paths that are excluded, for each path that matches an exclude pattern, print the exclude pattern together with the path. (Matching an exclude pattern usually means the path is excluded, but if the pattern begins with ! then it is a negated pattern and matching it means the path is NOT excluded.)\n\nFor precedence rules within and between exclude sources, see gitignore[5]."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Instead of printing the paths that are excluded, for each path that matches an exclude pattern, print the exclude pattern together with the path. (Matching an exclude pattern usually means the path is excluded, but if the pattern begins with ! then it is a negated pattern and matching it means the path is NOT excluded.)\n\nFor precedence rules within and between exclude sources, see gitignore[5]."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Read pathnames from the standard input, one per line, instead of from the command-line."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "The output format is modified to be machine-parsable (see below). If --stdin is also given, input paths are separated with a NUL character instead of a linefeed character."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --non-matching",
        "description": "Show given paths which don’t match any pattern. This only makes sense when --verbose is enabled, otherwise it would not be possible to distinguish between paths which match a pattern and those which don’t."
      },
      {
        "type": "long",
        "key": "non-matching",
        "title": "-n, --non-matching",
        "description": "Show given paths which don’t match any pattern. This only makes sense when --verbose is enabled, otherwise it would not be possible to distinguish between paths which match a pattern and those which don’t."
      },
      {
        "type": "long",
        "key": "no-index",
        "title": "--no-index",
        "description": "Don’t look in the index when undertaking the checks. This can be used to debug why a path became tracked by e.g. git add . and was not ignored by the rules as expected by the user or when developing patterns including negation to match a path previously added with git add -f."
      }
    ]
  },
  {
    "name": "git check-mailmap",
    "options": [
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Read contacts, one per line, from the standard input after exhausting contacts provided on the command-line."
      }
    ]
  },
  {
    "name": "git check-ref-format",
    "options": [
      {
        "type": "long",
        "key": "allow-onelevel",
        "title": "--[no-]allow-onelevel",
        "description": "Controls whether one-level refnames are accepted (i.e., refnames that do not contain multiple /-separated components). The default is --no-allow-onelevel."
      },
      {
        "type": "long",
        "key": "refspec-pattern",
        "title": "--refspec-pattern",
        "description": "Interpret <refname> as a reference name pattern for a refspec (as used with remote repositories). If this option is enabled, <refname> is allowed to contain a single * in the refspec (e.g., foo/bar*/baz or foo/bar*baz/ but not foo/bar*/baz*)."
      },
      {
        "type": "long",
        "key": "normalize",
        "title": "--normalize",
        "description": "Normalize refname by removing any leading slash (/) characters and collapsing runs of adjacent slashes between name components into a single slash. If the normalized refname is valid then print it to standard output and exit with a status of 0, otherwise exit with a non-zero status. (--print is a deprecated way to spell --normalize.)"
      }
    ]
  },
  {
    "name": "git column",
    "options": [
      {
        "type": "long",
        "key": "command",
        "title": "--command=<name>",
        "description": "Look up layout mode using configuration variable column.<name> and column.ui."
      },
      {
        "type": "long",
        "key": "mode",
        "title": "--mode=<mode>",
        "description": "Specify layout mode. See configuration variable column.ui for option syntax in git-config[1]."
      },
      {
        "type": "long",
        "key": "raw-mode",
        "title": "--raw-mode=<n>",
        "description": "Same as --mode but take mode encoded as a number. This is mainly used by other commands that have already parsed layout mode."
      },
      {
        "type": "long",
        "key": "width",
        "title": "--width=<width>",
        "description": "Specify the terminal width. By default git column will detect the terminal width, or fall back to 80 if it is unable to do so."
      },
      {
        "type": "long",
        "key": "indent",
        "title": "--indent=<string>",
        "description": "String to be printed at the beginning of each line."
      },
      {
        "type": "long",
        "key": "nl",
        "title": "--nl=<string>",
        "description": "String to be printed at the end of each line, including newline character."
      },
      {
        "type": "long",
        "key": "padding",
        "title": "--padding=<N>",
        "description": "The number of spaces between columns. One space by default."
      }
    ]
  },
  {
    "name": "git credential",
    "options": []
  },
  {
    "name": "git credential-cache",
    "options": []
  },
  {
    "name": "git credential-store",
    "options": [
      {
        "type": "long",
        "key": "file",
        "title": "--file=<path>",
        "description": "Use <path> to lookup and store credentials. The file will have its filesystem permissions set to prevent other users on the system from reading it, but will not be encrypted or otherwise protected. If not specified, credentials will be searched for from ~/.git-credentials and $XDG_CONFIG_HOME/git/credentials, and credentials will be written to ~/.git-credentials if it exists, or $XDG_CONFIG_HOME/git/credentials if it exists and the former does not. See also FILES."
      }
    ]
  },
  {
    "name": "git fmt-merge-msg",
    "options": [
      {
        "type": "long",
        "key": "log",
        "title": "--log[=<n>]",
        "description": "In addition to branch names, populate the log message with one-line descriptions from the actual commits that are being merged. At most <n> commits from each merge parent will be used (20 if <n> is omitted). This overrides the merge.log configuration variable."
      },
      {
        "type": "long",
        "key": "no-log",
        "title": "--no-log",
        "description": "Do not list one-line descriptions from the actual commits being merged."
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--[no-]summary",
        "description": "Synonyms to --log and --no-log; these are deprecated and will be removed in the future."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m <message>, --message <message>",
        "description": "Use <message> instead of the branch names for the first line of the log message. For use with --log."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F <file>, --file <file>",
        "description": "Take the list of merged objects from <file> instead of stdin."
      }
    ]
  },
  {
    "name": "git interpret-trailers",
    "options": [
      {
        "type": "long",
        "key": "in-place",
        "title": "--in-place",
        "description": "Edit the files in place."
      },
      {
        "type": "long",
        "key": "trim-empty",
        "title": "--trim-empty",
        "description": "If the <value> part of any trailer contains only whitespace, the whole trailer will be removed from the resulting message. This applies to existing trailers as well as new trailers."
      },
      {
        "type": "long",
        "key": "no-where",
        "title": "--where <placement>, --no-where",
        "description": "Specify where all new trailers will be added. A setting provided with --where overrides all configuration variables and applies to all --trailer options until the next occurrence of --where or --no-where. Possible values are after, before, end or start."
      },
      {
        "type": "long",
        "key": "no-if-exists",
        "title": "--if-exists <action>, --no-if-exists",
        "description": "Specify what action will be performed when there is already at least one trailer with the same <token> in the message. A setting provided with --if-exists overrides all configuration variables and applies to all --trailer options until the next occurrence of --if-exists or --no-if-exists. Possible actions are addIfDifferent, addIfDifferentNeighbor, add, replace and doNothing."
      },
      {
        "type": "long",
        "key": "no-if-missing",
        "title": "--if-missing <action>, --no-if-missing",
        "description": "Specify what action will be performed when there is no other trailer with the same <token> in the message. A setting provided with --if-missing overrides all configuration variables and applies to all --trailer options until the next occurrence of --if-missing or --no-if-missing. Possible actions are doNothing or add."
      },
      {
        "type": "long",
        "key": "only-trailers",
        "title": "--only-trailers",
        "description": "Output only the trailers, not any other parts of the input."
      },
      {
        "type": "long",
        "key": "only-input",
        "title": "--only-input",
        "description": "Output only trailers that exist in the input; do not add any from the command-line or by following configured trailer.* rules."
      },
      {
        "type": "long",
        "key": "unfold",
        "title": "--unfold",
        "description": "Remove any whitespace-continuation in trailers, so that each trailer appears on a line by itself with its full content."
      },
      {
        "type": "long",
        "key": "parse",
        "title": "--parse",
        "description": "A convenience alias for --only-trailers --only-input --unfold."
      },
      {
        "type": "long",
        "key": "no-divider",
        "title": "--no-divider",
        "description": "Do not treat --- as the end of the commit message. Use this when you know your input contains just the commit message itself (and not an email or the output of git format-patch)."
      }
    ]
  },
  {
    "name": "git mailinfo",
    "options": [
      {
        "type": "short",
        "key": "k",
        "title": "-k",
        "description": "Usually the program removes email cruft from the Subject: header line to extract the title line for the commit log message. This option prevents this munging, and is most useful when used to read back git format-patch -k output.\n\nSpecifically, the following are removed until none of them remain:\n\n * Leading and trailing whitespace.\n\n * Leading Re:, re:, and :.\n\n * Leading bracketed strings (between [ and ], usually [PATCH]).\n\nFinally, runs of whitespace are normalized to a single ASCII space character."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b",
        "description": "When -k is not in effect, all leading strings bracketed with [ and ] pairs are stripped. This option limits the stripping to only the pairs whose bracketed string contains the word \"PATCH\"."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u",
        "description": "The commit log message, author name and author email are taken from the e-mail, and after minimally decoding MIME transfer encoding, re-coded in the charset specified by i18n.commitEncoding (defaulting to UTF-8) by transliterating them. This used to be optional but now it is the default.\n\nNote that the patch is always used as-is without charset conversion, even with this flag."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "Similar to -u. But when re-coding, the charset specified here is used instead of the one specified by i18n.commitEncoding or UTF-8."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n",
        "description": "Disable all charset re-coding of the metadata."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --message-id",
        "description": "Copy the Message-ID header at the end of the commit message. This is useful in order to associate commits with mailing list discussions."
      },
      {
        "type": "long",
        "key": "message-id",
        "title": "-m, --message-id",
        "description": "Copy the Message-ID header at the end of the commit message. This is useful in order to associate commits with mailing list discussions."
      },
      {
        "type": "long",
        "key": "scissors",
        "title": "--scissors",
        "description": "Remove everything in body before a scissors line (e.g. \"-- >8 --\"). The line represents scissors and perforation marks, and is used to request the reader to cut the message at that line. If that line appears in the body of the message before the patch, everything before it (including the scissors line itself) is ignored when this option is used.\n\nThis is useful if you want to begin your message in a discussion thread with comments and suggestions on the message you are responding to, and to conclude it with a patch submission, separating the discussion and the beginning of the proposed commit log message with a scissors line.\n\nThis can be enabled by default with the configuration option mailinfo.scissors."
      },
      {
        "type": "long",
        "key": "no-scissors",
        "title": "--no-scissors",
        "description": "Ignore scissors lines. Useful for overriding mailinfo.scissors settings."
      },
      {
        "type": "long",
        "key": "quoted-cr",
        "title": "--quoted-cr=<action>",
        "description": "Action when processes email messages sent with base64 or quoted-printable encoding, and the decoded lines end with a CRLF instead of a simple LF.\n\nThe valid actions are:\n\n * nowarn: Git will do nothing when such a CRLF is found.\n\n * warn: Git will issue a warning for each message if such a CRLF is found.\n\n * strip: Git will convert those CRLF to LF.\n\nThe default action could be set by configuration option mailinfo.quotedCR. If no such configuration option has been set, warn will be used."
      }
    ]
  },
  {
    "name": "git mailsplit",
    "options": [
      {
        "type": "short",
        "key": "o",
        "title": "-o<directory>",
        "description": "Directory in which to place the individual messages."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b",
        "description": "If any file doesn’t begin with a From line, assume it is a single mail message instead of signaling error."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d<prec>",
        "description": "Instead of the default 4 digits with leading zeros, different precision can be specified for the generated filenames."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f<nn>",
        "description": "Skip the first <nn> numbers, for example if -f3 is specified, start the numbering with 0004."
      },
      {
        "type": "long",
        "key": "keep-cr",
        "title": "--keep-cr",
        "description": "Do not remove \\r from lines ending with \\r\\n."
      },
      {
        "type": "long",
        "key": "mboxrd",
        "title": "--mboxrd",
        "description": "Input is of the \"mboxrd\" format and \"^>+From \" line escaping is reversed."
      }
    ]
  },
  {
    "name": "git merge-one-file",
    "options": []
  },
  {
    "name": "git patch-id",
    "options": [
      {
        "type": "long",
        "key": "stable",
        "title": "--stable",
        "description": "Use a \"stable\" sum of hashes as the patch ID. With this option:\n\n * Reordering file diffs that make up a patch does not affect the ID. In particular, two patches produced by comparing the same two trees with two different settings for \"-O<orderfile>\" result in the same patch ID signature, thereby allowing the computed result to be used as a key to index some meta-information about the change between the two trees;\n\n * Result is different from the value produced by git 1.9 and older or produced when an \"unstable\" hash (see --unstable below) is configured - even when used on a diff output taken without any use of \"-O<orderfile>\", thereby making existing databases storing such \"unstable\" or historical patch-ids unusable.\n   \n   This is the default if patchid.stable is set to true."
      },
      {
        "type": "long",
        "key": "unstable",
        "title": "--unstable",
        "description": "Use an \"unstable\" hash as the patch ID. With this option, the result produced is compatible with the patch-id value produced by git 1.9 and older. Users with pre-existing databases storing patch-ids produced by git 1.9 and older (who do not deal with reordered patches) may want to use this option.\n\nThis is the default."
      }
    ]
  },
  {
    "name": "git sh-i18n",
    "options": []
  },
  {
    "name": "git sh-setup",
    "options": []
  },
  {
    "name": "git stripspace",
    "options": [
      {
        "type": "short",
        "key": "s",
        "title": "-s, --strip-comments",
        "description": "Skip and remove all lines starting with comment character (default #)."
      },
      {
        "type": "long",
        "key": "strip-comments",
        "title": "-s, --strip-comments",
        "description": "Skip and remove all lines starting with comment character (default #)."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --comment-lines",
        "description": "Prepend comment character and blank to each line. Lines will automatically be terminated with a newline. On empty lines, only the comment character will be prepended."
      },
      {
        "type": "long",
        "key": "comment-lines",
        "title": "-c, --comment-lines",
        "description": "Prepend comment character and blank to each line. Lines will automatically be terminated with a newline. On empty lines, only the comment character will be prepended."
      }
    ]
  }
]
