[
  {
    "name": "git",
    "options": [
      {
        "type": "long",
        "key": "version",
        "title": "--version",
        "description": "Prints the Git suite version that the git program came from."
      },
      {
        "type": "long",
        "key": "help",
        "title": "--help",
        "description": "Prints the synopsis and a list of the most commonly used\ncommands. If the option --all or -a is given then all\navailable commands are printed. If a Git command is named this\noption will bring up the manual page for that command.\n\nOther options are available to control how the manual page is\ndisplayed. See git-help[1] for more information,\nbecause git --help ... is converted internally into git\nhelp ...."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C <path>",
        "description": "Run as if git was started in <path> instead of the current working\ndirectory.  When multiple -C options are given, each subsequent\nnon-absolute -C <path> is interpreted relative to the preceding -C\n<path>.  If <path> is present but empty, e.g. -C \"\", then the\ncurrent working directory is left unchanged.\n\nThis option affects options that expect path name like --git-dir and\n--work-tree in that their interpretations of the path names would be\nmade relative to the working directory caused by the -C option. For\nexample the following invocations are equivalent:\n\n\n\ngit --git-dir=a.git --work-tree=b -C c status\ngit --git-dir=c/a.git --work-tree=c/b status"
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c <name>=<value>",
        "description": "Pass a configuration parameter to the command. The value\ngiven will override values from configuration files.\nThe <name> is expected in the same format as listed by\ngit config (subkeys separated by dots).\n\nNote that omitting the = in git -c foo.bar ... is allowed and sets\nfoo.bar to the boolean true value (just like [foo]bar would in a\nconfig file). Including the equals but with an empty value (like git -c\nfoo.bar= ...) sets foo.bar to the empty string which git config\n--type=bool will convert to false."
      },
      {
        "type": "long",
        "key": "config-env",
        "title": "--config-env=<name>=<envvar>",
        "description": "Like -c <name>=<value>, give configuration variable\n<name> a value, where <envvar> is the name of an\nenvironment variable from which to retrieve the value. Unlike\n-c there is no shortcut for directly setting the value to an\nempty string, instead the environment variable itself must be\nset to the empty string.  It is an error if the <envvar> does not exist\nin the environment. <envvar> may not contain an equals sign\nto avoid ambiguity with <name> containing one.\n\nThis is useful for cases where you want to pass transitory\nconfiguration options to git, but are doing so on OS’s where\nother processes might be able to read your cmdline\n(e.g. /proc/self/cmdline), but not your environ\n(e.g. /proc/self/environ). That behavior is the default on\nLinux, but may not be on your system.\n\n\nNote that this might add security for variables such as\nhttp.extraHeader where the sensitive information is part of\nthe value, but not e.g. url.<base>.insteadOf where the\nsensitive information can be part of the key."
      },
      {
        "type": "long",
        "key": "exec-path",
        "title": "--exec-path[=<path>]",
        "description": "Path to wherever your core Git programs are installed.\nThis can also be controlled by setting the GIT_EXEC_PATH\nenvironment variable. If no path is given, git will print\nthe current setting and then exit."
      },
      {
        "type": "long",
        "key": "html-path",
        "title": "--html-path",
        "description": "Print the path, without trailing slash, where Git’s HTML\ndocumentation is installed and exit."
      },
      {
        "type": "long",
        "key": "man-path",
        "title": "--man-path",
        "description": "Print the manpath (see man(1)) for the man pages for\nthis version of Git and exit."
      },
      {
        "type": "long",
        "key": "info-path",
        "title": "--info-path",
        "description": "Print the path where the Info files documenting this\nversion of Git are installed and exit."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --paginate",
        "description": "Pipe all output into less (or if set, $PAGER) if standard\noutput is a terminal.  This overrides the pager.<cmd>\nconfiguration options (see the \"Configuration Mechanism\" section\nbelow)."
      },
      {
        "type": "long",
        "key": "paginate",
        "title": "-p, --paginate",
        "description": "Pipe all output into less (or if set, $PAGER) if standard\noutput is a terminal.  This overrides the pager.<cmd>\nconfiguration options (see the \"Configuration Mechanism\" section\nbelow)."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P, --no-pager",
        "description": "Do not pipe Git output into a pager."
      },
      {
        "type": "long",
        "key": "no-pager",
        "title": "-P, --no-pager",
        "description": "Do not pipe Git output into a pager."
      },
      {
        "type": "long",
        "key": "git-dir",
        "title": "--git-dir=<path>",
        "description": "Set the path to the repository (\".git\" directory). This can also be\ncontrolled by setting the GIT_DIR environment variable. It can be\nan absolute path or relative path to current working directory.\n\nSpecifying the location of the \".git\" directory using this\noption (or GIT_DIR environment variable) turns off the\nrepository discovery that tries to find a directory with\n\".git\" subdirectory (which is how the repository and the\ntop-level of the working tree are discovered), and tells Git\nthat you are at the top level of the working tree.  If you\nare not at the top-level directory of the working tree, you\nshould tell Git where the top-level of the working tree is,\nwith the --work-tree=<path> option (or GIT_WORK_TREE\nenvironment variable)\n\n\nIf you just want to run git as if it was started in <path> then use\ngit -C <path>."
      },
      {
        "type": "long",
        "key": "work-tree",
        "title": "--work-tree=<path>",
        "description": "Set the path to the working tree. It can be an absolute path\nor a path relative to the current working directory.\nThis can also be controlled by setting the GIT_WORK_TREE\nenvironment variable and the core.worktree configuration\nvariable (see core.worktree in git-config[1] for a\nmore detailed discussion)."
      },
      {
        "type": "long",
        "key": "namespace",
        "title": "--namespace=<path>",
        "description": "Set the Git namespace.  See gitnamespaces[7] for more\ndetails.  Equivalent to setting the GIT_NAMESPACE environment\nvariable."
      },
      {
        "type": "long",
        "key": "super-prefix",
        "title": "--super-prefix=<path>",
        "description": "Currently for internal use only.  Set a prefix which gives a path from\nabove a repository down to its root.  One use is to give submodules\ncontext about the superproject that invoked it."
      },
      {
        "type": "long",
        "key": "bare",
        "title": "--bare",
        "description": "Treat the repository as a bare repository.  If GIT_DIR\nenvironment is not set, it is set to the current working\ndirectory."
      },
      {
        "type": "long",
        "key": "no-replace-objects",
        "title": "--no-replace-objects",
        "description": "Do not use replacement refs to replace Git objects. See\ngit-replace[1] for more information."
      },
      {
        "type": "long",
        "key": "literal-pathspecs",
        "title": "--literal-pathspecs",
        "description": "Treat pathspecs literally (i.e. no globbing, no pathspec magic).\nThis is equivalent to setting the GIT_LITERAL_PATHSPECS environment\nvariable to 1."
      },
      {
        "type": "long",
        "key": "glob-pathspecs",
        "title": "--glob-pathspecs",
        "description": "Add \"glob\" magic to all pathspec. This is equivalent to setting\nthe GIT_GLOB_PATHSPECS environment variable to 1. Disabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(literal)\""
      },
      {
        "type": "long",
        "key": "noglob-pathspecs",
        "title": "--noglob-pathspecs",
        "description": "Add \"literal\" magic to all pathspec. This is equivalent to setting\nthe GIT_NOGLOB_PATHSPECS environment variable to 1. Enabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(glob)\""
      },
      {
        "type": "long",
        "key": "icase-pathspecs",
        "title": "--icase-pathspecs",
        "description": "Add \"icase\" magic to all pathspec. This is equivalent to setting\nthe GIT_ICASE_PATHSPECS environment variable to 1."
      },
      {
        "type": "long",
        "key": "no-optional-locks",
        "title": "--no-optional-locks",
        "description": "Do not perform optional operations that require locks. This is\nequivalent to setting the GIT_OPTIONAL_LOCKS to 0."
      },
      {
        "type": "long",
        "key": "list-cmds",
        "title": "--list-cmds=group[, group…​]",
        "description": "List commands by group. This is an internal/experimental\noption and may change or be removed in the future. Supported\ngroups are: builtins, parseopt (builtin commands that use\nparse-options), main (all commands in libexec directory),\nothers (all other commands in $PATH that have git- prefix),\nlist-<category> (see categories in command-list.txt),\nnohelpers (exclude helper commands), alias and config\n(retrieve command list from config variable completion.commands)"
      }
    ]
  },
  {
    "name": "git help",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "Prints all the available commands on the standard output. This\noption overrides any given command or guide name."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "Prints all the available commands on the standard output. This\noption overrides any given command or guide name."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "When used with --all print description for all recognized\ncommands. This is the default."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --config",
        "description": "List all available configuration variables. This is a short\nsummary of the list in git-config[1]."
      },
      {
        "type": "long",
        "key": "config",
        "title": "-c, --config",
        "description": "List all available configuration variables. This is a short\nsummary of the list in git-config[1]."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --guides",
        "description": "Prints a list of the Git concept guides on the standard output. This\noption overrides any given command or guide name."
      },
      {
        "type": "long",
        "key": "guides",
        "title": "-g, --guides",
        "description": "Prints a list of the Git concept guides on the standard output. This\noption overrides any given command or guide name."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --info",
        "description": "Display manual page for the command in the info format. The\ninfo program will be used for that purpose."
      },
      {
        "type": "long",
        "key": "info",
        "title": "-i, --info",
        "description": "Display manual page for the command in the info format. The\ninfo program will be used for that purpose."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --man",
        "description": "Display manual page for the command in the man format. This\noption may be used to override a value set in the\nhelp.format configuration variable.\n\nBy default the man program will be used to display the manual page,\nbut the man.viewer configuration variable may be used to choose\nother display programs (see below)."
      },
      {
        "type": "long",
        "key": "man",
        "title": "-m, --man",
        "description": "Display manual page for the command in the man format. This\noption may be used to override a value set in the\nhelp.format configuration variable.\n\nBy default the man program will be used to display the manual page,\nbut the man.viewer configuration variable may be used to choose\nother display programs (see below)."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --web",
        "description": "Display manual page for the command in the web (HTML)\nformat. A web browser will be used for that purpose.\n\nThe web browser can be specified using the configuration variable\nhelp.browser, or web.browser if the former is not set. If none of\nthese config variables is set, the git web--browse helper script\n(called by git help) will pick a suitable default. See\ngit-web--browse[1] for more information about this."
      },
      {
        "type": "long",
        "key": "web",
        "title": "-w, --web",
        "description": "Display manual page for the command in the web (HTML)\nformat. A web browser will be used for that purpose.\n\nThe web browser can be specified using the configuration variable\nhelp.browser, or web.browser if the former is not set. If none of\nthese config variables is set, the git web--browse helper script\n(called by git help) will pick a suitable default. See\ngit-web--browse[1] for more information about this."
      }
    ]
  },
  {
    "name": "git config",
    "options": [
      {
        "type": "long",
        "key": "replace-all",
        "title": "--replace-all",
        "description": "Default behavior is to replace at most one line. This replaces\nall lines matching the key (and optionally the value-pattern)."
      },
      {
        "type": "long",
        "key": "add",
        "title": "--add",
        "description": "Adds a new line to the option without altering any existing\nvalues.  This is the same as providing ^$ as the value-pattern\nin --replace-all."
      },
      {
        "type": "long",
        "key": "get",
        "title": "--get",
        "description": "Get the value for a given key (optionally filtered by a regex\nmatching the value). Returns error code 1 if the key was not\nfound and the last value if multiple key values were found."
      },
      {
        "type": "long",
        "key": "get-all",
        "title": "--get-all",
        "description": "Like get, but returns all values for a multi-valued key."
      },
      {
        "type": "long",
        "key": "get-regexp",
        "title": "--get-regexp",
        "description": "Like --get-all, but interprets the name as a regular expression and\nwrites out the key names.  Regular expression matching is currently\ncase-sensitive and done against a canonicalized version of the key\nin which section and variable names are lowercased, but subsection\nnames are not."
      },
      {
        "type": "long",
        "key": "global",
        "title": "--global",
        "description": "For writing options: write to global ~/.gitconfig file\nrather than the repository .git/config, write to\n$XDG_CONFIG_HOME/git/config file if this file exists and the\n~/.gitconfig file doesn’t.\n\nFor reading options: read only from global ~/.gitconfig and from\n$XDG_CONFIG_HOME/git/config rather than from all available files.\n\n\nSee also FILES."
      },
      {
        "type": "long",
        "key": "system",
        "title": "--system",
        "description": "For writing options: write to system-wide\n$(prefix)/etc/gitconfig rather than the repository\n.git/config.\n\nFor reading options: read only from system-wide $(prefix)/etc/gitconfig\nrather than from all available files.\n\n\nSee also FILES."
      },
      {
        "type": "long",
        "key": "local",
        "title": "--local",
        "description": "For writing options: write to the repository .git/config file.\nThis is the default behavior.\n\nFor reading options: read only from the repository .git/config rather than\nfrom all available files.\n\n\nSee also FILES."
      },
      {
        "type": "long",
        "key": "worktree",
        "title": "--worktree",
        "description": "Similar to --local except that .git/config.worktree is\nread from or written to if extensions.worktreeConfig is\npresent. If not it’s the same as --local."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f config-file, --file config-file",
        "description": "For writing options: write to the specified file rather than the\nrepository .git/config.\n\nFor reading options: read only from the specified file rather than from all\navailable files.\n\n\nSee also FILES."
      },
      {
        "type": "long",
        "key": "remove-section",
        "title": "--remove-section",
        "description": "Remove the given section from the configuration file."
      },
      {
        "type": "long",
        "key": "rename-section",
        "title": "--rename-section",
        "description": "Rename the given section to a new name."
      },
      {
        "type": "long",
        "key": "unset",
        "title": "--unset",
        "description": "Remove the line matching the key from config file."
      },
      {
        "type": "long",
        "key": "unset-all",
        "title": "--unset-all",
        "description": "Remove all lines matching the key from config file."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --list",
        "description": "List all variables set in config file, along with their values."
      },
      {
        "type": "long",
        "key": "list",
        "title": "-l, --list",
        "description": "List all variables set in config file, along with their values."
      },
      {
        "type": "long",
        "key": "fixed-value",
        "title": "--fixed-value",
        "description": "When used with the value-pattern argument, treat value-pattern as\nan exact string instead of a regular expression. This will restrict\nthe name/value pairs that are matched to only those where the value\nis exactly equal to the value-pattern."
      },
      {
        "type": "long",
        "key": "bool",
        "title": "--bool, --int, --bool-or-int, --path, --expiry-date",
        "description": "Historical options for selecting a type specifier. Prefer instead --type\n(see above)."
      },
      {
        "type": "long",
        "key": "int",
        "title": "--bool, --int, --bool-or-int, --path, --expiry-date",
        "description": "Historical options for selecting a type specifier. Prefer instead --type\n(see above)."
      },
      {
        "type": "long",
        "key": "bool-or-int",
        "title": "--bool, --int, --bool-or-int, --path, --expiry-date",
        "description": "Historical options for selecting a type specifier. Prefer instead --type\n(see above)."
      },
      {
        "type": "long",
        "key": "path",
        "title": "--bool, --int, --bool-or-int, --path, --expiry-date",
        "description": "Historical options for selecting a type specifier. Prefer instead --type\n(see above)."
      },
      {
        "type": "long",
        "key": "expiry-date",
        "title": "--bool, --int, --bool-or-int, --path, --expiry-date",
        "description": "Historical options for selecting a type specifier. Prefer instead --type\n(see above)."
      },
      {
        "type": "long",
        "key": "no-type",
        "title": "--no-type",
        "description": "Un-sets the previously set type specifier (if one was previously set). This\noption requests that git config not canonicalize the retrieved variable.\n--no-type has no effect without --type=<type> or --<type>."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z, --null",
        "description": "For all options that output values and/or keys, always\nend values with the null character (instead of a\nnewline). Use newline instead as a delimiter between\nkey and value. This allows for secure parsing of the\noutput without getting confused e.g. by values that\ncontain line breaks."
      },
      {
        "type": "long",
        "key": "null",
        "title": "-z, --null",
        "description": "For all options that output values and/or keys, always\nend values with the null character (instead of a\nnewline). Use newline instead as a delimiter between\nkey and value. This allows for secure parsing of the\noutput without getting confused e.g. by values that\ncontain line breaks."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only",
        "description": "Output only the names of config variables for --list or\n--get-regexp."
      },
      {
        "type": "long",
        "key": "show-origin",
        "title": "--show-origin",
        "description": "Augment the output of all queried config options with the\norigin type (file, standard input, blob, command line) and\nthe actual origin (config file path, ref, or blob id if\napplicable)."
      },
      {
        "type": "long",
        "key": "show-scope",
        "title": "--show-scope",
        "description": "Similar to --show-origin in that it augments the output of\nall queried config options with the scope of that value\n(local, global, system, command)."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "Opens an editor to modify the specified config file; either\n--system, --global, or repository (default)."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "Opens an editor to modify the specified config file; either\n--system, --global, or repository (default)."
      },
      {
        "type": "long",
        "key": "includes",
        "title": "--[no-]includes",
        "description": "Respect include.* directives in config files when looking up\nvalues. Defaults to off when a specific file is given (e.g.,\nusing --file, --global, etc) and on when searching all\nconfig files."
      }
    ]
  },
  {
    "name": "git replace",
    "options": [
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "If an existing replace ref for the same object exists, it will\nbe overwritten (instead of failing)."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "If an existing replace ref for the same object exists, it will\nbe overwritten (instead of failing)."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --delete",
        "description": "Delete existing replace refs for the given objects."
      },
      {
        "type": "long",
        "key": "delete",
        "title": "-d, --delete",
        "description": "Delete existing replace refs for the given objects."
      },
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "When editing, provide the raw object contents rather than\npretty-printed ones. Currently this only affects trees, which\nwill be shown in their binary form. This is harder to work with,\nbut can help when repairing a tree that is so corrupted it\ncannot be pretty-printed. Note that you may need to configure\nyour editor to cleanly read and write binary data."
      },
      {
        "type": "long",
        "key": "convert-graft-file",
        "title": "--convert-graft-file",
        "description": "Creates graft commits for all entries in $GIT_DIR/info/grafts\nand deletes that file upon success. The purpose is to help users\nwith transitioning off of the now-deprecated graft file."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l <pattern>, --list <pattern>",
        "description": "List replace refs for objects that match the given pattern (or\nall if no pattern is given).\nTyping \"git replace\" without arguments, also lists all replace\nrefs."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--format=<format>",
        "description": "When listing, use the specified <format>, which can be one of\nshort, medium and long. When omitted, the format\ndefaults to short."
      }
    ]
  },
  {
    "name": "git add",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Don’t actually add the file(s), just show if they exist and/or will\nbe ignored."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Don’t actually add the file(s), just show if they exist and/or will\nbe ignored."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Allow adding otherwise ignored files."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Allow adding otherwise ignored files."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --interactive",
        "description": "Add modified contents in the working tree interactively to\nthe index. Optional path arguments may be supplied to limit\noperation to a subset of the working tree. See “Interactive\nmode” for details."
      },
      {
        "type": "long",
        "key": "interactive",
        "title": "-i, --interactive",
        "description": "Add modified contents in the working tree interactively to\nthe index. Optional path arguments may be supplied to limit\noperation to a subset of the working tree. See “Interactive\nmode” for details."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --patch",
        "description": "Interactively choose hunks of patch between the index and the\nwork tree and add them to the index. This gives the user a chance\nto review the difference before adding modified contents to the\nindex.\n\nThis effectively runs add --interactive, but bypasses the\ninitial command menu and directly jumps to the patch subcommand.\nSee “Interactive mode” for details."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, --patch",
        "description": "Interactively choose hunks of patch between the index and the\nwork tree and add them to the index. This gives the user a chance\nto review the difference before adding modified contents to the\nindex.\n\nThis effectively runs add --interactive, but bypasses the\ninitial command menu and directly jumps to the patch subcommand.\nSee “Interactive mode” for details."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "Open the diff vs. the index in an editor and let the user\nedit it.  After the editor was closed, adjust the hunk headers\nand apply the patch to the index.\n\nThe intent of this option is to pick and choose lines of the patch to\napply, or even to modify the contents of lines to be staged. This can be\nquicker and more flexible than using the interactive hunk selector.\nHowever, it is easy to confuse oneself and create a patch that does not\napply to the index. See EDITING PATCHES below."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "Open the diff vs. the index in an editor and let the user\nedit it.  After the editor was closed, adjust the hunk headers\nand apply the patch to the index.\n\nThe intent of this option is to pick and choose lines of the patch to\napply, or even to modify the contents of lines to be staged. This can be\nquicker and more flexible than using the interactive hunk selector.\nHowever, it is easy to confuse oneself and create a patch that does not\napply to the index. See EDITING PATCHES below."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u, --update",
        "description": "Update the index just where it already has an entry matching\n<pathspec>.  This removes as well as modifies index entries to\nmatch the working tree, but adds no new files.\n\nIf no <pathspec> is given when -u option is used, all\ntracked files in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories)."
      },
      {
        "type": "long",
        "key": "update",
        "title": "-u, --update",
        "description": "Update the index just where it already has an entry matching\n<pathspec>.  This removes as well as modifies index entries to\nmatch the working tree, but adds no new files.\n\nIf no <pathspec> is given when -u option is used, all\ntracked files in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories)."
      },
      {
        "type": "short",
        "key": "A",
        "title": "-A, --all, --no-ignore-removal",
        "description": "Update the index not only where the working tree has a file\nmatching <pathspec> but also where the index already has an\nentry. This adds, modifies, and removes index entries to\nmatch the working tree.\n\nIf no <pathspec> is given when -A option is used, all\nfiles in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories)."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-A, --all, --no-ignore-removal",
        "description": "Update the index not only where the working tree has a file\nmatching <pathspec> but also where the index already has an\nentry. This adds, modifies, and removes index entries to\nmatch the working tree.\n\nIf no <pathspec> is given when -A option is used, all\nfiles in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories)."
      },
      {
        "type": "long",
        "key": "no-ignore-removal",
        "title": "-A, --all, --no-ignore-removal",
        "description": "Update the index not only where the working tree has a file\nmatching <pathspec> but also where the index already has an\nentry. This adds, modifies, and removes index entries to\nmatch the working tree.\n\nIf no <pathspec> is given when -A option is used, all\nfiles in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories)."
      },
      {
        "type": "long",
        "key": "no-all",
        "title": "--no-all, --ignore-removal",
        "description": "Update the index by adding new files that are unknown to the\nindex and files modified in the working tree, but ignore\nfiles that have been removed from the working tree.  This\noption is a no-op when no <pathspec> is used.\n\nThis option is primarily to help users who are used to older\nversions of Git, whose \"git add <pathspec>…​\" was a synonym\nfor \"git add --no-all <pathspec>…​\", i.e. ignored removed files."
      },
      {
        "type": "long",
        "key": "ignore-removal",
        "title": "--no-all, --ignore-removal",
        "description": "Update the index by adding new files that are unknown to the\nindex and files modified in the working tree, but ignore\nfiles that have been removed from the working tree.  This\noption is a no-op when no <pathspec> is used.\n\nThis option is primarily to help users who are used to older\nversions of Git, whose \"git add <pathspec>…​\" was a synonym\nfor \"git add --no-all <pathspec>…​\", i.e. ignored removed files."
      },
      {
        "type": "short",
        "key": "N",
        "title": "-N, --intent-to-add",
        "description": "Record only the fact that the path will be added later. An entry\nfor the path is placed in the index with no content. This is\nuseful for, among other things, showing the unstaged content of\nsuch files with git diff and committing them with git commit\n-a."
      },
      {
        "type": "long",
        "key": "intent-to-add",
        "title": "-N, --intent-to-add",
        "description": "Record only the fact that the path will be added later. An entry\nfor the path is placed in the index with no content. This is\nuseful for, among other things, showing the unstaged content of\nsuch files with git diff and committing them with git commit\n-a."
      },
      {
        "type": "long",
        "key": "refresh",
        "title": "--refresh",
        "description": "Don’t add the file(s), but only refresh their stat()\ninformation in the index."
      },
      {
        "type": "long",
        "key": "ignore-errors",
        "title": "--ignore-errors",
        "description": "If some files could not be added because of errors indexing\nthem, do not abort the operation, but continue adding the\nothers. The command shall still exit with non-zero status.\nThe configuration variable add.ignoreErrors can be set to\ntrue to make this the default behaviour."
      },
      {
        "type": "long",
        "key": "ignore-missing",
        "title": "--ignore-missing",
        "description": "This option can only be used together with --dry-run. By using\nthis option the user can check if any of the given files would\nbe ignored, no matter if they are already present in the work\ntree or not."
      },
      {
        "type": "long",
        "key": "no-warn-embedded-repo",
        "title": "--no-warn-embedded-repo",
        "description": "By default, git add will warn when adding an embedded\nrepository to the index without using git submodule add to\ncreate an entry in .gitmodules. This option will suppress the\nwarning (e.g., if you are manually performing operations on\nsubmodules)."
      },
      {
        "type": "long",
        "key": "renormalize",
        "title": "--renormalize",
        "description": "Apply the \"clean\" process freshly to all tracked files to\nforcibly add them again to the index.  This is useful after\nchanging core.autocrlf configuration or the text attribute\nin order to correct files added with wrong CRLF/LF line endings.\nThis option implies -u."
      },
      {
        "type": "long",
        "key": "chmod",
        "title": "--chmod=(+|-)x",
        "description": "Override the executable bit of the added files.  The executable\nbit is only changed in the index, the files on disk are left\nunchanged."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "Pathspec is passed in <file> instead of commandline args. If\n<file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath\n(see git-config[1]). See also --pathspec-file-nul and\nglobal --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "Only meaningful with --pathspec-from-file. Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."
      }
    ]
  },
  {
    "name": "git am",
    "options": [
      {
        "type": "short",
        "key": "s",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer to the commit message, using\nthe committer identity of yourself.\nSee the signoff option in git-commit[1] for more information."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer to the commit message, using\nthe committer identity of yourself.\nSee the signoff option in git-commit[1] for more information."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep",
        "description": "Pass -k flag to git mailinfo (see git-mailinfo[1])."
      },
      {
        "type": "long",
        "key": "keep",
        "title": "-k, --keep",
        "description": "Pass -k flag to git mailinfo (see git-mailinfo[1])."
      },
      {
        "type": "long",
        "key": "keep-non-patch",
        "title": "--keep-non-patch",
        "description": "Pass -b flag to git mailinfo (see git-mailinfo[1])."
      },
      {
        "type": "long",
        "key": "keep-cr",
        "title": "--[no-]keep-cr",
        "description": "With --keep-cr, call git mailsplit (see git-mailsplit[1])\nwith the same option, to prevent it from stripping CR at the end of\nlines. am.keepcr configuration variable can be used to specify the\ndefault behaviour.  --no-keep-cr is useful to override am.keepcr."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --scissors",
        "description": "Remove everything in body before a scissors line (see\ngit-mailinfo[1]). Can be activated by default using\nthe mailinfo.scissors configuration variable."
      },
      {
        "type": "long",
        "key": "scissors",
        "title": "-c, --scissors",
        "description": "Remove everything in body before a scissors line (see\ngit-mailinfo[1]). Can be activated by default using\nthe mailinfo.scissors configuration variable."
      },
      {
        "type": "long",
        "key": "no-scissors",
        "title": "--no-scissors",
        "description": "Ignore scissors lines (see git-mailinfo[1])."
      },
      {
        "type": "long",
        "key": "quoted-cr",
        "title": "--quoted-cr=<action>",
        "description": "This flag will be passed down to git mailinfo (see git-mailinfo[1])."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --message-id",
        "description": "Pass the -m flag to git mailinfo (see git-mailinfo[1]),\nso that the Message-ID header is added to the commit message.\nThe am.messageid configuration variable can be used to specify\nthe default behaviour."
      },
      {
        "type": "long",
        "key": "message-id",
        "title": "-m, --message-id",
        "description": "Pass the -m flag to git mailinfo (see git-mailinfo[1]),\nso that the Message-ID header is added to the commit message.\nThe am.messageid configuration variable can be used to specify\nthe default behaviour."
      },
      {
        "type": "long",
        "key": "no-message-id",
        "title": "--no-message-id",
        "description": "Do not add the Message-ID header to the commit message.\nno-message-id is useful to override am.messageid."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Be quiet. Only print error messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Be quiet. Only print error messages."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u, --utf8",
        "description": "Pass -u flag to git mailinfo (see git-mailinfo[1]).\nThe proposed commit log message taken from the e-mail\nis re-coded into UTF-8 encoding (configuration variable\ni18n.commitEncoding can be used to specify project’s\npreferred encoding if it is not UTF-8).\n\nThis was optional in prior versions of git, but now it is the\ndefault.   You can use --no-utf8 to override this."
      },
      {
        "type": "long",
        "key": "utf8",
        "title": "-u, --utf8",
        "description": "Pass -u flag to git mailinfo (see git-mailinfo[1]).\nThe proposed commit log message taken from the e-mail\nis re-coded into UTF-8 encoding (configuration variable\ni18n.commitEncoding can be used to specify project’s\npreferred encoding if it is not UTF-8).\n\nThis was optional in prior versions of git, but now it is the\ndefault.   You can use --no-utf8 to override this."
      },
      {
        "type": "long",
        "key": "no-utf8",
        "title": "--no-utf8",
        "description": "Pass -n flag to git mailinfo (see\ngit-mailinfo[1])."
      },
      {
        "type": "short",
        "key": "3",
        "title": "-3, --3way, --no-3way",
        "description": "When the patch does not apply cleanly, fall back on\n3-way merge if the patch records the identity of blobs\nit is supposed to apply to and we have those blobs\navailable locally. --no-3way can be used to override\nam.threeWay configuration variable. For more information,\nsee am.threeWay in git-config[1]."
      },
      {
        "type": "long",
        "key": "3way",
        "title": "-3, --3way, --no-3way",
        "description": "When the patch does not apply cleanly, fall back on\n3-way merge if the patch records the identity of blobs\nit is supposed to apply to and we have those blobs\navailable locally. --no-3way can be used to override\nam.threeWay configuration variable. For more information,\nsee am.threeWay in git-config[1]."
      },
      {
        "type": "long",
        "key": "no-3way",
        "title": "-3, --3way, --no-3way",
        "description": "When the patch does not apply cleanly, fall back on\n3-way merge if the patch records the identity of blobs\nit is supposed to apply to and we have those blobs\navailable locally. --no-3way can be used to override\nam.threeWay configuration variable. For more information,\nsee am.threeWay in git-config[1]."
      },
      {
        "type": "long",
        "key": "rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the\nresult of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "no-rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the\nresult of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch."
      },
      {
        "type": "long",
        "key": "ignore-whitespace",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch."
      },
      {
        "type": "long",
        "key": "whitespace",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch."
      },
      {
        "type": "short",
        "key": "C",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch."
      },
      {
        "type": "short",
        "key": "p",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch."
      },
      {
        "type": "long",
        "key": "directory",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch."
      },
      {
        "type": "long",
        "key": "include",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch."
      },
      {
        "type": "long",
        "key": "reject",
        "title": "--ignore-space-change, --ignore-whitespace, --whitespace=<option>, -C<n>, -p<n>, --directory=<dir>, --exclude=<path>, --include=<path>, --reject",
        "description": "These flags are passed to the git apply (see git-apply[1])\nprogram that applies\nthe patch."
      },
      {
        "type": "long",
        "key": "patch-format",
        "title": "--patch-format",
        "description": "By default the command will try to detect the patch format\nautomatically. This option allows the user to bypass the automatic\ndetection and specify the patch format that the patch(es) should be\ninterpreted as. Valid formats are mbox, mboxrd,\nstgit, stgit-series and hg."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --interactive",
        "description": "Run interactively."
      },
      {
        "type": "long",
        "key": "interactive",
        "title": "-i, --interactive",
        "description": "Run interactively."
      },
      {
        "type": "long",
        "key": "committer-date-is-author-date",
        "title": "--committer-date-is-author-date",
        "description": "By default the command records the date from the e-mail\nmessage as the commit author date, and uses the time of\ncommit creation as the committer date. This allows the\nuser to lie about the committer date by using the same\nvalue as the author date."
      },
      {
        "type": "long",
        "key": "ignore-date",
        "title": "--ignore-date",
        "description": "By default the command records the date from the e-mail\nmessage as the commit author date, and uses the time of\ncommit creation as the committer date. This allows the\nuser to lie about the author date by using the same\nvalue as the committer date."
      },
      {
        "type": "long",
        "key": "skip",
        "title": "--skip",
        "description": "Skip the current patch.  This is only meaningful when\nrestarting an aborted patch."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "continue",
        "title": "--continue, -r, --resolved",
        "description": "After a patch failure (e.g. attempting to apply\nconflicting patch), the user has applied it by hand and\nthe index file stores the result of the application.\nMake a commit using the authorship and commit log\nextracted from the e-mail message and the current index\nfile, and continue."
      },
      {
        "type": "short",
        "key": "r",
        "title": "--continue, -r, --resolved",
        "description": "After a patch failure (e.g. attempting to apply\nconflicting patch), the user has applied it by hand and\nthe index file stores the result of the application.\nMake a commit using the authorship and commit log\nextracted from the e-mail message and the current index\nfile, and continue."
      },
      {
        "type": "long",
        "key": "resolved",
        "title": "--continue, -r, --resolved",
        "description": "After a patch failure (e.g. attempting to apply\nconflicting patch), the user has applied it by hand and\nthe index file stores the result of the application.\nMake a commit using the authorship and commit log\nextracted from the e-mail message and the current index\nfile, and continue."
      },
      {
        "type": "long",
        "key": "resolvemsg",
        "title": "--resolvemsg=<msg>",
        "description": "When a patch failure occurs, <msg> will be printed\nto the screen before exiting.  This overrides the\nstandard message informing you to use --continue\nor --skip to handle the failure.  This is solely\nfor internal use between git rebase and git am."
      },
      {
        "type": "long",
        "key": "abort",
        "title": "--abort",
        "description": "Restore the original branch and abort the patching operation."
      },
      {
        "type": "long",
        "key": "quit",
        "title": "--quit",
        "description": "Abort the patching operation but keep HEAD and the index\nuntouched."
      },
      {
        "type": "long",
        "key": "show-current-patch",
        "title": "--show-current-patch[=(diff|raw)]",
        "description": "Show the message at which git am has stopped due to\nconflicts.  If raw is specified, show the raw contents of\nthe e-mail message; if diff, show the diff portion only.\nDefaults to raw."
      }
    ]
  },
  {
    "name": "git archive",
    "options": [
      {
        "type": "long",
        "key": "format",
        "title": "--format=<fmt>",
        "description": "Format of the resulting archive: tar or zip. If this option\nis not given, and the output file is specified, the format is\ninferred from the filename if possible (e.g. writing to \"foo.zip\"\nmakes the output to be in the zip format). Otherwise the output\nformat is tar."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --list",
        "description": "Show all available formats."
      },
      {
        "type": "long",
        "key": "list",
        "title": "-l, --list",
        "description": "Show all available formats."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Report progress to stderr."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Report progress to stderr."
      },
      {
        "type": "long",
        "key": "prefix",
        "title": "--prefix=<prefix>/",
        "description": "Prepend <prefix>/ to each filename in the archive."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <file>, --output=<file>",
        "description": "Write the archive to <file> instead of stdout."
      },
      {
        "type": "long",
        "key": "output",
        "title": "-o <file>, --output=<file>",
        "description": "Write the archive to <file> instead of stdout."
      },
      {
        "type": "long",
        "key": "add-file",
        "title": "--add-file=<file>",
        "description": "Add a non-tracked file to the archive.  Can be repeated to add\nmultiple files.  The path of the file in the archive is built\nby concatenating the value for --prefix (if any) and the\nbasename of <file>."
      },
      {
        "type": "long",
        "key": "worktree-attributes",
        "title": "--worktree-attributes",
        "description": "Look for attributes in .gitattributes files in the working tree\nas well (see ATTRIBUTES)."
      },
      {
        "type": "long",
        "key": "remote",
        "title": "--remote=<repo>",
        "description": "Instead of making a tar archive from the local repository,\nretrieve a tar archive from a remote repository. Note that the\nremote repository may place restrictions on which sha1\nexpressions may be allowed in <tree-ish>. See\ngit-upload-archive[1] for details."
      },
      {
        "type": "long",
        "key": "exec",
        "title": "--exec=<git-upload-archive>",
        "description": "Used with --remote to specify the path to the\ngit-upload-archive on the remote side."
      }
    ]
  },
  {
    "name": "git bisect",
    "options": [
      {
        "type": "long",
        "key": "no-checkout",
        "title": "--no-checkout",
        "description": "Do not checkout the new working tree at each iteration of the bisection\nprocess. Instead just update a special reference named BISECT_HEAD to make\nit point to the commit that should be tested.\n\n\nThis option may be useful when the test you would perform in each step\ndoes not require a checked out tree.\n\n\nIf the repository is bare, --no-checkout is assumed."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge commit.\n\n\nIn detecting regressions introduced through the merging of a branch, the merge\ncommit will be identified as introduction of the bug and its ancestors will be\nignored.\n\n\nThis option is particularly useful in avoiding false positives when a merged\nbranch contained broken or non-buildable commits, but the merge itself was OK."
      }
    ]
  },
  {
    "name": "git branch",
    "options": [
      {
        "type": "short",
        "key": "d",
        "title": "-d, --delete",
        "description": "Delete a branch. The branch must be fully merged in its\nupstream branch, or in HEAD if no upstream was set with\n--track or --set-upstream-to."
      },
      {
        "type": "long",
        "key": "delete",
        "title": "-d, --delete",
        "description": "Delete a branch. The branch must be fully merged in its\nupstream branch, or in HEAD if no upstream was set with\n--track or --set-upstream-to."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D",
        "description": "Shortcut for --delete --force."
      },
      {
        "type": "long",
        "key": "create-reflog",
        "title": "--create-reflog",
        "description": "Create the branch’s reflog.  This activates recording of\nall changes made to the branch ref, enabling use of date\nbased sha1 expressions such as \"<branchname>@{yesterday}\".\nNote that in non-bare repositories, reflogs are usually\nenabled by default by the core.logAllRefUpdates config option.\nThe negated form --no-create-reflog only overrides an earlier\n--create-reflog, but currently does not negate the setting of\ncore.logAllRefUpdates."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Reset <branchname> to <startpoint>, even if <branchname> exists\nalready. Without -f, git branch refuses to change an existing branch.\nIn combination with -d (or --delete), allow deleting the\nbranch irrespective of its merged status. In combination with\n-m (or --move), allow renaming the branch even if the new\nbranch name already exists, the same applies for -c (or --copy)."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Reset <branchname> to <startpoint>, even if <branchname> exists\nalready. Without -f, git branch refuses to change an existing branch.\nIn combination with -d (or --delete), allow deleting the\nbranch irrespective of its merged status. In combination with\n-m (or --move), allow renaming the branch even if the new\nbranch name already exists, the same applies for -c (or --copy)."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --move",
        "description": "Move/rename a branch and the corresponding reflog."
      },
      {
        "type": "long",
        "key": "move",
        "title": "-m, --move",
        "description": "Move/rename a branch and the corresponding reflog."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M",
        "description": "Shortcut for --move --force."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --copy",
        "description": "Copy a branch and the corresponding reflog."
      },
      {
        "type": "long",
        "key": "copy",
        "title": "-c, --copy",
        "description": "Copy a branch and the corresponding reflog."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C",
        "description": "Shortcut for --copy --force."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Color branches to highlight current, local, and\nremote-tracking branches.\nThe value must be always (the default), never, or auto."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off branch colors, even when the configuration file gives the\ndefault to color output.\nSame as --color=never."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --ignore-case",
        "description": "Sorting and filtering branches are case insensitive."
      },
      {
        "type": "long",
        "key": "ignore-case",
        "title": "-i, --ignore-case",
        "description": "Sorting and filtering branches are case insensitive."
      },
      {
        "type": "long",
        "key": "column",
        "title": "--column[=<options>], --no-column",
        "description": "Display branch listing in columns. See configuration variable\ncolumn.branch for option syntax. --column and --no-column\nwithout options are equivalent to always and never respectively.\n\nThis option is only applicable in non-verbose mode."
      },
      {
        "type": "long",
        "key": "no-column",
        "title": "--column[=<options>], --no-column",
        "description": "Display branch listing in columns. See configuration variable\ncolumn.branch for option syntax. --column and --no-column\nwithout options are equivalent to always and never respectively.\n\nThis option is only applicable in non-verbose mode."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r, --remotes",
        "description": "List or delete (if used with -d) the remote-tracking branches.\nCombine with --list to match the optional pattern(s)."
      },
      {
        "type": "long",
        "key": "remotes",
        "title": "-r, --remotes",
        "description": "List or delete (if used with -d) the remote-tracking branches.\nCombine with --list to match the optional pattern(s)."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "List both remote-tracking branches and local branches.\nCombine with --list to match optional pattern(s)."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "List both remote-tracking branches and local branches.\nCombine with --list to match optional pattern(s)."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --list",
        "description": "List branches.  With optional <pattern>..., e.g. git\nbranch --list 'maint-*', list only the branches that match\nthe pattern(s)."
      },
      {
        "type": "long",
        "key": "list",
        "title": "-l, --list",
        "description": "List branches.  With optional <pattern>..., e.g. git\nbranch --list 'maint-*', list only the branches that match\nthe pattern(s)."
      },
      {
        "type": "long",
        "key": "show-current",
        "title": "--show-current",
        "description": "Print the name of the current branch. In detached HEAD state,\nnothing is printed."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, -vv, --verbose",
        "description": "When in list mode,\nshow sha1 and commit subject line for each head, along with\nrelationship to upstream branch (if any). If given twice, print\nthe path of the linked worktree (if any) and the name of the upstream\nbranch, as well (see also git remote show <remote>).  Note that the\ncurrent worktree’s HEAD will not have its path printed (it will always\nbe your current directory)."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, -vv, --verbose",
        "description": "When in list mode,\nshow sha1 and commit subject line for each head, along with\nrelationship to upstream branch (if any). If given twice, print\nthe path of the linked worktree (if any) and the name of the upstream\nbranch, as well (see also git remote show <remote>).  Note that the\ncurrent worktree’s HEAD will not have its path printed (it will always\nbe your current directory)."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Be more quiet when creating or deleting a branch, suppressing\nnon-error messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Be more quiet when creating or deleting a branch, suppressing\nnon-error messages."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev=<n>",
        "description": "In the verbose listing that show the commit object name,\nshow the shortest prefix that is at least <n> hexdigits\nlong that uniquely refers the object.\nThe default value is 7 and can be overridden by the core.abbrev\nconfig option."
      },
      {
        "type": "long",
        "key": "no-abbrev",
        "title": "--no-abbrev",
        "description": "Display the full sha1s in the output listing rather than abbreviating them."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t, --track",
        "description": "When creating a new branch, set up branch.<name>.remote and\nbranch.<name>.merge configuration entries to mark the\nstart-point branch as \"upstream\" from the new branch. This\nconfiguration will tell git to show the relationship between the\ntwo branches in git status and git branch -v. Furthermore,\nit directs git pull without arguments to pull from the\nupstream when the new branch is checked out.\n\nThis behavior is the default when the start point is a remote-tracking branch.\nSet the branch.autoSetupMerge configuration variable to false if you\nwant git switch, git checkout and git branch to always behave as if --no-track\nwere given. Set it to always if you want this behavior when the\nstart-point is either a local or remote-tracking branch."
      },
      {
        "type": "long",
        "key": "track",
        "title": "-t, --track",
        "description": "When creating a new branch, set up branch.<name>.remote and\nbranch.<name>.merge configuration entries to mark the\nstart-point branch as \"upstream\" from the new branch. This\nconfiguration will tell git to show the relationship between the\ntwo branches in git status and git branch -v. Furthermore,\nit directs git pull without arguments to pull from the\nupstream when the new branch is checked out.\n\nThis behavior is the default when the start point is a remote-tracking branch.\nSet the branch.autoSetupMerge configuration variable to false if you\nwant git switch, git checkout and git branch to always behave as if --no-track\nwere given. Set it to always if you want this behavior when the\nstart-point is either a local or remote-tracking branch."
      },
      {
        "type": "long",
        "key": "no-track",
        "title": "--no-track",
        "description": "Do not set up \"upstream\" configuration, even if the\nbranch.autoSetupMerge configuration variable is true."
      },
      {
        "type": "long",
        "key": "set-upstream",
        "title": "--set-upstream",
        "description": "As this option had confusing syntax, it is no longer supported.\nPlease use --track or --set-upstream-to instead."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u <upstream>, --set-upstream-to=<upstream>",
        "description": "Set up <branchname>'s tracking information so <upstream> is\nconsidered <branchname>'s upstream branch. If no <branchname>\nis specified, then it defaults to the current branch."
      },
      {
        "type": "long",
        "key": "set-upstream-to",
        "title": "-u <upstream>, --set-upstream-to=<upstream>",
        "description": "Set up <branchname>'s tracking information so <upstream> is\nconsidered <branchname>'s upstream branch. If no <branchname>\nis specified, then it defaults to the current branch."
      },
      {
        "type": "long",
        "key": "unset-upstream",
        "title": "--unset-upstream",
        "description": "Remove the upstream information for <branchname>. If no branch\nis specified it defaults to the current branch."
      },
      {
        "type": "long",
        "key": "edit-description",
        "title": "--edit-description",
        "description": "Open an editor and edit the text to explain what the branch is\nfor, to be used by various other commands (e.g. format-patch,\nrequest-pull, and merge (if enabled)). Multi-line explanations\nmay be used."
      },
      {
        "type": "long",
        "key": "contains",
        "title": "--contains [<commit>]",
        "description": "Only list branches which contain the specified commit (HEAD\nif not specified). Implies --list."
      },
      {
        "type": "long",
        "key": "no-contains",
        "title": "--no-contains [<commit>]",
        "description": "Only list branches which don’t contain the specified commit\n(HEAD if not specified). Implies --list."
      },
      {
        "type": "long",
        "key": "merged",
        "title": "--merged [<commit>]",
        "description": "Only list branches whose tips are reachable from the\nspecified commit (HEAD if not specified). Implies --list."
      },
      {
        "type": "long",
        "key": "no-merged",
        "title": "--no-merged [<commit>]",
        "description": "Only list branches whose tips are not reachable from the\nspecified commit (HEAD if not specified). Implies --list."
      },
      {
        "type": "long",
        "key": "sort",
        "title": "--sort=<key>",
        "description": "Sort based on the key given. Prefix - to sort in descending\norder of the value. You may use the --sort=<key> option\nmultiple times, in which case the last key becomes the primary\nkey. The keys supported are the same as those in git\nfor-each-ref. Sort order defaults to the value configured for the\nbranch.sort variable if exists, or to sorting based on the\nfull refname (including refs/... prefix). This lists\ndetached HEAD (if present) first, then local branches and\nfinally remote-tracking branches. See git-config[1]."
      }
    ]
  },
  {
    "name": "git bundle",
    "options": [
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if\nthe standard error stream is not directed to a terminal."
      },
      {
        "type": "long",
        "key": "all-progress",
        "title": "--all-progress",
        "description": "When --stdout is specified then progress report is\ndisplayed during the object count and compression phases\nbut inhibited during the write-out phase. The reason is\nthat in some cases the output stream is directly linked\nto another command which may wish to display progress\nstatus of its own as it processes incoming pack data.\nThis flag is like --progress except that it forces progress\nreport for the write-out phase as well even if --stdout is\nused."
      },
      {
        "type": "long",
        "key": "all-progress-implied",
        "title": "--all-progress-implied",
        "description": "This is used to imply --all-progress whenever progress display\nis activated.  Unlike --all-progress this flag doesn’t actually\nforce any progress display by itself."
      },
      {
        "type": "long",
        "key": "version",
        "title": "--version=<version>",
        "description": "Specify the bundle version.  Version 2 is the older format and can only be\nused with SHA-1 repositories; the newer version 3 contains capabilities that\npermit extensions. The default is the oldest supported format, based on the\nhash algorithm in use."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "This flag makes the command not to report its progress\non the standard error stream."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "This flag makes the command not to report its progress\non the standard error stream."
      }
    ]
  },
  {
    "name": "git checkout",
    "options": [
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress, --no-progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet\nis specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet."
      },
      {
        "type": "long",
        "key": "no-progress",
        "title": "--progress, --no-progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet\nis specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "When switching branches, proceed even if the index or the\nworking tree differs from HEAD.  This is used to throw away\nlocal changes.\n\nWhen checking out paths from the index, do not fail upon unmerged\nentries; instead, unmerged entries are ignored."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "When switching branches, proceed even if the index or the\nworking tree differs from HEAD.  This is used to throw away\nlocal changes.\n\nWhen checking out paths from the index, do not fail upon unmerged\nentries; instead, unmerged entries are ignored."
      },
      {
        "type": "long",
        "key": "ours",
        "title": "--ours, --theirs",
        "description": "When checking out paths from the index, check out stage #2\n(ours) or #3 (theirs) for unmerged paths.\n\nNote that during git rebase and git pull --rebase, ours and\ntheirs may appear swapped; --ours gives the version from the\nbranch the changes are rebased onto, while --theirs gives the\nversion from the branch that holds your work that is being rebased.\n\n\nThis is because rebase is used in a workflow that treats the\nhistory at the remote as the shared canonical one, and treats the\nwork done on the branch you are rebasing as the third-party work to\nbe integrated, and you are temporarily assuming the role of the\nkeeper of the canonical history during the rebase.  As the keeper of\nthe canonical history, you need to view the history from the remote\nas ours (i.e. \"our shared canonical history\"), while what you did\non your side branch as theirs (i.e. \"one contributor’s work on top\nof it\")."
      },
      {
        "type": "long",
        "key": "theirs",
        "title": "--ours, --theirs",
        "description": "When checking out paths from the index, check out stage #2\n(ours) or #3 (theirs) for unmerged paths.\n\nNote that during git rebase and git pull --rebase, ours and\ntheirs may appear swapped; --ours gives the version from the\nbranch the changes are rebased onto, while --theirs gives the\nversion from the branch that holds your work that is being rebased.\n\n\nThis is because rebase is used in a workflow that treats the\nhistory at the remote as the shared canonical one, and treats the\nwork done on the branch you are rebasing as the third-party work to\nbe integrated, and you are temporarily assuming the role of the\nkeeper of the canonical history during the rebase.  As the keeper of\nthe canonical history, you need to view the history from the remote\nas ours (i.e. \"our shared canonical history\"), while what you did\non your side branch as theirs (i.e. \"one contributor’s work on top\nof it\")."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b <new_branch>",
        "description": "Create a new branch named <new_branch> and start it at\n<start_point>; see git-branch[1] for details."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B <new_branch>",
        "description": "Creates the branch <new_branch> and start it at <start_point>;\nif it already exists, then reset it to <start_point>. This is\nequivalent to running \"git branch\" with \"-f\"; see\ngit-branch[1] for details."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t, --track",
        "description": "When creating a new branch, set up \"upstream\" configuration. See\n\"--track\" in git-branch[1] for details.\n\nIf no -b option is given, the name of the new branch will be\nderived from the remote-tracking branch, by looking at the local part of\nthe refspec configured for the corresponding remote, and then stripping\nthe initial part up to the \"*\".\nThis would tell us to use hack as the local branch when branching\noff of origin/hack (or remotes/origin/hack, or even\nrefs/remotes/origin/hack).  If the given name has no slash, or the above\nguessing results in an empty name, the guessing is aborted.  You can\nexplicitly give a name with -b in such a case."
      },
      {
        "type": "long",
        "key": "track",
        "title": "-t, --track",
        "description": "When creating a new branch, set up \"upstream\" configuration. See\n\"--track\" in git-branch[1] for details.\n\nIf no -b option is given, the name of the new branch will be\nderived from the remote-tracking branch, by looking at the local part of\nthe refspec configured for the corresponding remote, and then stripping\nthe initial part up to the \"*\".\nThis would tell us to use hack as the local branch when branching\noff of origin/hack (or remotes/origin/hack, or even\nrefs/remotes/origin/hack).  If the given name has no slash, or the above\nguessing results in an empty name, the guessing is aborted.  You can\nexplicitly give a name with -b in such a case."
      },
      {
        "type": "long",
        "key": "no-track",
        "title": "--no-track",
        "description": "Do not set up \"upstream\" configuration, even if the\nbranch.autoSetupMerge configuration variable is true."
      },
      {
        "type": "long",
        "key": "guess",
        "title": "--guess, --no-guess",
        "description": "If <branch> is not found but there does exist a tracking\nbranch in exactly one remote (call it <remote>) with a\nmatching name, treat as equivalent to\n\n\n$ git checkout -b <branch> --track <remote>/<branch>\n\n\n\nIf the branch exists in multiple remotes and one of them is named by\nthe checkout.defaultRemote configuration variable, we’ll use that\none for the purposes of disambiguation, even if the <branch> isn’t\nunique across all remotes. Set it to\ne.g. checkout.defaultRemote=origin to always checkout remote\nbranches from there if <branch> is ambiguous but exists on the\norigin remote. See also checkout.defaultRemote in\ngit-config[1].\n\n\n--guess is the default behavior. Use --no-guess to disable it.\n\n\nThe default behavior can be set via the checkout.guess configuration\nvariable."
      },
      {
        "type": "long",
        "key": "no-guess",
        "title": "--guess, --no-guess",
        "description": "If <branch> is not found but there does exist a tracking\nbranch in exactly one remote (call it <remote>) with a\nmatching name, treat as equivalent to\n\n\n$ git checkout -b <branch> --track <remote>/<branch>\n\n\n\nIf the branch exists in multiple remotes and one of them is named by\nthe checkout.defaultRemote configuration variable, we’ll use that\none for the purposes of disambiguation, even if the <branch> isn’t\nunique across all remotes. Set it to\ne.g. checkout.defaultRemote=origin to always checkout remote\nbranches from there if <branch> is ambiguous but exists on the\norigin remote. See also checkout.defaultRemote in\ngit-config[1].\n\n\n--guess is the default behavior. Use --no-guess to disable it.\n\n\nThe default behavior can be set via the checkout.guess configuration\nvariable."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l",
        "description": "Create the new branch’s reflog; see git-branch[1] for\ndetails."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --detach",
        "description": "Rather than checking out a branch to work on it, check out a\ncommit for inspection and discardable experiments.\nThis is the default behavior of git checkout <commit> when\n<commit> is not a branch name.  See the \"DETACHED HEAD\" section\nbelow for details."
      },
      {
        "type": "long",
        "key": "detach",
        "title": "-d, --detach",
        "description": "Rather than checking out a branch to work on it, check out a\ncommit for inspection and discardable experiments.\nThis is the default behavior of git checkout <commit> when\n<commit> is not a branch name.  See the \"DETACHED HEAD\" section\nbelow for details."
      },
      {
        "type": "long",
        "key": "ignore-skip-worktree-bits",
        "title": "--ignore-skip-worktree-bits",
        "description": "In sparse checkout mode, git checkout -- <paths> would\nupdate only entries matched by <paths> and sparse patterns\nin $GIT_DIR/info/sparse-checkout. This option ignores\nthe sparse patterns and adds back any files in <paths>."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --merge",
        "description": "When switching branches,\nif you have local modifications to one or more files that\nare different between the current branch and the branch to\nwhich you are switching, the command refuses to switch\nbranches in order to preserve your modifications in context.\nHowever, with this option, a three-way merge between the current\nbranch, your working tree contents, and the new branch\nis done, and you will be on the new branch.\n\nWhen a merge conflict happens, the index entries for conflicting\npaths are left unmerged, and you need to resolve the conflicts\nand mark the resolved paths with git add (or git rm if the merge\nshould result in deletion of the path).\n\n\nWhen checking out paths from the index, this option lets you recreate\nthe conflicted merge in the specified paths.\n\n\nWhen switching branches with --merge, staged changes may be lost."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "-m, --merge",
        "description": "When switching branches,\nif you have local modifications to one or more files that\nare different between the current branch and the branch to\nwhich you are switching, the command refuses to switch\nbranches in order to preserve your modifications in context.\nHowever, with this option, a three-way merge between the current\nbranch, your working tree contents, and the new branch\nis done, and you will be on the new branch.\n\nWhen a merge conflict happens, the index entries for conflicting\npaths are left unmerged, and you need to resolve the conflicts\nand mark the resolved paths with git add (or git rm if the merge\nshould result in deletion of the path).\n\n\nWhen checking out paths from the index, this option lets you recreate\nthe conflicted merge in the specified paths.\n\n\nWhen switching branches with --merge, staged changes may be lost."
      },
      {
        "type": "long",
        "key": "conflict",
        "title": "--conflict=<style>",
        "description": "The same as --merge option above, but changes the way the\nconflicting hunks are presented, overriding the\nmerge.conflictStyle configuration variable.  Possible values are\n\"merge\" (default) and \"diff3\" (in addition to what is shown by\n\"merge\" style, shows the original contents)."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --patch",
        "description": "Interactively select hunks in the difference between the\n<tree-ish> (or the index, if unspecified) and the working\ntree.  The chosen hunks are then applied in reverse to the\nworking tree (and if a <tree-ish> was specified, the index).\n\nThis means that you can use git checkout -p to selectively discard\nedits from your current working tree. See the “Interactive Mode”\nsection of git-add[1] to learn how to operate the --patch mode.\n\n\nNote that this option uses the no overlay mode by default (see also\n--overlay), and currently doesn’t support overlay mode."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, --patch",
        "description": "Interactively select hunks in the difference between the\n<tree-ish> (or the index, if unspecified) and the working\ntree.  The chosen hunks are then applied in reverse to the\nworking tree (and if a <tree-ish> was specified, the index).\n\nThis means that you can use git checkout -p to selectively discard\nedits from your current working tree. See the “Interactive Mode”\nsection of git-add[1] to learn how to operate the --patch mode.\n\n\nNote that this option uses the no overlay mode by default (see also\n--overlay), and currently doesn’t support overlay mode."
      },
      {
        "type": "long",
        "key": "ignore-other-worktrees",
        "title": "--ignore-other-worktrees",
        "description": "git checkout refuses when the wanted ref is already checked\nout by another worktree. This option makes it check the ref\nout anyway. In other words, the ref can be held by more than one\nworktree."
      },
      {
        "type": "long",
        "key": "overwrite-ignore",
        "title": "--overwrite-ignore, --no-overwrite-ignore",
        "description": "Silently overwrite ignored files when switching branches. This\nis the default behavior. Use --no-overwrite-ignore to abort\nthe operation when the new branch contains ignored files."
      },
      {
        "type": "long",
        "key": "no-overwrite-ignore",
        "title": "--overwrite-ignore, --no-overwrite-ignore",
        "description": "Silently overwrite ignored files when switching branches. This\nis the default behavior. Use --no-overwrite-ignore to abort\nthe operation when the new branch contains ignored files."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules, --no-recurse-submodules",
        "description": "Using --recurse-submodules will update the content of all active\nsubmodules according to the commit recorded in the superproject. If\nlocal modifications in a submodule would be overwritten the checkout\nwill fail unless -f is used. If nothing (or --no-recurse-submodules)\nis used, submodules working trees will not be updated.\nJust like git-submodule[1], this will detach HEAD of the\nsubmodule."
      },
      {
        "type": "long",
        "key": "no-recurse-submodules",
        "title": "--recurse-submodules, --no-recurse-submodules",
        "description": "Using --recurse-submodules will update the content of all active\nsubmodules according to the commit recorded in the superproject. If\nlocal modifications in a submodule would be overwritten the checkout\nwill fail unless -f is used. If nothing (or --no-recurse-submodules)\nis used, submodules working trees will not be updated.\nJust like git-submodule[1], this will detach HEAD of the\nsubmodule."
      },
      {
        "type": "long",
        "key": "overlay",
        "title": "--overlay, --no-overlay",
        "description": "In the default overlay mode, git checkout never\nremoves files from the index or the working tree.  When\nspecifying --no-overlay, files that appear in the index and\nworking tree, but not in <tree-ish> are removed, to make them\nmatch <tree-ish> exactly."
      },
      {
        "type": "long",
        "key": "no-overlay",
        "title": "--overlay, --no-overlay",
        "description": "In the default overlay mode, git checkout never\nremoves files from the index or the working tree.  When\nspecifying --no-overlay, files that appear in the index and\nworking tree, but not in <tree-ish> are removed, to make them\nmatch <tree-ish> exactly."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "Pathspec is passed in <file> instead of commandline args. If\n<file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath\n(see git-config[1]). See also --pathspec-file-nul and\nglobal --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "Only meaningful with --pathspec-from-file. Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."
      }
    ]
  },
  {
    "name": "git cherry-pick",
    "options": [
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "With this option, git cherry-pick will let you edit the commit\nmessage prior to committing."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "With this option, git cherry-pick will let you edit the commit\nmessage prior to committing."
      },
      {
        "type": "long",
        "key": "cleanup",
        "title": "--cleanup=<mode>",
        "description": "This option determines how the commit message will be cleaned up before\nbeing passed on to the commit machinery. See git-commit[1] for more\ndetails. In particular, if the <mode> is given a value of scissors,\nscissors will be appended to MERGE_MSG before being passed on in the case\nof a conflict."
      },
      {
        "type": "short",
        "key": "x",
        "title": "-x",
        "description": "When recording the commit, append a line that says\n\"(cherry picked from commit …​)\" to the original commit\nmessage in order to indicate which commit this change was\ncherry-picked from.  This is done only for cherry\npicks without conflicts.  Do not use this option if\nyou are cherry-picking from your private branch because\nthe information is useless to the recipient.  If on the\nother hand you are cherry-picking between two publicly\nvisible branches (e.g. backporting a fix to a\nmaintenance branch for an older release from a\ndevelopment branch), adding this information can be\nuseful."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r",
        "description": "It used to be that the command defaulted to do -x\ndescribed above, and -r was to disable it.  Now the\ndefault is not to do -x so this option is a no-op."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m parent-number, --mainline parent-number",
        "description": "Usually you cannot cherry-pick a merge because you do not know which\nside of the merge should be considered the mainline.  This\noption specifies the parent number (starting from 1) of\nthe mainline and allows cherry-pick to replay the change\nrelative to the specified parent."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-commit",
        "description": "Usually the command automatically creates a sequence of commits.\nThis flag applies the changes necessary to cherry-pick\neach named commit to your working tree and the index,\nwithout making any commit.  In addition, when this\noption is used, your index does not have to match the\nHEAD commit.  The cherry-pick is done against the\nbeginning state of your index.\n\nThis is useful when cherry-picking more than one commits'\neffect to your index in a row."
      },
      {
        "type": "long",
        "key": "no-commit",
        "title": "-n, --no-commit",
        "description": "Usually the command automatically creates a sequence of commits.\nThis flag applies the changes necessary to cherry-pick\neach named commit to your working tree and the index,\nwithout making any commit.  In addition, when this\noption is used, your index does not have to match the\nHEAD commit.  The cherry-pick is done against the\nbeginning state of your index.\n\nThis is useful when cherry-picking more than one commits'\neffect to your index in a row."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer at the end of the commit message.\nSee the signoff option in git-commit[1] for more information."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer at the end of the commit message.\nSee the signoff option in git-commit[1] for more information."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "ff",
        "title": "--ff",
        "description": "If the current HEAD is the same as the parent of the\ncherry-pick’ed commit, then a fast forward to this commit will\nbe performed."
      },
      {
        "type": "long",
        "key": "allow-empty",
        "title": "--allow-empty",
        "description": "By default, cherry-picking an empty commit will fail,\nindicating that an explicit invocation of git commit\n--allow-empty is required. This option overrides that\nbehavior, allowing empty commits to be preserved automatically\nin a cherry-pick. Note that when \"--ff\" is in effect, empty\ncommits that meet the \"fast-forward\" requirement will be kept\neven without this option.  Note also, that use of this option only\nkeeps commits that were initially empty (i.e. the commit recorded the\nsame tree as its parent).  Commits which are made empty due to a\nprevious commit are dropped.  To force the inclusion of those commits\nuse --keep-redundant-commits."
      },
      {
        "type": "long",
        "key": "allow-empty-message",
        "title": "--allow-empty-message",
        "description": "By default, cherry-picking a commit with an empty message will fail.\nThis option overrides that behavior, allowing commits with empty\nmessages to be cherry picked."
      },
      {
        "type": "long",
        "key": "keep-redundant-commits",
        "title": "--keep-redundant-commits",
        "description": "If a commit being cherry picked duplicates a commit already in the\ncurrent history, it will become empty.  By default these\nredundant commits cause cherry-pick to stop so the user can\nexamine the commit. This option overrides that behavior and\ncreates an empty commit object.  Implies --allow-empty."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "--strategy=<strategy>",
        "description": "Use the given merge strategy.  Should only be used once.\nSee the MERGE STRATEGIES section in git-merge[1]\nfor details."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X<option>, --strategy-option=<option>",
        "description": "Pass the merge strategy-specific option through to the\nmerge strategy.  See git-merge[1] for details."
      },
      {
        "type": "long",
        "key": "strategy-option",
        "title": "-X<option>, --strategy-option=<option>",
        "description": "Pass the merge strategy-specific option through to the\nmerge strategy.  See git-merge[1] for details."
      },
      {
        "type": "long",
        "key": "rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the\nresult of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "no-rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the\nresult of auto-conflict resolution if possible."
      }
    ]
  },
  {
    "name": "git citool",
    "options": []
  },
  {
    "name": "git clean",
    "options": [
      {
        "type": "short",
        "key": "d",
        "title": "-d",
        "description": "Normally, when no <path> is specified, git clean will not\nrecurse into untracked directories to avoid removing too much.\nSpecify -d to have it recurse into such directories as well.\nIf any paths are specified, -d is irrelevant; all untracked\nfiles matching the specified paths (with exceptions for nested\ngit directories mentioned under --force) will be removed."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "If the Git configuration variable clean.requireForce is not set\nto false, git clean will refuse to delete files or directories\nunless given -f or -i.  Git will refuse to modify untracked\nnested git repositories (directories with a .git subdirectory)\nunless a second -f is given."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "If the Git configuration variable clean.requireForce is not set\nto false, git clean will refuse to delete files or directories\nunless given -f or -i.  Git will refuse to modify untracked\nnested git repositories (directories with a .git subdirectory)\nunless a second -f is given."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --interactive",
        "description": "Show what would be done and clean files interactively. See\n“Interactive mode” for details."
      },
      {
        "type": "long",
        "key": "interactive",
        "title": "-i, --interactive",
        "description": "Show what would be done and clean files interactively. See\n“Interactive mode” for details."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Don’t actually remove anything, just show what would be done."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Don’t actually remove anything, just show what would be done."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Be quiet, only report errors, but not the files that are\nsuccessfully removed."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Be quiet, only report errors, but not the files that are\nsuccessfully removed."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e <pattern>, --exclude=<pattern>",
        "description": "Use the given exclude pattern in addition to the standard ignore rules\n(see gitignore[5])."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "-e <pattern>, --exclude=<pattern>",
        "description": "Use the given exclude pattern in addition to the standard ignore rules\n(see gitignore[5])."
      },
      {
        "type": "short",
        "key": "x",
        "title": "-x",
        "description": "Don’t use the standard ignore rules (see gitignore[5]), but\nstill use the ignore rules given with -e options from the command\nline.  This allows removing all untracked\nfiles, including build products.  This can be used (possibly in\nconjunction with git restore or git reset) to create a pristine\nworking directory to test a clean build."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X",
        "description": "Remove only files ignored by Git.  This may be useful to rebuild\neverything from scratch, but keep manually created files."
      }
    ]
  },
  {
    "name": "git clone",
    "options": [
      {
        "type": "short",
        "key": "l",
        "title": "-l, --local",
        "description": "When the repository to clone from is on a local machine,\nthis flag bypasses the normal \"Git aware\" transport\nmechanism and clones the repository by making a copy of\nHEAD and everything under objects and refs directories.\nThe files under .git/objects/ directory are hardlinked\nto save space when possible.\n\nIf the repository is specified as a local path (e.g., /path/to/repo),\nthis is the default, and --local is essentially a no-op.  If the\nrepository is specified as a URL, then this flag is ignored (and we\nnever use the local optimizations).  Specifying --no-local will\noverride the default when /path/to/repo is given, using the regular\nGit transport instead.\n\n\nNOTE: this operation can race with concurrent modification to the\nsource repository, similar to running cp -r src dst while modifying\nsrc."
      },
      {
        "type": "long",
        "key": "local",
        "title": "-l, --local",
        "description": "When the repository to clone from is on a local machine,\nthis flag bypasses the normal \"Git aware\" transport\nmechanism and clones the repository by making a copy of\nHEAD and everything under objects and refs directories.\nThe files under .git/objects/ directory are hardlinked\nto save space when possible.\n\nIf the repository is specified as a local path (e.g., /path/to/repo),\nthis is the default, and --local is essentially a no-op.  If the\nrepository is specified as a URL, then this flag is ignored (and we\nnever use the local optimizations).  Specifying --no-local will\noverride the default when /path/to/repo is given, using the regular\nGit transport instead.\n\n\nNOTE: this operation can race with concurrent modification to the\nsource repository, similar to running cp -r src dst while modifying\nsrc."
      },
      {
        "type": "long",
        "key": "no-hardlinks",
        "title": "--no-hardlinks",
        "description": "Force the cloning process from a repository on a local\nfilesystem to copy the files under the .git/objects\ndirectory instead of using hardlinks. This may be desirable\nif you are trying to make a back-up of your repository."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --shared",
        "description": "When the repository to clone is on the local machine,\ninstead of using hard links, automatically setup\n.git/objects/info/alternates to share the objects\nwith the source repository.  The resulting repository\nstarts out without any object of its own.\n\nNOTE: this is a possibly dangerous operation; do not use\nit unless you understand what it does. If you clone your\nrepository using this option and then delete branches (or use any\nother Git command that makes any existing commit unreferenced) in the\nsource repository, some objects may become unreferenced (or dangling).\nThese objects may be removed by normal Git operations (such as git commit)\nwhich automatically call git maintenance run --auto. (See\ngit-maintenance[1].) If these objects are removed and were referenced\nby the cloned repository, then the cloned repository will become corrupt.\n\n\nNote that running git repack without the --local option in a repository\ncloned with --shared will copy objects from the source repository into a pack\nin the cloned repository, removing the disk space savings of clone --shared.\nIt is safe, however, to run git gc, which uses the --local option by\ndefault.\n\n\nIf you want to break the dependency of a repository cloned with --shared on\nits source repository, you can simply run git repack -a to copy all\nobjects from the source repository into a pack in the cloned repository."
      },
      {
        "type": "long",
        "key": "shared",
        "title": "-s, --shared",
        "description": "When the repository to clone is on the local machine,\ninstead of using hard links, automatically setup\n.git/objects/info/alternates to share the objects\nwith the source repository.  The resulting repository\nstarts out without any object of its own.\n\nNOTE: this is a possibly dangerous operation; do not use\nit unless you understand what it does. If you clone your\nrepository using this option and then delete branches (or use any\nother Git command that makes any existing commit unreferenced) in the\nsource repository, some objects may become unreferenced (or dangling).\nThese objects may be removed by normal Git operations (such as git commit)\nwhich automatically call git maintenance run --auto. (See\ngit-maintenance[1].) If these objects are removed and were referenced\nby the cloned repository, then the cloned repository will become corrupt.\n\n\nNote that running git repack without the --local option in a repository\ncloned with --shared will copy objects from the source repository into a pack\nin the cloned repository, removing the disk space savings of clone --shared.\nIt is safe, however, to run git gc, which uses the --local option by\ndefault.\n\n\nIf you want to break the dependency of a repository cloned with --shared on\nits source repository, you can simply run git repack -a to copy all\nobjects from the source repository into a pack in the cloned repository."
      },
      {
        "type": "long",
        "key": "dissociate",
        "title": "--dissociate",
        "description": "Borrow the objects from reference repositories specified\nwith the --reference options only to reduce network\ntransfer, and stop borrowing from them after a clone is made\nby making necessary local copies of borrowed objects.  This\noption can also be used when cloning locally from a\nrepository that already borrows objects from another\nrepository—​the new repository will borrow objects from the\nsame repository, and this option can be used to stop the\nborrowing."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Operate quietly.  Progress is not reported to the standard\nerror stream."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Operate quietly.  Progress is not reported to the standard\nerror stream."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Run verbosely. Does not affect the reporting of progress status\nto the standard error stream."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Run verbosely. Does not affect the reporting of progress status\nto the standard error stream."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal."
      },
      {
        "type": "long",
        "key": "server-option",
        "title": "--server-option=<option>",
        "description": "Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.  The server’s handling of server options, including\nunknown ones, is server-specific.\nWhen multiple --server-option=<option> are given, they are all\nsent to the other side in the order listed on the command line."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-checkout",
        "description": "No checkout of HEAD is performed after the clone is complete."
      },
      {
        "type": "long",
        "key": "no-checkout",
        "title": "-n, --no-checkout",
        "description": "No checkout of HEAD is performed after the clone is complete."
      },
      {
        "type": "long",
        "key": "reject-shallow",
        "title": "--[no-]reject-shallow",
        "description": "Fail if the source repository is a shallow repository.\nThe clone.rejectShallow configuration variable can be used to\nspecify the default."
      },
      {
        "type": "long",
        "key": "bare",
        "title": "--bare",
        "description": "Make a bare Git repository.  That is, instead of\ncreating <directory> and placing the administrative\nfiles in <directory>/.git, make the <directory>\nitself the $GIT_DIR. This obviously implies the --no-checkout\nbecause there is nowhere to check out the working tree.\nAlso the branch heads at the remote are copied directly\nto corresponding local branch heads, without mapping\nthem to refs/remotes/origin/.  When this option is\nused, neither remote-tracking branches nor the related\nconfiguration variables are created."
      },
      {
        "type": "long",
        "key": "sparse",
        "title": "--sparse",
        "description": "Initialize the sparse-checkout file so the working\ndirectory starts with only the files in the root\nof the repository. The sparse-checkout file can be\nmodified to grow the working directory as needed."
      },
      {
        "type": "long",
        "key": "filter",
        "title": "--filter=<filter-spec>",
        "description": "Use the partial clone feature and request that the server sends\na subset of reachable objects according to a given object filter.\nWhen using --filter, the supplied <filter-spec> is used for\nthe partial clone filter. For example, --filter=blob:none will\nfilter out all blobs (file contents) until needed by Git. Also,\n--filter=blob:limit=<size> will filter out all blobs of size\nat least <size>. For more details on filter specifications, see\nthe --filter option in git-rev-list[1]."
      },
      {
        "type": "long",
        "key": "mirror",
        "title": "--mirror",
        "description": "Set up a mirror of the source repository.  This implies --bare.\nCompared to --bare, --mirror not only maps local branches of the\nsource to local branches of the target, it maps all refs (including\nremote-tracking branches, notes etc.) and sets up a refspec configuration such\nthat all these refs are overwritten by a git remote update in the\ntarget repository."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <name>, --origin <name>",
        "description": "Instead of using the remote name origin to keep track of the upstream\nrepository, use <name>.  Overrides clone.defaultRemoteName from the\nconfig."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b <name>, --branch <name>",
        "description": "Instead of pointing the newly created HEAD to the branch pointed\nto by the cloned repository’s HEAD, point to <name> branch\ninstead. In a non-bare repository, this is the branch that will\nbe checked out.\n--branch can also take tags and detaches the HEAD at that commit\nin the resulting repository."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u <upload-pack>, --upload-pack <upload-pack>",
        "description": "When given, and the repository to clone from is accessed\nvia ssh, this specifies a non-default path for the command\nrun on the other end."
      },
      {
        "type": "long",
        "key": "template",
        "title": "--template=<template_directory>",
        "description": "Specify the directory from which templates will be used;\n(See the \"TEMPLATE DIRECTORY\" section of git-init[1].)"
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c <key>=<value>, --config <key>=<value>",
        "description": "Set a configuration variable in the newly-created repository;\nthis takes effect immediately after the repository is\ninitialized, but before the remote history is fetched or any\nfiles checked out.  The key is in the same format as expected by\ngit-config[1] (e.g., core.eol=true). If multiple\nvalues are given for the same key, each value will be written to\nthe config file. This makes it safe, for example, to add\nadditional fetch refspecs to the origin remote.\n\nDue to limitations of the current implementation, some configuration\nvariables do not take effect until after the initial fetch and checkout.\nConfiguration variables known to not take effect are:\nremote.<name>.mirror and remote.<name>.tagOpt.  Use the\ncorresponding --mirror and --no-tags options instead."
      },
      {
        "type": "long",
        "key": "shallow-since",
        "title": "--shallow-since=<date>",
        "description": "Create a shallow clone with a history after the specified time."
      },
      {
        "type": "long",
        "key": "shallow-exclude",
        "title": "--shallow-exclude=<revision>",
        "description": "Create a shallow clone with a history, excluding commits\nreachable from a specified remote branch or tag.  This option\ncan be specified multiple times."
      },
      {
        "type": "long",
        "key": "single-branch",
        "title": "--[no-]single-branch",
        "description": "Clone only the history leading to the tip of a single branch,\neither specified by the --branch option or the primary\nbranch remote’s HEAD points at.\nFurther fetches into the resulting repository will only update the\nremote-tracking branch for the branch this option was used for the\ninitial cloning.  If the HEAD at the remote did not point at any\nbranch when --single-branch clone was made, no remote-tracking\nbranch is created."
      },
      {
        "type": "long",
        "key": "no-tags",
        "title": "--no-tags",
        "description": "Don’t clone any tags, and set\nremote.<remote>.tagOpt=--no-tags in the config, ensuring\nthat future git pull and git fetch operations won’t follow\nany tags. Subsequent explicit tag fetches will still work,\n(see git-fetch[1]).\n\nCan be used in conjunction with --single-branch to clone and\nmaintain a branch with no references other than a single cloned\nbranch. This is useful e.g. to maintain minimal clones of the default\nbranch of some repository for search indexing."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules[=<pathspec>]",
        "description": "After the clone is created, initialize and clone submodules\nwithin based on the provided pathspec.  If no pathspec is\nprovided, all submodules are initialized and cloned.\nThis option can be given multiple times for pathspecs consisting\nof multiple entries.  The resulting clone has submodule.active set to\nthe provided pathspec, or \".\" (meaning all submodules) if no\npathspec is provided.\n\nSubmodules are initialized and cloned using their default settings. This is\nequivalent to running\ngit submodule update --init --recursive <pathspec> immediately after\nthe clone is finished. This option is ignored if the cloned repository does\nnot have a worktree/checkout (i.e. if any of --no-checkout/-n, --bare,\nor --mirror is given)"
      },
      {
        "type": "long",
        "key": "shallow-submodules",
        "title": "--[no-]shallow-submodules",
        "description": "All submodules which are cloned will be shallow with a depth of 1."
      },
      {
        "type": "long",
        "key": "remote-submodules",
        "title": "--[no-]remote-submodules",
        "description": "All submodules which are cloned will use the status of the submodule’s\nremote-tracking branch to update the submodule, rather than the\nsuperproject’s recorded SHA-1. Equivalent to passing --remote to\ngit submodule update."
      },
      {
        "type": "long",
        "key": "separate-git-dir",
        "title": "--separate-git-dir=<git dir>",
        "description": "Instead of placing the cloned repository where it is supposed\nto be, place the cloned repository at the specified directory,\nthen make a filesystem-agnostic Git symbolic link to there.\nThe result is Git repository can be separated from working\ntree."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j <n>, --jobs <n>",
        "description": "The number of submodules fetched at the same time.\nDefaults to the submodule.fetchJobs option."
      }
    ]
  },
  {
    "name": "git commit",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "Tell the command to automatically stage files that have\nbeen modified and deleted, but new files you have not\ntold Git about are not affected."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "Tell the command to automatically stage files that have\nbeen modified and deleted, but new files you have not\ntold Git about are not affected."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --patch",
        "description": "Use the interactive patch selection interface to choose\nwhich changes to commit. See git-add[1] for\ndetails."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, --patch",
        "description": "Use the interactive patch selection interface to choose\nwhich changes to commit. See git-add[1] for\ndetails."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C <commit>, --reuse-message=<commit>",
        "description": "Take an existing commit object, and reuse the log message\nand the authorship information (including the timestamp)\nwhen creating the commit."
      },
      {
        "type": "long",
        "key": "reuse-message",
        "title": "-C <commit>, --reuse-message=<commit>",
        "description": "Take an existing commit object, and reuse the log message\nand the authorship information (including the timestamp)\nwhen creating the commit."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c <commit>, --reedit-message=<commit>",
        "description": "Like -C, but with -c the editor is invoked, so that\nthe user can further edit the commit message."
      },
      {
        "type": "long",
        "key": "reedit-message",
        "title": "-c <commit>, --reedit-message=<commit>",
        "description": "Like -C, but with -c the editor is invoked, so that\nthe user can further edit the commit message."
      },
      {
        "type": "long",
        "key": "fixup",
        "title": "--fixup=[(amend|reword):]<commit>",
        "description": "Create a new commit which \"fixes up\" <commit> when applied with\ngit rebase --autosquash. Plain --fixup=<commit> creates a\n\"fixup!\" commit which changes the content of <commit> but leaves\nits log message untouched. --fixup=amend:<commit> is similar but\ncreates an \"amend!\" commit which also replaces the log message of\n<commit> with the log message of the \"amend!\" commit.\n--fixup=reword:<commit> creates an \"amend!\" commit which\nreplaces the log message of <commit> with its own log message\nbut makes no changes to the content of <commit>.\n\nThe commit created by plain --fixup=<commit> has a subject\ncomposed of \"fixup!\" followed by the subject line from <commit>,\nand is recognized specially by git rebase --autosquash. The -m\noption may be used to supplement the log message of the created\ncommit, but the additional commentary will be thrown away once the\n\"fixup!\" commit is squashed into <commit> by\ngit rebase --autosquash.\n\n\nThe commit created by --fixup=amend:<commit> is similar but its\nsubject is instead prefixed with \"amend!\". The log message of\n<commit> is copied into the log message of the \"amend!\" commit and\nopened in an editor so it can be refined. When git rebase\n--autosquash squashes the \"amend!\" commit into <commit>, the\nlog message of <commit> is replaced by the refined log message\nfrom the \"amend!\" commit. It is an error for the \"amend!\" commit’s\nlog message to be empty unless --allow-empty-message is\nspecified.\n\n\n--fixup=reword:<commit> is shorthand for --fixup=amend:<commit>\n--only. It creates an \"amend!\" commit with only a log message\n(ignoring any changes staged in the index). When squashed by git\nrebase --autosquash, it replaces the log message of <commit>\nwithout making any other changes.\n\n\nNeither \"fixup!\" nor \"amend!\" commits change authorship of\n<commit> when applied by git rebase --autosquash.\nSee git-rebase[1] for details."
      },
      {
        "type": "long",
        "key": "squash",
        "title": "--squash=<commit>",
        "description": "Construct a commit message for use with rebase --autosquash.\nThe commit message subject line is taken from the specified\ncommit with a prefix of \"squash! \".  Can be used with additional\ncommit message options (-m/-c/-C/-F). See\ngit-rebase[1] for details."
      },
      {
        "type": "long",
        "key": "reset-author",
        "title": "--reset-author",
        "description": "When used with -C/-c/--amend options, or when committing after a\nconflicting cherry-pick, declare that the authorship of the\nresulting commit now belongs to the committer. This also renews\nthe author timestamp."
      },
      {
        "type": "long",
        "key": "short",
        "title": "--short",
        "description": "When doing a dry-run, give the output in the short-format. See\ngit-status[1] for details. Implies --dry-run."
      },
      {
        "type": "long",
        "key": "branch",
        "title": "--branch",
        "description": "Show the branch and tracking info even in short-format."
      },
      {
        "type": "long",
        "key": "porcelain",
        "title": "--porcelain",
        "description": "When doing a dry-run, give the output in a porcelain-ready\nformat. See git-status[1] for details. Implies\n--dry-run."
      },
      {
        "type": "long",
        "key": "long",
        "title": "--long",
        "description": "When doing a dry-run, give the output in the long-format.\nImplies --dry-run."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z, --null",
        "description": "When showing short or porcelain status output, print the\nfilename verbatim and terminate the entries with NUL, instead of LF.\nIf no format is given, implies the --porcelain output format.\nWithout the -z option, filenames with \"unusual\" characters are\nquoted as explained for the configuration variable core.quotePath\n(see git-config[1])."
      },
      {
        "type": "long",
        "key": "null",
        "title": "-z, --null",
        "description": "When showing short or porcelain status output, print the\nfilename verbatim and terminate the entries with NUL, instead of LF.\nIf no format is given, implies the --porcelain output format.\nWithout the -z option, filenames with \"unusual\" characters are\nquoted as explained for the configuration variable core.quotePath\n(see git-config[1])."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F <file>, --file=<file>",
        "description": "Take the commit message from the given file.  Use - to\nread the message from the standard input."
      },
      {
        "type": "long",
        "key": "file",
        "title": "-F <file>, --file=<file>",
        "description": "Take the commit message from the given file.  Use - to\nread the message from the standard input."
      },
      {
        "type": "long",
        "key": "author",
        "title": "--author=<author>",
        "description": "Override the commit author. Specify an explicit author using the\nstandard A U Thor <author@example.com> format. Otherwise <author>\nis assumed to be a pattern and is used to search for an existing\ncommit by that author (i.e. rev-list --all -i --author=<author>);\nthe commit author is then copied from the first such commit found."
      },
      {
        "type": "long",
        "key": "date",
        "title": "--date=<date>",
        "description": "Override the author date used in the commit."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m <msg>, --message=<msg>",
        "description": "Use the given <msg> as the commit message.\nIf multiple -m options are given, their values are\nconcatenated as separate paragraphs.\n\nThe -m option is mutually exclusive with -c, -C, and -F."
      },
      {
        "type": "long",
        "key": "message",
        "title": "-m <msg>, --message=<msg>",
        "description": "Use the given <msg> as the commit message.\nIf multiple -m options are given, their values are\nconcatenated as separate paragraphs.\n\nThe -m option is mutually exclusive with -c, -C, and -F."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t <file>, --template=<file>",
        "description": "When editing the commit message, start the editor with the\ncontents in the given file.  The commit.template configuration\nvariable is often used to give this option implicitly to the\ncommand.  This mechanism can be used by projects that want to\nguide participants with some hints on what to write in the message\nin what order.  If the user exits the editor without editing the\nmessage, the commit is aborted.  This has no effect when a message\nis given by other means, e.g. with the -m or -F options."
      },
      {
        "type": "long",
        "key": "template",
        "title": "-t <file>, --template=<file>",
        "description": "When editing the commit message, start the editor with the\ncontents in the given file.  The commit.template configuration\nvariable is often used to give this option implicitly to the\ncommand.  This mechanism can be used by projects that want to\nguide participants with some hints on what to write in the message\nin what order.  If the user exits the editor without editing the\nmessage, the commit is aborted.  This has no effect when a message\nis given by other means, e.g. with the -m or -F options."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit\nlog message.  The meaning of a signoff depends on the project\nto which you’re committing.  For example, it may certify that\nthe committer has the rights to submit the work under the\nproject’s license or agrees to some contributor representation,\nsuch as a Developer Certificate of Origin.\n(See http://developercertificate.org for the one used by the\nLinux kernel and Git projects.)  Consult the documentation or\nleadership of the project to which you’re contributing to\nunderstand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff\noption on the command line."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "-s, --signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit\nlog message.  The meaning of a signoff depends on the project\nto which you’re committing.  For example, it may certify that\nthe committer has the rights to submit the work under the\nproject’s license or agrees to some contributor representation,\nsuch as a Developer Certificate of Origin.\n(See http://developercertificate.org for the one used by the\nLinux kernel and Git projects.)  Consult the documentation or\nleadership of the project to which you’re contributing to\nunderstand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff\noption on the command line."
      },
      {
        "type": "long",
        "key": "no-signoff",
        "title": "-s, --signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit\nlog message.  The meaning of a signoff depends on the project\nto which you’re committing.  For example, it may certify that\nthe committer has the rights to submit the work under the\nproject’s license or agrees to some contributor representation,\nsuch as a Developer Certificate of Origin.\n(See http://developercertificate.org for the one used by the\nLinux kernel and Git projects.)  Consult the documentation or\nleadership of the project to which you’re contributing to\nunderstand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff\noption on the command line."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-verify",
        "description": "This option bypasses the pre-commit and commit-msg hooks.\nSee also githooks[5]."
      },
      {
        "type": "long",
        "key": "no-verify",
        "title": "-n, --no-verify",
        "description": "This option bypasses the pre-commit and commit-msg hooks.\nSee also githooks[5]."
      },
      {
        "type": "long",
        "key": "allow-empty",
        "title": "--allow-empty",
        "description": "Usually recording a commit that has the exact same tree as its\nsole parent commit is a mistake, and the command prevents you\nfrom making such a commit.  This option bypasses the safety, and\nis primarily for use by foreign SCM interface scripts."
      },
      {
        "type": "long",
        "key": "allow-empty-message",
        "title": "--allow-empty-message",
        "description": "Like --allow-empty this command is primarily for use by foreign\nSCM interface scripts. It allows you to create a commit with an\nempty commit message without using plumbing commands like\ngit-commit-tree[1]."
      },
      {
        "type": "long",
        "key": "cleanup",
        "title": "--cleanup=<mode>",
        "description": "This option determines how the supplied commit message should be\ncleaned up before committing.  The <mode> can be strip,\nwhitespace, verbatim, scissors or default.\n\n\n\n\n strip \n\nStrip leading and trailing empty lines, trailing whitespace,\ncommentary and collapse consecutive empty lines.\n\n whitespace \n\nSame as strip except #commentary is not removed.\n\n verbatim \n\nDo not change the message at all.\n\n scissors \n\nSame as whitespace except that everything from (and including)\nthe line found below is truncated, if the message is to be edited.\n\"#\" can be customized with core.commentChar.\n\n\n# ------------------------ >8 ------------------------\n\n\n\n default \n\nSame as strip if the message is to be edited.\nOtherwise whitespace.\n\n\n\n\n\n\nThe default can be changed by the commit.cleanup configuration\nvariable (see git-config[1])."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "The message taken from file with -F, command line with\n-m, and from commit object with -C are usually used as\nthe commit log message unmodified. This option lets you\nfurther edit the message taken from these sources."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "The message taken from file with -F, command line with\n-m, and from commit object with -C are usually used as\nthe commit log message unmodified. This option lets you\nfurther edit the message taken from these sources."
      },
      {
        "type": "long",
        "key": "no-edit",
        "title": "--no-edit",
        "description": "Use the selected commit message without launching an editor.\nFor example, git commit --amend --no-edit amends a commit\nwithout changing its commit message."
      },
      {
        "type": "long",
        "key": "amend",
        "title": "--amend",
        "description": "Replace the tip of the current branch by creating a new\ncommit. The recorded tree is prepared as usual (including\nthe effect of the -i and -o options and explicit\npathspec), and the message from the original commit is used\nas the starting point, instead of an empty message, when no\nother message is specified from the command line via options\nsuch as -m, -F, -c, etc.  The new commit has the same\nparents and author as the current one (the --reset-author\noption can countermand this).\n\n\n\nIt is a rough equivalent for:\n\n\n\n\t$ git reset --soft HEAD^\n\t$ ... do something else to come up with the right tree ...\n\t$ git commit -c ORIG_HEAD\n\n\n\nbut can be used to amend a merge commit.\n\n\n\n\nYou should understand the implications of rewriting history if you\namend a commit that has already been published.  (See the \"RECOVERING\nFROM UPSTREAM REBASE\" section in git-rebase[1].)"
      },
      {
        "type": "long",
        "key": "no-post-rewrite",
        "title": "--no-post-rewrite",
        "description": "Bypass the post-rewrite hook."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --include",
        "description": "Before making a commit out of staged contents so far,\nstage the contents of paths given on the command line\nas well.  This is usually not what you want unless you\nare concluding a conflicted merge."
      },
      {
        "type": "long",
        "key": "include",
        "title": "-i, --include",
        "description": "Before making a commit out of staged contents so far,\nstage the contents of paths given on the command line\nas well.  This is usually not what you want unless you\nare concluding a conflicted merge."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o, --only",
        "description": "Make a commit by taking the updated working tree contents\nof the paths specified on the\ncommand line, disregarding any contents that have been\nstaged for other paths. This is the default mode of operation of\ngit commit if any paths are given on the command line,\nin which case this option can be omitted.\nIf this option is specified together with --amend, then\nno paths need to be specified, which can be used to amend\nthe last commit without committing changes that have\nalready been staged. If used together with --allow-empty\npaths are also not required, and an empty commit will be created."
      },
      {
        "type": "long",
        "key": "only",
        "title": "-o, --only",
        "description": "Make a commit by taking the updated working tree contents\nof the paths specified on the\ncommand line, disregarding any contents that have been\nstaged for other paths. This is the default mode of operation of\ngit commit if any paths are given on the command line,\nin which case this option can be omitted.\nIf this option is specified together with --amend, then\nno paths need to be specified, which can be used to amend\nthe last commit without committing changes that have\nalready been staged. If used together with --allow-empty\npaths are also not required, and an empty commit will be created."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "Pathspec is passed in <file> instead of commandline args. If\n<file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath\n(see git-config[1]). See also --pathspec-file-nul and\nglobal --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "Only meaningful with --pathspec-from-file. Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u[<mode>], --untracked-files[=<mode>]",
        "description": "Show untracked files.\n\n\n\nThe mode parameter is optional (defaults to all), and is used to\nspecify the handling of untracked files; when -u is not used, the\ndefault is normal, i.e. show untracked files and directories.\n\n\nThe possible options are:\n\n\n\n\nno     - Show no untracked files\n\n\nnormal - Shows untracked files and directories\n\n\nall    - Also shows individual files in untracked directories.\n\n\n\n\nThe default can be changed using the status.showUntrackedFiles\nconfiguration variable documented in git-config[1]."
      },
      {
        "type": "long",
        "key": "untracked-files",
        "title": "-u[<mode>], --untracked-files[=<mode>]",
        "description": "Show untracked files.\n\n\n\nThe mode parameter is optional (defaults to all), and is used to\nspecify the handling of untracked files; when -u is not used, the\ndefault is normal, i.e. show untracked files and directories.\n\n\nThe possible options are:\n\n\n\n\nno     - Show no untracked files\n\n\nnormal - Shows untracked files and directories\n\n\nall    - Also shows individual files in untracked directories.\n\n\n\n\nThe default can be changed using the status.showUntrackedFiles\nconfiguration variable documented in git-config[1]."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Show unified diff between the HEAD commit and what\nwould be committed at the bottom of the commit message\ntemplate to help the user describe the commit by reminding\nwhat changes the commit has.\nNote that this diff output doesn’t have its\nlines prefixed with #. This diff will not be a part\nof the commit message. See the commit.verbose configuration\nvariable in git-config[1].\n\nIf specified twice, show in addition the unified diff between\nwhat would be committed and the worktree files, i.e. the unstaged\nchanges to tracked files."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Show unified diff between the HEAD commit and what\nwould be committed at the bottom of the commit message\ntemplate to help the user describe the commit by reminding\nwhat changes the commit has.\nNote that this diff output doesn’t have its\nlines prefixed with #. This diff will not be a part\nof the commit message. See the commit.verbose configuration\nvariable in git-config[1].\n\nIf specified twice, show in addition the unified diff between\nwhat would be committed and the worktree files, i.e. the unstaged\nchanges to tracked files."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Suppress commit summary message."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Suppress commit summary message."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Do not create a commit, but show a list of paths that are\nto be committed, paths with local changes that will be left\nuncommitted and paths that are untracked."
      },
      {
        "type": "long",
        "key": "status",
        "title": "--status",
        "description": "Include the output of git-status[1] in the commit\nmessage template when using an editor to prepare the commit\nmessage.  Defaults to on, but can be used to override\nconfiguration variable commit.status."
      },
      {
        "type": "long",
        "key": "no-status",
        "title": "--no-status",
        "description": "Do not include the output of git-status[1] in the\ncommit message template when using an editor to prepare the\ndefault commit message."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      }
    ]
  },
  {
    "name": "git describe",
    "options": [
      {
        "type": "long",
        "key": "dirty",
        "title": "--dirty[=<mark>], --broken[=<mark>]",
        "description": "Describe the state of the working tree.  When the working\ntree matches HEAD, the output is the same as \"git describe\nHEAD\".  If the working tree has local modification \"-dirty\"\nis appended to it.  If a repository is corrupt and Git\ncannot determine if there is local modification, Git will\nerror out, unless ‘--broken’ is given, which appends\nthe suffix \"-broken\" instead."
      },
      {
        "type": "long",
        "key": "broken",
        "title": "--dirty[=<mark>], --broken[=<mark>]",
        "description": "Describe the state of the working tree.  When the working\ntree matches HEAD, the output is the same as \"git describe\nHEAD\".  If the working tree has local modification \"-dirty\"\nis appended to it.  If a repository is corrupt and Git\ncannot determine if there is local modification, Git will\nerror out, unless ‘--broken’ is given, which appends\nthe suffix \"-broken\" instead."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Instead of using only the annotated tags, use any ref\nfound in refs/ namespace.  This option enables matching\nany known branch, remote-tracking branch, or lightweight tag."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--tags",
        "description": "Instead of using only the annotated tags, use any tag\nfound in refs/tags namespace.  This option enables matching\na lightweight (non-annotated) tag."
      },
      {
        "type": "long",
        "key": "contains",
        "title": "--contains",
        "description": "Instead of finding the tag that predates the commit, find\nthe tag that comes after the commit, and thus contains it.\nAutomatically implies --tags."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev=<n>",
        "description": "Instead of using the default number of hexadecimal digits (which\nwill vary according to the number of objects in the repository with\na default of 7) of the abbreviated object name, use <n> digits, or\nas many digits as needed to form a unique object name. An <n> of 0\nwill suppress long format, only showing the closest tag."
      },
      {
        "type": "long",
        "key": "candidates",
        "title": "--candidates=<n>",
        "description": "Instead of considering only the 10 most recent tags as\ncandidates to describe the input commit-ish consider\nup to <n> candidates.  Increasing <n> above 10 will take\nslightly longer but may produce a more accurate result.\nAn <n> of 0 will cause only exact matches to be output."
      },
      {
        "type": "long",
        "key": "exact-match",
        "title": "--exact-match",
        "description": "Only output exact matches (a tag directly references the\nsupplied commit).  This is a synonym for --candidates=0."
      },
      {
        "type": "long",
        "key": "debug",
        "title": "--debug",
        "description": "Verbosely display information about the searching strategy\nbeing employed to standard error.  The tag name will still\nbe printed to standard out."
      },
      {
        "type": "long",
        "key": "long",
        "title": "--long",
        "description": "Always output the long format (the tag, the number of commits\nand the abbreviated commit name) even when it matches a tag.\nThis is useful when you want to see parts of the commit object name\nin \"describe\" output, even when the commit in question happens to be\na tagged version.  Instead of just emitting the tag name, it will\ndescribe such a commit as v1.2-0-gdeadbee (0th commit since tag v1.2\nthat points at object deadbee…​.)."
      },
      {
        "type": "long",
        "key": "always",
        "title": "--always",
        "description": "Show uniquely abbreviated commit object as fallback."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge commit.\nThis is useful when you wish to not match tags on branches merged\nin the history of the target commit."
      }
    ]
  },
  {
    "name": "git diff",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches).\nThis is the default."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches).\nThis is the default."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches).\nThis is the default."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that\nshow the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "long",
        "key": "no-patch",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that\nshow the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "short",
        "key": "U",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch."
      },
      {
        "type": "long",
        "key": "unified",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch."
      },
      {
        "type": "long",
        "key": "output",
        "title": "--output=<file>",
        "description": "Output to a specific file instead of stdout."
      },
      {
        "type": "long",
        "key": "output-indicator-new",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-old",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-context",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "Generate the diff in raw format."
      },
      {
        "type": "long",
        "key": "patch-with-raw",
        "title": "--patch-with-raw",
        "description": "Synonym for -p --raw."
      },
      {
        "type": "long",
        "key": "indent-heuristic",
        "title": "--indent-heuristic",
        "description": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."
      },
      {
        "type": "long",
        "key": "no-indent-heuristic",
        "title": "--no-indent-heuristic",
        "description": "Disable the indent heuristic."
      },
      {
        "type": "long",
        "key": "minimal",
        "title": "--minimal",
        "description": "Spend extra time to make sure the smallest possible\ndiff is produced."
      },
      {
        "type": "long",
        "key": "patience",
        "title": "--patience",
        "description": "Generate a diff using the \"patience diff\" algorithm."
      },
      {
        "type": "long",
        "key": "histogram",
        "title": "--histogram",
        "description": "Generate a diff using the \"histogram diff\" algorithm."
      },
      {
        "type": "long",
        "key": "anchored",
        "title": "--anchored=<text>",
        "description": "Generate a diff using the \"anchored diff\" algorithm.\n\nThis option may be specified more than once.\n\n\nIf a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."
      },
      {
        "type": "long",
        "key": "diff-algorithm",
        "title": "--diff-algorithm={patience|minimal|histogram|myers}",
        "description": "Choose a diff algorithm. The variants are as follows:\n\n\n\n\n default, myers \n\nThe basic greedy diff algorithm. Currently, this is the default.\n\n minimal \n\nSpend extra time to make sure the smallest possible diff is\nproduced.\n\n patience \n\nUse \"patience diff\" algorithm when generating patches.\n\n histogram \n\nThis algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\".\n\n\n\n\n\n\nFor instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat[=<width>[, <name-width>[, <count>]]]",
        "description": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by\n<width>. The width of the filename part can be limited by\ngiving another width <name-width> after a comma. The width\nof the graph part can be limited by using\n--stat-graph-width=<width> (affects all commands generating\na stat graph) or by setting diff.statGraphWidth=<width>\n(does not affect git format-patch).\nBy giving a third parameter <count>, you can limit the\noutput to the first <count> lines, followed by ... if\nthere are more.\n\nThese parameters can also be set individually with --stat-width=<width>,\n--stat-name-width=<name-width> and --stat-count=<count>."
      },
      {
        "type": "long",
        "key": "compact-summary",
        "title": "--compact-summary",
        "description": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat."
      },
      {
        "type": "long",
        "key": "numstat",
        "title": "--numstat",
        "description": "Similar to --stat, but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying\n0 0."
      },
      {
        "type": "long",
        "key": "shortstat",
        "title": "--shortstat",
        "description": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X[<param1, param2, …​>], --dirstat[=<param1, param2, …​>]",
        "description": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:\n\n\n\n\n changes \n\nCompute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.\n\n lines \n\nCompute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.\n\n files \n\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.\n\n cumulative \n\nCount changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.\n\n <limit> \n\nAn integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.\n\n\n\n\n\n\nExample: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories:\n--dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "dirstat",
        "title": "-X[<param1, param2, …​>], --dirstat[=<param1, param2, …​>]",
        "description": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:\n\n\n\n\n changes \n\nCompute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.\n\n lines \n\nCompute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.\n\n files \n\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.\n\n cumulative \n\nCount changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.\n\n <limit> \n\nAn integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.\n\n\n\n\n\n\nExample: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories:\n--dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "cumulative",
        "title": "--cumulative",
        "description": "Synonym for --dirstat=cumulative"
      },
      {
        "type": "long",
        "key": "dirstat-by-file",
        "title": "--dirstat-by-file[=<param1, param2>…​]",
        "description": "Synonym for --dirstat=files,param1,param2…​"
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary",
        "description": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."
      },
      {
        "type": "long",
        "key": "patch-with-stat",
        "title": "--patch-with-stat",
        "description": "Synonym for -p --stat."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "When --raw, --numstat, --name-only or --name-status has been\ngiven, do not munge pathnames and use NULs as output field terminators.\n\nWithout this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see\ngit-config[1])."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only",
        "description": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log[1]\nmanual page."
      },
      {
        "type": "long",
        "key": "name-status",
        "title": "--name-status",
        "description": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."
      },
      {
        "type": "long",
        "key": "submodule",
        "title": "--submodule[=<format>]",
        "description": "Specify how differences in submodules are shown.  When specifying\n--submodule=short the short format is used.  This format just\nshows the names of the commits at the beginning and end of the range.\nWhen --submodule or --submodule=log is specified, the log\nformat is used.  This format lists the commits in the range like\ngit-submodule[1] summary does.  When --submodule=diff\nis specified, the diff format is used.  This format shows an\ninline diff of the changes in the submodule contents between the\ncommit range.  Defaults to diff.submodule or the short format\nif the config option is unset."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Show colored diff.\n--color (i.e. without =<when>) is the same as --color=always.\n<when> can be one of always, never, or auto.\nIt can be changed by the color.ui and color.diff\nconfiguration settings."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off colored diff.\nThis can be used to override configuration settings.\nIt is the same as --color=never."
      },
      {
        "type": "long",
        "key": "color-moved",
        "title": "--color-moved[=<mode>]",
        "description": "Moved lines of code are colored differently.\nIt can be changed by the diff.colorMoved configuration setting.\nThe <mode> defaults to no if the option is not given\nand to zebra if the option with no mode is given.\nThe mode must be one of:\n\n\n\n\n no \n\nMoved lines are not highlighted.\n\n default \n\nIs a synonym for zebra. This may change to a more sensible mode\nin the future.\n\n plain \n\nAny line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved.\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation.\n\n blocks \n\nBlocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart.\n\n zebra \n\nBlocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or\ncolor.diff.{old,new}MovedAlternative. The change between\nthe two colors indicates that a new block was detected.\n\n dimmed-zebra \n\nSimilar to zebra, but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting.\ndimmed_zebra is a deprecated synonym."
      },
      {
        "type": "long",
        "key": "no-color-moved",
        "title": "--no-color-moved",
        "description": "Turn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no."
      },
      {
        "type": "long",
        "key": "color-moved-ws",
        "title": "--color-moved-ws=<modes>",
        "description": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved.\nIt can be set by the diff.colorMovedWS configuration setting.\nThese modes can be given as a comma separated list:\n\n\n\n\n no \n\nDo not ignore whitespace when performing move detection.\n\n ignore-space-at-eol \n\nIgnore changes in whitespace at EOL.\n\n ignore-space-change \n\nIgnore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.\n\n ignore-all-space \n\nIgnore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none.\n\n allow-indentation-change \n\nInitially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."
      },
      {
        "type": "long",
        "key": "no-color-moved-ws",
        "title": "--no-color-moved-ws",
        "description": "Do not ignore whitespace when performing move detection. This can be\nused to override configuration settings. It is the same as\n--color-moved-ws=no."
      },
      {
        "type": "long",
        "key": "word-diff",
        "title": "--word-diff[=<mode>]",
        "description": "Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see\n--word-diff-regex below.  The <mode> defaults to plain, and\nmust be one of:\n\n\n\n\n color \n\nHighlight changed words using only colors.  Implies --color.\n\n plain \n\nShow words as [-removed-] and {+added+}.  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous.\n\n porcelain \n\nUse a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a +/-/` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own.\n\n none \n\nDisable word diff again.\n\n\n\n\n\n\nNote that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled."
      },
      {
        "type": "long",
        "key": "word-diff-regex",
        "title": "--word-diff-regex=<regex>",
        "description": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies\n--word-diff unless it was already enabled.\n\nEvery non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline.\n\n\nFor example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character.\n\n\nThe regex can also be set via a diff driver or configuration option, see\ngitattributes[5] or git-config[1].  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."
      },
      {
        "type": "long",
        "key": "color-words",
        "title": "--color-words[=<regex>]",
        "description": "Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex>."
      },
      {
        "type": "long",
        "key": "no-renames",
        "title": "--no-renames",
        "description": "Turn off rename detection, even when the configuration\nfile gives the default to do so."
      },
      {
        "type": "long",
        "key": "rename-empty",
        "title": "--[no-]rename-empty",
        "description": "Whether to use empty blobs as rename source."
      },
      {
        "type": "long",
        "key": "check",
        "title": "--check",
        "description": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace\nconfiguration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."
      },
      {
        "type": "long",
        "key": "ws-error-highlight",
        "title": "--ws-error-highlight=<kind>",
        "description": "Highlight whitespace errors in the context, old or new\nlines of the diff.  Multiple values are separated by comma,\nnone resets previous values, default reset the list to\nnew and all is a shorthand for old,new,context.  When\nthis option is not given, and the configuration variable\ndiff.wsErrorHighlight is not set, only whitespace errors in\nnew lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace."
      },
      {
        "type": "long",
        "key": "full-index",
        "title": "--full-index",
        "description": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."
      },
      {
        "type": "long",
        "key": "binary",
        "title": "--binary",
        "description": "In addition to --full-index, output a binary diff that\ncan be applied with git-apply.\nImplies --patch."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n>\nhexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev.\nNon default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines).\n\n\nWhen used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."
      },
      {
        "type": "long",
        "key": "break-rewrites",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines).\n\n\nWhen used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%."
      },
      {
        "type": "long",
        "key": "find-renames",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies-harder",
        "title": "--find-copies-harder",
        "description": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one\n-C option has the same effect."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part\nof a delete/create pair."
      },
      {
        "type": "long",
        "key": "irreversible-delete",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part\nof a delete/create pair."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l<num>",
        "description": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."
      },
      {
        "type": "long",
        "key": "diff-filter",
        "title": "--diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]",
        "description": "Select only files that are Added (A), Copied (C),\nDeleted (D), Modified (M), Renamed (R), have their\ntype (i.e. regular file, symlink, submodule, …​) changed (T),\nare Unmerged (U), are\nUnknown (X), or have had their pairing Broken (B).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected.\n\nAlso, these upper-case letters can be downcased to exclude.  E.g.\n--diff-filter=ad excludes added and deleted paths.\n\n\nNote that not all diffs can feature all types. For instance, diffs\nfrom the index to the working tree can never have Added entries\n(because the set of paths included in the diff is limited by what is in\nthe index).  Similarly, copied and renamed entries cannot appear if\ndetection for those types is disabled."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S<string>",
        "description": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use.\n\nIt is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S, and keep going until you get the\nvery first version of the block.\n\n\nBinary files are searched as well."
      },
      {
        "type": "short",
        "key": "G",
        "title": "-G<regex>",
        "description": "Look for differences whose patch text contains added/removed\nlines that match <regex>.\n\nTo illustrate the difference between -S<regex> --pickaxe-regex and\n-G<regex>, consider a commit with the following diff in the same\nfile:\n\n\n\n+    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0);\n\n\n\nWhile git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change).\n\n\nUnless --text is supplied patches of binary files without a textconv\nfilter will be ignored.\n\n\nSee the pickaxe entry in gitdiffcore[7] for more\ninformation."
      },
      {
        "type": "long",
        "key": "find-object",
        "title": "--find-object=<object-id>",
        "description": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S, just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id.\n\nThe object can be a blob or a submodule commit. It implies the -t option in\ngit-log to also find trees."
      },
      {
        "type": "long",
        "key": "pickaxe-all",
        "title": "--pickaxe-all",
        "description": "When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>."
      },
      {
        "type": "long",
        "key": "pickaxe-regex",
        "title": "--pickaxe-regex",
        "description": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O<orderfile>",
        "description": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config[1]).  To cancel diff.orderFile,\nuse -O/dev/null.\n\nThe output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order.\n\n\n<orderfile> is parsed as follows:\n\n\n\n\n\n\nBlank lines are ignored, so they can be used as separators for\nreadability.\n\n\nLines starting with a hash (\"#\") are ignored, so they can be used\nfor comments.  Add a backslash (\"\\\") to the beginning of the\npattern if it starts with a hash.\n\n\nEach other line contains a single pattern.\n\n\n\n\n\n\nPatterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \"foo*bar\"\nmatches \"fooasdfbar\" and \"foo/bar/baz/asdf\" but not \"foobarx\"."
      },
      {
        "type": "long",
        "key": "skip-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output\n(i.e. skip to), or move them to the end of the output\n(i.e. rotate to).  These were invented primarily for use\nof the git difftool command, and may not be very useful\notherwise."
      },
      {
        "type": "long",
        "key": "rotate-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output\n(i.e. skip to), or move them to the end of the output\n(i.e. rotate to).  These were invented primarily for use\nof the git difftool command, and may not be very useful\notherwise."
      },
      {
        "type": "short",
        "key": "R",
        "title": "-R",
        "description": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."
      },
      {
        "type": "long",
        "key": "relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument.\n--no-relative can be used to countermand both diff.relative config\noption and previous --relative."
      },
      {
        "type": "long",
        "key": "no-relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument.\n--no-relative can be used to countermand both diff.relative config\noption and previous --relative."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "text",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "ignore-cr-at-eol",
        "title": "--ignore-cr-at-eol",
        "description": "Ignore carriage-return at the end of line when doing a comparison."
      },
      {
        "type": "long",
        "key": "ignore-space-at-eol",
        "title": "--ignore-space-at-eol",
        "description": "Ignore changes in whitespace at EOL."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."
      },
      {
        "type": "long",
        "key": "ignore-all-space",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."
      },
      {
        "type": "long",
        "key": "ignore-blank-lines",
        "title": "--ignore-blank-lines",
        "description": "Ignore changes whose lines are all blank."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."
      },
      {
        "type": "long",
        "key": "ignore-matching-lines",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."
      },
      {
        "type": "long",
        "key": "inter-hunk-context",
        "title": "--inter-hunk-context=<lines>",
        "description": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change.\nThe function names are determined in the same way as\ngit diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "function-context",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change.\nThe function names are determined in the same way as\ngit diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "exit-code",
        "title": "--exit-code",
        "description": "Make the program exit with codes similar to diff(1).\nThat is, it exits with 1 if there were differences and\n0 means no differences."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Disable all output of the program. Implies --exit-code."
      },
      {
        "type": "long",
        "key": "ext-diff",
        "title": "--ext-diff",
        "description": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes[5], you need\nto use this option with git-log[1] and friends."
      },
      {
        "type": "long",
        "key": "no-ext-diff",
        "title": "--no-ext-diff",
        "description": "Disallow external diff drivers."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands."
      },
      {
        "type": "long",
        "key": "no-textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules[=<when>]",
        "description": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the\nignore option in git-config[1] or gitmodules[5]. When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."
      },
      {
        "type": "long",
        "key": "src-prefix",
        "title": "--src-prefix=<prefix>",
        "description": "Show the given source prefix instead of \"a/\"."
      },
      {
        "type": "long",
        "key": "dst-prefix",
        "title": "--dst-prefix=<prefix>",
        "description": "Show the given destination prefix instead of \"b/\"."
      },
      {
        "type": "long",
        "key": "no-prefix",
        "title": "--no-prefix",
        "description": "Do not show any source or destination prefix."
      },
      {
        "type": "long",
        "key": "line-prefix",
        "title": "--line-prefix=<prefix>",
        "description": "Prepend an additional prefix to every line of output."
      },
      {
        "type": "long",
        "key": "ita-invisible-in-index",
        "title": "--ita-invisible-in-index",
        "description": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index. Both options are\nexperimental and could be removed in future."
      },
      {
        "type": "short",
        "key": "0",
        "title": "-0",
        "description": "Omit diff output for unmerged entries and just show\n\"Unmerged\".  Can be used only when comparing the working tree\nwith the index."
      }
    ]
  },
  {
    "name": "git fetch",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Fetch all remotes."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --append",
        "description": "Append ref names and object names of fetched refs to the\nexisting contents of .git/FETCH_HEAD.  Without this\noption old data in .git/FETCH_HEAD will be overwritten."
      },
      {
        "type": "long",
        "key": "append",
        "title": "-a, --append",
        "description": "Append ref names and object names of fetched refs to the\nexisting contents of .git/FETCH_HEAD.  Without this\noption old data in .git/FETCH_HEAD will be overwritten."
      },
      {
        "type": "long",
        "key": "atomic",
        "title": "--atomic",
        "description": "Use an atomic transaction to update local refs. Either all refs are\nupdated, or on error, no refs are updated."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--depth=<depth>",
        "description": "Limit fetching to the specified number of commits from the tip of\neach remote branch history. If fetching to a shallow repository\ncreated by git clone with --depth=<depth> option (see\ngit-clone[1]), deepen or shorten the history to the specified\nnumber of commits. Tags for the deepened commits are not fetched."
      },
      {
        "type": "long",
        "key": "deepen",
        "title": "--deepen=<depth>",
        "description": "Similar to --depth, except it specifies the number of commits\nfrom the current shallow boundary instead of from the tip of\neach remote branch history."
      },
      {
        "type": "long",
        "key": "shallow-since",
        "title": "--shallow-since=<date>",
        "description": "Deepen or shorten the history of a shallow repository to\ninclude all reachable commits after <date>."
      },
      {
        "type": "long",
        "key": "shallow-exclude",
        "title": "--shallow-exclude=<revision>",
        "description": "Deepen or shorten the history of a shallow repository to\nexclude commits reachable from a specified remote branch or tag.\nThis option can be specified multiple times."
      },
      {
        "type": "long",
        "key": "unshallow",
        "title": "--unshallow",
        "description": "If the source repository is complete, convert a shallow\nrepository to a complete one, removing all the limitations\nimposed by shallow repositories.\n\nIf the source repository is shallow, fetch as much as possible so that\nthe current repository has the same history as the source repository."
      },
      {
        "type": "long",
        "key": "update-shallow",
        "title": "--update-shallow",
        "description": "By default when fetching from a shallow repository,\ngit fetch refuses refs that require updating\n.git/shallow. This option updates .git/shallow and accept such\nrefs."
      },
      {
        "type": "long",
        "key": "negotiation-tip",
        "title": "--negotiation-tip=<commit|glob>",
        "description": "By default, Git will report, to the server, commits reachable\nfrom all local refs to find common commits in an attempt to\nreduce the size of the to-be-received packfile. If specified,\nGit will only report commits reachable from the given tips.\nThis is useful to speed up fetches when the user knows which\nlocal ref is likely to have commits in common with the\nupstream ref being fetched.\n\nThis option may be specified more than once; if so, Git will report\ncommits reachable from any of the given commits.\n\n\nThe argument to this option may be a glob on ref names, a ref, or the (possibly\nabbreviated) SHA-1 of a commit. Specifying a glob is equivalent to specifying\nthis option multiple times, one for each matching ref name.\n\n\nSee also the fetch.negotiationAlgorithm and push.negotiate\nconfiguration variables documented in git-config[1], and the\n--negotiate-only option below."
      },
      {
        "type": "long",
        "key": "negotiate-only",
        "title": "--negotiate-only",
        "description": "Do not fetch anything from the server, and instead print the\nancestors of the provided --negotiation-tip=* arguments,\nwhich we have in common with the server.\n\nInternally this is used to implement the push.negotiate option, see\ngit-config[1]."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Show what would be done, without making any changes."
      },
      {
        "type": "long",
        "key": "write-fetch-head",
        "title": "--[no-]write-fetch-head",
        "description": "Write the list of remote refs fetched in the FETCH_HEAD\nfile directly under $GIT_DIR.  This is the default.\nPassing --no-write-fetch-head from the command line tells\nGit not to write the file.  Under --dry-run option, the\nfile is never written."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "When git fetch is used with <src>:<dst> refspec it may\nrefuse to update the local branch as discussed\nin the <refspec> part below.\nThis option overrides that check."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "When git fetch is used with <src>:<dst> refspec it may\nrefuse to update the local branch as discussed\nin the <refspec> part below.\nThis option overrides that check."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep",
        "description": "Keep downloaded pack."
      },
      {
        "type": "long",
        "key": "keep",
        "title": "-k, --keep",
        "description": "Keep downloaded pack."
      },
      {
        "type": "long",
        "key": "multiple",
        "title": "--multiple",
        "description": "Allow several <repository> and <group> arguments to be\nspecified. No <refspec>s may be specified."
      },
      {
        "type": "long",
        "key": "auto-maintenance",
        "title": "--[no-]auto-maintenance, --[no-]auto-gc",
        "description": "Run git maintenance run --auto at the end to perform automatic\nrepository maintenance if needed. (--[no-]auto-gc is a synonym.)\nThis is enabled by default."
      },
      {
        "type": "long",
        "key": "auto-gc",
        "title": "--[no-]auto-maintenance, --[no-]auto-gc",
        "description": "Run git maintenance run --auto at the end to perform automatic\nrepository maintenance if needed. (--[no-]auto-gc is a synonym.)\nThis is enabled by default."
      },
      {
        "type": "long",
        "key": "write-commit-graph",
        "title": "--[no-]write-commit-graph",
        "description": "Write a commit-graph after fetching. This overrides the config\nsetting fetch.writeCommitGraph."
      },
      {
        "type": "long",
        "key": "prefetch",
        "title": "--prefetch",
        "description": "Modify the configured refspec to place all refs into the\nrefs/prefetch/ namespace. See the prefetch task in\ngit-maintenance[1]."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --prune",
        "description": "Before fetching, remove any remote-tracking references that no\nlonger exist on the remote.  Tags are not subject to pruning\nif they are fetched only because of the default tag\nauto-following or due to a --tags option.  However, if tags\nare fetched due to an explicit refspec (either on the command\nline or in the remote configuration, for example if the remote\nwas cloned with the --mirror option), then they are also\nsubject to pruning. Supplying --prune-tags is a shorthand for\nproviding the tag refspec.\n\nSee the PRUNING section below for more details."
      },
      {
        "type": "long",
        "key": "prune",
        "title": "-p, --prune",
        "description": "Before fetching, remove any remote-tracking references that no\nlonger exist on the remote.  Tags are not subject to pruning\nif they are fetched only because of the default tag\nauto-following or due to a --tags option.  However, if tags\nare fetched due to an explicit refspec (either on the command\nline or in the remote configuration, for example if the remote\nwas cloned with the --mirror option), then they are also\nsubject to pruning. Supplying --prune-tags is a shorthand for\nproviding the tag refspec.\n\nSee the PRUNING section below for more details."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P, --prune-tags",
        "description": "Before fetching, remove any local tags that no longer exist on\nthe remote if --prune is enabled. This option should be used\nmore carefully, unlike --prune it will remove any local\nreferences (local tags) that have been created. This option is\na shorthand for providing the explicit tag refspec along with\n--prune, see the discussion about that in its documentation.\n\nSee the PRUNING section below for more details."
      },
      {
        "type": "long",
        "key": "prune-tags",
        "title": "-P, --prune-tags",
        "description": "Before fetching, remove any local tags that no longer exist on\nthe remote if --prune is enabled. This option should be used\nmore carefully, unlike --prune it will remove any local\nreferences (local tags) that have been created. This option is\na shorthand for providing the explicit tag refspec along with\n--prune, see the discussion about that in its documentation.\n\nSee the PRUNING section below for more details."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-tags",
        "description": "By default, tags that point at objects that are downloaded\nfrom the remote repository are fetched and stored locally.\nThis option disables this automatic tag following. The default\nbehavior for a remote may be specified with the remote.<name>.tagOpt\nsetting. See git-config[1]."
      },
      {
        "type": "long",
        "key": "no-tags",
        "title": "-n, --no-tags",
        "description": "By default, tags that point at objects that are downloaded\nfrom the remote repository are fetched and stored locally.\nThis option disables this automatic tag following. The default\nbehavior for a remote may be specified with the remote.<name>.tagOpt\nsetting. See git-config[1]."
      },
      {
        "type": "long",
        "key": "refmap",
        "title": "--refmap=<refspec>",
        "description": "When fetching refs listed on the command line, use the\nspecified refspec (can be given more than once) to map the\nrefs to remote-tracking branches, instead of the values of\nremote.*.fetch configuration variables for the remote\nrepository.  Providing an empty <refspec> to the\n--refmap option causes Git to ignore the configured\nrefspecs and rely entirely on the refspecs supplied as\ncommand-line arguments. See section on \"Configured Remote-tracking\nBranches\" for details."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t, --tags",
        "description": "Fetch all tags from the remote (i.e., fetch remote tags\nrefs/tags/* into local tags with the same name), in addition\nto whatever else would otherwise be fetched.  Using this\noption alone does not subject tags to pruning, even if --prune\nis used (though tags may be pruned anyway if they are also the\ndestination of an explicit refspec; see --prune)."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "-t, --tags",
        "description": "Fetch all tags from the remote (i.e., fetch remote tags\nrefs/tags/* into local tags with the same name), in addition\nto whatever else would otherwise be fetched.  Using this\noption alone does not subject tags to pruning, even if --prune\nis used (though tags may be pruned anyway if they are also the\ndestination of an explicit refspec; see --prune)."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules[=yes|on-demand|no]",
        "description": "This option controls if and under what conditions new commits of\npopulated submodules should be fetched too. It can be used as a\nboolean option to completely disable recursion when set to no or to\nunconditionally recurse into all populated submodules when set to\nyes, which is the default when this option is used without any\nvalue. Use on-demand to only recurse into a populated submodule\nwhen the superproject retrieves a commit that updates the submodule’s\nreference to a commit that isn’t already in the local submodule\nclone. By default, on-demand is used, unless\nfetch.recurseSubmodules is set (see git-config[1])."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j, --jobs=<n>",
        "description": "Number of parallel children to be used for all forms of fetching.\n\nIf the --multiple option was specified, the different remotes will be fetched\nin parallel. If multiple submodules are fetched, they will be fetched in\nparallel. To control them independently, use the config settings\nfetch.parallel and submodule.fetchJobs (see git-config[1]).\n\n\nTypically, parallel recursive and multi-remote fetches will be faster. By\ndefault fetches are performed sequentially, not in parallel."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j, --jobs=<n>",
        "description": "Number of parallel children to be used for all forms of fetching.\n\nIf the --multiple option was specified, the different remotes will be fetched\nin parallel. If multiple submodules are fetched, they will be fetched in\nparallel. To control them independently, use the config settings\nfetch.parallel and submodule.fetchJobs (see git-config[1]).\n\n\nTypically, parallel recursive and multi-remote fetches will be faster. By\ndefault fetches are performed sequentially, not in parallel."
      },
      {
        "type": "long",
        "key": "no-recurse-submodules",
        "title": "--no-recurse-submodules",
        "description": "Disable recursive fetching of submodules (this has the same effect as\nusing the --recurse-submodules=no option)."
      },
      {
        "type": "long",
        "key": "set-upstream",
        "title": "--set-upstream",
        "description": "If the remote is fetched successfully, add upstream\n(tracking) reference, used by argument-less\ngit-pull[1] and other commands. For more information,\nsee branch.<name>.merge and branch.<name>.remote in\ngit-config[1]."
      },
      {
        "type": "long",
        "key": "submodule-prefix",
        "title": "--submodule-prefix=<path>",
        "description": "Prepend <path> to paths printed in informative messages\nsuch as \"Fetching submodule foo\".  This option is used\ninternally when recursing over submodules."
      },
      {
        "type": "long",
        "key": "recurse-submodules-default",
        "title": "--recurse-submodules-default=[yes|on-demand]",
        "description": "This option is used internally to temporarily provide a\nnon-negative default value for the --recurse-submodules\noption.  All other methods of configuring fetch’s submodule\nrecursion (such as settings in gitmodules[5] and\ngit-config[1]) override this option, as does\nspecifying --[no-]recurse-submodules directly."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u, --update-head-ok",
        "description": "By default git fetch refuses to update the head which\ncorresponds to the current branch.  This flag disables the\ncheck.  This is purely for the internal use for git pull\nto communicate with git fetch, and unless you are\nimplementing your own Porcelain you are not supposed to\nuse it."
      },
      {
        "type": "long",
        "key": "update-head-ok",
        "title": "-u, --update-head-ok",
        "description": "By default git fetch refuses to update the head which\ncorresponds to the current branch.  This flag disables the\ncheck.  This is purely for the internal use for git pull\nto communicate with git fetch, and unless you are\nimplementing your own Porcelain you are not supposed to\nuse it."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Pass --quiet to git-fetch-pack and silence any other internally\nused git commands. Progress is not reported to the standard error\nstream."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Pass --quiet to git-fetch-pack and silence any other internally\nused git commands. Progress is not reported to the standard error\nstream."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <option>, --server-option=<option>",
        "description": "Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.  The server’s handling of server options, including\nunknown ones, is server-specific.\nWhen multiple --server-option=<option> are given, they are all\nsent to the other side in the order listed on the command line."
      },
      {
        "type": "long",
        "key": "server-option",
        "title": "-o <option>, --server-option=<option>",
        "description": "Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.  The server’s handling of server options, including\nunknown ones, is server-specific.\nWhen multiple --server-option=<option> are given, they are all\nsent to the other side in the order listed on the command line."
      },
      {
        "type": "long",
        "key": "show-forced-updates",
        "title": "--show-forced-updates",
        "description": "By default, git checks if a branch is force-updated during\nfetch. This can be disabled through fetch.showForcedUpdates, but\nthe --show-forced-updates option guarantees this check occurs.\nSee git-config[1]."
      },
      {
        "type": "long",
        "key": "no-show-forced-updates",
        "title": "--no-show-forced-updates",
        "description": "By default, git checks if a branch is force-updated during\nfetch. Pass --no-show-forced-updates or set fetch.showForcedUpdates\nto false to skip this check for performance reasons. If used during\ngit-pull the --ff-only option will still check for forced updates\nbefore attempting a fast-forward update. See git-config[1]."
      },
      {
        "type": "short",
        "key": "4",
        "title": "-4, --ipv4",
        "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
      },
      {
        "type": "long",
        "key": "ipv4",
        "title": "-4, --ipv4",
        "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
      },
      {
        "type": "short",
        "key": "6",
        "title": "-6, --ipv6",
        "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
      },
      {
        "type": "long",
        "key": "ipv6",
        "title": "-6, --ipv6",
        "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Read refspecs, one per line, from stdin in addition to those provided\nas arguments. The \"tag <name>\" format is not supported."
      }
    ]
  },
  {
    "name": "git format-patch",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p, --no-stat",
        "description": "Generate plain patches without any diffstats."
      },
      {
        "type": "long",
        "key": "no-stat",
        "title": "-p, --no-stat",
        "description": "Generate plain patches without any diffstats."
      },
      {
        "type": "short",
        "key": "U",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of\nthe usual three."
      },
      {
        "type": "long",
        "key": "unified",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of\nthe usual three."
      },
      {
        "type": "long",
        "key": "output",
        "title": "--output=<file>",
        "description": "Output to a specific file instead of stdout."
      },
      {
        "type": "long",
        "key": "output-indicator-new",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-old",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-context",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "indent-heuristic",
        "title": "--indent-heuristic",
        "description": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."
      },
      {
        "type": "long",
        "key": "no-indent-heuristic",
        "title": "--no-indent-heuristic",
        "description": "Disable the indent heuristic."
      },
      {
        "type": "long",
        "key": "minimal",
        "title": "--minimal",
        "description": "Spend extra time to make sure the smallest possible\ndiff is produced."
      },
      {
        "type": "long",
        "key": "patience",
        "title": "--patience",
        "description": "Generate a diff using the \"patience diff\" algorithm."
      },
      {
        "type": "long",
        "key": "histogram",
        "title": "--histogram",
        "description": "Generate a diff using the \"histogram diff\" algorithm."
      },
      {
        "type": "long",
        "key": "anchored",
        "title": "--anchored=<text>",
        "description": "Generate a diff using the \"anchored diff\" algorithm.\n\nThis option may be specified more than once.\n\n\nIf a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."
      },
      {
        "type": "long",
        "key": "diff-algorithm",
        "title": "--diff-algorithm={patience|minimal|histogram|myers}",
        "description": "Choose a diff algorithm. The variants are as follows:\n\n\n\n\n default, myers \n\nThe basic greedy diff algorithm. Currently, this is the default.\n\n minimal \n\nSpend extra time to make sure the smallest possible diff is\nproduced.\n\n patience \n\nUse \"patience diff\" algorithm when generating patches.\n\n histogram \n\nThis algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\".\n\n\n\n\n\n\nFor instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat[=<width>[, <name-width>[, <count>]]]",
        "description": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by\n<width>. The width of the filename part can be limited by\ngiving another width <name-width> after a comma. The width\nof the graph part can be limited by using\n--stat-graph-width=<width> (affects all commands generating\na stat graph) or by setting diff.statGraphWidth=<width>\n(does not affect git format-patch).\nBy giving a third parameter <count>, you can limit the\noutput to the first <count> lines, followed by ... if\nthere are more.\n\nThese parameters can also be set individually with --stat-width=<width>,\n--stat-name-width=<name-width> and --stat-count=<count>."
      },
      {
        "type": "long",
        "key": "compact-summary",
        "title": "--compact-summary",
        "description": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat."
      },
      {
        "type": "long",
        "key": "numstat",
        "title": "--numstat",
        "description": "Similar to --stat, but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying\n0 0."
      },
      {
        "type": "long",
        "key": "shortstat",
        "title": "--shortstat",
        "description": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X[<param1, param2, …​>], --dirstat[=<param1, param2, …​>]",
        "description": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:\n\n\n\n\n changes \n\nCompute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.\n\n lines \n\nCompute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.\n\n files \n\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.\n\n cumulative \n\nCount changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.\n\n <limit> \n\nAn integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.\n\n\n\n\n\n\nExample: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories:\n--dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "dirstat",
        "title": "-X[<param1, param2, …​>], --dirstat[=<param1, param2, …​>]",
        "description": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:\n\n\n\n\n changes \n\nCompute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.\n\n lines \n\nCompute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.\n\n files \n\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.\n\n cumulative \n\nCount changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.\n\n <limit> \n\nAn integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.\n\n\n\n\n\n\nExample: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories:\n--dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "cumulative",
        "title": "--cumulative",
        "description": "Synonym for --dirstat=cumulative"
      },
      {
        "type": "long",
        "key": "dirstat-by-file",
        "title": "--dirstat-by-file[=<param1, param2>…​]",
        "description": "Synonym for --dirstat=files,param1,param2…​"
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary",
        "description": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."
      },
      {
        "type": "long",
        "key": "no-renames",
        "title": "--no-renames",
        "description": "Turn off rename detection, even when the configuration\nfile gives the default to do so."
      },
      {
        "type": "long",
        "key": "rename-empty",
        "title": "--[no-]rename-empty",
        "description": "Whether to use empty blobs as rename source."
      },
      {
        "type": "long",
        "key": "full-index",
        "title": "--full-index",
        "description": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."
      },
      {
        "type": "long",
        "key": "binary",
        "title": "--binary",
        "description": "In addition to --full-index, output a binary diff that\ncan be applied with git-apply."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n>\nhexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev.\nNon default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines).\n\n\nWhen used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."
      },
      {
        "type": "long",
        "key": "break-rewrites",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines).\n\n\nWhen used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%."
      },
      {
        "type": "long",
        "key": "find-renames",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies-harder",
        "title": "--find-copies-harder",
        "description": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one\n-C option has the same effect."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part\nof a delete/create pair."
      },
      {
        "type": "long",
        "key": "irreversible-delete",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part\nof a delete/create pair."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l<num>",
        "description": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O<orderfile>",
        "description": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config[1]).  To cancel diff.orderFile,\nuse -O/dev/null.\n\nThe output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order.\n\n\n<orderfile> is parsed as follows:\n\n\n\n\n\n\nBlank lines are ignored, so they can be used as separators for\nreadability.\n\n\nLines starting with a hash (\"#\") are ignored, so they can be used\nfor comments.  Add a backslash (\"\\\") to the beginning of the\npattern if it starts with a hash.\n\n\nEach other line contains a single pattern.\n\n\n\n\n\n\nPatterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \"foo*bar\"\nmatches \"fooasdfbar\" and \"foo/bar/baz/asdf\" but not \"foobarx\"."
      },
      {
        "type": "long",
        "key": "skip-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output\n(i.e. skip to), or move them to the end of the output\n(i.e. rotate to).  These were invented primarily for use\nof the git difftool command, and may not be very useful\notherwise."
      },
      {
        "type": "long",
        "key": "rotate-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output\n(i.e. skip to), or move them to the end of the output\n(i.e. rotate to).  These were invented primarily for use\nof the git difftool command, and may not be very useful\notherwise."
      },
      {
        "type": "long",
        "key": "relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument.\n--no-relative can be used to countermand both diff.relative config\noption and previous --relative."
      },
      {
        "type": "long",
        "key": "no-relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument.\n--no-relative can be used to countermand both diff.relative config\noption and previous --relative."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "text",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "ignore-cr-at-eol",
        "title": "--ignore-cr-at-eol",
        "description": "Ignore carriage-return at the end of line when doing a comparison."
      },
      {
        "type": "long",
        "key": "ignore-space-at-eol",
        "title": "--ignore-space-at-eol",
        "description": "Ignore changes in whitespace at EOL."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."
      },
      {
        "type": "long",
        "key": "ignore-all-space",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."
      },
      {
        "type": "long",
        "key": "ignore-blank-lines",
        "title": "--ignore-blank-lines",
        "description": "Ignore changes whose lines are all blank."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."
      },
      {
        "type": "long",
        "key": "ignore-matching-lines",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."
      },
      {
        "type": "long",
        "key": "inter-hunk-context",
        "title": "--inter-hunk-context=<lines>",
        "description": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change.\nThe function names are determined in the same way as\ngit diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "function-context",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change.\nThe function names are determined in the same way as\ngit diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "ext-diff",
        "title": "--ext-diff",
        "description": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes[5], you need\nto use this option with git-log[1] and friends."
      },
      {
        "type": "long",
        "key": "no-ext-diff",
        "title": "--no-ext-diff",
        "description": "Disallow external diff drivers."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands."
      },
      {
        "type": "long",
        "key": "no-textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules[=<when>]",
        "description": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the\nignore option in git-config[1] or gitmodules[5]. When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."
      },
      {
        "type": "long",
        "key": "src-prefix",
        "title": "--src-prefix=<prefix>",
        "description": "Show the given source prefix instead of \"a/\"."
      },
      {
        "type": "long",
        "key": "dst-prefix",
        "title": "--dst-prefix=<prefix>",
        "description": "Show the given destination prefix instead of \"b/\"."
      },
      {
        "type": "long",
        "key": "no-prefix",
        "title": "--no-prefix",
        "description": "Do not show any source or destination prefix."
      },
      {
        "type": "long",
        "key": "line-prefix",
        "title": "--line-prefix=<prefix>",
        "description": "Prepend an additional prefix to every line of output."
      },
      {
        "type": "long",
        "key": "ita-invisible-in-index",
        "title": "--ita-invisible-in-index",
        "description": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index. Both options are\nexperimental and could be removed in future."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <dir>, --output-directory <dir>",
        "description": "Use <dir> to store the resulting files, instead of the\ncurrent working directory."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --numbered",
        "description": "Name output in [PATCH n/m] format, even with a single patch."
      },
      {
        "type": "long",
        "key": "numbered",
        "title": "-n, --numbered",
        "description": "Name output in [PATCH n/m] format, even with a single patch."
      },
      {
        "type": "short",
        "key": "N",
        "title": "-N, --no-numbered",
        "description": "Name output in [PATCH] format."
      },
      {
        "type": "long",
        "key": "no-numbered",
        "title": "-N, --no-numbered",
        "description": "Name output in [PATCH] format."
      },
      {
        "type": "long",
        "key": "numbered-files",
        "title": "--numbered-files",
        "description": "Output file names will be a simple number sequence\nwithout the default first line of the commit appended."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep-subject",
        "description": "Do not strip/add [PATCH] from the first line of the\ncommit log message."
      },
      {
        "type": "long",
        "key": "keep-subject",
        "title": "-k, --keep-subject",
        "description": "Do not strip/add [PATCH] from the first line of the\ncommit log message."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer to the commit message, using\nthe committer identity of yourself.\nSee the signoff option in git-commit[1] for more information."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer to the commit message, using\nthe committer identity of yourself.\nSee the signoff option in git-commit[1] for more information."
      },
      {
        "type": "long",
        "key": "stdout",
        "title": "--stdout",
        "description": "Print all commits to the standard output in mbox format,\ninstead of creating a file for each one."
      },
      {
        "type": "long",
        "key": "attach",
        "title": "--attach[=<boundary>]",
        "description": "Create multipart/mixed attachment, the first part of\nwhich is the commit message and the patch itself in the\nsecond part, with Content-Disposition: attachment."
      },
      {
        "type": "long",
        "key": "no-attach",
        "title": "--no-attach",
        "description": "Disable the creation of an attachment, overriding the\nconfiguration setting."
      },
      {
        "type": "long",
        "key": "inline",
        "title": "--inline[=<boundary>]",
        "description": "Create multipart/mixed attachment, the first part of\nwhich is the commit message and the patch itself in the\nsecond part, with Content-Disposition: inline."
      },
      {
        "type": "long",
        "key": "thread",
        "title": "--thread[=<style>], --no-thread",
        "description": "Controls addition of In-Reply-To and References headers to\nmake the second and subsequent mails appear as replies to the\nfirst.  Also controls generation of the Message-Id header to\nreference.\n\nThe optional <style> argument can be either shallow or deep.\nshallow threading makes every mail a reply to the head of the\nseries, where the head is chosen from the cover letter, the\n--in-reply-to, and the first patch mail, in this order.  deep\nthreading makes every mail a reply to the previous one.\n\n\nThe default is --no-thread, unless the format.thread configuration\nis set.  If --thread is specified without a style, it defaults to the\nstyle specified by format.thread if any, or else shallow.\n\n\nBeware that the default for git send-email is to thread emails\nitself.  If you want git format-patch to take care of threading, you\nwill want to ensure that threading is disabled for git send-email."
      },
      {
        "type": "long",
        "key": "no-thread",
        "title": "--thread[=<style>], --no-thread",
        "description": "Controls addition of In-Reply-To and References headers to\nmake the second and subsequent mails appear as replies to the\nfirst.  Also controls generation of the Message-Id header to\nreference.\n\nThe optional <style> argument can be either shallow or deep.\nshallow threading makes every mail a reply to the head of the\nseries, where the head is chosen from the cover letter, the\n--in-reply-to, and the first patch mail, in this order.  deep\nthreading makes every mail a reply to the previous one.\n\n\nThe default is --no-thread, unless the format.thread configuration\nis set.  If --thread is specified without a style, it defaults to the\nstyle specified by format.thread if any, or else shallow.\n\n\nBeware that the default for git send-email is to thread emails\nitself.  If you want git format-patch to take care of threading, you\nwill want to ensure that threading is disabled for git send-email."
      },
      {
        "type": "long",
        "key": "in-reply-to",
        "title": "--in-reply-to=<message id>",
        "description": "Make the first mail (or all the mails with --no-thread) appear as a\nreply to the given <message id>, which avoids breaking threads to\nprovide a new patch series."
      },
      {
        "type": "long",
        "key": "ignore-if-in-upstream",
        "title": "--ignore-if-in-upstream",
        "description": "Do not include a patch that matches a commit in\n<until>..<since>.  This will examine all patches reachable\nfrom <since> but not from <until> and compare them with the\npatches being generated, and any patch that matches is\nignored."
      },
      {
        "type": "long",
        "key": "cover-from-description",
        "title": "--cover-from-description=<mode>",
        "description": "Controls which parts of the cover letter will be automatically\npopulated using the branch’s description.\n\nIf <mode> is message or default, the cover letter subject will be\npopulated with placeholder text. The body of the cover letter will be\npopulated with the branch’s description. This is the default mode when\nno configuration nor command line option is specified.\n\n\nIf <mode> is subject, the first paragraph of the branch description will\npopulate the cover letter subject. The remainder of the description will\npopulate the body of the cover letter.\n\n\nIf <mode> is auto, if the first paragraph of the branch description\nis greater than 100 bytes, then the mode will be message, otherwise\nsubject will be used.\n\n\nIf <mode> is none, both the cover letter subject and body will be\npopulated with placeholder text."
      },
      {
        "type": "long",
        "key": "subject-prefix",
        "title": "--subject-prefix=<subject prefix>",
        "description": "Instead of the standard [PATCH] prefix in the subject\nline, instead use [<subject prefix>]. This\nallows for useful naming of a patch series, and can be\ncombined with the --numbered option."
      },
      {
        "type": "long",
        "key": "filename-max-length",
        "title": "--filename-max-length=<n>",
        "description": "Instead of the standard 64 bytes, chomp the generated output\nfilenames at around <n> bytes (too short a value will be\nsilently raised to a reasonable length).  Defaults to the\nvalue of the format.filenameMaxLength configuration\nvariable, or 64 if unconfigured."
      },
      {
        "type": "long",
        "key": "rfc",
        "title": "--rfc",
        "description": "Alias for --subject-prefix=\"RFC PATCH\". RFC means \"Request For\nComments\"; use this when sending an experimental patch for\ndiscussion rather than application."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v <n>, --reroll-count=<n>",
        "description": "Mark the series as the <n>-th iteration of the topic. The\noutput filenames have v<n> prepended to them, and the\nsubject prefix (\"PATCH\" by default, but configurable via the\n--subject-prefix option) has ` v<n>` appended to it.  E.g.\n--reroll-count=4 may produce v4-0001-add-makefile.patch\nfile that has \"Subject: [PATCH v4 1/20] Add makefile\" in it.\n<n> does not have to be an integer (e.g. \"--reroll-count=4.4\",\nor \"--reroll-count=4rev2\" are allowed), but the downside of\nusing such a reroll-count is that the range-diff/interdiff\nwith the previous version does not state exactly which\nversion the new interation is compared against."
      },
      {
        "type": "long",
        "key": "reroll-count",
        "title": "-v <n>, --reroll-count=<n>",
        "description": "Mark the series as the <n>-th iteration of the topic. The\noutput filenames have v<n> prepended to them, and the\nsubject prefix (\"PATCH\" by default, but configurable via the\n--subject-prefix option) has ` v<n>` appended to it.  E.g.\n--reroll-count=4 may produce v4-0001-add-makefile.patch\nfile that has \"Subject: [PATCH v4 1/20] Add makefile\" in it.\n<n> does not have to be an integer (e.g. \"--reroll-count=4.4\",\nor \"--reroll-count=4rev2\" are allowed), but the downside of\nusing such a reroll-count is that the range-diff/interdiff\nwith the previous version does not state exactly which\nversion the new interation is compared against."
      },
      {
        "type": "long",
        "key": "to",
        "title": "--to=<email>",
        "description": "Add a To: header to the email headers. This is in addition\nto any configured headers, and may be used multiple times.\nThe negated form --no-to discards all To: headers added so\nfar (from config or command line)."
      },
      {
        "type": "long",
        "key": "cc",
        "title": "--cc=<email>",
        "description": "Add a Cc: header to the email headers. This is in addition\nto any configured headers, and may be used multiple times.\nThe negated form --no-cc discards all Cc: headers added so\nfar (from config or command line)."
      },
      {
        "type": "long",
        "key": "from",
        "title": "--from, --from=<ident>",
        "description": "Use ident in the From: header of each commit email. If the\nauthor ident of the commit is not textually identical to the\nprovided ident, place a From: header in the body of the\nmessage with the original author. If no ident is given, use\nthe committer ident.\n\nNote that this option is only useful if you are actually sending the\nemails and want to identify yourself as the sender, but retain the\noriginal author (and git am will correctly pick up the in-body\nheader). Note also that git send-email already handles this\ntransformation for you, and this option should not be used if you are\nfeeding the result to git send-email."
      },
      {
        "type": "long",
        "key": "add-header",
        "title": "--add-header=<header>",
        "description": "Add an arbitrary header to the email headers.  This is in addition\nto any configured headers, and may be used multiple times.\nFor example, --add-header=\"Organization: git-foo\".\nThe negated form --no-add-header discards all (To:,\nCc:, and custom) headers added so far from config or command\nline."
      },
      {
        "type": "long",
        "key": "cover-letter",
        "title": "--[no-]cover-letter",
        "description": "In addition to the patches, generate a cover letter file\ncontaining the branch description, shortlog and the overall diffstat.  You can\nfill in a description in the file before sending it out."
      },
      {
        "type": "long",
        "key": "encode-email-headers",
        "title": "--encode-email-headers, --no-encode-email-headers",
        "description": "Encode email headers that have non-ASCII characters with\n\"Q-encoding\" (described in RFC 2047), instead of outputting the\nheaders verbatim. Defaults to the value of the\nformat.encodeEmailHeaders configuration variable."
      },
      {
        "type": "long",
        "key": "no-encode-email-headers",
        "title": "--encode-email-headers, --no-encode-email-headers",
        "description": "Encode email headers that have non-ASCII characters with\n\"Q-encoding\" (described in RFC 2047), instead of outputting the\nheaders verbatim. Defaults to the value of the\nformat.encodeEmailHeaders configuration variable."
      },
      {
        "type": "long",
        "key": "interdiff",
        "title": "--interdiff=<previous>",
        "description": "As a reviewer aid, insert an interdiff into the cover letter,\nor as commentary of the lone patch of a 1-patch series, showing\nthe differences between the previous version of the patch series and\nthe series currently being formatted. previous is a single revision\nnaming the tip of the previous series which shares a common base with\nthe series being formatted (for example git format-patch\n--cover-letter --interdiff=feature/v1 -3 feature/v2)."
      },
      {
        "type": "long",
        "key": "range-diff",
        "title": "--range-diff=<previous>",
        "description": "As a reviewer aid, insert a range-diff (see git-range-diff[1])\ninto the cover letter, or as commentary of the lone patch of a\n1-patch series, showing the differences between the previous\nversion of the patch series and the series currently being formatted.\nprevious can be a single revision naming the tip of the previous\nseries if it shares a common base with the series being formatted (for\nexample git format-patch --cover-letter --range-diff=feature/v1 -3\nfeature/v2), or a revision range if the two versions of the series are\ndisjoint (for example git format-patch --cover-letter\n--range-diff=feature/v1~3..feature/v1 -3 feature/v2).\n\nNote that diff options passed to the command affect how the primary\nproduct of format-patch is generated, and they are not passed to\nthe underlying range-diff machinery used to generate the cover-letter\nmaterial (this may change in the future)."
      },
      {
        "type": "long",
        "key": "creation-factor",
        "title": "--creation-factor=<percent>",
        "description": "Used with --range-diff, tweak the heuristic which matches up commits\nbetween the previous and current series of patches by adjusting the\ncreation/deletion cost fudge factor. See git-range-diff[1])\nfor details."
      },
      {
        "type": "long",
        "key": "notes",
        "title": "--notes[=<ref>], --no-notes",
        "description": "Append the notes (see git-notes[1]) for the commit\nafter the three-dash line.\n\nThe expected use case of this is to write supporting explanation for\nthe commit that does not belong to the commit log message proper,\nand include it with the patch submission. While one can simply write\nthese explanations after format-patch has run but before sending,\nkeeping them as Git notes allows them to be maintained between versions\nof the patch series (but see the discussion of the notes.rewrite\nconfiguration options in git-notes[1] to use this workflow).\n\n\nThe default is --no-notes, unless the format.notes configuration is\nset."
      },
      {
        "type": "long",
        "key": "no-notes",
        "title": "--notes[=<ref>], --no-notes",
        "description": "Append the notes (see git-notes[1]) for the commit\nafter the three-dash line.\n\nThe expected use case of this is to write supporting explanation for\nthe commit that does not belong to the commit log message proper,\nand include it with the patch submission. While one can simply write\nthese explanations after format-patch has run but before sending,\nkeeping them as Git notes allows them to be maintained between versions\nof the patch series (but see the discussion of the notes.rewrite\nconfiguration options in git-notes[1] to use this workflow).\n\n\nThe default is --no-notes, unless the format.notes configuration is\nset."
      },
      {
        "type": "long",
        "key": "signature",
        "title": "--[no-]signature=<signature>",
        "description": "Add a signature to each message produced. Per RFC 3676 the signature\nis separated from the body by a line with '-- ' on it. If the\nsignature option is omitted the signature defaults to the Git version\nnumber."
      },
      {
        "type": "long",
        "key": "signature-file",
        "title": "--signature-file=<file>",
        "description": "Works just like --signature except the signature is read from a file."
      },
      {
        "type": "long",
        "key": "suffix",
        "title": "--suffix=.<sfx>",
        "description": "Instead of using .patch as the suffix for generated\nfilenames, use specified suffix.  A common alternative is\n--suffix=.txt.  Leaving this empty will remove the .patch\nsuffix.\n\nNote that the leading character does not have to be a dot; for example,\nyou can use --suffix=-patch to get 0001-description-of-my-change-patch."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Do not print the names of the generated files to standard output."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Do not print the names of the generated files to standard output."
      },
      {
        "type": "long",
        "key": "no-binary",
        "title": "--no-binary",
        "description": "Do not output contents of changes in binary files, instead\ndisplay a notice that those files changed.  Patches generated\nusing this option cannot be applied properly, but they are\nstill useful for code review."
      },
      {
        "type": "long",
        "key": "zero-commit",
        "title": "--zero-commit",
        "description": "Output an all-zero hash in each patch’s From header instead\nof the hash of the commit."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root",
        "description": "Treat the revision argument as a <revision range>, even if it\nis just a single commit (that would normally be treated as a\n<since>).  Note that root commits included in the specified\nrange are always formatted as creation patches, independently\nof this flag."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Show progress reports on stderr as patches are generated."
      }
    ]
  },
  {
    "name": "git gc",
    "options": [
      {
        "type": "long",
        "key": "aggressive",
        "title": "--aggressive",
        "description": "Usually git gc runs very quickly while providing good disk\nspace utilization and performance.  This option will cause\ngit gc to more aggressively optimize the repository at the expense\nof taking much more time.  The effects of this optimization are\nmostly persistent. See the \"AGGRESSIVE\" section below for details."
      },
      {
        "type": "long",
        "key": "auto",
        "title": "--auto",
        "description": "With this option, git gc checks whether any housekeeping is\nrequired; if not, it exits without performing any work.\n\nSee the gc.auto option in the \"CONFIGURATION\" section below for how\nthis heuristic works.\n\n\nOnce housekeeping is triggered by exceeding the limits of\nconfiguration options such as gc.auto and gc.autoPackLimit, all\nother housekeeping tasks (e.g. rerere, working trees, reflog…​) will\nbe performed as well."
      },
      {
        "type": "long",
        "key": "prune",
        "title": "--prune=<date>",
        "description": "Prune loose objects older than date (default is 2 weeks ago,\noverridable by the config variable gc.pruneExpire).\n--prune=now prunes loose objects regardless of their age and\nincreases the risk of corruption if another process is writing to\nthe repository concurrently; see \"NOTES\" below. --prune is on by\ndefault."
      },
      {
        "type": "long",
        "key": "no-prune",
        "title": "--no-prune",
        "description": "Do not prune any loose objects."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Suppress all progress reports."
      },
      {
        "type": "long",
        "key": "force",
        "title": "--force",
        "description": "Force git gc to run even if there may be another git gc\ninstance running on this repository."
      },
      {
        "type": "long",
        "key": "keep-largest-pack",
        "title": "--keep-largest-pack",
        "description": "All packs except the largest pack and those marked with a\n.keep files are consolidated into a single pack. When this\noption is used, gc.bigPackThreshold is ignored."
      }
    ]
  },
  {
    "name": "git grep",
    "options": [
      {
        "type": "long",
        "key": "cached",
        "title": "--cached",
        "description": "Instead of searching tracked files in the working tree, search\nblobs registered in the index file."
      },
      {
        "type": "long",
        "key": "no-index",
        "title": "--no-index",
        "description": "Search files in the current directory that is not managed by Git."
      },
      {
        "type": "long",
        "key": "untracked",
        "title": "--untracked",
        "description": "In addition to searching in the tracked files in the working\ntree, search also in untracked files."
      },
      {
        "type": "long",
        "key": "no-exclude-standard",
        "title": "--no-exclude-standard",
        "description": "Also search in ignored files by not honoring the .gitignore\nmechanism. Only useful with --untracked."
      },
      {
        "type": "long",
        "key": "exclude-standard",
        "title": "--exclude-standard",
        "description": "Do not pay attention to ignored files specified via the .gitignore\nmechanism.  Only useful when searching files in the current directory\nwith --no-index."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules",
        "description": "Recursively search in each submodule that is active and\nchecked out in the repository.  When used in combination with the\n<tree> option the prefix of all submodule output will be the name of\nthe parent project’s <tree> object. This option has no effect\nif --no-index is given."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --text",
        "description": "Process binary files as if they were text."
      },
      {
        "type": "long",
        "key": "text",
        "title": "-a, --text",
        "description": "Process binary files as if they were text."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv",
        "description": "Honor textconv filter settings."
      },
      {
        "type": "long",
        "key": "no-textconv",
        "title": "--no-textconv",
        "description": "Do not honor textconv filter settings.\nThis is the default."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --ignore-case",
        "description": "Ignore case differences between the patterns and the\nfiles."
      },
      {
        "type": "long",
        "key": "ignore-case",
        "title": "-i, --ignore-case",
        "description": "Ignore case differences between the patterns and the\nfiles."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I",
        "description": "Don’t match the pattern in binary files."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r, --recursive",
        "description": "Same as --max-depth=-1; this is the default."
      },
      {
        "type": "long",
        "key": "recursive",
        "title": "-r, --recursive",
        "description": "Same as --max-depth=-1; this is the default."
      },
      {
        "type": "long",
        "key": "no-recursive",
        "title": "--no-recursive",
        "description": "Same as --max-depth=0."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --word-regexp",
        "description": "Match the pattern only at word boundary (either begin at the\nbeginning of a line, or preceded by a non-word character; end at\nthe end of a line or followed by a non-word character)."
      },
      {
        "type": "long",
        "key": "word-regexp",
        "title": "-w, --word-regexp",
        "description": "Match the pattern only at word boundary (either begin at the\nbeginning of a line, or preceded by a non-word character; end at\nthe end of a line or followed by a non-word character)."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --invert-match",
        "description": "Select non-matching lines."
      },
      {
        "type": "long",
        "key": "invert-match",
        "title": "-v, --invert-match",
        "description": "Select non-matching lines."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, -H",
        "description": "By default, the command shows the filename for each\nmatch.  -h option is used to suppress this output.\n-H is there for completeness and does not do anything\nexcept it overrides -h given earlier on the command\nline."
      },
      {
        "type": "short",
        "key": "H",
        "title": "-h, -H",
        "description": "By default, the command shows the filename for each\nmatch.  -h option is used to suppress this output.\n-H is there for completeness and does not do anything\nexcept it overrides -h given earlier on the command\nline."
      },
      {
        "type": "long",
        "key": "full-name",
        "title": "--full-name",
        "description": "When run from a subdirectory, the command usually\noutputs paths relative to the current directory.  This\noption forces paths to be output relative to the project\ntop directory."
      },
      {
        "type": "short",
        "key": "E",
        "title": "-E, --extended-regexp, -G, --basic-regexp",
        "description": "Use POSIX extended/basic regexp for patterns.  Default\nis to use basic regexp."
      },
      {
        "type": "long",
        "key": "extended-regexp",
        "title": "-E, --extended-regexp, -G, --basic-regexp",
        "description": "Use POSIX extended/basic regexp for patterns.  Default\nis to use basic regexp."
      },
      {
        "type": "short",
        "key": "G",
        "title": "-E, --extended-regexp, -G, --basic-regexp",
        "description": "Use POSIX extended/basic regexp for patterns.  Default\nis to use basic regexp."
      },
      {
        "type": "long",
        "key": "basic-regexp",
        "title": "-E, --extended-regexp, -G, --basic-regexp",
        "description": "Use POSIX extended/basic regexp for patterns.  Default\nis to use basic regexp."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P, --perl-regexp",
        "description": "Use Perl-compatible regular expressions for patterns.\n\nSupport for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."
      },
      {
        "type": "long",
        "key": "perl-regexp",
        "title": "-P, --perl-regexp",
        "description": "Use Perl-compatible regular expressions for patterns.\n\nSupport for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F, --fixed-strings",
        "description": "Use fixed strings for patterns (don’t interpret pattern\nas a regex)."
      },
      {
        "type": "long",
        "key": "fixed-strings",
        "title": "-F, --fixed-strings",
        "description": "Use fixed strings for patterns (don’t interpret pattern\nas a regex)."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --line-number",
        "description": "Prefix the line number to matching lines."
      },
      {
        "type": "long",
        "key": "line-number",
        "title": "-n, --line-number",
        "description": "Prefix the line number to matching lines."
      },
      {
        "type": "long",
        "key": "column",
        "title": "--column",
        "description": "Prefix the 1-indexed byte-offset of the first match from the start of the\nmatching line."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --files-with-matches, --name-only, -L, --files-without-match",
        "description": "Instead of showing every matched line, show only the\nnames of files that contain (or do not contain) matches.\nFor better compatibility with git diff, --name-only is a\nsynonym for --files-with-matches."
      },
      {
        "type": "long",
        "key": "files-with-matches",
        "title": "-l, --files-with-matches, --name-only, -L, --files-without-match",
        "description": "Instead of showing every matched line, show only the\nnames of files that contain (or do not contain) matches.\nFor better compatibility with git diff, --name-only is a\nsynonym for --files-with-matches."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "-l, --files-with-matches, --name-only, -L, --files-without-match",
        "description": "Instead of showing every matched line, show only the\nnames of files that contain (or do not contain) matches.\nFor better compatibility with git diff, --name-only is a\nsynonym for --files-with-matches."
      },
      {
        "type": "short",
        "key": "L",
        "title": "-l, --files-with-matches, --name-only, -L, --files-without-match",
        "description": "Instead of showing every matched line, show only the\nnames of files that contain (or do not contain) matches.\nFor better compatibility with git diff, --name-only is a\nsynonym for --files-with-matches."
      },
      {
        "type": "long",
        "key": "files-without-match",
        "title": "-l, --files-with-matches, --name-only, -L, --files-without-match",
        "description": "Instead of showing every matched line, show only the\nnames of files that contain (or do not contain) matches.\nFor better compatibility with git diff, --name-only is a\nsynonym for --files-with-matches."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O[<pager>], --open-files-in-pager[=<pager>]",
        "description": "Open the matching files in the pager (not the output of grep).\nIf the pager happens to be \"less\" or \"vi\", and the user\nspecified only one pattern, the first file is positioned at\nthe first match automatically. The pager argument is\noptional; if specified, it must be stuck to the option\nwithout a space. If pager is unspecified, the default pager\nwill be used (see core.pager in git-config[1])."
      },
      {
        "type": "long",
        "key": "open-files-in-pager",
        "title": "-O[<pager>], --open-files-in-pager[=<pager>]",
        "description": "Open the matching files in the pager (not the output of grep).\nIf the pager happens to be \"less\" or \"vi\", and the user\nspecified only one pattern, the first file is positioned at\nthe first match automatically. The pager argument is\noptional; if specified, it must be stuck to the option\nwithout a space. If pager is unspecified, the default pager\nwill be used (see core.pager in git-config[1])."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z, --null",
        "description": "Use \\0 as the delimiter for pathnames in the output, and print\nthem verbatim. Without this option, pathnames with \"unusual\"\ncharacters are quoted as explained for the configuration\nvariable core.quotePath (see git-config[1])."
      },
      {
        "type": "long",
        "key": "null",
        "title": "-z, --null",
        "description": "Use \\0 as the delimiter for pathnames in the output, and print\nthem verbatim. Without this option, pathnames with \"unusual\"\ncharacters are quoted as explained for the configuration\nvariable core.quotePath (see git-config[1])."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o, --only-matching",
        "description": "Print only the matched (non-empty) parts of a matching line, with each such\npart on a separate output line."
      },
      {
        "type": "long",
        "key": "only-matching",
        "title": "-o, --only-matching",
        "description": "Print only the matched (non-empty) parts of a matching line, with each such\npart on a separate output line."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --count",
        "description": "Instead of showing every matched line, show the number of\nlines that match."
      },
      {
        "type": "long",
        "key": "count",
        "title": "-c, --count",
        "description": "Instead of showing every matched line, show the number of\nlines that match."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Show colored matches.\nThe value must be always (the default), never, or auto."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off match highlighting, even when the configuration file\ngives the default to color output.\nSame as --color=never."
      },
      {
        "type": "long",
        "key": "break",
        "title": "--break",
        "description": "Print an empty line between matches from different files."
      },
      {
        "type": "long",
        "key": "heading",
        "title": "--heading",
        "description": "Show the filename above the matches in that file instead of\nat the start of each shown line."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --show-function",
        "description": "Show the preceding line that contains the function name of\nthe match, unless the matching line is a function name itself.\nThe name is determined in the same way as git diff works out\npatch hunk headers (see Defining a custom hunk-header in\ngitattributes[5])."
      },
      {
        "type": "long",
        "key": "show-function",
        "title": "-p, --show-function",
        "description": "Show the preceding line that contains the function name of\nthe match, unless the matching line is a function name itself.\nThe name is determined in the same way as git diff works out\npatch hunk headers (see Defining a custom hunk-header in\ngitattributes[5])."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-<num>, -C <num>, --context <num>",
        "description": "Show <num> leading and trailing lines, and place a line\ncontaining -- between contiguous groups of matches."
      },
      {
        "type": "short",
        "key": "A",
        "title": "-A <num>, --after-context <num>",
        "description": "Show <num> trailing lines, and place a line containing\n-- between contiguous groups of matches."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B <num>, --before-context <num>",
        "description": "Show <num> leading lines, and place a line containing\n-- between contiguous groups of matches."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --function-context",
        "description": "Show the surrounding text from the previous line containing a\nfunction name up to the one before the next function name,\neffectively showing the whole function in which the match was\nfound. The function names are determined in the same way as\ngit diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "function-context",
        "title": "-W, --function-context",
        "description": "Show the surrounding text from the previous line containing a\nfunction name up to the one before the next function name,\neffectively showing the whole function in which the match was\nfound. The function names are determined in the same way as\ngit diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes[5])."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f <file>",
        "description": "Read patterns from <file>, one per line.\n\nPassing the pattern via <file> allows for providing a search pattern\ncontaining a \\0.\n\n\nNot all pattern types support patterns containing \\0. Git will error\nout if a given pattern type can’t support such a pattern. The\n--perl-regexp pattern type when compiled against the PCRE v2 backend\nhas the widest support for these types of patterns.\n\n\nIn versions of Git before 2.23.0 patterns containing \\0 would be\nsilently considered fixed. This was never documented, there were also\nodd and undocumented interactions between e.g. non-ASCII patterns\ncontaining \\0 and --ignore-case.\n\n\nIn future versions we may learn to support patterns containing \\0 for\nmore search backends, until then we’ll die when the pattern type in\nquestion doesn’t support them."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e",
        "description": "The next parameter is the pattern. This option has to be\nused for patterns starting with - and should be used in\nscripts passing user input to grep.  Multiple patterns are\ncombined by or."
      },
      {
        "type": "long",
        "key": "and",
        "title": "--and, --or, --not, ( …​ )",
        "description": "Specify how multiple patterns are combined using Boolean\nexpressions.  --or is the default operator.  --and has\nhigher precedence than --or.  -e has to be used for all\npatterns."
      },
      {
        "type": "long",
        "key": "or",
        "title": "--and, --or, --not, ( …​ )",
        "description": "Specify how multiple patterns are combined using Boolean\nexpressions.  --or is the default operator.  --and has\nhigher precedence than --or.  -e has to be used for all\npatterns."
      },
      {
        "type": "long",
        "key": "not",
        "title": "--and, --or, --not, ( …​ )",
        "description": "Specify how multiple patterns are combined using Boolean\nexpressions.  --or is the default operator.  --and has\nhigher precedence than --or.  -e has to be used for all\npatterns."
      },
      {
        "type": "long",
        "key": "all-match",
        "title": "--all-match",
        "description": "When giving multiple pattern expressions combined with --or,\nthis flag is specified to limit the match to files that\nhave lines to match all of them."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Do not output matched lines; instead, exit with status 0 when\nthere is a match and with non-zero status when there isn’t."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Do not output matched lines; instead, exit with status 0 when\nthere is a match and with non-zero status when there isn’t."
      }
    ]
  },
  {
    "name": "git gui",
    "options": []
  },
  {
    "name": "git init",
    "options": [
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Only print error and warning messages; all other output will be suppressed."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Only print error and warning messages; all other output will be suppressed."
      },
      {
        "type": "long",
        "key": "bare",
        "title": "--bare",
        "description": "Create a bare repository. If GIT_DIR environment is not set, it is set to the\ncurrent working directory."
      },
      {
        "type": "long",
        "key": "object-format",
        "title": "--object-format=<format>",
        "description": "Specify the given object format (hash algorithm) for the repository.  The valid\nvalues are sha1 and (if enabled) sha256.  sha1 is the default.\n\nTHIS OPTION IS EXPERIMENTAL! SHA-256 support is experimental and still\nin an early stage.  A SHA-256 repository will in general not be able to\nshare work with \"regular\" SHA-1 repositories.  It should be assumed\nthat, e.g., Git internal file formats in relation to SHA-256\nrepositories may change in backwards-incompatible ways.  Only use\n--object-format=sha256 for testing purposes."
      },
      {
        "type": "long",
        "key": "template",
        "title": "--template=<template_directory>",
        "description": "Specify the directory from which templates will be used.  (See the \"TEMPLATE\nDIRECTORY\" section below.)"
      },
      {
        "type": "long",
        "key": "separate-git-dir",
        "title": "--separate-git-dir=<git dir>",
        "description": "Instead of initializing the repository as a directory to either $GIT_DIR or\n./.git/, create a text file there containing the path to the actual\nrepository.  This file acts as filesystem-agnostic Git symbolic link to the\nrepository.\n\nIf this is reinitialization, the repository will be moved to the specified path."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b <branch-name>, --initial-branch=<branch-name>",
        "description": "Use the specified name for the initial branch in the newly created\nrepository.  If not specified, fall back to the default name (currently\nmaster, but this is subject to change in the future; the name can be\ncustomized via the init.defaultBranch configuration variable)."
      },
      {
        "type": "long",
        "key": "initial-branch",
        "title": "-b <branch-name>, --initial-branch=<branch-name>",
        "description": "Use the specified name for the initial branch in the newly created\nrepository.  If not specified, fall back to the default name (currently\nmaster, but this is subject to change in the future; the name can be\ncustomized via the init.defaultBranch configuration variable)."
      },
      {
        "type": "long",
        "key": "shared",
        "title": "--shared[=(false|true|umask|group|all|world|everybody|0xxx)]",
        "description": "Specify that the Git repository is to be shared amongst several users.  This\nallows users belonging to the same group to push into that\nrepository.  When specified, the config variable \"core.sharedRepository\" is\nset so that files and directories under $GIT_DIR are created with the\nrequested permissions.  When not specified, Git will use permissions reported\nby umask(2).\n\nThe option can have the following values, defaulting to group if no value\nis given:\n\n\n\n\n\n umask (or false) \n\nUse permissions reported by umask(2). The default, when --shared is not\nspecified.\n\n group (or true) \n\nMake the repository group-writable, (and g+sx, since the git group may be not\nthe primary group of all users). This is used to loosen the permissions of an\notherwise safe umask(2) value. Note that the umask still applies to the other\npermission bits (e.g. if umask is 0022, using group will not remove read\nprivileges from other (non-group) users). See 0xxx for how to exactly specify\nthe repository permissions.\n\n all (or world or everybody) \n\nSame as group, but make the repository readable by all users.\n\n 0xxx \n\n0xxx is an octal number and each file will have mode 0xxx. 0xxx will\noverride users' umask(2) value (and not only loosen permissions as group and\nall does). 0640 will create a repository which is group-readable, but not\ngroup-writable or accessible to others. 0660 will create a repo that is\nreadable and writable to the current user and group, but inaccessible to others."
      }
    ]
  },
  {
    "name": "git log",
    "options": [
      {
        "type": "long",
        "key": "follow",
        "title": "--follow",
        "description": "Continue listing the history of a file beyond renames\n(works only for a single file)."
      },
      {
        "type": "long",
        "key": "no-decorate",
        "title": "--no-decorate, --decorate[=short|full|auto|no]",
        "description": "Print out the ref names of any commits that are shown. If short is\nspecified, the ref name prefixes refs/heads/, refs/tags/ and\nrefs/remotes/ will not be printed. If full is specified, the\nfull ref name (including prefix) will be printed. If auto is\nspecified, then if the output is going to a terminal, the ref names\nare shown as if short were given, otherwise no ref names are\nshown. The option --decorate is short-hand for --decorate=short.\nDefault to configuration value of log.decorate if configured,\notherwise, auto."
      },
      {
        "type": "long",
        "key": "decorate",
        "title": "--no-decorate, --decorate[=short|full|auto|no]",
        "description": "Print out the ref names of any commits that are shown. If short is\nspecified, the ref name prefixes refs/heads/, refs/tags/ and\nrefs/remotes/ will not be printed. If full is specified, the\nfull ref name (including prefix) will be printed. If auto is\nspecified, then if the output is going to a terminal, the ref names\nare shown as if short were given, otherwise no ref names are\nshown. The option --decorate is short-hand for --decorate=short.\nDefault to configuration value of log.decorate if configured,\notherwise, auto."
      },
      {
        "type": "long",
        "key": "decorate-refs",
        "title": "--decorate-refs=<pattern>, --decorate-refs-exclude=<pattern>",
        "description": "If no --decorate-refs is given, pretend as if all refs were\nincluded.  For each candidate, do not use it for decoration if it\nmatches any patterns given to --decorate-refs-exclude or if it\ndoesn’t match any of the patterns given to --decorate-refs. The\nlog.excludeDecoration config option allows excluding refs from\nthe decorations, but an explicit --decorate-refs pattern will\noverride a match in log.excludeDecoration."
      },
      {
        "type": "long",
        "key": "decorate-refs-exclude",
        "title": "--decorate-refs=<pattern>, --decorate-refs-exclude=<pattern>",
        "description": "If no --decorate-refs is given, pretend as if all refs were\nincluded.  For each candidate, do not use it for decoration if it\nmatches any patterns given to --decorate-refs-exclude or if it\ndoesn’t match any of the patterns given to --decorate-refs. The\nlog.excludeDecoration config option allows excluding refs from\nthe decorations, but an explicit --decorate-refs pattern will\noverride a match in log.excludeDecoration."
      },
      {
        "type": "long",
        "key": "source",
        "title": "--source",
        "description": "Print out the ref name given on the command line by which each\ncommit was reached."
      },
      {
        "type": "long",
        "key": "mailmap",
        "title": "--[no-]mailmap, --[no-]use-mailmap",
        "description": "Use mailmap file to map author and committer names and email\naddresses to canonical real names and email addresses. See\ngit-shortlog[1]."
      },
      {
        "type": "long",
        "key": "use-mailmap",
        "title": "--[no-]mailmap, --[no-]use-mailmap",
        "description": "Use mailmap file to map author and committer names and email\naddresses to canonical real names and email addresses. See\ngit-shortlog[1]."
      },
      {
        "type": "long",
        "key": "full-diff",
        "title": "--full-diff",
        "description": "Without this flag, git log -p <path>... shows commits that\ntouch the specified paths, and diffs about the same specified\npaths.  With this, the full diff is shown for commits that touch\nthe specified paths; this means that \"<path>…​\" limits only\ncommits, and doesn’t limit diff for those commits.\n\nNote that this affects all diff-based output types, e.g. those\nproduced by --stat, etc."
      },
      {
        "type": "long",
        "key": "log-size",
        "title": "--log-size",
        "description": "Include a line “log size <number>” in the output for each commit,\nwhere <number> is the length of that commit’s message in bytes.\nIntended to speed up tools that read log messages from git log\noutput by allowing them to allocate space in advance."
      },
      {
        "type": "short",
        "key": "L",
        "title": "-L<start>, <end>:<file>, -L:<funcname>:<file>",
        "description": "Trace the evolution of the line range given by <start>,<end>,\nor by the function name regex <funcname>, within the <file>. You may\nnot give any pathspec limiters.  This is currently limited to\na walk starting from a single revision, i.e., you may only\ngive zero or one positive revision arguments, and\n<start> and <end> (or <funcname>) must exist in the starting revision.\nYou can specify this option more than once. Implies --patch.\nPatch output can be suppressed using --no-patch, but other diff formats\n(namely --raw, --numstat, --shortstat, --dirstat, --summary,\n--name-only, --name-status, --check) are not currently implemented.\n\n<start> and <end> can take one of these forms:\n\n\n\n\nnumber\n\nIf <start> or <end> is a number, it specifies an\nabsolute line number (lines count from 1).\n\n\n\n/regex/\n\nThis form will use the first line matching the given\nPOSIX regex. If <start> is a regex, it will search from the end of\nthe previous -L range, if any, otherwise from the start of file.\nIf <start> is ^/regex/, it will search from the start of file.\nIf <end> is a regex, it will search\nstarting at the line given by <start>.\n\n\n\n+offset or -offset\n\nThis is only valid for <end> and will specify a number\nof lines before or after the line given by <start>.\n\n\n\n\n\nIf :<funcname> is given in place of <start> and <end>, it is a\nregular expression that denotes the range from the first funcname line\nthat matches <funcname>, up to the next funcname line. :<funcname>\nsearches from the end of the previous -L range, if any, otherwise\nfrom the start of file. ^:<funcname> searches from the start of\nfile. The function names are determined in the same way as git diff\nworks out patch hunk headers (see Defining a custom hunk-header\nin gitattributes[5])."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-<number>, -n <number>, --max-count=<number>",
        "description": "Limit the number of commits to output."
      },
      {
        "type": "long",
        "key": "max-count",
        "title": "-<number>, -n <number>, --max-count=<number>",
        "description": "Limit the number of commits to output."
      },
      {
        "type": "long",
        "key": "skip",
        "title": "--skip=<number>",
        "description": "Skip number commits before starting to show the commit output."
      },
      {
        "type": "long",
        "key": "since",
        "title": "--since=<date>, --after=<date>",
        "description": "Show commits more recent than a specific date."
      },
      {
        "type": "long",
        "key": "after",
        "title": "--since=<date>, --after=<date>",
        "description": "Show commits more recent than a specific date."
      },
      {
        "type": "long",
        "key": "until",
        "title": "--until=<date>, --before=<date>",
        "description": "Show commits older than a specific date."
      },
      {
        "type": "long",
        "key": "before",
        "title": "--until=<date>, --before=<date>",
        "description": "Show commits older than a specific date."
      },
      {
        "type": "long",
        "key": "author",
        "title": "--author=<pattern>, --committer=<pattern>",
        "description": "Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern>,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern>)."
      },
      {
        "type": "long",
        "key": "committer",
        "title": "--author=<pattern>, --committer=<pattern>",
        "description": "Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern>,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern>)."
      },
      {
        "type": "long",
        "key": "grep-reflog",
        "title": "--grep-reflog=<pattern>",
        "description": "Limit the commits output to ones with reflog entries that\nmatch the specified pattern (regular expression). With\nmore than one --grep-reflog, commits whose reflog message\nmatches any of the given patterns are chosen.  It is an\nerror to use this option unless --walk-reflogs is in use."
      },
      {
        "type": "long",
        "key": "grep",
        "title": "--grep=<pattern>",
        "description": "Limit the commits output to ones with log message that\nmatches the specified pattern (regular expression).  With\nmore than one --grep=<pattern>, commits whose message\nmatches any of the given patterns are chosen (but see\n--all-match).\n\nWhen --notes is in effect, the message from the notes is\nmatched as if it were part of the log message."
      },
      {
        "type": "long",
        "key": "all-match",
        "title": "--all-match",
        "description": "Limit the commits output to ones that match all given --grep,\ninstead of ones that match at least one."
      },
      {
        "type": "long",
        "key": "invert-grep",
        "title": "--invert-grep",
        "description": "Limit the commits output to ones with log message that do not\nmatch the pattern specified with --grep=<pattern>."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --regexp-ignore-case",
        "description": "Match the regular expression limiting patterns without regard to letter\ncase."
      },
      {
        "type": "long",
        "key": "regexp-ignore-case",
        "title": "-i, --regexp-ignore-case",
        "description": "Match the regular expression limiting patterns without regard to letter\ncase."
      },
      {
        "type": "long",
        "key": "basic-regexp",
        "title": "--basic-regexp",
        "description": "Consider the limiting patterns to be basic regular expressions;\nthis is the default."
      },
      {
        "type": "short",
        "key": "E",
        "title": "-E, --extended-regexp",
        "description": "Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions."
      },
      {
        "type": "long",
        "key": "extended-regexp",
        "title": "-E, --extended-regexp",
        "description": "Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F, --fixed-strings",
        "description": "Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression)."
      },
      {
        "type": "long",
        "key": "fixed-strings",
        "title": "-F, --fixed-strings",
        "description": "Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression)."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P, --perl-regexp",
        "description": "Consider the limiting patterns to be Perl-compatible regular\nexpressions.\n\nSupport for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."
      },
      {
        "type": "long",
        "key": "perl-regexp",
        "title": "-P, --perl-regexp",
        "description": "Consider the limiting patterns to be Perl-compatible regular\nexpressions.\n\nSupport for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."
      },
      {
        "type": "long",
        "key": "remove-empty",
        "title": "--remove-empty",
        "description": "Stop when a given path disappears from the tree."
      },
      {
        "type": "long",
        "key": "merges",
        "title": "--merges",
        "description": "Print only merge commits. This is exactly the same as --min-parents=2."
      },
      {
        "type": "long",
        "key": "no-merges",
        "title": "--no-merges",
        "description": "Do not print commits with more than one parent. This is\nexactly the same as --max-parents=1."
      },
      {
        "type": "long",
        "key": "min-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "max-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "no-min-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "no-max-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge\ncommit.  This option can give a better overview when\nviewing the evolution of a particular topic branch,\nbecause merges into a topic branch tend to be only about\nadjusting to updated upstream from time to time, and\nthis option allows you to ignore the individual commits\nbrought in to your history by such a merge.\n\nThis option also changes default diff format for merge commits\nto first-parent, see --diff-merges=first-parent for details."
      },
      {
        "type": "long",
        "key": "not",
        "title": "--not",
        "description": "Reverses the meaning of the ^ prefix (or lack thereof)\nfor all following revision specifiers, up to the next --not."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Pretend as if all the refs in refs/, along with HEAD, are\nlisted on the command line as <commit>."
      },
      {
        "type": "long",
        "key": "branches",
        "title": "--branches[=<pattern>]",
        "description": "Pretend as if all the refs in refs/heads are listed\non the command line as <commit>. If <pattern> is given, limit\nbranches to ones matching given shell glob. If pattern lacks ?,\n*, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--tags[=<pattern>]",
        "description": "Pretend as if all the refs in refs/tags are listed\non the command line as <commit>. If <pattern> is given, limit\ntags to ones matching given shell glob. If pattern lacks ?, *,\nor [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "remotes",
        "title": "--remotes[=<pattern>]",
        "description": "Pretend as if all the refs in refs/remotes are listed\non the command line as <commit>. If <pattern> is given, limit\nremote-tracking branches to ones matching given shell glob.\nIf pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "glob",
        "title": "--glob=<glob-pattern>",
        "description": "Pretend as if all the refs matching shell glob <glob-pattern>\nare listed on the command line as <commit>. Leading refs/,\nis automatically prepended if missing. If pattern lacks ?, *,\nor [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude=<glob-pattern>",
        "description": "Do not include refs matching <glob-pattern> that the next --all,\n--branches, --tags, --remotes, or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all, --branches, --tags, --remotes, or\n--glob option (other options or arguments do not clear\naccumulated patterns).\n\nThe patterns given should not begin with refs/heads, refs/tags, or\nrefs/remotes when applied to --branches, --tags, or --remotes,\nrespectively, and they must begin with refs/ when applied to --glob\nor --all. If a trailing /* is intended, it must be given\nexplicitly."
      },
      {
        "type": "long",
        "key": "reflog",
        "title": "--reflog",
        "description": "Pretend as if all objects mentioned by reflogs are listed on the\ncommand line as <commit>."
      },
      {
        "type": "long",
        "key": "alternate-refs",
        "title": "--alternate-refs",
        "description": "Pretend as if all objects mentioned as ref tips of alternate\nrepositories were listed on the command line. An alternate\nrepository is any repository whose object directory is specified\nin objects/info/alternates.  The set of included objects may\nbe modified by core.alternateRefsCommand, etc. See\ngit-config[1]."
      },
      {
        "type": "long",
        "key": "single-worktree",
        "title": "--single-worktree",
        "description": "By default, all working trees will be examined by the\nfollowing options when there are more than one (see\ngit-worktree[1]): --all, --reflog and\n--indexed-objects.\nThis option forces them to examine the current working tree\nonly."
      },
      {
        "type": "long",
        "key": "ignore-missing",
        "title": "--ignore-missing",
        "description": "Upon seeing an invalid object name in the input, pretend as if\nthe bad input was not given."
      },
      {
        "type": "long",
        "key": "bisect",
        "title": "--bisect",
        "description": "Pretend as if the bad bisection ref refs/bisect/bad\nwas listed and as if it was followed by --not and the good\nbisection refs refs/bisect/good-* on the command\nline."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "In addition to the <commit> listed on the command\nline, read them from the standard input. If a -- separator is\nseen, stop reading commits and start reading paths to limit the\nresult."
      },
      {
        "type": "long",
        "key": "cherry-mark",
        "title": "--cherry-mark",
        "description": "Like --cherry-pick (see below) but mark equivalent commits\nwith = rather than omitting them, and inequivalent ones with +."
      },
      {
        "type": "long",
        "key": "cherry-pick",
        "title": "--cherry-pick",
        "description": "Omit any commit that introduces the same change as\nanother commit on the “other side” when the set of\ncommits are limited with symmetric difference.\n\nFor example, if you have two branches, A and B, a usual way\nto list all commits on only one side of them is with\n--left-right (see the example below in the description of\nthe --left-right option). However, it shows the commits that were\ncherry-picked from the other branch (for example, “3rd on b” may be\ncherry-picked from branch A). With this option, such pairs of commits are\nexcluded from the output."
      },
      {
        "type": "long",
        "key": "left-only",
        "title": "--left-only, --right-only",
        "description": "List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by\n--left-right.\n\nFor example, --cherry-pick --right-only A...B omits those\ncommits from B which are in A or are patch-equivalent to a commit in\nA. In other words, this lists the + commits from git cherry A B.\nMore precisely, --cherry-pick --right-only --no-merges gives the exact\nlist."
      },
      {
        "type": "long",
        "key": "right-only",
        "title": "--left-only, --right-only",
        "description": "List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by\n--left-right.\n\nFor example, --cherry-pick --right-only A...B omits those\ncommits from B which are in A or are patch-equivalent to a commit in\nA. In other words, this lists the + commits from git cherry A B.\nMore precisely, --cherry-pick --right-only --no-merges gives the exact\nlist."
      },
      {
        "type": "long",
        "key": "cherry",
        "title": "--cherry",
        "description": "A synonym for --right-only --cherry-mark --no-merges; useful to\nlimit the output to the commits on our side and mark those that\nhave been applied to the other side of a forked history with\ngit log --cherry upstream...mybranch, similar to\ngit cherry upstream mybranch."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --walk-reflogs",
        "description": "Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit, commit1..commit2,\nand commit1...commit2 notations cannot be used).\n\nWith --pretty format other than oneline and reference (for obvious reasons),\nthis causes the output to have two extra lines of information\ntaken from the reflog.  The reflog designator in the output may be shown\nas ref@{Nth} (where Nth is the reverse-chronological index in the\nreflog) or as ref@{timestamp} (with the timestamp for that entry),\ndepending on a few rules:\n\n\n\n\n\n\nIf the starting point is specified as ref@{Nth}, show the index\nformat.\n\n\nIf the starting point was specified as ref@{now}, show the\ntimestamp format.\n\n\nIf neither was used, but --date was given on the command line, show\nthe timestamp in the format requested by --date.\n\n\nOtherwise, show the index format.\n\n\n\n\n\n\nUnder --pretty=oneline, the commit message is\nprefixed with this information on the same line.\nThis option cannot be combined with --reverse.\nSee also git-reflog[1].\n\n\nUnder --pretty=reference, this information will not be shown at all."
      },
      {
        "type": "long",
        "key": "walk-reflogs",
        "title": "-g, --walk-reflogs",
        "description": "Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit, commit1..commit2,\nand commit1...commit2 notations cannot be used).\n\nWith --pretty format other than oneline and reference (for obvious reasons),\nthis causes the output to have two extra lines of information\ntaken from the reflog.  The reflog designator in the output may be shown\nas ref@{Nth} (where Nth is the reverse-chronological index in the\nreflog) or as ref@{timestamp} (with the timestamp for that entry),\ndepending on a few rules:\n\n\n\n\n\n\nIf the starting point is specified as ref@{Nth}, show the index\nformat.\n\n\nIf the starting point was specified as ref@{now}, show the\ntimestamp format.\n\n\nIf neither was used, but --date was given on the command line, show\nthe timestamp in the format requested by --date.\n\n\nOtherwise, show the index format.\n\n\n\n\n\n\nUnder --pretty=oneline, the commit message is\nprefixed with this information on the same line.\nThis option cannot be combined with --reverse.\nSee also git-reflog[1].\n\n\nUnder --pretty=reference, this information will not be shown at all."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "--merge",
        "description": "After a failed merge, show refs that touch files having a\nconflict and don’t exist on all heads to merge."
      },
      {
        "type": "long",
        "key": "boundary",
        "title": "--boundary",
        "description": "Output excluded boundary commits. Boundary commits are\nprefixed with -."
      },
      {
        "type": "long",
        "key": "simplify-by-decoration",
        "title": "--simplify-by-decoration",
        "description": "Commits that are referred by some branch or tag are selected."
      },
      {
        "type": "long",
        "key": "show-pulls",
        "title": "--show-pulls",
        "description": "Include all commits from the default mode, but also any merge\ncommits that are not TREESAME to the first parent but are\nTREESAME to a later parent. This mode is helpful for showing\nthe merge commits that \"first introduced\" a change to a branch."
      },
      {
        "type": "long",
        "key": "full-history",
        "title": "--full-history",
        "description": "Same as the default mode, but does not prune some history."
      },
      {
        "type": "long",
        "key": "dense",
        "title": "--dense",
        "description": "Only the selected commits are shown, plus some to have a\nmeaningful history."
      },
      {
        "type": "long",
        "key": "sparse",
        "title": "--sparse",
        "description": "All commits in the simplified history are shown."
      },
      {
        "type": "long",
        "key": "simplify-merges",
        "title": "--simplify-merges",
        "description": "Additional option to --full-history to remove some needless\nmerges from the resulting history, as there are no selected\ncommits contributing to this merge."
      },
      {
        "type": "long",
        "key": "ancestry-path",
        "title": "--ancestry-path",
        "description": "When given a range of commits to display (e.g. commit1..commit2\nor commit2 ^commit1), only display commits that exist\ndirectly on the ancestry chain between the commit1 and\ncommit2, i.e. commits that are both descendants of commit1,\nand ancestors of commit2."
      },
      {
        "type": "long",
        "key": "date-order",
        "title": "--date-order",
        "description": "Show no parents before all of its children are shown, but\notherwise show commits in the commit timestamp order."
      },
      {
        "type": "long",
        "key": "author-date-order",
        "title": "--author-date-order",
        "description": "Show no parents before all of its children are shown, but\notherwise show commits in the author timestamp order."
      },
      {
        "type": "long",
        "key": "topo-order",
        "title": "--topo-order",
        "description": "Show no parents before all of its children are shown, and\navoid showing commits on multiple lines of history\nintermixed.\n\nFor example, in a commit history like this:\n\n\n\n    ---1----2----4----7\n\t\\\t       \\\n\t 3----5----6----8---\n\n\n\nwhere the numbers denote the order of commit timestamps, git\nrev-list and friends with --date-order show the commits in the\ntimestamp order: 8 7 6 5 4 3 2 1.\n\n\nWith --topo-order, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5\n3 1); some older commits are shown before newer ones in order to\navoid showing the commits from two parallel development track mixed\ntogether."
      },
      {
        "type": "long",
        "key": "reverse",
        "title": "--reverse",
        "description": "Output the commits chosen to be shown (see Commit Limiting\nsection above) in reverse order. Cannot be combined with\n--walk-reflogs."
      },
      {
        "type": "long",
        "key": "no-walk",
        "title": "--no-walk[=(sorted|unsorted)]",
        "description": "Only show the given commits, but do not traverse their ancestors.\nThis has no effect if a range is specified. If the argument\nunsorted is given, the commits are shown in the order they were\ngiven on the command line. Otherwise (if sorted or no argument\nwas given), the commits are shown in reverse chronological order\nby commit time.\nCannot be combined with --graph."
      },
      {
        "type": "long",
        "key": "do-walk",
        "title": "--do-walk",
        "description": "Overrides a previous --no-walk."
      },
      {
        "type": "long",
        "key": "pretty",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, reference, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each\nformat.  When =<format> part is omitted, it defaults to medium.\n\n\nNote: you can specify the default pretty format in the repository\nconfiguration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, reference, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each\nformat.  When =<format> part is omitted, it defaults to medium.\n\n\nNote: you can specify the default pretty format in the repository\nconfiguration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "abbrev-commit",
        "title": "--abbrev-commit",
        "description": "Instead of showing the full 40-byte hexadecimal commit object\nname, show a prefix that names the object uniquely.\n\"--abbrev=<n>\" (which also modifies diff output, if it is displayed)\noption can be used to specify the minimum length of the prefix.\n\nThis should make \"--pretty=oneline\" a whole lot more readable for\npeople using 80-column terminals."
      },
      {
        "type": "long",
        "key": "no-abbrev-commit",
        "title": "--no-abbrev-commit",
        "description": "Show the full 40-byte hexadecimal commit object name. This negates\n--abbrev-commit, either explicit or implied by other options such\nas \"--oneline\". It also overrides the log.abbrevCommit variable."
      },
      {
        "type": "long",
        "key": "oneline",
        "title": "--oneline",
        "description": "This is a shorthand for \"--pretty=oneline --abbrev-commit\"\nused together."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "The commit objects record the encoding used for the log message\nin their encoding header; this option can be used to tell the\ncommand to re-code the commit log message in the encoding\npreferred by the user.  For non plumbing commands this\ndefaults to UTF-8. Note that if an object claims to be encoded\nin X and we are outputting in X, we will output the object\nverbatim; this means that invalid sequences in the original\ncommit may be copied to the output."
      },
      {
        "type": "long",
        "key": "expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e.  medium, which is the default, full,\nand fuller)."
      },
      {
        "type": "long",
        "key": "no-expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e.  medium, which is the default, full,\nand fuller)."
      },
      {
        "type": "long",
        "key": "notes",
        "title": "--notes[=<ref>]",
        "description": "Show the notes (see git-notes[1]) that annotate the\ncommit, when showing the commit log message.  This is the default\nfor git log, git show and git whatchanged commands when\nthere is no --pretty, --format, or --oneline option given\non the command line.\n\nBy default, the notes shown are from the notes refs listed in the\ncore.notesRef and notes.displayRef variables (or corresponding\nenvironment overrides). See git-config[1] for more details.\n\n\nWith an optional <ref> argument, use the ref to find the notes\nto display.  The ref can specify the full refname when it begins\nwith refs/notes/; when it begins with notes/, refs/ and otherwise\nrefs/notes/ is prefixed to form a full name of the ref.\n\n\nMultiple --notes options can be combined to control which notes are\nbeing displayed. Examples: \"--notes=foo\" will show only notes from\n\"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from\n\"refs/notes/foo\" and from the default notes ref(s)."
      },
      {
        "type": "long",
        "key": "no-notes",
        "title": "--no-notes",
        "description": "Do not show notes. This negates the above --notes option, by\nresetting the list of notes refs from which notes are shown.\nOptions are parsed in the order given on the command line, so e.g.\n\"--notes --notes=foo --no-notes --notes=bar\" will only show notes\nfrom \"refs/notes/bar\"."
      },
      {
        "type": "long",
        "key": "show-notes",
        "title": "--show-notes[=<ref>], --[no-]standard-notes",
        "description": "These options are deprecated. Use the above --notes/--no-notes\noptions instead."
      },
      {
        "type": "long",
        "key": "standard-notes",
        "title": "--show-notes[=<ref>], --[no-]standard-notes",
        "description": "These options are deprecated. Use the above --notes/--no-notes\noptions instead."
      },
      {
        "type": "long",
        "key": "show-signature",
        "title": "--show-signature",
        "description": "Check the validity of a signed commit object by passing the signature\nto gpg --verify and show the output."
      },
      {
        "type": "long",
        "key": "relative-date",
        "title": "--relative-date",
        "description": "Synonym for --date=relative."
      },
      {
        "type": "long",
        "key": "date",
        "title": "--date=<format>",
        "description": "Only takes effect for dates shown in human-readable format, such\nas when using --pretty. log.date config variable sets a default\nvalue for the log command’s --date option. By default, dates\nare shown in the original time zone (either committer’s or\nauthor’s). If -local is appended to the format (e.g.,\niso-local), the user’s local time zone is used instead.\n\n\n\n--date=relative shows dates relative to the current time,\ne.g. “2 hours ago”. The -local option has no effect for\n--date=relative.\n\n\n--date=local is an alias for --date=default-local.\n\n\n--date=iso (or --date=iso8601) shows timestamps in a ISO 8601-like format.\nThe differences to the strict ISO 8601 format are:\n\n\n\n\na space instead of the T date/time delimiter\n\n\na space between time and time zone\n\n\nno colon between hours and minutes of the time zone\n\n\n\n\n--date=iso-strict (or --date=iso8601-strict) shows timestamps in strict\nISO 8601 format.\n\n\n--date=rfc (or --date=rfc2822) shows timestamps in RFC 2822\nformat, often found in email messages.\n\n\n--date=short shows only the date, but not the time, in YYYY-MM-DD format.\n\n\n--date=raw shows the date as seconds since the epoch (1970-01-01\n00:00:00 UTC), followed by a space, and then the timezone as an offset\nfrom UTC (a + or - with four digits; the first two are hours, and\nthe second two are minutes). I.e., as if the timestamp were formatted\nwith strftime(\"%s %z\")).\nNote that the -local option does not affect the seconds-since-epoch\nvalue (which is always measured in UTC), but does switch the accompanying\ntimezone value.\n\n\n--date=human shows the timezone if the timezone does not match the\ncurrent time-zone, and doesn’t print the whole date if that matches\n(ie skip printing year for dates that are \"this year\", but also skip\nthe whole date itself if it’s in the last few days and we can just say\nwhat weekday it was).  For older dates the hour and minute is also\nomitted.\n\n\n--date=unix shows the date as a Unix epoch timestamp (seconds since\n1970).  As with --raw, this is always in UTC and therefore -local\nhas no effect.\n\n\n--date=format:... feeds the format ... to your system strftime,\nexcept for %z and %Z, which are handled internally.\nUse --date=format:%c to show the date in your system locale’s\npreferred format.  See the strftime manual for a complete list of\nformat placeholders. When using -local, the correct syntax is\n--date=format-local:....\n\n\n--date=default is the default format, and is similar to\n--date=rfc2822, with a few exceptions:\n\n\n\n\n\n\nthere is no comma after the day-of-week\n\n\nthe time zone is omitted when the local time zone is used"
      },
      {
        "type": "long",
        "key": "parents",
        "title": "--parents",
        "description": "Print also the parents of the commit (in the form \"commit parent…​\").\nAlso enables parent rewriting, see History Simplification above."
      },
      {
        "type": "long",
        "key": "children",
        "title": "--children",
        "description": "Print also the children of the commit (in the form \"commit child…​\").\nAlso enables parent rewriting, see History Simplification above."
      },
      {
        "type": "long",
        "key": "left-right",
        "title": "--left-right",
        "description": "Mark which side of a symmetric difference a commit is reachable from.\nCommits from the left side are prefixed with < and those from\nthe right with >.  If combined with --boundary, those\ncommits are prefixed with -.\n\nFor example, if you have this topology:\n\n\n\n\t     y---b---b  branch B\n\t    / \\ /\n\t   /   .\n\t  /   / \\\n\t o---x---a---a  branch A\n\n\n\nyou would get an output like this:\n\n\n\n\t$ git rev-list --left-right --boundary --pretty=oneline A...B\n\n\t>bbbbbbb... 3rd on b\n\t>bbbbbbb... 2nd on b\n\t<aaaaaaa... 3rd on a\n\t<aaaaaaa... 2nd on a\n\t-yyyyyyy... 1st on b\n\t-xxxxxxx... 1st on a"
      },
      {
        "type": "long",
        "key": "graph",
        "title": "--graph",
        "description": "Draw a text-based graphical representation of the commit history\non the left hand side of the output.  This may cause extra lines\nto be printed in between commits, in order for the graph history\nto be drawn properly.\nCannot be combined with --no-walk.\n\nThis enables parent rewriting, see History Simplification above.\n\n\nThis implies the --topo-order option by default, but the\n--date-order option may also be specified."
      },
      {
        "type": "long",
        "key": "show-linear-break",
        "title": "--show-linear-break[=<barrier>]",
        "description": "When --graph is not used, all history branches are flattened\nwhich can make it hard to see that the two consecutive commits\ndo not belong to a linear branch. This option puts a barrier\nin between them in that case. If <barrier> is specified, it\nis the string that will be shown instead of the default one."
      }
    ]
  },
  {
    "name": "git maintenance",
    "options": [
      {
        "type": "long",
        "key": "auto",
        "title": "--auto",
        "description": "When combined with the run subcommand, run maintenance tasks\nonly if certain thresholds are met. For example, the gc task\nruns when the number of loose objects exceeds the number stored\nin the gc.auto config setting, or when the number of pack-files\nexceeds the gc.autoPackLimit config setting. Not compatible with\nthe --schedule option."
      },
      {
        "type": "long",
        "key": "schedule",
        "title": "--schedule",
        "description": "When combined with the run subcommand, run maintenance tasks\nonly if certain time conditions are met, as specified by the\nmaintenance.<task>.schedule config value for each <task>.\nThis config value specifies a number of seconds since the last\ntime that task ran, according to the maintenance.<task>.lastRun\nconfig value. The tasks that are tested are those provided by\nthe --task=<task> option(s) or those with\nmaintenance.<task>.enabled set to true."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Do not report progress or other information over stderr."
      },
      {
        "type": "long",
        "key": "task",
        "title": "--task=<task>",
        "description": "If this option is specified one or more times, then only run the\nspecified tasks in the specified order. If no --task=<task>\narguments are specified, then only the tasks with\nmaintenance.<task>.enabled configured as true are considered.\nSee the TASKS section for the list of accepted <task> values."
      }
    ]
  },
  {
    "name": "git merge",
    "options": [
      {
        "type": "long",
        "key": "commit",
        "title": "--commit, --no-commit",
        "description": "Perform the merge and commit the result. This option can\nbe used to override --no-commit.\n\nWith --no-commit perform the merge and stop just before creating\na merge commit, to give the user a chance to inspect and further\ntweak the merge result before committing.\n\n\nNote that fast-forward updates do not create a merge commit and\ntherefore there is no way to stop those merges with --no-commit.\nThus, if you want to ensure your branch is not changed or updated\nby the merge command, use --no-ff with --no-commit."
      },
      {
        "type": "long",
        "key": "no-commit",
        "title": "--commit, --no-commit",
        "description": "Perform the merge and commit the result. This option can\nbe used to override --no-commit.\n\nWith --no-commit perform the merge and stop just before creating\na merge commit, to give the user a chance to inspect and further\ntweak the merge result before committing.\n\n\nNote that fast-forward updates do not create a merge commit and\ntherefore there is no way to stop those merges with --no-commit.\nThus, if you want to ensure your branch is not changed or updated\nby the merge command, use --no-ff with --no-commit."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "--edit, -e, --no-edit",
        "description": "Invoke an editor before committing successful mechanical merge to\n\tfurther edit the auto-generated merge message, so that the user\n\tcan explain and justify the merge. The --no-edit option can be\n\tused to accept the auto-generated message (this is generally\n\tdiscouraged).\nThe --edit (or -e) option is still useful if you are\ngiving a draft message with the -m option from the command line\nand want to edit it in the editor.\n\nOlder scripts may depend on the historical behaviour of not allowing the\nuser to edit the merge log message. They will see an editor opened when\nthey run git merge. To make it easier to adjust such scripts to the\nupdated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be\nset to no at the beginning of them."
      },
      {
        "type": "short",
        "key": "e",
        "title": "--edit, -e, --no-edit",
        "description": "Invoke an editor before committing successful mechanical merge to\n\tfurther edit the auto-generated merge message, so that the user\n\tcan explain and justify the merge. The --no-edit option can be\n\tused to accept the auto-generated message (this is generally\n\tdiscouraged).\nThe --edit (or -e) option is still useful if you are\ngiving a draft message with the -m option from the command line\nand want to edit it in the editor.\n\nOlder scripts may depend on the historical behaviour of not allowing the\nuser to edit the merge log message. They will see an editor opened when\nthey run git merge. To make it easier to adjust such scripts to the\nupdated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be\nset to no at the beginning of them."
      },
      {
        "type": "long",
        "key": "no-edit",
        "title": "--edit, -e, --no-edit",
        "description": "Invoke an editor before committing successful mechanical merge to\n\tfurther edit the auto-generated merge message, so that the user\n\tcan explain and justify the merge. The --no-edit option can be\n\tused to accept the auto-generated message (this is generally\n\tdiscouraged).\nThe --edit (or -e) option is still useful if you are\ngiving a draft message with the -m option from the command line\nand want to edit it in the editor.\n\nOlder scripts may depend on the historical behaviour of not allowing the\nuser to edit the merge log message. They will see an editor opened when\nthey run git merge. To make it easier to adjust such scripts to the\nupdated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be\nset to no at the beginning of them."
      },
      {
        "type": "long",
        "key": "cleanup",
        "title": "--cleanup=<mode>",
        "description": "This option determines how the merge message will be cleaned up before\ncommitting. See git-commit[1] for more details. In addition, if\nthe <mode> is given a value of scissors, scissors will be appended\nto MERGE_MSG before being passed on to the commit machinery in the\ncase of a merge conflict."
      },
      {
        "type": "long",
        "key": "ff",
        "title": "--ff, --no-ff, --ff-only",
        "description": "Specifies how a merge is handled when the merged-in history is\nalready a descendant of the current history.  --ff is the\ndefault unless merging an annotated (and possibly signed) tag\nthat is not stored in its natural place in the refs/tags/\nhierarchy, in which case --no-ff is assumed.\n\nWith --ff, when possible resolve the merge as a fast-forward (only\nupdate the branch pointer to match the merged branch; do not create a\nmerge commit).  When not possible (when the merged-in history is not a\ndescendant of the current history), create a merge commit.\n\n\nWith --no-ff, create a merge commit in all cases, even when the merge\ncould instead be resolved as a fast-forward.\n\n\nWith --ff-only, resolve the merge as a fast-forward when possible.\nWhen not possible, refuse to merge and exit with a non-zero status."
      },
      {
        "type": "long",
        "key": "no-ff",
        "title": "--ff, --no-ff, --ff-only",
        "description": "Specifies how a merge is handled when the merged-in history is\nalready a descendant of the current history.  --ff is the\ndefault unless merging an annotated (and possibly signed) tag\nthat is not stored in its natural place in the refs/tags/\nhierarchy, in which case --no-ff is assumed.\n\nWith --ff, when possible resolve the merge as a fast-forward (only\nupdate the branch pointer to match the merged branch; do not create a\nmerge commit).  When not possible (when the merged-in history is not a\ndescendant of the current history), create a merge commit.\n\n\nWith --no-ff, create a merge commit in all cases, even when the merge\ncould instead be resolved as a fast-forward.\n\n\nWith --ff-only, resolve the merge as a fast-forward when possible.\nWhen not possible, refuse to merge and exit with a non-zero status."
      },
      {
        "type": "long",
        "key": "ff-only",
        "title": "--ff, --no-ff, --ff-only",
        "description": "Specifies how a merge is handled when the merged-in history is\nalready a descendant of the current history.  --ff is the\ndefault unless merging an annotated (and possibly signed) tag\nthat is not stored in its natural place in the refs/tags/\nhierarchy, in which case --no-ff is assumed.\n\nWith --ff, when possible resolve the merge as a fast-forward (only\nupdate the branch pointer to match the merged branch; do not create a\nmerge commit).  When not possible (when the merged-in history is not a\ndescendant of the current history), create a merge commit.\n\n\nWith --no-ff, create a merge commit in all cases, even when the merge\ncould instead be resolved as a fast-forward.\n\n\nWith --ff-only, resolve the merge as a fast-forward when possible.\nWhen not possible, refuse to merge and exit with a non-zero status."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign the resulting merge commit. The keyid argument is\noptional and defaults to the committer identity; if specified,\nit must be stuck to the option without a space. --no-gpg-sign\nis useful to countermand both commit.gpgSign configuration variable,\nand earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign the resulting merge commit. The keyid argument is\noptional and defaults to the committer identity; if specified,\nit must be stuck to the option without a space. --no-gpg-sign\nis useful to countermand both commit.gpgSign configuration variable,\nand earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign the resulting merge commit. The keyid argument is\noptional and defaults to the committer identity; if specified,\nit must be stuck to the option without a space. --no-gpg-sign\nis useful to countermand both commit.gpgSign configuration variable,\nand earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "log",
        "title": "--log[=<n>], --no-log",
        "description": "In addition to branch names, populate the log message with\none-line descriptions from at most <n> actual commits that are being\nmerged. See also git-fmt-merge-msg[1].\n\nWith --no-log do not list one-line descriptions from the\nactual commits being merged."
      },
      {
        "type": "long",
        "key": "no-log",
        "title": "--log[=<n>], --no-log",
        "description": "In addition to branch names, populate the log message with\none-line descriptions from at most <n> actual commits that are being\nmerged. See also git-fmt-merge-msg[1].\n\nWith --no-log do not list one-line descriptions from the\nactual commits being merged."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "--signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit\nlog message.  The meaning of a signoff depends on the project\nto which you’re committing.  For example, it may certify that\nthe committer has the rights to submit the work under the\nproject’s license or agrees to some contributor representation,\nsuch as a Developer Certificate of Origin.\n(See http://developercertificate.org for the one used by the\nLinux kernel and Git projects.)  Consult the documentation or\nleadership of the project to which you’re contributing to\nunderstand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff\noption on the command line."
      },
      {
        "type": "long",
        "key": "no-signoff",
        "title": "--signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit\nlog message.  The meaning of a signoff depends on the project\nto which you’re committing.  For example, it may certify that\nthe committer has the rights to submit the work under the\nproject’s license or agrees to some contributor representation,\nsuch as a Developer Certificate of Origin.\n(See http://developercertificate.org for the one used by the\nLinux kernel and Git projects.)  Consult the documentation or\nleadership of the project to which you’re contributing to\nunderstand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff\noption on the command line."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat, -n, --no-stat",
        "description": "Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat.\n\nWith -n or --no-stat do not show a diffstat at the end of the\nmerge."
      },
      {
        "type": "short",
        "key": "n",
        "title": "--stat, -n, --no-stat",
        "description": "Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat.\n\nWith -n or --no-stat do not show a diffstat at the end of the\nmerge."
      },
      {
        "type": "long",
        "key": "no-stat",
        "title": "--stat, -n, --no-stat",
        "description": "Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat.\n\nWith -n or --no-stat do not show a diffstat at the end of the\nmerge."
      },
      {
        "type": "long",
        "key": "squash",
        "title": "--squash, --no-squash",
        "description": "Produce the working tree and index state as if a real merge\nhappened (except for the merge information), but do not actually\nmake a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD\n(to cause the next git commit command to create a merge\ncommit).  This allows you to create a single commit on top of\nthe current branch whose effect is the same as merging another\nbranch (or more in case of an octopus).\n\nWith --no-squash perform the merge and commit the result. This\noption can be used to override --squash.\n\n\nWith --squash, --commit is not allowed, and will fail."
      },
      {
        "type": "long",
        "key": "no-squash",
        "title": "--squash, --no-squash",
        "description": "Produce the working tree and index state as if a real merge\nhappened (except for the merge information), but do not actually\nmake a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD\n(to cause the next git commit command to create a merge\ncommit).  This allows you to create a single commit on top of\nthe current branch whose effect is the same as merging another\nbranch (or more in case of an octopus).\n\nWith --no-squash perform the merge and commit the result. This\noption can be used to override --squash.\n\n\nWith --squash, --commit is not allowed, and will fail."
      },
      {
        "type": "long",
        "key": "no-verify",
        "title": "--no-verify",
        "description": "This option bypasses the pre-merge and commit-msg hooks.\nSee also githooks[5]."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "Use the given merge strategy; can be supplied more than\nonce to specify them in the order they should be tried.\nIf there is no -s option, a built-in list of strategies\nis used instead (git merge-recursive when merging a single\nhead, git merge-octopus otherwise)."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "Use the given merge strategy; can be supplied more than\nonce to specify them in the order they should be tried.\nIf there is no -s option, a built-in list of strategies\nis used instead (git merge-recursive when merging a single\nhead, git merge-octopus otherwise)."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X <option>, --strategy-option=<option>",
        "description": "Pass merge strategy specific option through to the merge\nstrategy."
      },
      {
        "type": "long",
        "key": "strategy-option",
        "title": "-X <option>, --strategy-option=<option>",
        "description": "Pass merge strategy specific option through to the merge\nstrategy."
      },
      {
        "type": "long",
        "key": "verify-signatures",
        "title": "--verify-signatures, --no-verify-signatures",
        "description": "Verify that the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in the\ndefault trust model, this means the signing key has been signed by\na trusted key.  If the tip commit of the side branch is not signed\nwith a valid key, the merge is aborted."
      },
      {
        "type": "long",
        "key": "no-verify-signatures",
        "title": "--verify-signatures, --no-verify-signatures",
        "description": "Verify that the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in the\ndefault trust model, this means the signing key has been signed by\na trusted key.  If the tip commit of the side branch is not signed\nwith a valid key, the merge is aborted."
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary, --no-summary",
        "description": "Synonyms to --stat and --no-stat; these are deprecated and will be\nremoved in the future."
      },
      {
        "type": "long",
        "key": "no-summary",
        "title": "--summary, --no-summary",
        "description": "Synonyms to --stat and --no-stat; these are deprecated and will be\nremoved in the future."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Operate quietly. Implies --no-progress."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Operate quietly. Implies --no-progress."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress, --no-progress",
        "description": "Turn progress on/off explicitly. If neither is specified,\nprogress is shown if standard error is connected to a terminal.\nNote that not all merge strategies may support progress\nreporting."
      },
      {
        "type": "long",
        "key": "no-progress",
        "title": "--progress, --no-progress",
        "description": "Turn progress on/off explicitly. If neither is specified,\nprogress is shown if standard error is connected to a terminal.\nNote that not all merge strategies may support progress\nreporting."
      },
      {
        "type": "long",
        "key": "autostash",
        "title": "--autostash, --no-autostash",
        "description": "Automatically create a temporary stash entry before the operation\nbegins, record it in the special ref MERGE_AUTOSTASH\nand apply it after the operation ends.  This means\nthat you can run the operation on a dirty worktree.  However, use\nwith care: the final stash application after a successful\nmerge might result in non-trivial conflicts."
      },
      {
        "type": "long",
        "key": "no-autostash",
        "title": "--autostash, --no-autostash",
        "description": "Automatically create a temporary stash entry before the operation\nbegins, record it in the special ref MERGE_AUTOSTASH\nand apply it after the operation ends.  This means\nthat you can run the operation on a dirty worktree.  However, use\nwith care: the final stash application after a successful\nmerge might result in non-trivial conflicts."
      },
      {
        "type": "long",
        "key": "allow-unrelated-histories",
        "title": "--allow-unrelated-histories",
        "description": "By default, git merge command refuses to merge histories\nthat do not share a common ancestor.  This option can be\nused to override this safety when merging histories of two\nprojects that started their lives independently. As that is\na very rare occasion, no configuration variable to enable\nthis by default exists and will not be added."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m <msg>",
        "description": "Set the commit message to be used for the merge commit (in\ncase one is created).\n\nIf --log is specified, a shortlog of the commits being merged\nwill be appended to the specified message.\n\n\nThe git fmt-merge-msg command can be\nused to give a good default for automated git merge\ninvocations. The automated message can include the branch description."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F <file>, --file=<file>",
        "description": "Read the commit message to be used for the merge commit (in\ncase one is created).\n\nIf --log is specified, a shortlog of the commits being merged\nwill be appended to the specified message."
      },
      {
        "type": "long",
        "key": "file",
        "title": "-F <file>, --file=<file>",
        "description": "Read the commit message to be used for the merge commit (in\ncase one is created).\n\nIf --log is specified, a shortlog of the commits being merged\nwill be appended to the specified message."
      },
      {
        "type": "long",
        "key": "rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the\nresult of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "no-rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the\nresult of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "overwrite-ignore",
        "title": "--overwrite-ignore, --no-overwrite-ignore",
        "description": "Silently overwrite ignored files from the merge result. This\nis the default behavior. Use --no-overwrite-ignore to abort."
      },
      {
        "type": "long",
        "key": "no-overwrite-ignore",
        "title": "--overwrite-ignore, --no-overwrite-ignore",
        "description": "Silently overwrite ignored files from the merge result. This\nis the default behavior. Use --no-overwrite-ignore to abort."
      },
      {
        "type": "long",
        "key": "abort",
        "title": "--abort",
        "description": "Abort the current conflict resolution process, and\ntry to reconstruct the pre-merge state. If an autostash entry is\npresent, apply it to the worktree.\n\nIf there were uncommitted worktree changes present when the merge\nstarted, git merge --abort will in some cases be unable to\nreconstruct these changes. It is therefore recommended to always\ncommit or stash your changes before running git merge.\n\n\ngit merge --abort is equivalent to git reset --merge when\nMERGE_HEAD is present unless MERGE_AUTOSTASH is also present in\nwhich case git merge --abort applies the stash entry to the worktree\nwhereas git reset --merge will save the stashed changes in the stash\nlist."
      },
      {
        "type": "long",
        "key": "quit",
        "title": "--quit",
        "description": "Forget about the current merge in progress. Leave the index\nand the working tree as-is. If MERGE_AUTOSTASH is present, the\nstash entry will be saved to the stash list."
      },
      {
        "type": "long",
        "key": "continue",
        "title": "--continue",
        "description": "After a git merge stops due to conflicts you can conclude the\nmerge by running git merge --continue (see \"HOW TO RESOLVE\nCONFLICTS\" section below)."
      }
    ]
  },
  {
    "name": "git mv",
    "options": [
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Force renaming or moving of a file even if the target exists"
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Force renaming or moving of a file even if the target exists"
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k",
        "description": "Skip move or rename actions which would lead to an error\ncondition. An error happens when a source is neither existing nor\ncontrolled by Git, or when it would overwrite an existing\nfile unless -f is given."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Do nothing; only show what would happen"
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Do nothing; only show what would happen"
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Report the names of files as they are moved."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Report the names of files as they are moved."
      }
    ]
  },
  {
    "name": "git notes",
    "options": [
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "When adding notes to an object that already has notes,\noverwrite the existing notes (instead of aborting)."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "When adding notes to an object that already has notes,\noverwrite the existing notes (instead of aborting)."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m <msg>, --message=<msg>",
        "description": "Use the given note message (instead of prompting).\nIf multiple -m options are given, their values\nare concatenated as separate paragraphs.\nLines starting with # and empty lines other than a\nsingle line between paragraphs will be stripped out."
      },
      {
        "type": "long",
        "key": "message",
        "title": "-m <msg>, --message=<msg>",
        "description": "Use the given note message (instead of prompting).\nIf multiple -m options are given, their values\nare concatenated as separate paragraphs.\nLines starting with # and empty lines other than a\nsingle line between paragraphs will be stripped out."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F <file>, --file=<file>",
        "description": "Take the note message from the given file.  Use - to\nread the note message from the standard input.\nLines starting with # and empty lines other than a\nsingle line between paragraphs will be stripped out."
      },
      {
        "type": "long",
        "key": "file",
        "title": "-F <file>, --file=<file>",
        "description": "Take the note message from the given file.  Use - to\nread the note message from the standard input.\nLines starting with # and empty lines other than a\nsingle line between paragraphs will be stripped out."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C <object>, --reuse-message=<object>",
        "description": "Take the given blob object (for example, another note) as the\nnote message. (Use git notes copy <object> instead to\ncopy notes between objects.)"
      },
      {
        "type": "long",
        "key": "reuse-message",
        "title": "-C <object>, --reuse-message=<object>",
        "description": "Take the given blob object (for example, another note) as the\nnote message. (Use git notes copy <object> instead to\ncopy notes between objects.)"
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c <object>, --reedit-message=<object>",
        "description": "Like -C, but with -c the editor is invoked, so that\nthe user can further edit the note message."
      },
      {
        "type": "long",
        "key": "reedit-message",
        "title": "-c <object>, --reedit-message=<object>",
        "description": "Like -C, but with -c the editor is invoked, so that\nthe user can further edit the note message."
      },
      {
        "type": "long",
        "key": "allow-empty",
        "title": "--allow-empty",
        "description": "Allow an empty note object to be stored. The default behavior is\nto automatically remove empty notes."
      },
      {
        "type": "long",
        "key": "ignore-missing",
        "title": "--ignore-missing",
        "description": "Do not consider it an error to request removing notes from an\nobject that does not have notes attached to it."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Also read the object names to remove notes from the standard\ninput (there is no reason you cannot combine this with object\nnames from the command line)."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Do not remove anything; just report the object names whose notes\nwould be removed."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Do not remove anything; just report the object names whose notes\nwould be removed."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "When merging notes, resolve notes conflicts using the given\nstrategy. The following strategies are recognized: \"manual\"\n(default), \"ours\", \"theirs\", \"union\" and \"cat_sort_uniq\".\nThis option overrides the \"notes.mergeStrategy\" configuration setting.\nSee the \"NOTES MERGE STRATEGIES\" section below for more\ninformation on each notes merge strategy."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "When merging notes, resolve notes conflicts using the given\nstrategy. The following strategies are recognized: \"manual\"\n(default), \"ours\", \"theirs\", \"union\" and \"cat_sort_uniq\".\nThis option overrides the \"notes.mergeStrategy\" configuration setting.\nSee the \"NOTES MERGE STRATEGIES\" section below for more\ninformation on each notes merge strategy."
      },
      {
        "type": "long",
        "key": "commit",
        "title": "--commit",
        "description": "Finalize an in-progress git notes merge. Use this option\nwhen you have resolved the conflicts that git notes merge\nstored in .git/NOTES_MERGE_WORKTREE. This amends the partial\nmerge commit created by git notes merge (stored in\n.git/NOTES_MERGE_PARTIAL) by adding the notes in\n.git/NOTES_MERGE_WORKTREE. The notes ref stored in the\n.git/NOTES_MERGE_REF symref is updated to the resulting commit."
      },
      {
        "type": "long",
        "key": "abort",
        "title": "--abort",
        "description": "Abort/reset an in-progress git notes merge, i.e. a notes merge\nwith conflicts. This simply removes all files related to the\nnotes merge."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "When merging notes, operate quietly."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "When merging notes, operate quietly."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "When merging notes, be more verbose.\nWhen pruning notes, report all object names whose notes are\nremoved."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "When merging notes, be more verbose.\nWhen pruning notes, report all object names whose notes are\nremoved."
      }
    ]
  },
  {
    "name": "git pull",
    "options": [
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "This is passed to both underlying git-fetch to squelch reporting of\nduring transfer, and underlying git-merge to squelch output during\nmerging."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "This is passed to both underlying git-fetch to squelch reporting of\nduring transfer, and underlying git-merge to squelch output during\nmerging."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Pass --verbose to git-fetch and git-merge."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Pass --verbose to git-fetch and git-merge."
      },
      {
        "type": "long",
        "key": "commit",
        "title": "--commit, --no-commit",
        "description": "Perform the merge and commit the result. This option can\nbe used to override --no-commit.\n\nWith --no-commit perform the merge and stop just before creating\na merge commit, to give the user a chance to inspect and further\ntweak the merge result before committing.\n\n\nNote that fast-forward updates do not create a merge commit and\ntherefore there is no way to stop those merges with --no-commit.\nThus, if you want to ensure your branch is not changed or updated\nby the merge command, use --no-ff with --no-commit."
      },
      {
        "type": "long",
        "key": "no-commit",
        "title": "--commit, --no-commit",
        "description": "Perform the merge and commit the result. This option can\nbe used to override --no-commit.\n\nWith --no-commit perform the merge and stop just before creating\na merge commit, to give the user a chance to inspect and further\ntweak the merge result before committing.\n\n\nNote that fast-forward updates do not create a merge commit and\ntherefore there is no way to stop those merges with --no-commit.\nThus, if you want to ensure your branch is not changed or updated\nby the merge command, use --no-ff with --no-commit."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "--edit, -e, --no-edit",
        "description": "Invoke an editor before committing successful mechanical merge to\nfurther edit the auto-generated merge message, so that the user\ncan explain and justify the merge. The --no-edit option can be\nused to accept the auto-generated message (this is generally\ndiscouraged).\n\nOlder scripts may depend on the historical behaviour of not allowing the\nuser to edit the merge log message. They will see an editor opened when\nthey run git merge. To make it easier to adjust such scripts to the\nupdated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be\nset to no at the beginning of them."
      },
      {
        "type": "short",
        "key": "e",
        "title": "--edit, -e, --no-edit",
        "description": "Invoke an editor before committing successful mechanical merge to\nfurther edit the auto-generated merge message, so that the user\ncan explain and justify the merge. The --no-edit option can be\nused to accept the auto-generated message (this is generally\ndiscouraged).\n\nOlder scripts may depend on the historical behaviour of not allowing the\nuser to edit the merge log message. They will see an editor opened when\nthey run git merge. To make it easier to adjust such scripts to the\nupdated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be\nset to no at the beginning of them."
      },
      {
        "type": "long",
        "key": "no-edit",
        "title": "--edit, -e, --no-edit",
        "description": "Invoke an editor before committing successful mechanical merge to\nfurther edit the auto-generated merge message, so that the user\ncan explain and justify the merge. The --no-edit option can be\nused to accept the auto-generated message (this is generally\ndiscouraged).\n\nOlder scripts may depend on the historical behaviour of not allowing the\nuser to edit the merge log message. They will see an editor opened when\nthey run git merge. To make it easier to adjust such scripts to the\nupdated behaviour, the environment variable GIT_MERGE_AUTOEDIT can be\nset to no at the beginning of them."
      },
      {
        "type": "long",
        "key": "cleanup",
        "title": "--cleanup=<mode>",
        "description": "This option determines how the merge message will be cleaned up before\ncommitting. See git-commit[1] for more details. In addition, if\nthe <mode> is given a value of scissors, scissors will be appended\nto MERGE_MSG before being passed on to the commit machinery in the\ncase of a merge conflict."
      },
      {
        "type": "long",
        "key": "ff",
        "title": "--ff, --no-ff, --ff-only",
        "description": "Specifies how a merge is handled when the merged-in history is\nalready a descendant of the current history.  --ff is the\ndefault unless merging an annotated (and possibly signed) tag\nthat is not stored in its natural place in the refs/tags/\nhierarchy, in which case --no-ff is assumed.\n\nWith --ff, when possible resolve the merge as a fast-forward (only\nupdate the branch pointer to match the merged branch; do not create a\nmerge commit).  When not possible (when the merged-in history is not a\ndescendant of the current history), create a merge commit.\n\n\nWith --no-ff, create a merge commit in all cases, even when the merge\ncould instead be resolved as a fast-forward.\n\n\nWith --ff-only, resolve the merge as a fast-forward when possible.\nWhen not possible, refuse to merge and exit with a non-zero status."
      },
      {
        "type": "long",
        "key": "no-ff",
        "title": "--ff, --no-ff, --ff-only",
        "description": "Specifies how a merge is handled when the merged-in history is\nalready a descendant of the current history.  --ff is the\ndefault unless merging an annotated (and possibly signed) tag\nthat is not stored in its natural place in the refs/tags/\nhierarchy, in which case --no-ff is assumed.\n\nWith --ff, when possible resolve the merge as a fast-forward (only\nupdate the branch pointer to match the merged branch; do not create a\nmerge commit).  When not possible (when the merged-in history is not a\ndescendant of the current history), create a merge commit.\n\n\nWith --no-ff, create a merge commit in all cases, even when the merge\ncould instead be resolved as a fast-forward.\n\n\nWith --ff-only, resolve the merge as a fast-forward when possible.\nWhen not possible, refuse to merge and exit with a non-zero status."
      },
      {
        "type": "long",
        "key": "ff-only",
        "title": "--ff, --no-ff, --ff-only",
        "description": "Specifies how a merge is handled when the merged-in history is\nalready a descendant of the current history.  --ff is the\ndefault unless merging an annotated (and possibly signed) tag\nthat is not stored in its natural place in the refs/tags/\nhierarchy, in which case --no-ff is assumed.\n\nWith --ff, when possible resolve the merge as a fast-forward (only\nupdate the branch pointer to match the merged branch; do not create a\nmerge commit).  When not possible (when the merged-in history is not a\ndescendant of the current history), create a merge commit.\n\n\nWith --no-ff, create a merge commit in all cases, even when the merge\ncould instead be resolved as a fast-forward.\n\n\nWith --ff-only, resolve the merge as a fast-forward when possible.\nWhen not possible, refuse to merge and exit with a non-zero status."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign the resulting merge commit. The keyid argument is\noptional and defaults to the committer identity; if specified,\nit must be stuck to the option without a space. --no-gpg-sign\nis useful to countermand both commit.gpgSign configuration variable,\nand earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign the resulting merge commit. The keyid argument is\noptional and defaults to the committer identity; if specified,\nit must be stuck to the option without a space. --no-gpg-sign\nis useful to countermand both commit.gpgSign configuration variable,\nand earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign the resulting merge commit. The keyid argument is\noptional and defaults to the committer identity; if specified,\nit must be stuck to the option without a space. --no-gpg-sign\nis useful to countermand both commit.gpgSign configuration variable,\nand earlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "log",
        "title": "--log[=<n>], --no-log",
        "description": "In addition to branch names, populate the log message with\none-line descriptions from at most <n> actual commits that are being\nmerged. See also git-fmt-merge-msg[1].\n\nWith --no-log do not list one-line descriptions from the\nactual commits being merged."
      },
      {
        "type": "long",
        "key": "no-log",
        "title": "--log[=<n>], --no-log",
        "description": "In addition to branch names, populate the log message with\none-line descriptions from at most <n> actual commits that are being\nmerged. See also git-fmt-merge-msg[1].\n\nWith --no-log do not list one-line descriptions from the\nactual commits being merged."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "--signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit\nlog message.  The meaning of a signoff depends on the project\nto which you’re committing.  For example, it may certify that\nthe committer has the rights to submit the work under the\nproject’s license or agrees to some contributor representation,\nsuch as a Developer Certificate of Origin.\n(See http://developercertificate.org for the one used by the\nLinux kernel and Git projects.)  Consult the documentation or\nleadership of the project to which you’re contributing to\nunderstand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff\noption on the command line."
      },
      {
        "type": "long",
        "key": "no-signoff",
        "title": "--signoff, --no-signoff",
        "description": "Add a Signed-off-by trailer by the committer at the end of the commit\nlog message.  The meaning of a signoff depends on the project\nto which you’re committing.  For example, it may certify that\nthe committer has the rights to submit the work under the\nproject’s license or agrees to some contributor representation,\nsuch as a Developer Certificate of Origin.\n(See http://developercertificate.org for the one used by the\nLinux kernel and Git projects.)  Consult the documentation or\nleadership of the project to which you’re contributing to\nunderstand how the signoffs are used in that project.\n\nThe --no-signoff option can be used to countermand an earlier --signoff\noption on the command line."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat, -n, --no-stat",
        "description": "Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat.\n\nWith -n or --no-stat do not show a diffstat at the end of the\nmerge."
      },
      {
        "type": "short",
        "key": "n",
        "title": "--stat, -n, --no-stat",
        "description": "Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat.\n\nWith -n or --no-stat do not show a diffstat at the end of the\nmerge."
      },
      {
        "type": "long",
        "key": "no-stat",
        "title": "--stat, -n, --no-stat",
        "description": "Show a diffstat at the end of the merge. The diffstat is also\ncontrolled by the configuration option merge.stat.\n\nWith -n or --no-stat do not show a diffstat at the end of the\nmerge."
      },
      {
        "type": "long",
        "key": "squash",
        "title": "--squash, --no-squash",
        "description": "Produce the working tree and index state as if a real merge\nhappened (except for the merge information), but do not actually\nmake a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD\n(to cause the next git commit command to create a merge\ncommit).  This allows you to create a single commit on top of\nthe current branch whose effect is the same as merging another\nbranch (or more in case of an octopus).\n\nWith --no-squash perform the merge and commit the result. This\noption can be used to override --squash.\n\n\nWith --squash, --commit is not allowed, and will fail."
      },
      {
        "type": "long",
        "key": "no-squash",
        "title": "--squash, --no-squash",
        "description": "Produce the working tree and index state as if a real merge\nhappened (except for the merge information), but do not actually\nmake a commit, move the HEAD, or record $GIT_DIR/MERGE_HEAD\n(to cause the next git commit command to create a merge\ncommit).  This allows you to create a single commit on top of\nthe current branch whose effect is the same as merging another\nbranch (or more in case of an octopus).\n\nWith --no-squash perform the merge and commit the result. This\noption can be used to override --squash.\n\n\nWith --squash, --commit is not allowed, and will fail."
      },
      {
        "type": "long",
        "key": "no-verify",
        "title": "--no-verify",
        "description": "This option bypasses the pre-merge and commit-msg hooks.\nSee also githooks[5]."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "Use the given merge strategy; can be supplied more than\nonce to specify them in the order they should be tried.\nIf there is no -s option, a built-in list of strategies\nis used instead (git merge-recursive when merging a single\nhead, git merge-octopus otherwise)."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "Use the given merge strategy; can be supplied more than\nonce to specify them in the order they should be tried.\nIf there is no -s option, a built-in list of strategies\nis used instead (git merge-recursive when merging a single\nhead, git merge-octopus otherwise)."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X <option>, --strategy-option=<option>",
        "description": "Pass merge strategy specific option through to the merge\nstrategy."
      },
      {
        "type": "long",
        "key": "strategy-option",
        "title": "-X <option>, --strategy-option=<option>",
        "description": "Pass merge strategy specific option through to the merge\nstrategy."
      },
      {
        "type": "long",
        "key": "verify-signatures",
        "title": "--verify-signatures, --no-verify-signatures",
        "description": "Verify that the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in the\ndefault trust model, this means the signing key has been signed by\na trusted key.  If the tip commit of the side branch is not signed\nwith a valid key, the merge is aborted."
      },
      {
        "type": "long",
        "key": "no-verify-signatures",
        "title": "--verify-signatures, --no-verify-signatures",
        "description": "Verify that the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in the\ndefault trust model, this means the signing key has been signed by\na trusted key.  If the tip commit of the side branch is not signed\nwith a valid key, the merge is aborted."
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary, --no-summary",
        "description": "Synonyms to --stat and --no-stat; these are deprecated and will be\nremoved in the future."
      },
      {
        "type": "long",
        "key": "no-summary",
        "title": "--summary, --no-summary",
        "description": "Synonyms to --stat and --no-stat; these are deprecated and will be\nremoved in the future."
      },
      {
        "type": "long",
        "key": "autostash",
        "title": "--autostash, --no-autostash",
        "description": "Automatically create a temporary stash entry before the operation\nbegins, record it in the special ref MERGE_AUTOSTASH\nand apply it after the operation ends.  This means\nthat you can run the operation on a dirty worktree.  However, use\nwith care: the final stash application after a successful\nmerge might result in non-trivial conflicts."
      },
      {
        "type": "long",
        "key": "no-autostash",
        "title": "--autostash, --no-autostash",
        "description": "Automatically create a temporary stash entry before the operation\nbegins, record it in the special ref MERGE_AUTOSTASH\nand apply it after the operation ends.  This means\nthat you can run the operation on a dirty worktree.  However, use\nwith care: the final stash application after a successful\nmerge might result in non-trivial conflicts."
      },
      {
        "type": "long",
        "key": "allow-unrelated-histories",
        "title": "--allow-unrelated-histories",
        "description": "By default, git merge command refuses to merge histories\nthat do not share a common ancestor.  This option can be\nused to override this safety when merging histories of two\nprojects that started their lives independently. As that is\na very rare occasion, no configuration variable to enable\nthis by default exists and will not be added."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r, --rebase[=false|true|merges|preserve|interactive]",
        "description": "When true, rebase the current branch on top of the upstream\nbranch after fetching. If there is a remote-tracking branch\ncorresponding to the upstream branch and the upstream branch\nwas rebased since last fetched, the rebase uses that information\nto avoid rebasing non-local changes.\n\nWhen set to merges, rebase using git rebase --rebase-merges so that\nthe local merge commits are included in the rebase (see\ngit-rebase[1] for details).\n\n\nWhen set to preserve (deprecated in favor of merges), rebase with the\n--preserve-merges option passed to git rebase so that locally created\nmerge commits will not be flattened.\n\n\nWhen false, merge the upstream branch into the current branch.\n\n\nWhen interactive, enable the interactive mode of rebase.\n\n\nSee pull.rebase, branch.<name>.rebase and branch.autoSetupRebase in\ngit-config[1] if you want to make git pull always use\n--rebase instead of merging.\n\n\n\n\n\nNote\n\n\nThis is a potentially dangerous mode of operation.\nIt rewrites history, which does not bode well when you\npublished that history already.  Do not use this option\nunless you have read git-rebase[1] carefully."
      },
      {
        "type": "long",
        "key": "rebase",
        "title": "-r, --rebase[=false|true|merges|preserve|interactive]",
        "description": "When true, rebase the current branch on top of the upstream\nbranch after fetching. If there is a remote-tracking branch\ncorresponding to the upstream branch and the upstream branch\nwas rebased since last fetched, the rebase uses that information\nto avoid rebasing non-local changes.\n\nWhen set to merges, rebase using git rebase --rebase-merges so that\nthe local merge commits are included in the rebase (see\ngit-rebase[1] for details).\n\n\nWhen set to preserve (deprecated in favor of merges), rebase with the\n--preserve-merges option passed to git rebase so that locally created\nmerge commits will not be flattened.\n\n\nWhen false, merge the upstream branch into the current branch.\n\n\nWhen interactive, enable the interactive mode of rebase.\n\n\nSee pull.rebase, branch.<name>.rebase and branch.autoSetupRebase in\ngit-config[1] if you want to make git pull always use\n--rebase instead of merging.\n\n\n\n\n\nNote\n\n\nThis is a potentially dangerous mode of operation.\nIt rewrites history, which does not bode well when you\npublished that history already.  Do not use this option\nunless you have read git-rebase[1] carefully."
      },
      {
        "type": "long",
        "key": "no-rebase",
        "title": "--no-rebase",
        "description": "Override earlier --rebase."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Fetch all remotes."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --append",
        "description": "Append ref names and object names of fetched refs to the\nexisting contents of .git/FETCH_HEAD.  Without this\noption old data in .git/FETCH_HEAD will be overwritten."
      },
      {
        "type": "long",
        "key": "append",
        "title": "-a, --append",
        "description": "Append ref names and object names of fetched refs to the\nexisting contents of .git/FETCH_HEAD.  Without this\noption old data in .git/FETCH_HEAD will be overwritten."
      },
      {
        "type": "long",
        "key": "atomic",
        "title": "--atomic",
        "description": "Use an atomic transaction to update local refs. Either all refs are\nupdated, or on error, no refs are updated."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--depth=<depth>",
        "description": "Limit fetching to the specified number of commits from the tip of\neach remote branch history. If fetching to a shallow repository\ncreated by git clone with --depth=<depth> option (see\ngit-clone[1]), deepen or shorten the history to the specified\nnumber of commits. Tags for the deepened commits are not fetched."
      },
      {
        "type": "long",
        "key": "deepen",
        "title": "--deepen=<depth>",
        "description": "Similar to --depth, except it specifies the number of commits\nfrom the current shallow boundary instead of from the tip of\neach remote branch history."
      },
      {
        "type": "long",
        "key": "shallow-since",
        "title": "--shallow-since=<date>",
        "description": "Deepen or shorten the history of a shallow repository to\ninclude all reachable commits after <date>."
      },
      {
        "type": "long",
        "key": "shallow-exclude",
        "title": "--shallow-exclude=<revision>",
        "description": "Deepen or shorten the history of a shallow repository to\nexclude commits reachable from a specified remote branch or tag.\nThis option can be specified multiple times."
      },
      {
        "type": "long",
        "key": "unshallow",
        "title": "--unshallow",
        "description": "If the source repository is complete, convert a shallow\nrepository to a complete one, removing all the limitations\nimposed by shallow repositories.\n\nIf the source repository is shallow, fetch as much as possible so that\nthe current repository has the same history as the source repository."
      },
      {
        "type": "long",
        "key": "update-shallow",
        "title": "--update-shallow",
        "description": "By default when fetching from a shallow repository,\ngit fetch refuses refs that require updating\n.git/shallow. This option updates .git/shallow and accept such\nrefs."
      },
      {
        "type": "long",
        "key": "negotiation-tip",
        "title": "--negotiation-tip=<commit|glob>",
        "description": "By default, Git will report, to the server, commits reachable\nfrom all local refs to find common commits in an attempt to\nreduce the size of the to-be-received packfile. If specified,\nGit will only report commits reachable from the given tips.\nThis is useful to speed up fetches when the user knows which\nlocal ref is likely to have commits in common with the\nupstream ref being fetched.\n\nThis option may be specified more than once; if so, Git will report\ncommits reachable from any of the given commits.\n\n\nThe argument to this option may be a glob on ref names, a ref, or the (possibly\nabbreviated) SHA-1 of a commit. Specifying a glob is equivalent to specifying\nthis option multiple times, one for each matching ref name.\n\n\nSee also the fetch.negotiationAlgorithm and push.negotiate\nconfiguration variables documented in git-config[1], and the\n--negotiate-only option below."
      },
      {
        "type": "long",
        "key": "negotiate-only",
        "title": "--negotiate-only",
        "description": "Do not fetch anything from the server, and instead print the\nancestors of the provided --negotiation-tip=* arguments,\nwhich we have in common with the server.\n\nInternally this is used to implement the push.negotiate option, see\ngit-config[1]."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Show what would be done, without making any changes."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "When git fetch is used with <src>:<dst> refspec it may\nrefuse to update the local branch as discussed\nin the <refspec> part of the git-fetch[1]\ndocumentation.\nThis option overrides that check."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "When git fetch is used with <src>:<dst> refspec it may\nrefuse to update the local branch as discussed\nin the <refspec> part of the git-fetch[1]\ndocumentation.\nThis option overrides that check."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep",
        "description": "Keep downloaded pack."
      },
      {
        "type": "long",
        "key": "keep",
        "title": "-k, --keep",
        "description": "Keep downloaded pack."
      },
      {
        "type": "long",
        "key": "prefetch",
        "title": "--prefetch",
        "description": "Modify the configured refspec to place all refs into the\nrefs/prefetch/ namespace. See the prefetch task in\ngit-maintenance[1]."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --prune",
        "description": "Before fetching, remove any remote-tracking references that no\nlonger exist on the remote.  Tags are not subject to pruning\nif they are fetched only because of the default tag\nauto-following or due to a --tags option.  However, if tags\nare fetched due to an explicit refspec (either on the command\nline or in the remote configuration, for example if the remote\nwas cloned with the --mirror option), then they are also\nsubject to pruning. Supplying --prune-tags is a shorthand for\nproviding the tag refspec."
      },
      {
        "type": "long",
        "key": "prune",
        "title": "-p, --prune",
        "description": "Before fetching, remove any remote-tracking references that no\nlonger exist on the remote.  Tags are not subject to pruning\nif they are fetched only because of the default tag\nauto-following or due to a --tags option.  However, if tags\nare fetched due to an explicit refspec (either on the command\nline or in the remote configuration, for example if the remote\nwas cloned with the --mirror option), then they are also\nsubject to pruning. Supplying --prune-tags is a shorthand for\nproviding the tag refspec."
      },
      {
        "type": "long",
        "key": "no-tags",
        "title": "--no-tags",
        "description": "By default, tags that point at objects that are downloaded\nfrom the remote repository are fetched and stored locally.\nThis option disables this automatic tag following. The default\nbehavior for a remote may be specified with the remote.<name>.tagOpt\nsetting. See git-config[1]."
      },
      {
        "type": "long",
        "key": "refmap",
        "title": "--refmap=<refspec>",
        "description": "When fetching refs listed on the command line, use the\nspecified refspec (can be given more than once) to map the\nrefs to remote-tracking branches, instead of the values of\nremote.*.fetch configuration variables for the remote\nrepository.  Providing an empty <refspec> to the\n--refmap option causes Git to ignore the configured\nrefspecs and rely entirely on the refspecs supplied as\ncommand-line arguments. See section on \"Configured Remote-tracking\nBranches\" for details."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t, --tags",
        "description": "Fetch all tags from the remote (i.e., fetch remote tags\nrefs/tags/* into local tags with the same name), in addition\nto whatever else would otherwise be fetched.  Using this\noption alone does not subject tags to pruning, even if --prune\nis used (though tags may be pruned anyway if they are also the\ndestination of an explicit refspec; see --prune)."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "-t, --tags",
        "description": "Fetch all tags from the remote (i.e., fetch remote tags\nrefs/tags/* into local tags with the same name), in addition\nto whatever else would otherwise be fetched.  Using this\noption alone does not subject tags to pruning, even if --prune\nis used (though tags may be pruned anyway if they are also the\ndestination of an explicit refspec; see --prune)."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j, --jobs=<n>",
        "description": "Number of parallel children to be used for all forms of fetching.\n\nIf the --multiple option was specified, the different remotes will be fetched\nin parallel. If multiple submodules are fetched, they will be fetched in\nparallel. To control them independently, use the config settings\nfetch.parallel and submodule.fetchJobs (see git-config[1]).\n\n\nTypically, parallel recursive and multi-remote fetches will be faster. By\ndefault fetches are performed sequentially, not in parallel."
      },
      {
        "type": "long",
        "key": "jobs",
        "title": "-j, --jobs=<n>",
        "description": "Number of parallel children to be used for all forms of fetching.\n\nIf the --multiple option was specified, the different remotes will be fetched\nin parallel. If multiple submodules are fetched, they will be fetched in\nparallel. To control them independently, use the config settings\nfetch.parallel and submodule.fetchJobs (see git-config[1]).\n\n\nTypically, parallel recursive and multi-remote fetches will be faster. By\ndefault fetches are performed sequentially, not in parallel."
      },
      {
        "type": "long",
        "key": "set-upstream",
        "title": "--set-upstream",
        "description": "If the remote is fetched successfully, add upstream\n(tracking) reference, used by argument-less\ngit-pull[1] and other commands. For more information,\nsee branch.<name>.merge and branch.<name>.remote in\ngit-config[1]."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <option>, --server-option=<option>",
        "description": "Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.  The server’s handling of server options, including\nunknown ones, is server-specific.\nWhen multiple --server-option=<option> are given, they are all\nsent to the other side in the order listed on the command line."
      },
      {
        "type": "long",
        "key": "server-option",
        "title": "-o <option>, --server-option=<option>",
        "description": "Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.  The server’s handling of server options, including\nunknown ones, is server-specific.\nWhen multiple --server-option=<option> are given, they are all\nsent to the other side in the order listed on the command line."
      },
      {
        "type": "long",
        "key": "show-forced-updates",
        "title": "--show-forced-updates",
        "description": "By default, git checks if a branch is force-updated during\nfetch. This can be disabled through fetch.showForcedUpdates, but\nthe --show-forced-updates option guarantees this check occurs.\nSee git-config[1]."
      },
      {
        "type": "long",
        "key": "no-show-forced-updates",
        "title": "--no-show-forced-updates",
        "description": "By default, git checks if a branch is force-updated during\nfetch. Pass --no-show-forced-updates or set fetch.showForcedUpdates\nto false to skip this check for performance reasons. If used during\ngit-pull the --ff-only option will still check for forced updates\nbefore attempting a fast-forward update. See git-config[1]."
      },
      {
        "type": "short",
        "key": "4",
        "title": "-4, --ipv4",
        "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
      },
      {
        "type": "long",
        "key": "ipv4",
        "title": "-4, --ipv4",
        "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
      },
      {
        "type": "short",
        "key": "6",
        "title": "-6, --ipv6",
        "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
      },
      {
        "type": "long",
        "key": "ipv6",
        "title": "-6, --ipv6",
        "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
      }
    ]
  },
  {
    "name": "git push",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Push all branches (i.e. refs under refs/heads/); cannot be\nused with other <refspec>."
      },
      {
        "type": "long",
        "key": "prune",
        "title": "--prune",
        "description": "Remove remote branches that don’t have a local counterpart. For example\na remote branch tmp will be removed if a local branch with the same\nname doesn’t exist any more. This also respects refspecs, e.g.\ngit push --prune remote refs/heads/*:refs/tmp/* would\nmake sure that remote refs/tmp/foo will be removed if refs/heads/foo\ndoesn’t exist."
      },
      {
        "type": "long",
        "key": "mirror",
        "title": "--mirror",
        "description": "Instead of naming each ref to push, specifies that all\nrefs under refs/ (which includes but is not\nlimited to refs/heads/, refs/remotes/, and refs/tags/)\nbe mirrored to the remote repository.  Newly created local\nrefs will be pushed to the remote end, locally updated refs\nwill be force updated on the remote end, and deleted refs\nwill be removed from the remote end.  This is the default\nif the configuration option remote.<remote>.mirror is\nset."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Do everything except actually send the updates."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Do everything except actually send the updates."
      },
      {
        "type": "long",
        "key": "porcelain",
        "title": "--porcelain",
        "description": "Produce machine-readable output.  The output status line for each ref\nwill be tab-separated and sent to stdout instead of stderr.  The full\nsymbolic names of the refs will be given."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --delete",
        "description": "All listed refs are deleted from the remote repository. This is\nthe same as prefixing all refs with a colon."
      },
      {
        "type": "long",
        "key": "delete",
        "title": "-d, --delete",
        "description": "All listed refs are deleted from the remote repository. This is\nthe same as prefixing all refs with a colon."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--tags",
        "description": "All refs under refs/tags are pushed, in\naddition to refspecs explicitly listed on the command\nline."
      },
      {
        "type": "long",
        "key": "follow-tags",
        "title": "--follow-tags",
        "description": "Push all the refs that would be pushed without this option,\nand also push annotated tags in refs/tags that are missing\nfrom the remote but are pointing at commit-ish that are\nreachable from the refs being pushed.  This can also be specified\nwith configuration variable push.followTags.  For more\ninformation, see push.followTags in git-config[1]."
      },
      {
        "type": "long",
        "key": "signed",
        "title": "--[no-]signed, --signed=(true|false|if-asked)",
        "description": "GPG-sign the push request to update refs on the receiving\nside, to allow it to be checked by the hooks and/or be\nlogged.  If false or --no-signed, no signing will be\nattempted.  If true or --signed, the push will fail if the\nserver does not support signed pushes.  If set to if-asked,\nsign if and only if the server supports signed pushes.  The push\nwill also fail if the actual call to gpg --sign fails.  See\ngit-receive-pack[1] for the details on the receiving end."
      },
      {
        "type": "long",
        "key": "atomic",
        "title": "--[no-]atomic",
        "description": "Use an atomic transaction on the remote side if available.\nEither all refs are updated, or on error, no refs are updated.\nIf the server does not support atomic pushes the push will fail."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <option>, --push-option=<option>",
        "description": "Transmit the given string to the server, which passes them to\nthe pre-receive as well as the post-receive hook. The given string\nmust not contain a NUL or LF character.\nWhen multiple --push-option=<option> are given, they are\nall sent to the other side in the order listed on the\ncommand line.\nWhen no --push-option=<option> is given from the command\nline, the values of configuration variable push.pushOption\nare used instead."
      },
      {
        "type": "long",
        "key": "push-option",
        "title": "-o <option>, --push-option=<option>",
        "description": "Transmit the given string to the server, which passes them to\nthe pre-receive as well as the post-receive hook. The given string\nmust not contain a NUL or LF character.\nWhen multiple --push-option=<option> are given, they are\nall sent to the other side in the order listed on the\ncommand line.\nWhen no --push-option=<option> is given from the command\nline, the values of configuration variable push.pushOption\nare used instead."
      },
      {
        "type": "long",
        "key": "receive-pack",
        "title": "--receive-pack=<git-receive-pack>, --exec=<git-receive-pack>",
        "description": "Path to the git-receive-pack program on the remote\nend.  Sometimes useful when pushing to a remote\nrepository over ssh, and you do not have the program in\na directory on the default $PATH."
      },
      {
        "type": "long",
        "key": "exec",
        "title": "--receive-pack=<git-receive-pack>, --exec=<git-receive-pack>",
        "description": "Path to the git-receive-pack program on the remote\nend.  Sometimes useful when pushing to a remote\nrepository over ssh, and you do not have the program in\na directory on the default $PATH."
      },
      {
        "type": "long",
        "key": "force-with-lease",
        "title": "--[no-]force-with-lease, --force-with-lease=<refname>, --force-with-lease=<refname>:<expect>",
        "description": "Usually, \"git push\" refuses to update a remote ref that is\nnot an ancestor of the local ref used to overwrite it.\n\nThis option overrides this restriction if the current value of the\nremote ref is the expected value.  \"git push\" fails otherwise.\n\n\nImagine that you have to rebase what you have already published.\nYou will have to bypass the \"must fast-forward\" rule in order to\nreplace the history you originally published with the rebased history.\nIf somebody else built on top of your original history while you are\nrebasing, the tip of the branch at the remote may advance with their\ncommit, and blindly pushing with --force will lose their work.\n\n\nThis option allows you to say that you expect the history you are\nupdating is what you rebased and want to replace. If the remote ref\nstill points at the commit you specified, you can be sure that no\nother people did anything to the ref. It is like taking a \"lease\" on\nthe ref without explicitly locking it, and the remote ref is updated\nonly if the \"lease\" is still valid.\n\n\n--force-with-lease alone, without specifying the details, will protect\nall remote refs that are going to be updated by requiring their\ncurrent value to be the same as the remote-tracking branch we have\nfor them.\n\n\n--force-with-lease=<refname>, without specifying the expected value, will\nprotect the named ref (alone), if it is going to be updated, by\nrequiring its current value to be the same as the remote-tracking\nbranch we have for it.\n\n\n--force-with-lease=<refname>:<expect> will protect the named ref (alone),\nif it is going to be updated, by requiring its current value to be\nthe same as the specified value <expect> (which is allowed to be\ndifferent from the remote-tracking branch we have for the refname,\nor we do not even have to have such a remote-tracking branch when\nthis form is used).  If <expect> is the empty string, then the named ref\nmust not already exist.\n\n\nNote that all forms other than --force-with-lease=<refname>:<expect>\nthat specifies the expected current value of the ref explicitly are\nstill experimental and their semantics may change as we gain experience\nwith this feature.\n\n\n\"--no-force-with-lease\" will cancel all the previous --force-with-lease on the\ncommand line.\n\n\nA general note on safety: supplying this option without an expected\nvalue, i.e. as --force-with-lease or --force-with-lease=<refname>\ninteracts very badly with anything that implicitly runs git fetch on\nthe remote to be pushed to in the background, e.g. git fetch origin\non your repository in a cronjob.\n\n\nThe protection it offers over --force is ensuring that subsequent\nchanges your work wasn’t based on aren’t clobbered, but this is\ntrivially defeated if some background process is updating refs in the\nbackground. We don’t have anything except the remote tracking info to\ngo by as a heuristic for refs you’re expected to have seen & are\nwilling to clobber.\n\n\nIf your editor or some other system is running git fetch in the\nbackground for you a way to mitigate this is to simply set up another\nremote:\n\n\n\ngit remote add origin-push $(git config remote.origin.url)\ngit fetch origin-push\n\n\n\nNow when the background process runs git fetch origin the references\non origin-push won’t be updated, and thus commands like:\n\n\n\ngit push --force-with-lease origin-push\n\n\n\nWill fail unless you manually run git fetch origin-push. This method\nis of course entirely defeated by something that runs git fetch\n--all, in that case you’d need to either disable it or do something\nmore tedious like:\n\n\n\ngit fetch              # update 'master' from remote\ngit tag base master    # mark our base point\ngit rebase -i master   # rewrite some commits\ngit push --force-with-lease=master:base master:master\n\n\n\nI.e. create a base tag for versions of the upstream code that you’ve\nseen and are willing to overwrite, then rewrite history, and finally\nforce push changes to master if the remote version is still at\nbase, regardless of what your local remotes/origin/master has been\nupdated to in the background.\n\n\nAlternatively, specifying --force-if-includes as an ancillary option\nalong with --force-with-lease[=<refname>] (i.e., without saying what\nexact commit the ref on the remote side must be pointing at, or which\nrefs on the remote side are being protected) at the time of \"push\" will\nverify if updates from the remote-tracking refs that may have been\nimplicitly updated in the background are integrated locally before\nallowing a forced update."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Usually, the command refuses to update a remote ref that is\nnot an ancestor of the local ref used to overwrite it.\nAlso, when --force-with-lease option is used, the command refuses\nto update a remote ref whose current value does not match\nwhat is expected.\n\nThis flag disables these checks, and can cause the remote repository\nto lose commits; use it with care.\n\n\nNote that --force applies to all the refs that are pushed, hence\nusing it with push.default set to matching or with multiple push\ndestinations configured with remote.*.push may overwrite refs\nother than the current branch (including local refs that are\nstrictly behind their remote counterpart).  To force a push to only\none branch, use a + in front of the refspec to push (e.g git push\norigin +master to force a push to the master branch). See the\n<refspec>... section above for details."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Usually, the command refuses to update a remote ref that is\nnot an ancestor of the local ref used to overwrite it.\nAlso, when --force-with-lease option is used, the command refuses\nto update a remote ref whose current value does not match\nwhat is expected.\n\nThis flag disables these checks, and can cause the remote repository\nto lose commits; use it with care.\n\n\nNote that --force applies to all the refs that are pushed, hence\nusing it with push.default set to matching or with multiple push\ndestinations configured with remote.*.push may overwrite refs\nother than the current branch (including local refs that are\nstrictly behind their remote counterpart).  To force a push to only\none branch, use a + in front of the refspec to push (e.g git push\norigin +master to force a push to the master branch). See the\n<refspec>... section above for details."
      },
      {
        "type": "long",
        "key": "force-if-includes",
        "title": "--[no-]force-if-includes",
        "description": "Force an update only if the tip of the remote-tracking ref\nhas been integrated locally.\n\nThis option enables a check that verifies if the tip of the\nremote-tracking ref is reachable from one of the \"reflog\" entries of\nthe local branch based in it for a rewrite. The check ensures that any\nupdates from the remote have been incorporated locally by rejecting the\nforced update if that is not the case.\n\n\nIf the option is passed without specifying --force-with-lease, or\nspecified along with --force-with-lease=<refname>:<expect>, it is\na \"no-op\".\n\n\nSpecifying --no-force-if-includes disables this behavior."
      },
      {
        "type": "long",
        "key": "repo",
        "title": "--repo=<repository>",
        "description": "This option is equivalent to the <repository> argument. If both\nare specified, the command-line argument takes precedence."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u, --set-upstream",
        "description": "For every branch that is up to date or successfully pushed, add\nupstream (tracking) reference, used by argument-less\ngit-pull[1] and other commands. For more information,\nsee branch.<name>.merge in git-config[1]."
      },
      {
        "type": "long",
        "key": "set-upstream",
        "title": "-u, --set-upstream",
        "description": "For every branch that is up to date or successfully pushed, add\nupstream (tracking) reference, used by argument-less\ngit-pull[1] and other commands. For more information,\nsee branch.<name>.merge in git-config[1]."
      },
      {
        "type": "long",
        "key": "thin",
        "title": "--[no-]thin",
        "description": "These options are passed to git-send-pack[1]. A thin transfer\nsignificantly reduces the amount of sent data when the sender and\nreceiver share many of the same objects in common. The default is\n--thin."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Suppress all output, including the listing of updated refs,\nunless an error occurs. Progress is not reported to the standard\nerror stream."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Suppress all output, including the listing of updated refs,\nunless an error occurs. Progress is not reported to the standard\nerror stream."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Run verbosely."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Run verbosely."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal."
      },
      {
        "type": "long",
        "key": "no-recurse-submodules",
        "title": "--no-recurse-submodules, --recurse-submodules=check|on-demand|only|no",
        "description": "May be used to make sure all submodule commits used by the\nrevisions to be pushed are available on a remote-tracking branch.\nIf check is used Git will verify that all submodule commits that\nchanged in the revisions to be pushed are available on at least one\nremote of the submodule. If any commits are missing the push will\nbe aborted and exit with non-zero status. If on-demand is used\nall submodules that changed in the revisions to be pushed will be\npushed. If on-demand was not able to push all necessary revisions it will\nalso be aborted and exit with non-zero status. If only is used all\nsubmodules will be recursively pushed while the superproject is left\nunpushed. A value of no or using --no-recurse-submodules can be used\nto override the push.recurseSubmodules configuration variable when no\nsubmodule recursion is required."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--no-recurse-submodules, --recurse-submodules=check|on-demand|only|no",
        "description": "May be used to make sure all submodule commits used by the\nrevisions to be pushed are available on a remote-tracking branch.\nIf check is used Git will verify that all submodule commits that\nchanged in the revisions to be pushed are available on at least one\nremote of the submodule. If any commits are missing the push will\nbe aborted and exit with non-zero status. If on-demand is used\nall submodules that changed in the revisions to be pushed will be\npushed. If on-demand was not able to push all necessary revisions it will\nalso be aborted and exit with non-zero status. If only is used all\nsubmodules will be recursively pushed while the superproject is left\nunpushed. A value of no or using --no-recurse-submodules can be used\nto override the push.recurseSubmodules configuration variable when no\nsubmodule recursion is required."
      },
      {
        "type": "long",
        "key": "verify",
        "title": "--[no-]verify",
        "description": "Toggle the pre-push hook (see githooks[5]).  The\ndefault is --verify, giving the hook a chance to prevent the\npush.  With --no-verify, the hook is bypassed completely."
      },
      {
        "type": "short",
        "key": "4",
        "title": "-4, --ipv4",
        "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
      },
      {
        "type": "long",
        "key": "ipv4",
        "title": "-4, --ipv4",
        "description": "Use IPv4 addresses only, ignoring IPv6 addresses."
      },
      {
        "type": "short",
        "key": "6",
        "title": "-6, --ipv6",
        "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
      },
      {
        "type": "long",
        "key": "ipv6",
        "title": "-6, --ipv6",
        "description": "Use IPv6 addresses only, ignoring IPv4 addresses."
      }
    ]
  },
  {
    "name": "git range-diff",
    "options": [
      {
        "type": "long",
        "key": "no-dual-color",
        "title": "--no-dual-color",
        "description": "When the commit diffs differ, git range-diff recreates the\noriginal diffs' coloring, and adds outer -/+ diff markers with\nthe background being red/green to make it easier to see e.g.\nwhen there was a change in what exact lines were added.\n\nAdditionally, the commit diff lines that are only present in the first commit\nrange are shown \"dimmed\" (this can be overridden using the color.diff.<slot>\nconfig setting where <slot> is one of contextDimmed, oldDimmed and\nnewDimmed), and the commit diff lines that are only present in the second\ncommit range are shown in bold (which can be overridden using the config\nsettings color.diff.<slot> with <slot> being one of contextBold,\noldBold or newBold).\n\n\nThis is known to range-diff as \"dual coloring\". Use --no-dual-color\nto revert to color all lines according to the outer diff markers\n(and completely ignore the inner diff when it comes to color)."
      },
      {
        "type": "long",
        "key": "creation-factor",
        "title": "--creation-factor=<percent>",
        "description": "Set the creation/deletion cost fudge factor to <percent>.\nDefaults to 60. Try a larger value if git range-diff erroneously\nconsiders a large change a total rewrite (deletion of one commit\nand addition of another), and a smaller one in the reverse case.\nSee the ``Algorithm`` section below for an explanation why this is\nneeded."
      },
      {
        "type": "long",
        "key": "left-only",
        "title": "--left-only",
        "description": "Suppress commits that are missing from the first specified range\n(or the \"left range\" when using the <rev1>...<rev2> format)."
      },
      {
        "type": "long",
        "key": "right-only",
        "title": "--right-only",
        "description": "Suppress commits that are missing from the second specified range\n(or the \"right range\" when using the <rev1>...<rev2> format)."
      }
    ]
  },
  {
    "name": "git rebase",
    "options": [
      {
        "type": "long",
        "key": "keep-base",
        "title": "--keep-base",
        "description": "Set the starting point at which to create the new commits to the\nmerge base of <upstream> <branch>. Running\ngit rebase --keep-base <upstream> <branch> is equivalent to\nrunning git rebase --onto <upstream>…​ <upstream>.\n\nThis option is useful in the case where one is developing a feature on\ntop of an upstream branch. While the feature is being worked on, the\nupstream branch may advance and it may not be the best idea to keep\nrebasing on top of the upstream but to keep the base commit as-is.\n\n\nAlthough both this option and --fork-point find the merge base between\n<upstream> and <branch>, this option uses the merge base as the starting\npoint on which new commits will be created, whereas --fork-point uses\nthe merge base to determine the set of commits which will be rebased.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "continue",
        "title": "--continue",
        "description": "Restart the rebasing process after having resolved a merge conflict."
      },
      {
        "type": "long",
        "key": "abort",
        "title": "--abort",
        "description": "Abort the rebase operation and reset HEAD to the original\nbranch. If <branch> was provided when the rebase operation was\nstarted, then HEAD will be reset to <branch>. Otherwise HEAD\nwill be reset to where it was when the rebase operation was\nstarted."
      },
      {
        "type": "long",
        "key": "quit",
        "title": "--quit",
        "description": "Abort the rebase operation but HEAD is not reset back to the\noriginal branch. The index and working tree are also left\nunchanged as a result. If a temporary stash entry was created\nusing --autostash, it will be saved to the stash list."
      },
      {
        "type": "long",
        "key": "apply",
        "title": "--apply",
        "description": "Use applying strategies to rebase (calling git-am\ninternally).  This option may become a no-op in the future\nonce the merge backend handles everything the apply one does.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "empty",
        "title": "--empty={drop, keep, ask}",
        "description": "How to handle commits that are not empty to start and are not\nclean cherry-picks of any upstream commit, but which become\nempty after rebasing (because they contain a subset of already\nupstream changes).  With drop (the default), commits that\nbecome empty are dropped.  With keep, such commits are kept.\nWith ask (implied by --interactive), the rebase will halt when\nan empty commit is applied allowing you to choose whether to\ndrop it, edit files more, or just commit the empty changes.\nOther options, like --exec, will use the default of drop unless\n-i/--interactive is explicitly specified.\n\nNote that commits which start empty are kept (unless --no-keep-empty\nis specified), and commits which are clean cherry-picks (as determined\nby git log --cherry-mark ...) are detected and dropped as a\npreliminary step (unless --reapply-cherry-picks is passed).\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "no-keep-empty",
        "title": "--no-keep-empty, --keep-empty",
        "description": "Do not keep commits that start empty before the rebase\n(i.e. that do not change anything from its parent) in the\nresult.  The default is to keep commits which start empty,\nsince creating such commits requires passing the --allow-empty\noverride flag to git commit, signifying that a user is very\nintentionally creating such a commit and thus wants to keep\nit.\n\nUsage of this flag will probably be rare, since you can get rid of\ncommits that start empty by just firing up an interactive rebase and\nremoving the lines corresponding to the commits you don’t want.  This\nflag exists as a convenient shortcut, such as for cases where external\ntools generate many empty commits and you want them all removed.\n\n\nFor commits which do not start empty but become empty after rebasing,\nsee the --empty flag.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "keep-empty",
        "title": "--no-keep-empty, --keep-empty",
        "description": "Do not keep commits that start empty before the rebase\n(i.e. that do not change anything from its parent) in the\nresult.  The default is to keep commits which start empty,\nsince creating such commits requires passing the --allow-empty\noverride flag to git commit, signifying that a user is very\nintentionally creating such a commit and thus wants to keep\nit.\n\nUsage of this flag will probably be rare, since you can get rid of\ncommits that start empty by just firing up an interactive rebase and\nremoving the lines corresponding to the commits you don’t want.  This\nflag exists as a convenient shortcut, such as for cases where external\ntools generate many empty commits and you want them all removed.\n\n\nFor commits which do not start empty but become empty after rebasing,\nsee the --empty flag.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "reapply-cherry-picks",
        "title": "--reapply-cherry-picks, --no-reapply-cherry-picks",
        "description": "Reapply all clean cherry-picks of any upstream commit instead\nof preemptively dropping them. (If these commits then become\nempty after rebasing, because they contain a subset of already\nupstream changes, the behavior towards them is controlled by\nthe --empty flag.)\n\nBy default (or if --no-reapply-cherry-picks is given), these commits\nwill be automatically dropped.  Because this necessitates reading all\nupstream commits, this can be expensive in repos with a large number\nof upstream commits that need to be read.\n\n\n--reapply-cherry-picks allows rebase to forgo reading all upstream\ncommits, potentially improving performance.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "no-reapply-cherry-picks",
        "title": "--reapply-cherry-picks, --no-reapply-cherry-picks",
        "description": "Reapply all clean cherry-picks of any upstream commit instead\nof preemptively dropping them. (If these commits then become\nempty after rebasing, because they contain a subset of already\nupstream changes, the behavior towards them is controlled by\nthe --empty flag.)\n\nBy default (or if --no-reapply-cherry-picks is given), these commits\nwill be automatically dropped.  Because this necessitates reading all\nupstream commits, this can be expensive in repos with a large number\nof upstream commits that need to be read.\n\n\n--reapply-cherry-picks allows rebase to forgo reading all upstream\ncommits, potentially improving performance.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "allow-empty-message",
        "title": "--allow-empty-message",
        "description": "No-op.  Rebasing commits with an empty message used to fail\nand this option would override that behavior, allowing commits\nwith empty messages to be rebased.  Now commits with an empty\nmessage do not cause rebasing to halt.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "skip",
        "title": "--skip",
        "description": "Restart the rebasing process by skipping the current patch."
      },
      {
        "type": "long",
        "key": "edit-todo",
        "title": "--edit-todo",
        "description": "Edit the todo list during an interactive rebase."
      },
      {
        "type": "long",
        "key": "show-current-patch",
        "title": "--show-current-patch",
        "description": "Show the current patch in an interactive rebase or when rebase\nis stopped because of conflicts. This is the equivalent of\ngit show REBASE_HEAD."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --merge",
        "description": "Use merging strategies to rebase.  When the recursive (default) merge\nstrategy is used, this allows rebase to be aware of renames on the\nupstream side.  This is the default.\n\nNote that a rebase merge works by replaying each commit from the working\nbranch on top of the <upstream> branch.  Because of this, when a merge\nconflict happens, the side reported as ours is the so-far rebased\nseries, starting with <upstream>, and theirs is the working branch.  In\nother words, the sides are swapped.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "-m, --merge",
        "description": "Use merging strategies to rebase.  When the recursive (default) merge\nstrategy is used, this allows rebase to be aware of renames on the\nupstream side.  This is the default.\n\nNote that a rebase merge works by replaying each commit from the working\nbranch on top of the <upstream> branch.  Because of this, when a merge\nconflict happens, the side reported as ours is the so-far rebased\nseries, starting with <upstream>, and theirs is the working branch.  In\nother words, the sides are swapped.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "Use the given merge strategy.\nIf there is no -s option git merge-recursive is used\ninstead.  This implies --merge.\n\nBecause git rebase replays each commit from the working branch\non top of the <upstream> branch using the given strategy, using\nthe ours strategy simply empties all patches from the <branch>,\nwhich makes little sense.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "-s <strategy>, --strategy=<strategy>",
        "description": "Use the given merge strategy.\nIf there is no -s option git merge-recursive is used\ninstead.  This implies --merge.\n\nBecause git rebase replays each commit from the working branch\non top of the <upstream> branch using the given strategy, using\nthe ours strategy simply empties all patches from the <branch>,\nwhich makes little sense.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X <strategy-option>, --strategy-option=<strategy-option>",
        "description": "Pass the <strategy-option> through to the merge strategy.\nThis implies --merge and, if no strategy has been\nspecified, -s recursive.  Note the reversal of ours and\ntheirs as noted above for the -m option.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "strategy-option",
        "title": "-X <strategy-option>, --strategy-option=<strategy-option>",
        "description": "Pass the <strategy-option> through to the merge strategy.\nThis implies --merge and, if no strategy has been\nspecified, -s recursive.  Note the reversal of ours and\ntheirs as noted above for the -m option.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the\nresult of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "no-rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the\nresult of auto-conflict resolution if possible."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Be quiet. Implies --no-stat."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Be quiet. Implies --no-stat."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Be verbose. Implies --stat."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Be verbose. Implies --stat."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat",
        "description": "Show a diffstat of what changed upstream since the last rebase. The\ndiffstat is also controlled by the configuration option rebase.stat."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-stat",
        "description": "Do not show a diffstat as part of the rebase process."
      },
      {
        "type": "long",
        "key": "no-stat",
        "title": "-n, --no-stat",
        "description": "Do not show a diffstat as part of the rebase process."
      },
      {
        "type": "long",
        "key": "no-verify",
        "title": "--no-verify",
        "description": "This option bypasses the pre-rebase hook.  See also githooks[5]."
      },
      {
        "type": "long",
        "key": "verify",
        "title": "--verify",
        "description": "Allows the pre-rebase hook to run, which is the default.  This option can\nbe used to override --no-verify.  See also githooks[5]."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C<n>",
        "description": "Ensure at least <n> lines of surrounding context match before\nand after each change.  When fewer lines of surrounding\ncontext exist they all must match.  By default no context is\never ignored.  Implies --apply.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "no-ff",
        "title": "--no-ff, --force-rebase, -f",
        "description": "Individually replay all rebased commits instead of fast-forwarding\nover the unchanged ones.  This ensures that the entire history of\nthe rebased branch is composed of new commits.\n\nYou may find this helpful after reverting a topic branch merge, as this option\nrecreates the topic branch with fresh commits so it can be remerged\nsuccessfully without needing to \"revert the reversion\" (see the\nrevert-a-faulty-merge How-To for\ndetails)."
      },
      {
        "type": "long",
        "key": "force-rebase",
        "title": "--no-ff, --force-rebase, -f",
        "description": "Individually replay all rebased commits instead of fast-forwarding\nover the unchanged ones.  This ensures that the entire history of\nthe rebased branch is composed of new commits.\n\nYou may find this helpful after reverting a topic branch merge, as this option\nrecreates the topic branch with fresh commits so it can be remerged\nsuccessfully without needing to \"revert the reversion\" (see the\nrevert-a-faulty-merge How-To for\ndetails)."
      },
      {
        "type": "short",
        "key": "f",
        "title": "--no-ff, --force-rebase, -f",
        "description": "Individually replay all rebased commits instead of fast-forwarding\nover the unchanged ones.  This ensures that the entire history of\nthe rebased branch is composed of new commits.\n\nYou may find this helpful after reverting a topic branch merge, as this option\nrecreates the topic branch with fresh commits so it can be remerged\nsuccessfully without needing to \"revert the reversion\" (see the\nrevert-a-faulty-merge How-To for\ndetails)."
      },
      {
        "type": "long",
        "key": "fork-point",
        "title": "--fork-point, --no-fork-point",
        "description": "Use reflog to find a better common ancestor between <upstream>\nand <branch> when calculating which commits have been\nintroduced by <branch>.\n\nWhen --fork-point is active, fork_point will be used instead of\n<upstream> to calculate the set of commits to rebase, where\nfork_point is the result of git merge-base --fork-point <upstream>\n<branch> command (see git-merge-base[1]).  If fork_point\nends up being empty, the <upstream> will be used as a fallback.\n\n\nIf <upstream> is given on the command line, then the default is\n--no-fork-point, otherwise the default is --fork-point.\n\n\nIf your branch was based on <upstream> but <upstream> was rewound and\nyour branch contains commits which were dropped, this option can be used\nwith --keep-base in order to drop those commits from your branch.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "no-fork-point",
        "title": "--fork-point, --no-fork-point",
        "description": "Use reflog to find a better common ancestor between <upstream>\nand <branch> when calculating which commits have been\nintroduced by <branch>.\n\nWhen --fork-point is active, fork_point will be used instead of\n<upstream> to calculate the set of commits to rebase, where\nfork_point is the result of git merge-base --fork-point <upstream>\n<branch> command (see git-merge-base[1]).  If fork_point\nends up being empty, the <upstream> will be used as a fallback.\n\n\nIf <upstream> is given on the command line, then the default is\n--no-fork-point, otherwise the default is --fork-point.\n\n\nIf your branch was based on <upstream> but <upstream> was rewound and\nyour branch contains commits which were dropped, this option can be used\nwith --keep-base in order to drop those commits from your branch.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "ignore-whitespace",
        "title": "--ignore-whitespace",
        "description": "Ignore whitespace differences when trying to reconcile\ndifferences. Currently, each backend implements an approximation of\nthis behavior:\n\napply backend: When applying a patch, ignore changes in whitespace in\ncontext lines. Unfortunately, this means that if the \"old\" lines being\nreplaced by the patch differ only in whitespace from the existing\nfile, you will get a merge conflict instead of a successful patch\napplication.\n\n\nmerge backend: Treat lines with only whitespace changes as unchanged\nwhen merging. Unfortunately, this means that any patch hunks that were\nintended to modify whitespace and nothing else will be dropped, even\nif the other side had no changes that conflicted."
      },
      {
        "type": "long",
        "key": "whitespace",
        "title": "--whitespace=<option>",
        "description": "This flag is passed to the git apply program\n(see git-apply[1]) that applies the patch.\nImplies --apply.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "committer-date-is-author-date",
        "title": "--committer-date-is-author-date",
        "description": "Instead of using the current time as the committer date, use\nthe author date of the commit being rebased as the committer\ndate. This option implies --force-rebase."
      },
      {
        "type": "long",
        "key": "ignore-date",
        "title": "--ignore-date, --reset-author-date",
        "description": "Instead of using the author date of the original commit, use\nthe current time as the\tauthor date of the rebased commit.  This\noption implies --force-rebase.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "reset-author-date",
        "title": "--ignore-date, --reset-author-date",
        "description": "Instead of using the author date of the original commit, use\nthe current time as the\tauthor date of the rebased commit.  This\noption implies --force-rebase.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "--signoff",
        "description": "Add a Signed-off-by trailer to all the rebased commits. Note\nthat if --interactive is given then only commits marked to be\npicked, edited or reworded will have the trailer added.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --interactive",
        "description": "Make a list of the commits which are about to be rebased.  Let the\nuser edit that list before rebasing.  This mode can also be used to\nsplit commits (see SPLITTING COMMITS below).\n\nThe commit list format can be changed by setting the configuration option\nrebase.instructionFormat.  A customized instruction format will automatically\nhave the long commit hash prepended to the format.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "interactive",
        "title": "-i, --interactive",
        "description": "Make a list of the commits which are about to be rebased.  Let the\nuser edit that list before rebasing.  This mode can also be used to\nsplit commits (see SPLITTING COMMITS below).\n\nThe commit list format can be changed by setting the configuration option\nrebase.instructionFormat.  A customized instruction format will automatically\nhave the long commit hash prepended to the format.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r, --rebase-merges[=(rebase-cousins|no-rebase-cousins)]",
        "description": "By default, a rebase will simply drop merge commits from the todo\nlist, and put the rebased commits into a single, linear branch.\nWith --rebase-merges, the rebase will instead try to preserve\nthe branching structure within the commits that are to be rebased,\nby recreating the merge commits. Any resolved merge conflicts or\nmanual amendments in these merge commits will have to be\nresolved/re-applied manually.\n\nBy default, or when no-rebase-cousins was specified, commits which do not\nhave <upstream> as direct ancestor will keep their original branch point,\ni.e. commits that would be excluded by git-log[1]'s\n--ancestry-path option will keep their original ancestry by default. If\nthe rebase-cousins mode is turned on, such commits are instead rebased\nonto <upstream> (or <onto>, if specified).\n\n\nThe --rebase-merges mode is similar in spirit to the deprecated\n--preserve-merges but works with interactive rebases,\nwhere commits can be reordered, inserted and dropped at will.\n\n\nIt is currently only possible to recreate the merge commits using the\nrecursive merge strategy; Different merge strategies can be used only via\nexplicit exec git merge -s <strategy> [...] commands.\n\n\nSee also REBASING MERGES and INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "rebase-merges",
        "title": "-r, --rebase-merges[=(rebase-cousins|no-rebase-cousins)]",
        "description": "By default, a rebase will simply drop merge commits from the todo\nlist, and put the rebased commits into a single, linear branch.\nWith --rebase-merges, the rebase will instead try to preserve\nthe branching structure within the commits that are to be rebased,\nby recreating the merge commits. Any resolved merge conflicts or\nmanual amendments in these merge commits will have to be\nresolved/re-applied manually.\n\nBy default, or when no-rebase-cousins was specified, commits which do not\nhave <upstream> as direct ancestor will keep their original branch point,\ni.e. commits that would be excluded by git-log[1]'s\n--ancestry-path option will keep their original ancestry by default. If\nthe rebase-cousins mode is turned on, such commits are instead rebased\nonto <upstream> (or <onto>, if specified).\n\n\nThe --rebase-merges mode is similar in spirit to the deprecated\n--preserve-merges but works with interactive rebases,\nwhere commits can be reordered, inserted and dropped at will.\n\n\nIt is currently only possible to recreate the merge commits using the\nrecursive merge strategy; Different merge strategies can be used only via\nexplicit exec git merge -s <strategy> [...] commands.\n\n\nSee also REBASING MERGES and INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --preserve-merges",
        "description": "[DEPRECATED: use --rebase-merges instead] Recreate merge commits\ninstead of flattening the history by replaying commits a merge commit\nintroduces. Merge conflict resolutions or manual amendments to merge\ncommits are not preserved.\n\nThis uses the --interactive machinery internally, but combining it\nwith the --interactive option explicitly is generally not a good\nidea unless you know what you are doing (see BUGS below).\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "preserve-merges",
        "title": "-p, --preserve-merges",
        "description": "[DEPRECATED: use --rebase-merges instead] Recreate merge commits\ninstead of flattening the history by replaying commits a merge commit\nintroduces. Merge conflict resolutions or manual amendments to merge\ncommits are not preserved.\n\nThis uses the --interactive machinery internally, but combining it\nwith the --interactive option explicitly is generally not a good\nidea unless you know what you are doing (see BUGS below).\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "short",
        "key": "x",
        "title": "-x <cmd>, --exec <cmd>",
        "description": "Append \"exec <cmd>\" after each line creating a commit in the\nfinal history. <cmd> will be interpreted as one or more shell\ncommands. Any command that fails will interrupt the rebase,\nwith exit code 1.\n\nYou may execute several commands by either using one instance of --exec\nwith several commands:\n\n\n\ngit rebase -i --exec \"cmd1 && cmd2 && ...\"\n\n\n\nor by giving more than one --exec:\n\n\n\ngit rebase -i --exec \"cmd1\" --exec \"cmd2\" --exec ...\n\n\n\nIf --autosquash is used, \"exec\" lines will not be appended for\nthe intermediate commits, and will only appear at the end of each\nsquash/fixup series.\n\n\nThis uses the --interactive machinery internally, but it can be run\nwithout an explicit --interactive.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root",
        "description": "Rebase all commits reachable from <branch>, instead of\nlimiting them with an <upstream>.  This allows you to rebase\nthe root commit(s) on a branch.  When used with --onto, it\nwill skip changes already contained in <newbase> (instead of\n<upstream>) whereas without --onto it will operate on every change.\nWhen used together with both --onto and --preserve-merges,\nall root commits will be rewritten to have <newbase> as parent\ninstead.\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "autosquash",
        "title": "--autosquash, --no-autosquash",
        "description": "When the commit log message begins with \"squash! …​\" or \"fixup! …​\"\nor \"amend! …​\", and there is already a commit in the todo list that\nmatches the same ..., automatically modify the todo list of\nrebase -i, so that the commit marked for squashing comes right after\nthe commit to be modified, and change the action of the moved commit\nfrom pick to squash or fixup or fixup -C respectively. A commit\nmatches the ... if the commit subject matches, or if the ... refers\nto the commit’s hash. As a fall-back, partial matches of the commit\nsubject work, too. The recommended way to create fixup/amend/squash\ncommits is by using the --fixup, --fixup=amend: or --fixup=reword:\nand --squash options respectively of git-commit[1].\n\nIf the --autosquash option is enabled by default using the\nconfiguration variable rebase.autoSquash, this option can be\nused to override and disable this setting.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "no-autosquash",
        "title": "--autosquash, --no-autosquash",
        "description": "When the commit log message begins with \"squash! …​\" or \"fixup! …​\"\nor \"amend! …​\", and there is already a commit in the todo list that\nmatches the same ..., automatically modify the todo list of\nrebase -i, so that the commit marked for squashing comes right after\nthe commit to be modified, and change the action of the moved commit\nfrom pick to squash or fixup or fixup -C respectively. A commit\nmatches the ... if the commit subject matches, or if the ... refers\nto the commit’s hash. As a fall-back, partial matches of the commit\nsubject work, too. The recommended way to create fixup/amend/squash\ncommits is by using the --fixup, --fixup=amend: or --fixup=reword:\nand --squash options respectively of git-commit[1].\n\nIf the --autosquash option is enabled by default using the\nconfiguration variable rebase.autoSquash, this option can be\nused to override and disable this setting.\n\n\nSee also INCOMPATIBLE OPTIONS below."
      },
      {
        "type": "long",
        "key": "autostash",
        "title": "--autostash, --no-autostash",
        "description": "Automatically create a temporary stash entry before the operation\nbegins, and apply it after the operation ends.  This means\nthat you can run rebase on a dirty worktree.  However, use\nwith care: the final stash application after a successful\nrebase might result in non-trivial conflicts."
      },
      {
        "type": "long",
        "key": "no-autostash",
        "title": "--autostash, --no-autostash",
        "description": "Automatically create a temporary stash entry before the operation\nbegins, and apply it after the operation ends.  This means\nthat you can run rebase on a dirty worktree.  However, use\nwith care: the final stash application after a successful\nrebase might result in non-trivial conflicts."
      },
      {
        "type": "long",
        "key": "reschedule-failed-exec",
        "title": "--reschedule-failed-exec, --no-reschedule-failed-exec",
        "description": "Automatically reschedule exec commands that failed. This only makes\nsense in interactive mode (or when an --exec option was provided).\n\nEven though this option applies once a rebase is started, it’s set for\nthe whole rebase at the start based on either the\nrebase.rescheduleFailedExec configuration (see git-config[1]\nor \"CONFIGURATION\" below) or whether this option is\nprovided. Otherwise an explicit --no-reschedule-failed-exec at the\nstart would be overridden by the presence of\nrebase.rescheduleFailedExec=true configuration."
      },
      {
        "type": "long",
        "key": "no-reschedule-failed-exec",
        "title": "--reschedule-failed-exec, --no-reschedule-failed-exec",
        "description": "Automatically reschedule exec commands that failed. This only makes\nsense in interactive mode (or when an --exec option was provided).\n\nEven though this option applies once a rebase is started, it’s set for\nthe whole rebase at the start based on either the\nrebase.rescheduleFailedExec configuration (see git-config[1]\nor \"CONFIGURATION\" below) or whether this option is\nprovided. Otherwise an explicit --no-reschedule-failed-exec at the\nstart would be overridden by the presence of\nrebase.rescheduleFailedExec=true configuration."
      }
    ]
  },
  {
    "name": "git reset",
    "options": [
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet, --no-quiet",
        "description": "Be quiet, only report errors. The default behavior is set by the\nreset.quiet config option. --quiet and --no-quiet will\noverride the default behavior."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet, --no-quiet",
        "description": "Be quiet, only report errors. The default behavior is set by the\nreset.quiet config option. --quiet and --no-quiet will\noverride the default behavior."
      },
      {
        "type": "long",
        "key": "no-quiet",
        "title": "-q, --quiet, --no-quiet",
        "description": "Be quiet, only report errors. The default behavior is set by the\nreset.quiet config option. --quiet and --no-quiet will\noverride the default behavior."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "Pathspec is passed in <file> instead of commandline args. If\n<file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath\n(see git-config[1]). See also --pathspec-file-nul and\nglobal --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "Only meaningful with --pathspec-from-file. Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."
      }
    ]
  },
  {
    "name": "git restore",
    "options": [
      {
        "type": "short",
        "key": "s",
        "title": "-s <tree>, --source=<tree>",
        "description": "Restore the working tree files with the content from the given\ntree. It is common to specify the source tree by naming a\ncommit, branch or tag associated with it.\n\nIf not specified, the contents are restored from HEAD if --staged is\ngiven, otherwise from the index.\n\n\nAs a special case, you may use \"A...B\" as a shortcut for the\nmerge base of A and B if there is exactly one merge base. You can\nleave out at most one of A and B, in which case it defaults to HEAD."
      },
      {
        "type": "long",
        "key": "source",
        "title": "-s <tree>, --source=<tree>",
        "description": "Restore the working tree files with the content from the given\ntree. It is common to specify the source tree by naming a\ncommit, branch or tag associated with it.\n\nIf not specified, the contents are restored from HEAD if --staged is\ngiven, otherwise from the index.\n\n\nAs a special case, you may use \"A...B\" as a shortcut for the\nmerge base of A and B if there is exactly one merge base. You can\nleave out at most one of A and B, in which case it defaults to HEAD."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --patch",
        "description": "Interactively select hunks in the difference between the\nrestore source and the restore location. See the “Interactive\nMode” section of git-add[1] to learn how to operate\nthe --patch mode.\n\nNote that --patch can accept no pathspec and will prompt to restore\nall modified paths."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, --patch",
        "description": "Interactively select hunks in the difference between the\nrestore source and the restore location. See the “Interactive\nMode” section of git-add[1] to learn how to operate\nthe --patch mode.\n\nNote that --patch can accept no pathspec and will prompt to restore\nall modified paths."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --worktree, -S, --staged",
        "description": "Specify the restore location. If neither option is specified,\nby default the working tree is restored. Specifying --staged\nwill only restore the index. Specifying both restores both."
      },
      {
        "type": "long",
        "key": "worktree",
        "title": "-W, --worktree, -S, --staged",
        "description": "Specify the restore location. If neither option is specified,\nby default the working tree is restored. Specifying --staged\nwill only restore the index. Specifying both restores both."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-W, --worktree, -S, --staged",
        "description": "Specify the restore location. If neither option is specified,\nby default the working tree is restored. Specifying --staged\nwill only restore the index. Specifying both restores both."
      },
      {
        "type": "long",
        "key": "staged",
        "title": "-W, --worktree, -S, --staged",
        "description": "Specify the restore location. If neither option is specified,\nby default the working tree is restored. Specifying --staged\nwill only restore the index. Specifying both restores both."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages. Implies --no-progress."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages. Implies --no-progress."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress, --no-progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet\nis specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet."
      },
      {
        "type": "long",
        "key": "no-progress",
        "title": "--progress, --no-progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet\nis specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet."
      },
      {
        "type": "long",
        "key": "ours",
        "title": "--ours, --theirs",
        "description": "When restoring files in the working tree from the index, use\nstage #2 (ours) or #3 (theirs) for unmerged paths.\n\nNote that during git rebase and git pull --rebase, ours and\ntheirs may appear swapped. See the explanation of the same options\nin git-checkout[1] for details."
      },
      {
        "type": "long",
        "key": "theirs",
        "title": "--ours, --theirs",
        "description": "When restoring files in the working tree from the index, use\nstage #2 (ours) or #3 (theirs) for unmerged paths.\n\nNote that during git rebase and git pull --rebase, ours and\ntheirs may appear swapped. See the explanation of the same options\nin git-checkout[1] for details."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --merge",
        "description": "When restoring files on the working tree from the index,\nrecreate the conflicted merge in the unmerged paths."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "-m, --merge",
        "description": "When restoring files on the working tree from the index,\nrecreate the conflicted merge in the unmerged paths."
      },
      {
        "type": "long",
        "key": "conflict",
        "title": "--conflict=<style>",
        "description": "The same as --merge option above, but changes the way the\nconflicting hunks are presented, overriding the\nmerge.conflictStyle configuration variable.  Possible values\nare \"merge\" (default) and \"diff3\" (in addition to what is\nshown by \"merge\" style, shows the original contents)."
      },
      {
        "type": "long",
        "key": "ignore-unmerged",
        "title": "--ignore-unmerged",
        "description": "When restoring files on the working tree from the index, do\nnot abort the operation if there are unmerged entries and\nneither --ours, --theirs, --merge or --conflict is\nspecified. Unmerged paths on the working tree are left alone."
      },
      {
        "type": "long",
        "key": "ignore-skip-worktree-bits",
        "title": "--ignore-skip-worktree-bits",
        "description": "In sparse checkout mode, by default is to only update entries\nmatched by <pathspec> and sparse patterns in\n$GIT_DIR/info/sparse-checkout. This option ignores the sparse\npatterns and unconditionally restores any files in\n<pathspec>."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules, --no-recurse-submodules",
        "description": "If <pathspec> names an active submodule and the restore location\nincludes the working tree, the submodule will only be updated if\nthis option is given, in which case its working tree will be\nrestored to the commit recorded in the superproject, and any local\nmodifications overwritten. If nothing (or\n--no-recurse-submodules) is used, submodules working trees will\nnot be updated. Just like git-checkout[1], this will detach\nHEAD of the submodule."
      },
      {
        "type": "long",
        "key": "no-recurse-submodules",
        "title": "--recurse-submodules, --no-recurse-submodules",
        "description": "If <pathspec> names an active submodule and the restore location\nincludes the working tree, the submodule will only be updated if\nthis option is given, in which case its working tree will be\nrestored to the commit recorded in the superproject, and any local\nmodifications overwritten. If nothing (or\n--no-recurse-submodules) is used, submodules working trees will\nnot be updated. Just like git-checkout[1], this will detach\nHEAD of the submodule."
      },
      {
        "type": "long",
        "key": "overlay",
        "title": "--overlay, --no-overlay",
        "description": "In overlay mode, the command never removes files when\nrestoring. In no-overlay mode, tracked files that do not\nappear in the --source tree are removed, to make them match\n<tree> exactly. The default is no-overlay mode."
      },
      {
        "type": "long",
        "key": "no-overlay",
        "title": "--overlay, --no-overlay",
        "description": "In overlay mode, the command never removes files when\nrestoring. In no-overlay mode, tracked files that do not\nappear in the --source tree are removed, to make them match\n<tree> exactly. The default is no-overlay mode."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "Pathspec is passed in <file> instead of commandline args. If\n<file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath\n(see git-config[1]). See also --pathspec-file-nul and\nglobal --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "Only meaningful with --pathspec-from-file. Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."
      }
    ]
  },
  {
    "name": "git revert",
    "options": [
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "With this option, git revert will let you edit the commit\nmessage prior to committing the revert. This is the default if\nyou run the command from a terminal."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "With this option, git revert will let you edit the commit\nmessage prior to committing the revert. This is the default if\nyou run the command from a terminal."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m parent-number, --mainline parent-number",
        "description": "Usually you cannot revert a merge because you do not know which\nside of the merge should be considered the mainline.  This\noption specifies the parent number (starting from 1) of\nthe mainline and allows revert to reverse the change\nrelative to the specified parent.\n\nReverting a merge commit declares that you will never want the tree changes\nbrought in by the merge.  As a result, later merges will only bring in tree\nchanges introduced by commits that are not ancestors of the previously\nreverted merge.  This may or may not be what you want.\n\n\nSee the revert-a-faulty-merge How-To for\nmore details."
      },
      {
        "type": "long",
        "key": "no-edit",
        "title": "--no-edit",
        "description": "With this option, git revert will not start the commit\nmessage editor."
      },
      {
        "type": "long",
        "key": "cleanup",
        "title": "--cleanup=<mode>",
        "description": "This option determines how the commit message will be cleaned up before\nbeing passed on to the commit machinery. See git-commit[1] for more\ndetails. In particular, if the <mode> is given a value of scissors,\nscissors will be appended to MERGE_MSG before being passed on in the case\nof a conflict."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-commit",
        "description": "Usually the command automatically creates some commits with\ncommit log messages stating which commits were\nreverted.  This flag applies the changes necessary\nto revert the named commits to your working tree\nand the index, but does not make the commits.  In addition,\nwhen this option is used, your index does not have to match\nthe HEAD commit.  The revert is done against the\nbeginning state of your index.\n\nThis is useful when reverting more than one commits'\neffect to your index in a row."
      },
      {
        "type": "long",
        "key": "no-commit",
        "title": "-n, --no-commit",
        "description": "Usually the command automatically creates some commits with\ncommit log messages stating which commits were\nreverted.  This flag applies the changes necessary\nto revert the named commits to your working tree\nand the index, but does not make the commits.  In addition,\nwhen this option is used, your index does not have to match\nthe HEAD commit.  The revert is done against the\nbeginning state of your index.\n\nThis is useful when reverting more than one commits'\neffect to your index in a row."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer at the end of the commit message.\nSee the signoff option in git-commit[1] for more information."
      },
      {
        "type": "long",
        "key": "signoff",
        "title": "-s, --signoff",
        "description": "Add a Signed-off-by trailer at the end of the commit message.\nSee the signoff option in git-commit[1] for more information."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "--strategy=<strategy>",
        "description": "Use the given merge strategy.  Should only be used once.\nSee the MERGE STRATEGIES section in git-merge[1]\nfor details."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X<option>, --strategy-option=<option>",
        "description": "Pass the merge strategy-specific option through to the\nmerge strategy.  See git-merge[1] for details."
      },
      {
        "type": "long",
        "key": "strategy-option",
        "title": "-X<option>, --strategy-option=<option>",
        "description": "Pass the merge strategy-specific option through to the\nmerge strategy.  See git-merge[1] for details."
      },
      {
        "type": "long",
        "key": "rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the\nresult of auto-conflict resolution if possible."
      },
      {
        "type": "long",
        "key": "no-rerere-autoupdate",
        "title": "--rerere-autoupdate, --no-rerere-autoupdate",
        "description": "Allow the rerere mechanism to update the index with the\nresult of auto-conflict resolution if possible."
      }
    ]
  },
  {
    "name": "git rm",
    "options": [
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Override the up-to-date check."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Override the up-to-date check."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Don’t actually remove any file(s).  Instead, just show\nif they exist in the index and would otherwise be removed\nby the command."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Don’t actually remove any file(s).  Instead, just show\nif they exist in the index and would otherwise be removed\nby the command."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r",
        "description": "Allow recursive removal when a leading directory name is\ngiven."
      },
      {
        "type": "long",
        "key": "cached",
        "title": "--cached",
        "description": "Use this option to unstage and remove paths only from the index.\nWorking tree files, whether modified or not, will be\nleft alone."
      },
      {
        "type": "long",
        "key": "ignore-unmatch",
        "title": "--ignore-unmatch",
        "description": "Exit with a zero status even if no files matched."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "git rm normally outputs one line (in the form of an rm command)\nfor each file removed. This option suppresses that output."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "git rm normally outputs one line (in the form of an rm command)\nfor each file removed. This option suppresses that output."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "Pathspec is passed in <file> instead of commandline args. If\n<file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath\n(see git-config[1]). See also --pathspec-file-nul and\nglobal --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "Only meaningful with --pathspec-from-file. Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."
      }
    ]
  },
  {
    "name": "git shortlog",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-n, --numbered",
        "description": "Sort output according to the number of commits per author instead\nof author alphabetic order."
      },
      {
        "type": "long",
        "key": "numbered",
        "title": "-n, --numbered",
        "description": "Sort output according to the number of commits per author instead\nof author alphabetic order."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --summary",
        "description": "Suppress commit description and provide a commit count summary only."
      },
      {
        "type": "long",
        "key": "summary",
        "title": "-s, --summary",
        "description": "Suppress commit description and provide a commit count summary only."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --email",
        "description": "Show the email address of each author."
      },
      {
        "type": "long",
        "key": "email",
        "title": "-e, --email",
        "description": "Show the email address of each author."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--format[=<format>]",
        "description": "Instead of the commit subject, use some other information to\ndescribe each commit.  <format> can be any string accepted\nby the --format option of git log, such as * [%h] %s.\n(See the \"PRETTY FORMATS\" section of git-log[1].)\n\n\nEach pretty-printed commit will be rewrapped before it is shown."
      },
      {
        "type": "long",
        "key": "group",
        "title": "--group=<type>",
        "description": "Group commits based on <type>. If no --group option is\nspecified, the default is author. <type> is one of:\n\n\n\n\n\nauthor, commits are grouped by author\n\n\ncommitter, commits are grouped by committer (the same as -c)\n\n\ntrailer:<field>, the <field> is interpreted as a case-insensitive\ncommit message trailer (see git-interpret-trailers[1]). For\nexample, if your project uses Reviewed-by trailers, you might want\nto see who has been reviewing with\ngit shortlog -ns --group=trailer:reviewed-by.\n\nNote that commits that do not include the trailer will not be counted.\nLikewise, commits with multiple trailers (e.g., multiple signoffs) may\nbe counted more than once (but only once per unique trailer value in\nthat commit).\n\n\nShortlog will attempt to parse each trailer value as a name <email>\nidentity. If successful, the mailmap is applied and the email is omitted\nunless the --email option is specified. If the value cannot be parsed\nas an identity, it will be taken literally and completely.\n\n\n\n\n\n\n\nIf --group is specified multiple times, commits are counted under each\nvalue (but again, only once per unique value in that commit). For\nexample, git shortlog --group=author --group=trailer:co-authored-by\ncounts both authors and co-authors."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --committer",
        "description": "This is an alias for --group=committer."
      },
      {
        "type": "long",
        "key": "committer",
        "title": "-c, --committer",
        "description": "This is an alias for --group=committer."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w[<width>[, <indent1>[, <indent2>]]]",
        "description": "Linewrap the output by wrapping each line at width.  The first\nline of each entry is indented by indent1 spaces, and the second\nand subsequent lines are indented by indent2 spaces. width,\nindent1, and indent2 default to 76, 6 and 9 respectively.\n\nIf width is 0 (zero) then indent the lines of the output without wrapping\nthem."
      },
      {
        "type": "long",
        "key": "max-count",
        "title": "-<number>, -n <number>, --max-count=<number>",
        "description": "Limit the number of commits to output."
      },
      {
        "type": "long",
        "key": "skip",
        "title": "--skip=<number>",
        "description": "Skip number commits before starting to show the commit output."
      },
      {
        "type": "long",
        "key": "since",
        "title": "--since=<date>, --after=<date>",
        "description": "Show commits more recent than a specific date."
      },
      {
        "type": "long",
        "key": "after",
        "title": "--since=<date>, --after=<date>",
        "description": "Show commits more recent than a specific date."
      },
      {
        "type": "long",
        "key": "until",
        "title": "--until=<date>, --before=<date>",
        "description": "Show commits older than a specific date."
      },
      {
        "type": "long",
        "key": "before",
        "title": "--until=<date>, --before=<date>",
        "description": "Show commits older than a specific date."
      },
      {
        "type": "long",
        "key": "author",
        "title": "--author=<pattern>, --committer=<pattern>",
        "description": "Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern>,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern>)."
      },
      {
        "type": "long",
        "key": "grep-reflog",
        "title": "--grep-reflog=<pattern>",
        "description": "Limit the commits output to ones with reflog entries that\nmatch the specified pattern (regular expression). With\nmore than one --grep-reflog, commits whose reflog message\nmatches any of the given patterns are chosen.  It is an\nerror to use this option unless --walk-reflogs is in use."
      },
      {
        "type": "long",
        "key": "grep",
        "title": "--grep=<pattern>",
        "description": "Limit the commits output to ones with log message that\nmatches the specified pattern (regular expression).  With\nmore than one --grep=<pattern>, commits whose message\nmatches any of the given patterns are chosen (but see\n--all-match).\n\nWhen --notes is in effect, the message from the notes is\nmatched as if it were part of the log message."
      },
      {
        "type": "long",
        "key": "all-match",
        "title": "--all-match",
        "description": "Limit the commits output to ones that match all given --grep,\ninstead of ones that match at least one."
      },
      {
        "type": "long",
        "key": "invert-grep",
        "title": "--invert-grep",
        "description": "Limit the commits output to ones with log message that do not\nmatch the pattern specified with --grep=<pattern>."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --regexp-ignore-case",
        "description": "Match the regular expression limiting patterns without regard to letter\ncase."
      },
      {
        "type": "long",
        "key": "regexp-ignore-case",
        "title": "-i, --regexp-ignore-case",
        "description": "Match the regular expression limiting patterns without regard to letter\ncase."
      },
      {
        "type": "long",
        "key": "basic-regexp",
        "title": "--basic-regexp",
        "description": "Consider the limiting patterns to be basic regular expressions;\nthis is the default."
      },
      {
        "type": "short",
        "key": "E",
        "title": "-E, --extended-regexp",
        "description": "Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions."
      },
      {
        "type": "long",
        "key": "extended-regexp",
        "title": "-E, --extended-regexp",
        "description": "Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F, --fixed-strings",
        "description": "Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression)."
      },
      {
        "type": "long",
        "key": "fixed-strings",
        "title": "-F, --fixed-strings",
        "description": "Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression)."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P, --perl-regexp",
        "description": "Consider the limiting patterns to be Perl-compatible regular\nexpressions.\n\nSupport for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."
      },
      {
        "type": "long",
        "key": "perl-regexp",
        "title": "-P, --perl-regexp",
        "description": "Consider the limiting patterns to be Perl-compatible regular\nexpressions.\n\nSupport for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."
      },
      {
        "type": "long",
        "key": "remove-empty",
        "title": "--remove-empty",
        "description": "Stop when a given path disappears from the tree."
      },
      {
        "type": "long",
        "key": "merges",
        "title": "--merges",
        "description": "Print only merge commits. This is exactly the same as --min-parents=2."
      },
      {
        "type": "long",
        "key": "no-merges",
        "title": "--no-merges",
        "description": "Do not print commits with more than one parent. This is\nexactly the same as --max-parents=1."
      },
      {
        "type": "long",
        "key": "min-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "max-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "no-min-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "no-max-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge\ncommit.  This option can give a better overview when\nviewing the evolution of a particular topic branch,\nbecause merges into a topic branch tend to be only about\nadjusting to updated upstream from time to time, and\nthis option allows you to ignore the individual commits\nbrought in to your history by such a merge."
      },
      {
        "type": "long",
        "key": "not",
        "title": "--not",
        "description": "Reverses the meaning of the ^ prefix (or lack thereof)\nfor all following revision specifiers, up to the next --not."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Pretend as if all the refs in refs/, along with HEAD, are\nlisted on the command line as <commit>."
      },
      {
        "type": "long",
        "key": "branches",
        "title": "--branches[=<pattern>]",
        "description": "Pretend as if all the refs in refs/heads are listed\non the command line as <commit>. If <pattern> is given, limit\nbranches to ones matching given shell glob. If pattern lacks ?,\n*, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--tags[=<pattern>]",
        "description": "Pretend as if all the refs in refs/tags are listed\non the command line as <commit>. If <pattern> is given, limit\ntags to ones matching given shell glob. If pattern lacks ?, *,\nor [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "remotes",
        "title": "--remotes[=<pattern>]",
        "description": "Pretend as if all the refs in refs/remotes are listed\non the command line as <commit>. If <pattern> is given, limit\nremote-tracking branches to ones matching given shell glob.\nIf pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "glob",
        "title": "--glob=<glob-pattern>",
        "description": "Pretend as if all the refs matching shell glob <glob-pattern>\nare listed on the command line as <commit>. Leading refs/,\nis automatically prepended if missing. If pattern lacks ?, *,\nor [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude=<glob-pattern>",
        "description": "Do not include refs matching <glob-pattern> that the next --all,\n--branches, --tags, --remotes, or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all, --branches, --tags, --remotes, or\n--glob option (other options or arguments do not clear\naccumulated patterns).\n\nThe patterns given should not begin with refs/heads, refs/tags, or\nrefs/remotes when applied to --branches, --tags, or --remotes,\nrespectively, and they must begin with refs/ when applied to --glob\nor --all. If a trailing /* is intended, it must be given\nexplicitly."
      },
      {
        "type": "long",
        "key": "reflog",
        "title": "--reflog",
        "description": "Pretend as if all objects mentioned by reflogs are listed on the\ncommand line as <commit>."
      },
      {
        "type": "long",
        "key": "alternate-refs",
        "title": "--alternate-refs",
        "description": "Pretend as if all objects mentioned as ref tips of alternate\nrepositories were listed on the command line. An alternate\nrepository is any repository whose object directory is specified\nin objects/info/alternates.  The set of included objects may\nbe modified by core.alternateRefsCommand, etc. See\ngit-config[1]."
      },
      {
        "type": "long",
        "key": "single-worktree",
        "title": "--single-worktree",
        "description": "By default, all working trees will be examined by the\nfollowing options when there are more than one (see\ngit-worktree[1]): --all, --reflog and\n--indexed-objects.\nThis option forces them to examine the current working tree\nonly."
      },
      {
        "type": "long",
        "key": "ignore-missing",
        "title": "--ignore-missing",
        "description": "Upon seeing an invalid object name in the input, pretend as if\nthe bad input was not given."
      },
      {
        "type": "long",
        "key": "bisect",
        "title": "--bisect",
        "description": "Pretend as if the bad bisection ref refs/bisect/bad\nwas listed and as if it was followed by --not and the good\nbisection refs refs/bisect/good-* on the command\nline."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "In addition to the <commit> listed on the command\nline, read them from the standard input. If a -- separator is\nseen, stop reading commits and start reading paths to limit the\nresult."
      },
      {
        "type": "long",
        "key": "cherry-mark",
        "title": "--cherry-mark",
        "description": "Like --cherry-pick (see below) but mark equivalent commits\nwith = rather than omitting them, and inequivalent ones with +."
      },
      {
        "type": "long",
        "key": "cherry-pick",
        "title": "--cherry-pick",
        "description": "Omit any commit that introduces the same change as\nanother commit on the “other side” when the set of\ncommits are limited with symmetric difference.\n\nFor example, if you have two branches, A and B, a usual way\nto list all commits on only one side of them is with\n--left-right (see the example below in the description of\nthe --left-right option). However, it shows the commits that were\ncherry-picked from the other branch (for example, “3rd on b” may be\ncherry-picked from branch A). With this option, such pairs of commits are\nexcluded from the output."
      },
      {
        "type": "long",
        "key": "left-only",
        "title": "--left-only, --right-only",
        "description": "List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by\n--left-right.\n\nFor example, --cherry-pick --right-only A...B omits those\ncommits from B which are in A or are patch-equivalent to a commit in\nA. In other words, this lists the + commits from git cherry A B.\nMore precisely, --cherry-pick --right-only --no-merges gives the exact\nlist."
      },
      {
        "type": "long",
        "key": "right-only",
        "title": "--left-only, --right-only",
        "description": "List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by\n--left-right.\n\nFor example, --cherry-pick --right-only A...B omits those\ncommits from B which are in A or are patch-equivalent to a commit in\nA. In other words, this lists the + commits from git cherry A B.\nMore precisely, --cherry-pick --right-only --no-merges gives the exact\nlist."
      },
      {
        "type": "long",
        "key": "cherry",
        "title": "--cherry",
        "description": "A synonym for --right-only --cherry-mark --no-merges; useful to\nlimit the output to the commits on our side and mark those that\nhave been applied to the other side of a forked history with\ngit log --cherry upstream...mybranch, similar to\ngit cherry upstream mybranch."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --walk-reflogs",
        "description": "Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit, commit1..commit2,\nand commit1...commit2 notations cannot be used).\n\nWith --pretty format other than oneline and reference (for obvious reasons),\nthis causes the output to have two extra lines of information\ntaken from the reflog.  The reflog designator in the output may be shown\nas ref@{Nth} (where Nth is the reverse-chronological index in the\nreflog) or as ref@{timestamp} (with the timestamp for that entry),\ndepending on a few rules:\n\n\n\n\n\n\nIf the starting point is specified as ref@{Nth}, show the index\nformat.\n\n\nIf the starting point was specified as ref@{now}, show the\ntimestamp format.\n\n\nIf neither was used, but --date was given on the command line, show\nthe timestamp in the format requested by --date.\n\n\nOtherwise, show the index format.\n\n\n\n\n\n\nUnder --pretty=oneline, the commit message is\nprefixed with this information on the same line.\nThis option cannot be combined with --reverse.\nSee also git-reflog[1].\n\n\nUnder --pretty=reference, this information will not be shown at all."
      },
      {
        "type": "long",
        "key": "walk-reflogs",
        "title": "-g, --walk-reflogs",
        "description": "Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit, commit1..commit2,\nand commit1...commit2 notations cannot be used).\n\nWith --pretty format other than oneline and reference (for obvious reasons),\nthis causes the output to have two extra lines of information\ntaken from the reflog.  The reflog designator in the output may be shown\nas ref@{Nth} (where Nth is the reverse-chronological index in the\nreflog) or as ref@{timestamp} (with the timestamp for that entry),\ndepending on a few rules:\n\n\n\n\n\n\nIf the starting point is specified as ref@{Nth}, show the index\nformat.\n\n\nIf the starting point was specified as ref@{now}, show the\ntimestamp format.\n\n\nIf neither was used, but --date was given on the command line, show\nthe timestamp in the format requested by --date.\n\n\nOtherwise, show the index format.\n\n\n\n\n\n\nUnder --pretty=oneline, the commit message is\nprefixed with this information on the same line.\nThis option cannot be combined with --reverse.\nSee also git-reflog[1].\n\n\nUnder --pretty=reference, this information will not be shown at all."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "--merge",
        "description": "After a failed merge, show refs that touch files having a\nconflict and don’t exist on all heads to merge."
      },
      {
        "type": "long",
        "key": "boundary",
        "title": "--boundary",
        "description": "Output excluded boundary commits. Boundary commits are\nprefixed with -."
      },
      {
        "type": "long",
        "key": "simplify-by-decoration",
        "title": "--simplify-by-decoration",
        "description": "Commits that are referred by some branch or tag are selected."
      },
      {
        "type": "long",
        "key": "show-pulls",
        "title": "--show-pulls",
        "description": "Include all commits from the default mode, but also any merge\ncommits that are not TREESAME to the first parent but are\nTREESAME to a later parent. This mode is helpful for showing\nthe merge commits that \"first introduced\" a change to a branch."
      },
      {
        "type": "long",
        "key": "full-history",
        "title": "--full-history",
        "description": "Same as the default mode, but does not prune some history."
      },
      {
        "type": "long",
        "key": "dense",
        "title": "--dense",
        "description": "Only the selected commits are shown, plus some to have a\nmeaningful history."
      },
      {
        "type": "long",
        "key": "sparse",
        "title": "--sparse",
        "description": "All commits in the simplified history are shown."
      },
      {
        "type": "long",
        "key": "simplify-merges",
        "title": "--simplify-merges",
        "description": "Additional option to --full-history to remove some needless\nmerges from the resulting history, as there are no selected\ncommits contributing to this merge."
      },
      {
        "type": "long",
        "key": "ancestry-path",
        "title": "--ancestry-path",
        "description": "When given a range of commits to display (e.g. commit1..commit2\nor commit2 ^commit1), only display commits that exist\ndirectly on the ancestry chain between the commit1 and\ncommit2, i.e. commits that are both descendants of commit1,\nand ancestors of commit2."
      }
    ]
  },
  {
    "name": "git show",
    "options": [
      {
        "type": "long",
        "key": "pretty",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, reference, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each\nformat.  When =<format> part is omitted, it defaults to medium.\n\n\nNote: you can specify the default pretty format in the repository\nconfiguration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, reference, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each\nformat.  When =<format> part is omitted, it defaults to medium.\n\n\nNote: you can specify the default pretty format in the repository\nconfiguration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "abbrev-commit",
        "title": "--abbrev-commit",
        "description": "Instead of showing the full 40-byte hexadecimal commit object\nname, show a prefix that names the object uniquely.\n\"--abbrev=<n>\" (which also modifies diff output, if it is displayed)\noption can be used to specify the minimum length of the prefix.\n\nThis should make \"--pretty=oneline\" a whole lot more readable for\npeople using 80-column terminals."
      },
      {
        "type": "long",
        "key": "no-abbrev-commit",
        "title": "--no-abbrev-commit",
        "description": "Show the full 40-byte hexadecimal commit object name. This negates\n--abbrev-commit, either explicit or implied by other options such\nas \"--oneline\". It also overrides the log.abbrevCommit variable."
      },
      {
        "type": "long",
        "key": "oneline",
        "title": "--oneline",
        "description": "This is a shorthand for \"--pretty=oneline --abbrev-commit\"\nused together."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "The commit objects record the encoding used for the log message\nin their encoding header; this option can be used to tell the\ncommand to re-code the commit log message in the encoding\npreferred by the user.  For non plumbing commands this\ndefaults to UTF-8. Note that if an object claims to be encoded\nin X and we are outputting in X, we will output the object\nverbatim; this means that invalid sequences in the original\ncommit may be copied to the output."
      },
      {
        "type": "long",
        "key": "expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e.  medium, which is the default, full,\nand fuller)."
      },
      {
        "type": "long",
        "key": "no-expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e.  medium, which is the default, full,\nand fuller)."
      },
      {
        "type": "long",
        "key": "notes",
        "title": "--notes[=<ref>]",
        "description": "Show the notes (see git-notes[1]) that annotate the\ncommit, when showing the commit log message.  This is the default\nfor git log, git show and git whatchanged commands when\nthere is no --pretty, --format, or --oneline option given\non the command line.\n\nBy default, the notes shown are from the notes refs listed in the\ncore.notesRef and notes.displayRef variables (or corresponding\nenvironment overrides). See git-config[1] for more details.\n\n\nWith an optional <ref> argument, use the ref to find the notes\nto display.  The ref can specify the full refname when it begins\nwith refs/notes/; when it begins with notes/, refs/ and otherwise\nrefs/notes/ is prefixed to form a full name of the ref.\n\n\nMultiple --notes options can be combined to control which notes are\nbeing displayed. Examples: \"--notes=foo\" will show only notes from\n\"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from\n\"refs/notes/foo\" and from the default notes ref(s)."
      },
      {
        "type": "long",
        "key": "no-notes",
        "title": "--no-notes",
        "description": "Do not show notes. This negates the above --notes option, by\nresetting the list of notes refs from which notes are shown.\nOptions are parsed in the order given on the command line, so e.g.\n\"--notes --notes=foo --no-notes --notes=bar\" will only show notes\nfrom \"refs/notes/bar\"."
      },
      {
        "type": "long",
        "key": "show-notes",
        "title": "--show-notes[=<ref>], --[no-]standard-notes",
        "description": "These options are deprecated. Use the above --notes/--no-notes\noptions instead."
      },
      {
        "type": "long",
        "key": "standard-notes",
        "title": "--show-notes[=<ref>], --[no-]standard-notes",
        "description": "These options are deprecated. Use the above --notes/--no-notes\noptions instead."
      },
      {
        "type": "long",
        "key": "show-signature",
        "title": "--show-signature",
        "description": "Check the validity of a signed commit object by passing the signature\nto gpg --verify and show the output."
      }
    ]
  },
  {
    "name": "git sparse-checkout",
    "options": []
  },
  {
    "name": "git stash",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "This option is only valid for push and save commands.\n\nAll ignored and untracked files are also stashed and then cleaned\nup with git clean."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "This option is only valid for push and save commands.\n\nAll ignored and untracked files are also stashed and then cleaned\nup with git clean."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u, --include-untracked, --no-include-untracked",
        "description": "When used with the push and save commands,\nall untracked files are also stashed and then cleaned up with\ngit clean.\n\nWhen used with the show command, show the untracked files in the stash\nentry as part of the diff."
      },
      {
        "type": "long",
        "key": "include-untracked",
        "title": "-u, --include-untracked, --no-include-untracked",
        "description": "When used with the push and save commands,\nall untracked files are also stashed and then cleaned up with\ngit clean.\n\nWhen used with the show command, show the untracked files in the stash\nentry as part of the diff."
      },
      {
        "type": "long",
        "key": "no-include-untracked",
        "title": "-u, --include-untracked, --no-include-untracked",
        "description": "When used with the push and save commands,\nall untracked files are also stashed and then cleaned up with\ngit clean.\n\nWhen used with the show command, show the untracked files in the stash\nentry as part of the diff."
      },
      {
        "type": "long",
        "key": "only-untracked",
        "title": "--only-untracked",
        "description": "This option is only valid for the show command.\n\nShow only the untracked files in the stash entry as part of the diff."
      },
      {
        "type": "long",
        "key": "index",
        "title": "--index",
        "description": "This option is only valid for pop and apply commands.\n\nTries to reinstate not only the working tree’s changes, but also\nthe index’s ones. However, this can fail, when you have conflicts\n(which are stored in the index, where you therefore can no longer\napply the changes as they were originally)."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep-index, --no-keep-index",
        "description": "This option is only valid for push and save commands.\n\nAll changes already added to the index are left intact."
      },
      {
        "type": "long",
        "key": "keep-index",
        "title": "-k, --keep-index, --no-keep-index",
        "description": "This option is only valid for push and save commands.\n\nAll changes already added to the index are left intact."
      },
      {
        "type": "long",
        "key": "no-keep-index",
        "title": "-k, --keep-index, --no-keep-index",
        "description": "This option is only valid for push and save commands.\n\nAll changes already added to the index are left intact."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --patch",
        "description": "This option is only valid for push and save commands.\n\nInteractively select hunks from the diff between HEAD and the\nworking tree to be stashed.  The stash entry is constructed such\nthat its index state is the same as the index state of your\nrepository, and its worktree contains only the changes you selected\ninteractively.  The selected changes are then rolled back from your\nworktree. See the “Interactive Mode” section of git-add[1]\nto learn how to operate the --patch mode.\n\n\nThe --patch option implies --keep-index.  You can use\n--no-keep-index to override this."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, --patch",
        "description": "This option is only valid for push and save commands.\n\nInteractively select hunks from the diff between HEAD and the\nworking tree to be stashed.  The stash entry is constructed such\nthat its index state is the same as the index state of your\nrepository, and its worktree contains only the changes you selected\ninteractively.  The selected changes are then rolled back from your\nworktree. See the “Interactive Mode” section of git-add[1]\nto learn how to operate the --patch mode.\n\n\nThe --patch option implies --keep-index.  You can use\n--no-keep-index to override this."
      },
      {
        "type": "long",
        "key": "pathspec-from-file",
        "title": "--pathspec-from-file=<file>",
        "description": "This option is only valid for push command.\n\nPathspec is passed in <file> instead of commandline args. If\n<file> is exactly - then standard input is used. Pathspec\nelements are separated by LF or CR/LF. Pathspec elements can be\nquoted as explained for the configuration variable core.quotePath\n(see git-config[1]). See also --pathspec-file-nul and\nglobal --literal-pathspecs."
      },
      {
        "type": "long",
        "key": "pathspec-file-nul",
        "title": "--pathspec-file-nul",
        "description": "This option is only valid for push command.\n\nOnly meaningful with --pathspec-from-file. Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "This option is only valid for apply, drop, pop, push,\nsave, store commands.\n\nQuiet, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "This option is only valid for apply, drop, pop, push,\nsave, store commands.\n\nQuiet, suppress feedback messages."
      }
    ]
  },
  {
    "name": "git status",
    "options": [
      {
        "type": "short",
        "key": "s",
        "title": "-s, --short",
        "description": "Give the output in the short-format."
      },
      {
        "type": "long",
        "key": "short",
        "title": "-s, --short",
        "description": "Give the output in the short-format."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --branch",
        "description": "Show the branch and tracking info even in short-format."
      },
      {
        "type": "long",
        "key": "branch",
        "title": "-b, --branch",
        "description": "Show the branch and tracking info even in short-format."
      },
      {
        "type": "long",
        "key": "show-stash",
        "title": "--show-stash",
        "description": "Show the number of entries currently stashed away."
      },
      {
        "type": "long",
        "key": "porcelain",
        "title": "--porcelain[=<version>]",
        "description": "Give the output in an easy-to-parse format for scripts.\nThis is similar to the short output, but will remain stable\nacross Git versions and regardless of user configuration. See\nbelow for details.\n\nThe version parameter is used to specify the format version.\nThis is optional and defaults to the original version v1 format."
      },
      {
        "type": "long",
        "key": "long",
        "title": "--long",
        "description": "Give the output in the long-format. This is the default."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "In addition to the names of files that have been changed, also\nshow the textual changes that are staged to be committed\n(i.e., like the output of git diff --cached). If -v is specified\ntwice, then also show the changes in the working tree that\nhave not yet been staged (i.e., like the output of git diff)."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "In addition to the names of files that have been changed, also\nshow the textual changes that are staged to be committed\n(i.e., like the output of git diff --cached). If -v is specified\ntwice, then also show the changes in the working tree that\nhave not yet been staged (i.e., like the output of git diff)."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u[<mode>], --untracked-files[=<mode>]",
        "description": "Show untracked files.\n\n\n\nThe mode parameter is used to specify the handling of untracked files.\nIt is optional: it defaults to all, and if specified, it must be\nstuck to the option (e.g. -uno, but not -u no).\n\n\nThe possible options are:\n\n\n\n\nno     - Show no untracked files.\n\n\nnormal - Shows untracked files and directories.\n\n\nall    - Also shows individual files in untracked directories.\n\n\n\n\nWhen -u option is not used, untracked files and directories are\nshown (i.e. the same as specifying normal), to help you avoid\nforgetting to add newly created files.  Because it takes extra work\nto find untracked files in the filesystem, this mode may take some\ntime in a large working tree.\nConsider enabling untracked cache and split index if supported (see\ngit update-index --untracked-cache and git update-index\n--split-index), Otherwise you can use no to have git status\nreturn more quickly without showing untracked files.\n\n\nThe default can be changed using the status.showUntrackedFiles\nconfiguration variable documented in git-config[1]."
      },
      {
        "type": "long",
        "key": "untracked-files",
        "title": "-u[<mode>], --untracked-files[=<mode>]",
        "description": "Show untracked files.\n\n\n\nThe mode parameter is used to specify the handling of untracked files.\nIt is optional: it defaults to all, and if specified, it must be\nstuck to the option (e.g. -uno, but not -u no).\n\n\nThe possible options are:\n\n\n\n\nno     - Show no untracked files.\n\n\nnormal - Shows untracked files and directories.\n\n\nall    - Also shows individual files in untracked directories.\n\n\n\n\nWhen -u option is not used, untracked files and directories are\nshown (i.e. the same as specifying normal), to help you avoid\nforgetting to add newly created files.  Because it takes extra work\nto find untracked files in the filesystem, this mode may take some\ntime in a large working tree.\nConsider enabling untracked cache and split index if supported (see\ngit update-index --untracked-cache and git update-index\n--split-index), Otherwise you can use no to have git status\nreturn more quickly without showing untracked files.\n\n\nThe default can be changed using the status.showUntrackedFiles\nconfiguration variable documented in git-config[1]."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules[=<when>]",
        "description": "Ignore changes to submodules when looking for changes. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the\nignore option in git-config[1] or gitmodules[5]. When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior before 1.7.0). Using \"all\" hides all changes to submodules\n(and suppresses the output of submodule summaries when the config option\nstatus.submoduleSummary is set)."
      },
      {
        "type": "long",
        "key": "ignored",
        "title": "--ignored[=<mode>]",
        "description": "Show ignored files as well.\n\n\n\nThe mode parameter is used to specify the handling of ignored files.\nIt is optional: it defaults to traditional.\n\n\nThe possible options are:\n\n\n\n\ntraditional - Shows ignored files and directories, unless\n--untracked-files=all is specified, in which case\nindividual files in ignored directories are\ndisplayed.\n\n\nno\t        - Show no ignored files.\n\n\nmatching    - Shows ignored files and directories matching an\nignore pattern.\n\n\n\n\nWhen matching mode is specified, paths that explicitly match an\nignored pattern are shown. If a directory matches an ignore pattern,\nthen it is shown, but not paths contained in the ignored directory. If\na directory does not match an ignore pattern, but all contents are\nignored, then the directory is not shown, but all contents are shown."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "Terminate entries with NUL, instead of LF.  This implies\nthe --porcelain=v1 output format if no other format is given."
      },
      {
        "type": "long",
        "key": "column",
        "title": "--column[=<options>], --no-column",
        "description": "Display untracked files in columns. See configuration variable\ncolumn.status for option syntax. --column and --no-column\nwithout options are equivalent to always and never\nrespectively."
      },
      {
        "type": "long",
        "key": "no-column",
        "title": "--column[=<options>], --no-column",
        "description": "Display untracked files in columns. See configuration variable\ncolumn.status for option syntax. --column and --no-column\nwithout options are equivalent to always and never\nrespectively."
      },
      {
        "type": "long",
        "key": "ahead-behind",
        "title": "--ahead-behind, --no-ahead-behind",
        "description": "Display or do not display detailed ahead/behind counts for the\nbranch relative to its upstream branch.  Defaults to true."
      },
      {
        "type": "long",
        "key": "no-ahead-behind",
        "title": "--ahead-behind, --no-ahead-behind",
        "description": "Display or do not display detailed ahead/behind counts for the\nbranch relative to its upstream branch.  Defaults to true."
      },
      {
        "type": "long",
        "key": "renames",
        "title": "--renames, --no-renames",
        "description": "Turn on/off rename detection regardless of user configuration.\nSee also git-diff[1] --no-renames."
      },
      {
        "type": "long",
        "key": "no-renames",
        "title": "--renames, --no-renames",
        "description": "Turn on/off rename detection regardless of user configuration.\nSee also git-diff[1] --no-renames."
      },
      {
        "type": "long",
        "key": "find-renames",
        "title": "--find-renames[=<n>]",
        "description": "Turn on rename detection, optionally setting the similarity\nthreshold.\nSee also git-diff[1] --find-renames."
      }
    ]
  },
  {
    "name": "git submodule",
    "options": [
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Only print error messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Only print error messages."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "This option is only valid for add and update commands.\nProgress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "This option is only valid for the deinit command. Unregister all\nsubmodules in the working tree."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b <branch>, --branch <branch>",
        "description": "Branch of repository to add as submodule.\nThe name of the branch is recorded as submodule.<name>.branch in\n.gitmodules for update --remote.  A special value of . is used to\nindicate that the name of the branch in the submodule should be the\nsame name as the current branch in the current repository.  If the\noption is not specified, it defaults to the remote HEAD."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "This option is only valid for add, deinit and update commands.\nWhen running add, allow adding an otherwise ignored submodule path.\nWhen running deinit the submodule working trees will be removed even\nif they contain local changes.\nWhen running update (only effective with the checkout procedure),\nthrow away local changes in submodules when switching to a\ndifferent commit; and always run a checkout operation in the\nsubmodule, even if the commit listed in the index of the\ncontaining repository matches the commit checked out in the\nsubmodule."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "This option is only valid for add, deinit and update commands.\nWhen running add, allow adding an otherwise ignored submodule path.\nWhen running deinit the submodule working trees will be removed even\nif they contain local changes.\nWhen running update (only effective with the checkout procedure),\nthrow away local changes in submodules when switching to a\ndifferent commit; and always run a checkout operation in the\nsubmodule, even if the commit listed in the index of the\ncontaining repository matches the commit checked out in the\nsubmodule."
      },
      {
        "type": "long",
        "key": "cached",
        "title": "--cached",
        "description": "This option is only valid for status and summary commands.  These\ncommands typically use the commit found in the submodule HEAD, but\nwith this option, the commit stored in the index is used instead."
      },
      {
        "type": "long",
        "key": "files",
        "title": "--files",
        "description": "This option is only valid for the summary command. This command\ncompares the commit in the index with that in the submodule HEAD\nwhen this option is used."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --summary-limit",
        "description": "This option is only valid for the summary command.\nLimit the summary size (number of commits shown in total).\nGiving 0 will disable the summary; a negative number means unlimited\n(the default). This limit only applies to modified submodules. The\nsize is always limited to 1 for added/deleted/typechanged submodules."
      },
      {
        "type": "long",
        "key": "summary-limit",
        "title": "-n, --summary-limit",
        "description": "This option is only valid for the summary command.\nLimit the summary size (number of commits shown in total).\nGiving 0 will disable the summary; a negative number means unlimited\n(the default). This limit only applies to modified submodules. The\nsize is always limited to 1 for added/deleted/typechanged submodules."
      },
      {
        "type": "long",
        "key": "remote",
        "title": "--remote",
        "description": "This option is only valid for the update command.  Instead of using\nthe superproject’s recorded SHA-1 to update the submodule, use the\nstatus of the submodule’s remote-tracking branch.  The remote used\nis branch’s remote (branch.<name>.remote), defaulting to origin.\nThe remote branch used defaults to the remote HEAD, but the branch\nname may be overridden by setting the submodule.<name>.branch\noption in either .gitmodules or .git/config (with .git/config\ntaking precedence).\n\nThis works for any of the supported update procedures (--checkout,\n--rebase, etc.).  The only change is the source of the target SHA-1.\nFor example, submodule update --remote --merge will merge upstream\nsubmodule changes into the submodules, while submodule update\n--merge will merge superproject gitlink changes into the submodules.\n\n\nIn order to ensure a current tracking branch state, update --remote\nfetches the submodule’s remote repository before calculating the\nSHA-1.  If you don’t want to fetch, you should use submodule update\n--remote --no-fetch.\n\n\nUse this option to integrate changes from the upstream subproject with\nyour submodule’s current HEAD.  Alternatively, you can run git pull\nfrom the submodule, which is equivalent except for the remote branch\nname: update --remote uses the default upstream repository and\nsubmodule.<name>.branch, while git pull uses the submodule’s\nbranch.<name>.merge.  Prefer submodule.<name>.branch if you want\nto distribute the default upstream branch with the superproject and\nbranch.<name>.merge if you want a more native feel while working in\nthe submodule itself."
      },
      {
        "type": "short",
        "key": "N",
        "title": "-N, --no-fetch",
        "description": "This option is only valid for the update command.\nDon’t fetch new objects from the remote site."
      },
      {
        "type": "long",
        "key": "no-fetch",
        "title": "-N, --no-fetch",
        "description": "This option is only valid for the update command.\nDon’t fetch new objects from the remote site."
      },
      {
        "type": "long",
        "key": "checkout",
        "title": "--checkout",
        "description": "This option is only valid for the update command.\nCheckout the commit recorded in the superproject on a detached HEAD\nin the submodule. This is the default behavior, the main use of\nthis option is to override submodule.$name.update when set to\na value other than checkout.\nIf the key submodule.$name.update is either not explicitly set or\nset to checkout, this option is implicit."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "--merge",
        "description": "This option is only valid for the update command.\nMerge the commit recorded in the superproject into the current branch\nof the submodule. If this option is given, the submodule’s HEAD will\nnot be detached. If a merge failure prevents this process, you will\nhave to resolve the resulting conflicts within the submodule with the\nusual conflict resolution tools.\nIf the key submodule.$name.update is set to merge, this option is\nimplicit."
      },
      {
        "type": "long",
        "key": "rebase",
        "title": "--rebase",
        "description": "This option is only valid for the update command.\nRebase the current branch onto the commit recorded in the\nsuperproject. If this option is given, the submodule’s HEAD will not\nbe detached. If a merge failure prevents this process, you will have\nto resolve these failures with git-rebase[1].\nIf the key submodule.$name.update is set to rebase, this option is\nimplicit."
      },
      {
        "type": "long",
        "key": "init",
        "title": "--init",
        "description": "This option is only valid for the update command.\nInitialize all submodules for which \"git submodule init\" has not been\ncalled so far before updating."
      },
      {
        "type": "long",
        "key": "name",
        "title": "--name",
        "description": "This option is only valid for the add command. It sets the submodule’s\nname to the given string instead of defaulting to its path. The name\nmust be valid as a directory name and may not end with a /."
      },
      {
        "type": "long",
        "key": "dissociate",
        "title": "--dissociate",
        "description": "This option is only valid for add and update commands.  These\ncommands sometimes need to clone a remote repository. In this case,\nthis option will be passed to the git-clone[1] command.\n\nNOTE: see the NOTE for the --reference option."
      },
      {
        "type": "long",
        "key": "recursive",
        "title": "--recursive",
        "description": "This option is only valid for foreach, update, status and sync commands.\nTraverse submodules recursively. The operation is performed not\nonly in the submodules of the current repo, but also\nin any nested submodules inside those submodules (and so on)."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--depth",
        "description": "This option is valid for add and update commands. Create a shallow\nclone with a history truncated to the specified number of revisions.\nSee git-clone[1]"
      },
      {
        "type": "long",
        "key": "recommend-shallow",
        "title": "--[no-]recommend-shallow",
        "description": "This option is only valid for the update command.\nThe initial clone of a submodule will use the recommended\nsubmodule.<name>.shallow as provided by the .gitmodules file\nby default. To ignore the suggestions use --no-recommend-shallow."
      },
      {
        "type": "short",
        "key": "j",
        "title": "-j <n>, --jobs <n>",
        "description": "This option is only valid for the update command.\nClone new submodules in parallel with as many jobs.\nDefaults to the submodule.fetchJobs option."
      },
      {
        "type": "long",
        "key": "single-branch",
        "title": "--[no-]single-branch",
        "description": "This option is only valid for the update command.\nClone only one branch during update: HEAD or one specified by --branch."
      }
    ]
  },
  {
    "name": "git switch",
    "options": [
      {
        "type": "short",
        "key": "c",
        "title": "-c <new-branch>, --create <new-branch>",
        "description": "Create a new branch named <new-branch> starting at\n<start-point> before switching to the branch. This is a\nconvenient shortcut for:\n\n\n$ git branch <new-branch>\n$ git switch <new-branch>"
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C <new-branch>, --force-create <new-branch>",
        "description": "Similar to --create except that if <new-branch> already\nexists, it will be reset to <start-point>. This is a\nconvenient shortcut for:\n\n\n$ git branch -f <new-branch>\n$ git switch <new-branch>"
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --detach",
        "description": "Switch to a commit for inspection and discardable\nexperiments. See the \"DETACHED HEAD\" section in\ngit-checkout[1] for details."
      },
      {
        "type": "long",
        "key": "detach",
        "title": "-d, --detach",
        "description": "Switch to a commit for inspection and discardable\nexperiments. See the \"DETACHED HEAD\" section in\ngit-checkout[1] for details."
      },
      {
        "type": "long",
        "key": "guess",
        "title": "--guess, --no-guess",
        "description": "If <branch> is not found but there does exist a tracking\nbranch in exactly one remote (call it <remote>) with a\nmatching name, treat as equivalent to\n\n\n$ git switch -c <branch> --track <remote>/<branch>\n\n\n\nIf the branch exists in multiple remotes and one of them is named by\nthe checkout.defaultRemote configuration variable, we’ll use that\none for the purposes of disambiguation, even if the <branch> isn’t\nunique across all remotes. Set it to e.g. checkout.defaultRemote=origin\nto always checkout remote branches from there if <branch> is\nambiguous but exists on the origin remote. See also\ncheckout.defaultRemote in git-config[1].\n\n\n--guess is the default behavior. Use --no-guess to disable it.\n\n\nThe default behavior can be set via the checkout.guess configuration\nvariable."
      },
      {
        "type": "long",
        "key": "no-guess",
        "title": "--guess, --no-guess",
        "description": "If <branch> is not found but there does exist a tracking\nbranch in exactly one remote (call it <remote>) with a\nmatching name, treat as equivalent to\n\n\n$ git switch -c <branch> --track <remote>/<branch>\n\n\n\nIf the branch exists in multiple remotes and one of them is named by\nthe checkout.defaultRemote configuration variable, we’ll use that\none for the purposes of disambiguation, even if the <branch> isn’t\nunique across all remotes. Set it to e.g. checkout.defaultRemote=origin\nto always checkout remote branches from there if <branch> is\nambiguous but exists on the origin remote. See also\ncheckout.defaultRemote in git-config[1].\n\n\n--guess is the default behavior. Use --no-guess to disable it.\n\n\nThe default behavior can be set via the checkout.guess configuration\nvariable."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "An alias for --discard-changes."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "An alias for --discard-changes."
      },
      {
        "type": "long",
        "key": "discard-changes",
        "title": "--discard-changes",
        "description": "Proceed even if the index or the working tree differs from\nHEAD. Both the index and working tree are restored to match\nthe switching target. If --recurse-submodules is specified,\nsubmodule content is also restored to match the switching\ntarget. This is used to throw away local changes."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --merge",
        "description": "If you have local modifications to one or more files that are\ndifferent between the current branch and the branch to which\nyou are switching, the command refuses to switch branches in\norder to preserve your modifications in context.  However,\nwith this option, a three-way merge between the current\nbranch, your working tree contents, and the new branch is\ndone, and you will be on the new branch.\n\nWhen a merge conflict happens, the index entries for conflicting\npaths are left unmerged, and you need to resolve the conflicts\nand mark the resolved paths with git add (or git rm if the merge\nshould result in deletion of the path)."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "-m, --merge",
        "description": "If you have local modifications to one or more files that are\ndifferent between the current branch and the branch to which\nyou are switching, the command refuses to switch branches in\norder to preserve your modifications in context.  However,\nwith this option, a three-way merge between the current\nbranch, your working tree contents, and the new branch is\ndone, and you will be on the new branch.\n\nWhen a merge conflict happens, the index entries for conflicting\npaths are left unmerged, and you need to resolve the conflicts\nand mark the resolved paths with git add (or git rm if the merge\nshould result in deletion of the path)."
      },
      {
        "type": "long",
        "key": "conflict",
        "title": "--conflict=<style>",
        "description": "The same as --merge option above, but changes the way the\nconflicting hunks are presented, overriding the\nmerge.conflictStyle configuration variable.  Possible values are\n\"merge\" (default) and \"diff3\" (in addition to what is shown by\n\"merge\" style, shows the original contents)."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress, --no-progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet\nis specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet."
      },
      {
        "type": "long",
        "key": "no-progress",
        "title": "--progress, --no-progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet\nis specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t, --track",
        "description": "When creating a new branch, set up \"upstream\" configuration.\n-c is implied. See --track in git-branch[1] for\ndetails.\n\nIf no -c option is given, the name of the new branch will be derived\nfrom the remote-tracking branch, by looking at the local part of the\nrefspec configured for the corresponding remote, and then stripping\nthe initial part up to the \"*\".  This would tell us to use hack as\nthe local branch when branching off of origin/hack (or\nremotes/origin/hack, or even refs/remotes/origin/hack).  If the\ngiven name has no slash, or the above guessing results in an empty\nname, the guessing is aborted.  You can explicitly give a name with\n-c in such a case."
      },
      {
        "type": "long",
        "key": "track",
        "title": "-t, --track",
        "description": "When creating a new branch, set up \"upstream\" configuration.\n-c is implied. See --track in git-branch[1] for\ndetails.\n\nIf no -c option is given, the name of the new branch will be derived\nfrom the remote-tracking branch, by looking at the local part of the\nrefspec configured for the corresponding remote, and then stripping\nthe initial part up to the \"*\".  This would tell us to use hack as\nthe local branch when branching off of origin/hack (or\nremotes/origin/hack, or even refs/remotes/origin/hack).  If the\ngiven name has no slash, or the above guessing results in an empty\nname, the guessing is aborted.  You can explicitly give a name with\n-c in such a case."
      },
      {
        "type": "long",
        "key": "no-track",
        "title": "--no-track",
        "description": "Do not set up \"upstream\" configuration, even if the\nbranch.autoSetupMerge configuration variable is true."
      },
      {
        "type": "long",
        "key": "ignore-other-worktrees",
        "title": "--ignore-other-worktrees",
        "description": "git switch refuses when the wanted ref is already\nchecked out by another worktree. This option makes it check\nthe ref out anyway. In other words, the ref can be held by\nmore than one worktree."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules, --no-recurse-submodules",
        "description": "Using --recurse-submodules will update the content of all\nactive submodules according to the commit recorded in the\nsuperproject. If nothing (or --no-recurse-submodules) is\nused, submodules working trees will not be updated. Just\nlike git-submodule[1], this will detach HEAD of the\nsubmodules."
      },
      {
        "type": "long",
        "key": "no-recurse-submodules",
        "title": "--recurse-submodules, --no-recurse-submodules",
        "description": "Using --recurse-submodules will update the content of all\nactive submodules according to the commit recorded in the\nsuperproject. If nothing (or --no-recurse-submodules) is\nused, submodules working trees will not be updated. Just\nlike git-submodule[1], this will detach HEAD of the\nsubmodules."
      }
    ]
  },
  {
    "name": "git tag",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --annotate",
        "description": "Make an unsigned, annotated tag object"
      },
      {
        "type": "long",
        "key": "annotate",
        "title": "-a, --annotate",
        "description": "Make an unsigned, annotated tag object"
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --sign",
        "description": "Make a GPG-signed tag, using the default e-mail address’s key.\nThe default behavior of tag GPG-signing is controlled by tag.gpgSign\nconfiguration variable if it exists, or disabled otherwise.\nSee git-config[1]."
      },
      {
        "type": "long",
        "key": "sign",
        "title": "-s, --sign",
        "description": "Make a GPG-signed tag, using the default e-mail address’s key.\nThe default behavior of tag GPG-signing is controlled by tag.gpgSign\nconfiguration variable if it exists, or disabled otherwise.\nSee git-config[1]."
      },
      {
        "type": "long",
        "key": "no-sign",
        "title": "--no-sign",
        "description": "Override tag.gpgSign configuration variable that is\nset to force each and every tag to be signed."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u <keyid>, --local-user=<keyid>",
        "description": "Make a GPG-signed tag, using the given key."
      },
      {
        "type": "long",
        "key": "local-user",
        "title": "-u <keyid>, --local-user=<keyid>",
        "description": "Make a GPG-signed tag, using the given key."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "Replace an existing tag with the given name (instead of failing)"
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "Replace an existing tag with the given name (instead of failing)"
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --delete",
        "description": "Delete existing tags with the given names."
      },
      {
        "type": "long",
        "key": "delete",
        "title": "-d, --delete",
        "description": "Delete existing tags with the given names."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verify",
        "description": "Verify the GPG signature of the given tag names."
      },
      {
        "type": "long",
        "key": "verify",
        "title": "-v, --verify",
        "description": "Verify the GPG signature of the given tag names."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n<num>",
        "description": "<num> specifies how many lines from the annotation, if any,\nare printed when using -l. Implies --list.\n\nThe default is not to print any annotation lines.\nIf no number is given to -n, only the first line is printed.\nIf the tag is not annotated, the commit message is displayed instead."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --list",
        "description": "List tags. With optional <pattern>..., e.g. git tag --list\n'v-*', list only the tags that match the pattern(s).\n\nRunning \"git tag\" without arguments also lists all tags. The pattern\nis a shell wildcard (i.e., matched using fnmatch(3)). Multiple\npatterns may be given; if any of them matches, the tag is shown.\n\n\nThis option is implicitly supplied if any other list-like option such\nas --contains is provided. See the documentation for each of those\noptions for details."
      },
      {
        "type": "long",
        "key": "list",
        "title": "-l, --list",
        "description": "List tags. With optional <pattern>..., e.g. git tag --list\n'v-*', list only the tags that match the pattern(s).\n\nRunning \"git tag\" without arguments also lists all tags. The pattern\nis a shell wildcard (i.e., matched using fnmatch(3)). Multiple\npatterns may be given; if any of them matches, the tag is shown.\n\n\nThis option is implicitly supplied if any other list-like option such\nas --contains is provided. See the documentation for each of those\noptions for details."
      },
      {
        "type": "long",
        "key": "sort",
        "title": "--sort=<key>",
        "description": "Sort based on the key given.  Prefix - to sort in\ndescending order of the value. You may use the --sort=<key> option\nmultiple times, in which case the last key becomes the primary\nkey. Also supports \"version:refname\" or \"v:refname\" (tag\nnames are treated as versions). The \"version:refname\" sort\norder can also be affected by the \"versionsort.suffix\"\nconfiguration variable.\nThe keys supported are the same as those in git for-each-ref.\nSort order defaults to the value configured for the tag.sort\nvariable if it exists, or lexicographic order otherwise. See\ngit-config[1]."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Respect any colors specified in the --format option. The\n<when> field must be one of always, never, or auto (if\n<when> is absent, behave as if always was given)."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --ignore-case",
        "description": "Sorting and filtering tags are case insensitive."
      },
      {
        "type": "long",
        "key": "ignore-case",
        "title": "-i, --ignore-case",
        "description": "Sorting and filtering tags are case insensitive."
      },
      {
        "type": "long",
        "key": "column",
        "title": "--column[=<options>], --no-column",
        "description": "Display tag listing in columns. See configuration variable\ncolumn.tag for option syntax. --column and --no-column\nwithout options are equivalent to always and never respectively.\n\nThis option is only applicable when listing tags without annotation lines."
      },
      {
        "type": "long",
        "key": "no-column",
        "title": "--column[=<options>], --no-column",
        "description": "Display tag listing in columns. See configuration variable\ncolumn.tag for option syntax. --column and --no-column\nwithout options are equivalent to always and never respectively.\n\nThis option is only applicable when listing tags without annotation lines."
      },
      {
        "type": "long",
        "key": "contains",
        "title": "--contains [<commit>]",
        "description": "Only list tags which contain the specified commit (HEAD if not\nspecified). Implies --list."
      },
      {
        "type": "long",
        "key": "no-contains",
        "title": "--no-contains [<commit>]",
        "description": "Only list tags which don’t contain the specified commit (HEAD if\nnot specified). Implies --list."
      },
      {
        "type": "long",
        "key": "merged",
        "title": "--merged [<commit>]",
        "description": "Only list tags whose commits are reachable from the specified\ncommit (HEAD if not specified)."
      },
      {
        "type": "long",
        "key": "no-merged",
        "title": "--no-merged [<commit>]",
        "description": "Only list tags whose commits are not reachable from the specified\ncommit (HEAD if not specified)."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m <msg>, --message=<msg>",
        "description": "Use the given tag message (instead of prompting).\nIf multiple -m options are given, their values are\nconcatenated as separate paragraphs.\nImplies -a if none of -a, -s, or -u <keyid>\nis given."
      },
      {
        "type": "long",
        "key": "message",
        "title": "-m <msg>, --message=<msg>",
        "description": "Use the given tag message (instead of prompting).\nIf multiple -m options are given, their values are\nconcatenated as separate paragraphs.\nImplies -a if none of -a, -s, or -u <keyid>\nis given."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F <file>, --file=<file>",
        "description": "Take the tag message from the given file.  Use - to\nread the message from the standard input.\nImplies -a if none of -a, -s, or -u <keyid>\nis given."
      },
      {
        "type": "long",
        "key": "file",
        "title": "-F <file>, --file=<file>",
        "description": "Take the tag message from the given file.  Use - to\nread the message from the standard input.\nImplies -a if none of -a, -s, or -u <keyid>\nis given."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "The message taken from file with -F and command line with\n-m are usually used as the tag message unmodified.\nThis option lets you further edit the message taken from these sources."
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "The message taken from file with -F and command line with\n-m are usually used as the tag message unmodified.\nThis option lets you further edit the message taken from these sources."
      },
      {
        "type": "long",
        "key": "cleanup",
        "title": "--cleanup=<mode>",
        "description": "This option sets how the tag message is cleaned up.\nThe  <mode> can be one of verbatim, whitespace and strip.  The\nstrip mode is default. The verbatim mode does not change message at\nall, whitespace removes just leading/trailing whitespace lines and\nstrip removes both whitespace and commentary."
      },
      {
        "type": "long",
        "key": "create-reflog",
        "title": "--create-reflog",
        "description": "Create a reflog for the tag. To globally enable reflogs for tags, see\ncore.logAllRefUpdates in git-config[1].\nThe negated form --no-create-reflog only overrides an earlier\n--create-reflog, but currently does not negate the setting of\ncore.logAllRefUpdates."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--format=<format>",
        "description": "A string that interpolates %(fieldname) from a tag ref being shown\nand the object it points at.  The format is the same as\nthat of git-for-each-ref[1].  When unspecified,\ndefaults to %(refname:strip=2)."
      }
    ]
  },
  {
    "name": "git worktree",
    "options": [
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "By default, add refuses to create a new working tree when\n<commit-ish> is a branch name and is already checked out by\nanother working tree, or if <path> is already assigned to some\nworking tree but is missing (for instance, if <path> was deleted\nmanually). This option overrides these safeguards. To add a missing but\nlocked working tree path, specify --force twice.\n\nmove refuses to move a locked working tree unless --force is specified\ntwice. If the destination is already assigned to some other working tree but is\nmissing (for instance, if <new-path> was deleted manually), then --force\nallows the move to proceed; use --force twice if the destination is locked.\n\n\nremove refuses to remove an unclean working tree unless --force is used.\nTo remove a locked working tree, specify --force twice."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "By default, add refuses to create a new working tree when\n<commit-ish> is a branch name and is already checked out by\nanother working tree, or if <path> is already assigned to some\nworking tree but is missing (for instance, if <path> was deleted\nmanually). This option overrides these safeguards. To add a missing but\nlocked working tree path, specify --force twice.\n\nmove refuses to move a locked working tree unless --force is specified\ntwice. If the destination is already assigned to some other working tree but is\nmissing (for instance, if <new-path> was deleted manually), then --force\nallows the move to proceed; use --force twice if the destination is locked.\n\n\nremove refuses to remove an unclean working tree unless --force is used.\nTo remove a locked working tree, specify --force twice."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b <new-branch>, -B <new-branch>",
        "description": "With add, create a new branch named <new-branch> starting at\n<commit-ish>, and check out <new-branch> into the new working tree.\nIf <commit-ish> is omitted, it defaults to HEAD.\nBy default, -b refuses to create a new branch if it already\nexists. -B overrides this safeguard, resetting <new-branch> to\n<commit-ish>."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-b <new-branch>, -B <new-branch>",
        "description": "With add, create a new branch named <new-branch> starting at\n<commit-ish>, and check out <new-branch> into the new working tree.\nIf <commit-ish> is omitted, it defaults to HEAD.\nBy default, -b refuses to create a new branch if it already\nexists. -B overrides this safeguard, resetting <new-branch> to\n<commit-ish>."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --detach",
        "description": "With add, detach HEAD in the new working tree. See \"DETACHED HEAD\"\nin git-checkout[1]."
      },
      {
        "type": "long",
        "key": "detach",
        "title": "-d, --detach",
        "description": "With add, detach HEAD in the new working tree. See \"DETACHED HEAD\"\nin git-checkout[1]."
      },
      {
        "type": "long",
        "key": "checkout",
        "title": "--[no-]checkout",
        "description": "By default, add checks out <commit-ish>, however, --no-checkout can\nbe used to suppress checkout in order to make customizations,\nsuch as configuring sparse-checkout. See \"Sparse checkout\"\nin git-read-tree[1]."
      },
      {
        "type": "long",
        "key": "guess-remote",
        "title": "--[no-]guess-remote",
        "description": "With worktree add <path>, without <commit-ish>, instead\nof creating a new branch from HEAD, if there exists a tracking\nbranch in exactly one remote matching the basename of <path>,\nbase the new branch on the remote-tracking branch, and mark\nthe remote-tracking branch as \"upstream\" from the new branch.\n\nThis can also be set up as the default behaviour by using the\nworktree.guessRemote config option."
      },
      {
        "type": "long",
        "key": "track",
        "title": "--[no-]track",
        "description": "When creating a new branch, if <commit-ish> is a branch,\nmark it as \"upstream\" from the new branch.  This is the\ndefault if <commit-ish> is a remote-tracking branch.  See\n--track in git-branch[1] for details."
      },
      {
        "type": "long",
        "key": "lock",
        "title": "--lock",
        "description": "Keep the working tree locked after creation. This is the\nequivalent of git worktree lock after git worktree add,\nbut without a race condition."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "With prune, do not remove anything; just report what it would\nremove."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "With prune, do not remove anything; just report what it would\nremove."
      },
      {
        "type": "long",
        "key": "porcelain",
        "title": "--porcelain",
        "description": "With list, output in an easy-to-parse format for scripts.\nThis format will remain stable across Git versions and regardless of user\nconfiguration.  See below for details."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "With add, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "With add, suppress feedback messages."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "With prune, report all removals.\n\nWith list, output additional information about worktrees (see below)."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "With prune, report all removals.\n\nWith list, output additional information about worktrees (see below)."
      }
    ]
  },
  {
    "name": "git fast-export",
    "options": [
      {
        "type": "long",
        "key": "progress",
        "title": "--progress=<n>",
        "description": "Insert progress statements every <n> objects, to be shown by\ngit fast-import during import."
      },
      {
        "type": "long",
        "key": "signed-tags",
        "title": "--signed-tags=(verbatim|warn|warn-strip|strip|abort)",
        "description": "Specify how to handle signed tags.  Since any transformation\nafter the export can change the tag names (which can also happen\nwhen excluding revisions) the signatures will not match.\n\nWhen asking to abort (which is the default), this program will die\nwhen encountering a signed tag.  With strip, the tags will silently\nbe made unsigned, with warn-strip they will be made unsigned but a\nwarning will be displayed, with verbatim, they will be silently\nexported and with warn, they will be exported, but you will see a\nwarning."
      },
      {
        "type": "long",
        "key": "tag-of-filtered-object",
        "title": "--tag-of-filtered-object=(abort|drop|rewrite)",
        "description": "Specify how to handle tags whose tagged object is filtered out.\nSince revisions and files to export can be limited by path,\ntagged objects may be filtered completely.\n\nWhen asking to abort (which is the default), this program will die\nwhen encountering such a tag.  With drop it will omit such tags from\nthe output.  With rewrite, if the tagged object is a commit, it will\nrewrite the tag to tag an ancestor commit (via parent rewriting; see\ngit-rev-list[1])"
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M, -C",
        "description": "Perform move and/or copy detection, as described in the\ngit-diff[1] manual page, and use it to generate\nrename and copy commands in the output dump.\n\nNote that earlier versions of this command did not complain and\nproduced incorrect results if you gave these options."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-M, -C",
        "description": "Perform move and/or copy detection, as described in the\ngit-diff[1] manual page, and use it to generate\nrename and copy commands in the output dump.\n\nNote that earlier versions of this command did not complain and\nproduced incorrect results if you gave these options."
      },
      {
        "type": "long",
        "key": "export-marks",
        "title": "--export-marks=<file>",
        "description": "Dumps the internal marks table to <file> when complete.\nMarks are written one per line as :markid SHA-1. Only marks\nfor revisions are dumped; marks for blobs are ignored.\nBackends can use this file to validate imports after they\nhave been completed, or to save the marks table across\nincremental runs.  As <file> is only opened and truncated\nat completion, the same path can also be safely given to\n--import-marks.\nThe file will not be written if no new object has been\nmarked/exported."
      },
      {
        "type": "long",
        "key": "import-marks",
        "title": "--import-marks=<file>",
        "description": "Before processing any input, load the marks specified in\n<file>.  The input file must exist, must be readable, and\nmust use the same format as produced by --export-marks."
      },
      {
        "type": "long",
        "key": "mark-tags",
        "title": "--mark-tags",
        "description": "In addition to labelling blobs and commits with mark ids, also\nlabel tags.  This is useful in conjunction with\n--export-marks and --import-marks, and is also useful (and\nnecessary) for exporting of nested tags.  It does not hurt\nother cases and would be the default, but many fast-import\nfrontends are not prepared to accept tags with mark\nidentifiers.\n\nAny commits (or tags) that have already been marked will not be\nexported again.  If the backend uses a similar --import-marks file,\nthis allows for incremental bidirectional exporting of the repository\nby keeping the marks the same across runs."
      },
      {
        "type": "long",
        "key": "fake-missing-tagger",
        "title": "--fake-missing-tagger",
        "description": "Some old repositories have tags without a tagger.  The\nfast-import protocol was pretty strict about that, and did not\nallow that.  So fake a tagger to be able to fast-import the\noutput."
      },
      {
        "type": "long",
        "key": "use-done-feature",
        "title": "--use-done-feature",
        "description": "Start the stream with a feature done stanza, and terminate\nit with a done command."
      },
      {
        "type": "long",
        "key": "no-data",
        "title": "--no-data",
        "description": "Skip output of blob objects and instead refer to blobs via\ntheir original SHA-1 hash.  This is useful when rewriting the\ndirectory structure or history of a repository without\ntouching the contents of individual files.  Note that the\nresulting stream can only be used by a repository which\nalready contains the necessary objects."
      },
      {
        "type": "long",
        "key": "full-tree",
        "title": "--full-tree",
        "description": "This option will cause fast-export to issue a \"deleteall\"\ndirective for each commit followed by a full list of all files\nin the commit (as opposed to just listing the files which are\ndifferent from the commit’s first parent)."
      },
      {
        "type": "long",
        "key": "anonymize",
        "title": "--anonymize",
        "description": "Anonymize the contents of the repository while still retaining\nthe shape of the history and stored tree.  See the section on\nANONYMIZING below."
      },
      {
        "type": "long",
        "key": "anonymize-map",
        "title": "--anonymize-map=<from>[:<to>]",
        "description": "Convert token <from> to <to> in the anonymized output. If\n<to> is omitted, map <from> to itself (i.e., do not\nanonymize it). See the section on ANONYMIZING below."
      },
      {
        "type": "long",
        "key": "reference-excluded-parents",
        "title": "--reference-excluded-parents",
        "description": "By default, running a command such as git fast-export\nmaster~5..master will not include the commit master~5\nand will make master~4 no longer have master~5 as\na parent (though both the old master~4 and new\nmaster~4 will have all the same files).  Use\n--reference-excluded-parents to instead have the stream\nrefer to commits in the excluded range of history by their\nsha1sum.  Note that the resulting stream can only be used by a\nrepository which already contains the necessary parent\ncommits."
      },
      {
        "type": "long",
        "key": "show-original-ids",
        "title": "--show-original-ids",
        "description": "Add an extra directive to the output for commits and blobs,\noriginal-oid <SHA1SUM>.  While such directives will likely be\nignored by importers such as git-fast-import, it may be useful\nfor intermediary filters (e.g. for rewriting commit messages\nwhich refer to older commits, or for stripping blobs by id)."
      },
      {
        "type": "long",
        "key": "reencode",
        "title": "--reencode=(yes|no|abort)",
        "description": "Specify how to handle encoding header in commit objects.  When\nasking to abort (which is the default), this program will die\nwhen encountering such a commit object.  With yes, the commit\nmessage will be re-encoded into UTF-8.  With no, the original\nencoding will be preserved."
      },
      {
        "type": "long",
        "key": "refspec",
        "title": "--refspec",
        "description": "Apply the specified refspec to each ref exported. Multiple of them can\nbe specified."
      }
    ]
  },
  {
    "name": "git fast-import",
    "options": [
      {
        "type": "long",
        "key": "force",
        "title": "--force",
        "description": "Force updating modified existing branches, even if doing\nso would cause commits to be lost (as the new commit does\nnot contain the old commit)."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Disable the output shown by --stats, making fast-import usually\nbe silent when it is successful.  However, if the import stream\nhas directives intended to show user output (e.g. progress\ndirectives), the corresponding messages will still be shown."
      },
      {
        "type": "long",
        "key": "stats",
        "title": "--stats",
        "description": "Display some basic statistics about the objects fast-import has\ncreated, the packfiles they were stored into, and the\nmemory used by fast-import during this run.  Showing this output\nis currently the default, but can be disabled with --quiet."
      },
      {
        "type": "long",
        "key": "allow-unsafe-features",
        "title": "--allow-unsafe-features",
        "description": "Many command-line options can be provided as part of the\nfast-import stream itself by using the feature or option\ncommands. However, some of these options are unsafe (e.g.,\nallowing fast-import to access the filesystem outside of the\nrepository). These options are disabled by default, but can be\nallowed by providing this option on the command line.  This\ncurrently impacts only the export-marks, import-marks, and\nimport-marks-if-exists feature commands.\n\n\nOnly enable this option if you trust the program generating the\nfast-import stream! This option is enabled automatically for\nremote-helpers that use the `import` capability, as they are\nalready trusted to run their own code."
      },
      {
        "type": "long",
        "key": "cat-blob-fd",
        "title": "--cat-blob-fd=<fd>",
        "description": "Write responses to get-mark, cat-blob, and ls queries to the\nfile descriptor <fd> instead of stdout.  Allows progress\noutput intended for the end-user to be separated from other\noutput."
      },
      {
        "type": "long",
        "key": "date-format",
        "title": "--date-format=<fmt>",
        "description": "Specify the type of dates the frontend will supply to\nfast-import within author, committer and tagger commands.\nSee “Date Formats” below for details about which formats\nare supported, and their syntax."
      },
      {
        "type": "long",
        "key": "done",
        "title": "--done",
        "description": "Terminate with error if there is no done command at the end of\nthe stream.  This option might be useful for detecting errors\nthat cause the frontend to terminate before it has started to\nwrite a stream."
      },
      {
        "type": "long",
        "key": "export-marks",
        "title": "--export-marks=<file>",
        "description": "Dumps the internal marks table to <file> when complete.\nMarks are written one per line as :markid SHA-1.\nFrontends can use this file to validate imports after they\nhave been completed, or to save the marks table across\nincremental runs.  As <file> is only opened and truncated\nat checkpoint (or completion) the same path can also be\nsafely given to --import-marks."
      },
      {
        "type": "long",
        "key": "import-marks",
        "title": "--import-marks=<file>",
        "description": "Before processing any input, load the marks specified in\n<file>.  The input file must exist, must be readable, and\nmust use the same format as produced by --export-marks.\nMultiple options may be supplied to import more than one\nset of marks.  If a mark is defined to different values,\nthe last file wins."
      },
      {
        "type": "long",
        "key": "import-marks-if-exists",
        "title": "--import-marks-if-exists=<file>",
        "description": "Like --import-marks but instead of erroring out, silently\nskips the file if it does not exist."
      },
      {
        "type": "long",
        "key": "relative-marks",
        "title": "--[no-]relative-marks",
        "description": "After specifying --relative-marks the paths specified\nwith --import-marks= and --export-marks= are relative\nto an internal directory in the current repository.\nIn git-fast-import this means that the paths are relative\nto the .git/info/fast-import directory. However, other\nimporters may use a different location.\n\nRelative and non-relative marks may be combined by interweaving\n--(no-)-relative-marks with the --(import|export)-marks= options."
      },
      {
        "type": "long",
        "key": "rewrite-submodules-from",
        "title": "--rewrite-submodules-from=<name>:<file>, --rewrite-submodules-to=<name>:<file>",
        "description": "Rewrite the object IDs for the submodule specified by <name> from the values\nused in the from <file> to those used in the to <file>. The from marks should\nhave been created by git fast-export, and the to marks should have been\ncreated by git fast-import when importing that same submodule.\n\n<name> may be any arbitrary string not containing a colon character, but the\nsame value must be used with both options when specifying corresponding marks.\nMultiple submodules may be specified with different values for <name>. It is an\nerror not to use these options in corresponding pairs.\n\n\nThese options are primarily useful when converting a repository from one hash\nalgorithm to another; without them, fast-import will fail if it encounters a\nsubmodule because it has no way of writing the object ID into the new hash\nalgorithm."
      },
      {
        "type": "long",
        "key": "rewrite-submodules-to",
        "title": "--rewrite-submodules-from=<name>:<file>, --rewrite-submodules-to=<name>:<file>",
        "description": "Rewrite the object IDs for the submodule specified by <name> from the values\nused in the from <file> to those used in the to <file>. The from marks should\nhave been created by git fast-export, and the to marks should have been\ncreated by git fast-import when importing that same submodule.\n\n<name> may be any arbitrary string not containing a colon character, but the\nsame value must be used with both options when specifying corresponding marks.\nMultiple submodules may be specified with different values for <name>. It is an\nerror not to use these options in corresponding pairs.\n\n\nThese options are primarily useful when converting a repository from one hash\nalgorithm to another; without them, fast-import will fail if it encounters a\nsubmodule because it has no way of writing the object ID into the new hash\nalgorithm."
      },
      {
        "type": "long",
        "key": "active-branches",
        "title": "--active-branches=<n>",
        "description": "Maximum number of branches to maintain active at once.\nSee “Memory Utilization” below for details.  Default is 5."
      },
      {
        "type": "long",
        "key": "big-file-threshold",
        "title": "--big-file-threshold=<n>",
        "description": "Maximum size of a blob that fast-import will attempt to\ncreate a delta for, expressed in bytes.  The default is 512m\n(512 MiB).  Some importers may wish to lower this on systems\nwith constrained memory."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--depth=<n>",
        "description": "Maximum delta depth, for blob and tree deltification.\nDefault is 50."
      },
      {
        "type": "long",
        "key": "export-pack-edges",
        "title": "--export-pack-edges=<file>",
        "description": "After creating a packfile, print a line of data to\n<file> listing the filename of the packfile and the last\ncommit on each branch that was written to that packfile.\nThis information may be useful after importing projects\nwhose total object set exceeds the 4 GiB packfile limit,\nas these commits can be used as edge points during calls\nto git pack-objects."
      },
      {
        "type": "long",
        "key": "max-pack-size",
        "title": "--max-pack-size=<n>",
        "description": "Maximum size of each output packfile.\nThe default is unlimited."
      }
    ]
  },
  {
    "name": "git filter-branch",
    "options": [
      {
        "type": "long",
        "key": "prune-empty",
        "title": "--prune-empty",
        "description": "Some filters will generate empty commits that leave the tree untouched.\nThis option instructs git-filter-branch to remove such commits if they\nhave exactly one or zero non-pruned parents; merge commits will\ntherefore remain intact.  This option cannot be used together with\n--commit-filter, though the same effect can be achieved by using the\nprovided git_commit_non_empty_tree function in a commit filter."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d <directory>",
        "description": "Use this option to set the path to the temporary directory used for\nrewriting.  When applying a tree filter, the command needs to\ntemporarily check out the tree to some directory, which may consume\nconsiderable space in case of large projects.  By default it\ndoes this in the .git-rewrite/ directory but you can override\nthat choice by this parameter."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "git filter-branch refuses to start with an existing temporary\ndirectory or when there are already refs starting with\nrefs/original/, unless forced."
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "git filter-branch refuses to start with an existing temporary\ndirectory or when there are already refs starting with\nrefs/original/, unless forced."
      }
    ]
  },
  {
    "name": "git mergetool",
    "options": [
      {
        "type": "short",
        "key": "t",
        "title": "-t <tool>, --tool=<tool>",
        "description": "Use the merge resolution program specified by <tool>.\nValid values include emerge, gvimdiff, kdiff3,\nmeld, vimdiff, and tortoisemerge. Run git mergetool --tool-help\nfor the list of valid <tool> settings.\n\nIf a merge resolution program is not specified, git mergetool\nwill use the configuration variable merge.tool.  If the\nconfiguration variable merge.tool is not set, git mergetool\nwill pick a suitable default.\n\n\nYou can explicitly provide a full path to the tool by setting the\nconfiguration variable mergetool.<tool>.path. For example, you\ncan configure the absolute path to kdiff3 by setting\nmergetool.kdiff3.path. Otherwise, git mergetool assumes the\ntool is available in PATH.\n\n\nInstead of running one of the known merge tool programs,\ngit mergetool can be customized to run an alternative program\nby specifying the command line to invoke in a configuration\nvariable mergetool.<tool>.cmd.\n\n\nWhen git mergetool is invoked with this tool (either through the\n-t or --tool option or the merge.tool configuration\nvariable) the configured command line will be invoked with $BASE\nset to the name of a temporary file containing the common base for\nthe merge, if available; $LOCAL set to the name of a temporary\nfile containing the contents of the file on the current branch;\n$REMOTE set to the name of a temporary file containing the\ncontents of the file to be merged, and $MERGED set to the name\nof the file to which the merge tool should write the result of the\nmerge resolution.\n\n\nIf the custom merge tool correctly indicates the success of a\nmerge resolution with its exit code, then the configuration\nvariable mergetool.<tool>.trustExitCode can be set to true.\nOtherwise, git mergetool will prompt the user to indicate the\nsuccess of the resolution after the custom tool has exited."
      },
      {
        "type": "long",
        "key": "tool",
        "title": "-t <tool>, --tool=<tool>",
        "description": "Use the merge resolution program specified by <tool>.\nValid values include emerge, gvimdiff, kdiff3,\nmeld, vimdiff, and tortoisemerge. Run git mergetool --tool-help\nfor the list of valid <tool> settings.\n\nIf a merge resolution program is not specified, git mergetool\nwill use the configuration variable merge.tool.  If the\nconfiguration variable merge.tool is not set, git mergetool\nwill pick a suitable default.\n\n\nYou can explicitly provide a full path to the tool by setting the\nconfiguration variable mergetool.<tool>.path. For example, you\ncan configure the absolute path to kdiff3 by setting\nmergetool.kdiff3.path. Otherwise, git mergetool assumes the\ntool is available in PATH.\n\n\nInstead of running one of the known merge tool programs,\ngit mergetool can be customized to run an alternative program\nby specifying the command line to invoke in a configuration\nvariable mergetool.<tool>.cmd.\n\n\nWhen git mergetool is invoked with this tool (either through the\n-t or --tool option or the merge.tool configuration\nvariable) the configured command line will be invoked with $BASE\nset to the name of a temporary file containing the common base for\nthe merge, if available; $LOCAL set to the name of a temporary\nfile containing the contents of the file on the current branch;\n$REMOTE set to the name of a temporary file containing the\ncontents of the file to be merged, and $MERGED set to the name\nof the file to which the merge tool should write the result of the\nmerge resolution.\n\n\nIf the custom merge tool correctly indicates the success of a\nmerge resolution with its exit code, then the configuration\nvariable mergetool.<tool>.trustExitCode can be set to true.\nOtherwise, git mergetool will prompt the user to indicate the\nsuccess of the resolution after the custom tool has exited."
      },
      {
        "type": "long",
        "key": "tool-help",
        "title": "--tool-help",
        "description": "Print a list of merge tools that may be used with --tool."
      },
      {
        "type": "short",
        "key": "y",
        "title": "-y, --no-prompt",
        "description": "Don’t prompt before each invocation of the merge resolution\nprogram.\nThis is the default if the merge resolution program is\nexplicitly specified with the --tool option or with the\nmerge.tool configuration variable."
      },
      {
        "type": "long",
        "key": "no-prompt",
        "title": "-y, --no-prompt",
        "description": "Don’t prompt before each invocation of the merge resolution\nprogram.\nThis is the default if the merge resolution program is\nexplicitly specified with the --tool option or with the\nmerge.tool configuration variable."
      },
      {
        "type": "long",
        "key": "prompt",
        "title": "--prompt",
        "description": "Prompt before each invocation of the merge resolution program\nto give the user a chance to skip the path."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --gui",
        "description": "When git-mergetool is invoked with the -g or --gui option\nthe default merge tool will be read from the configured\nmerge.guitool variable instead of merge.tool. If\nmerge.guitool is not set, we will fallback to the tool\nconfigured under merge.tool."
      },
      {
        "type": "long",
        "key": "gui",
        "title": "-g, --gui",
        "description": "When git-mergetool is invoked with the -g or --gui option\nthe default merge tool will be read from the configured\nmerge.guitool variable instead of merge.tool. If\nmerge.guitool is not set, we will fallback to the tool\nconfigured under merge.tool."
      },
      {
        "type": "long",
        "key": "no-gui",
        "title": "--no-gui",
        "description": "This overrides a previous -g or --gui setting and reads the\ndefault merge tool will be read from the configured merge.tool\nvariable."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O<orderfile>",
        "description": "Process files in the order specified in the\n<orderfile>, which has one shell glob pattern per line.\nThis overrides the diff.orderFile configuration variable\n(see git-config[1]).  To cancel diff.orderFile,\nuse -O/dev/null."
      }
    ]
  },
  {
    "name": "git pack-refs",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "The command by default packs all tags and refs that are already\npacked, and leaves other refs\nalone.  This is because branches are expected to be actively\ndeveloped and packing their tips does not help performance.\nThis option causes branch tips to be packed as well.  Useful for\na repository with many branches of historical interests."
      },
      {
        "type": "long",
        "key": "no-prune",
        "title": "--no-prune",
        "description": "The command usually removes loose refs under $GIT_DIR/refs\nhierarchy after packing them.  This option tells it not to."
      }
    ]
  },
  {
    "name": "git prune",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Do not remove anything; just report what it would\nremove."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Do not remove anything; just report what it would\nremove."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Report all removed objects."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Report all removed objects."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Show progress."
      }
    ]
  },
  {
    "name": "git reflog",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Process the reflogs of all references."
      },
      {
        "type": "long",
        "key": "single-worktree",
        "title": "--single-worktree",
        "description": "By default when --all is specified, reflogs from all working\ntrees are processed. This option limits the processing to reflogs\nfrom the current working tree only."
      },
      {
        "type": "long",
        "key": "expire",
        "title": "--expire=<time>",
        "description": "Prune entries older than the specified time. If this option is\nnot specified, the expiration time is taken from the\nconfiguration setting gc.reflogExpire, which in turn\ndefaults to 90 days. --expire=all prunes entries regardless\nof their age; --expire=never turns off pruning of reachable\nentries (but see --expire-unreachable)."
      },
      {
        "type": "long",
        "key": "expire-unreachable",
        "title": "--expire-unreachable=<time>",
        "description": "Prune entries older than <time> that are not reachable from\nthe current tip of the branch. If this option is not\nspecified, the expiration time is taken from the configuration\nsetting gc.reflogExpireUnreachable, which in turn defaults\nto 30 days. --expire-unreachable=all prunes unreachable\nentries regardless of their age; --expire-unreachable=never\nturns off early pruning of unreachable entries (but see\n--expire)."
      },
      {
        "type": "long",
        "key": "updateref",
        "title": "--updateref",
        "description": "Update the reference to the value of the top reflog entry (i.e.\n<ref>@{0}) if the previous top entry was pruned.  (This\noption is ignored for symbolic references.)"
      },
      {
        "type": "long",
        "key": "rewrite",
        "title": "--rewrite",
        "description": "If a reflog entry’s predecessor is pruned, adjust its \"old\"\nSHA-1 to be equal to the \"new\" SHA-1 field of the entry that\nnow precedes it."
      },
      {
        "type": "long",
        "key": "stale-fix",
        "title": "--stale-fix",
        "description": "Prune any reflog entries that point to \"broken commits\". A\nbroken commit is a commit that is not reachable from any of\nthe reference tips and that refers, directly or indirectly, to\na missing commit, tree, or blob object.\n\nThis computation involves traversing all the reachable objects, i.e. it\nhas the same cost as git prune.  It is primarily intended to fix\ncorruption caused by garbage collecting using older versions of Git,\nwhich didn’t protect objects referred to by reflogs."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Do not actually prune any entries; just show what would have\nbeen pruned."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Do not actually prune any entries; just show what would have\nbeen pruned."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Print extra information on screen."
      }
    ]
  },
  {
    "name": "git remote",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Be a little more verbose and show remote url after name.\nNOTE: This must be placed between remote and subcommand."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Be a little more verbose and show remote url after name.\nNOTE: This must be placed between remote and subcommand."
      }
    ]
  },
  {
    "name": "git repack",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a",
        "description": "Instead of incrementally packing the unpacked objects,\npack everything referenced into a single pack.\nEspecially useful when packing a repository that is used\nfor private development. Use\nwith -d.  This will clean up the objects that git prune\nleaves behind, but git fsck --full --dangling shows as\ndangling.\n\nNote that users fetching over dumb protocols will have to fetch the\nwhole new pack in order to get any contained object, no matter how many\nother objects in that pack they already have locally.\n\n\nPromisor packfiles are repacked separately: if there are packfiles that\nhave an associated \".promisor\" file, these packfiles will be repacked\ninto another separate pack, and an empty \".promisor\" file corresponding\nto the new separate pack will be written."
      },
      {
        "type": "short",
        "key": "A",
        "title": "-A",
        "description": "Same as -a, unless -d is used.  Then any unreachable\nobjects in a previous pack become loose, unpacked objects,\ninstead of being left in the old pack.  Unreachable objects\nare never intentionally added to a pack, even when repacking.\nThis option prevents unreachable objects from being immediately\ndeleted by way of being left in the old pack and then\nremoved.  Instead, the loose unreachable objects\nwill be pruned according to normal expiry rules\nwith the next git gc invocation. See git-gc[1]."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d",
        "description": "After packing, if the newly created packs make some\nexisting packs redundant, remove the redundant packs.\nAlso run  git prune-packed to remove redundant\nloose object files."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l",
        "description": "Pass the --local option to git pack-objects. See\ngit-pack-objects[1]."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f",
        "description": "Pass the --no-reuse-delta option to git-pack-objects, see\ngit-pack-objects[1]."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F",
        "description": "Pass the --no-reuse-object option to git-pack-objects, see\ngit-pack-objects[1]."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "Pass the -q option to git pack-objects. See\ngit-pack-objects[1]."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n",
        "description": "Do not update the server information with\ngit update-server-info.  This option skips\nupdating local catalog files needed to publish\nthis repository (or a direct copy of it)\nover HTTP or FTP.  See git-update-server-info[1]."
      },
      {
        "type": "long",
        "key": "window",
        "title": "--window=<n>, --depth=<n>",
        "description": "These two options affect how the objects contained in the pack are\nstored using delta compression. The objects are first internally\nsorted by type, size and optionally names and compared against the\nother objects within --window to see if using delta compression saves\nspace. --depth limits the maximum delta depth; making it too deep\naffects the performance on the unpacker side, because delta data needs\nto be applied that many times to get to the necessary object.\n\nThe default value for --window is 10 and --depth is 50. The maximum\ndepth is 4095."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--window=<n>, --depth=<n>",
        "description": "These two options affect how the objects contained in the pack are\nstored using delta compression. The objects are first internally\nsorted by type, size and optionally names and compared against the\nother objects within --window to see if using delta compression saves\nspace. --depth limits the maximum delta depth; making it too deep\naffects the performance on the unpacker side, because delta data needs\nto be applied that many times to get to the necessary object.\n\nThe default value for --window is 10 and --depth is 50. The maximum\ndepth is 4095."
      },
      {
        "type": "long",
        "key": "threads",
        "title": "--threads=<n>",
        "description": "This option is passed through to git pack-objects."
      },
      {
        "type": "long",
        "key": "window-memory",
        "title": "--window-memory=<n>",
        "description": "This option provides an additional limit on top of --window;\nthe window size will dynamically scale down so as to not take\nup more than <n> bytes in memory.  This is useful in\nrepositories with a mix of large and small objects to not run\nout of memory with a large window, but still be able to take\nadvantage of the large window for the smaller objects.  The\nsize can be suffixed with \"k\", \"m\", or \"g\".\n--window-memory=0 makes memory usage unlimited.  The default\nis taken from the pack.windowMemory configuration variable.\nNote that the actual memory usage will be the limit multiplied\nby the number of threads used by git-pack-objects[1]."
      },
      {
        "type": "long",
        "key": "max-pack-size",
        "title": "--max-pack-size=<n>",
        "description": "Maximum size of each output pack file. The size can be suffixed with\n\"k\", \"m\", or \"g\". The minimum size allowed is limited to 1 MiB.\nIf specified, multiple packfiles may be created, which also\nprevents the creation of a bitmap index.\nThe default is unlimited, unless the config variable\npack.packSizeLimit is set. Note that this option may result in\na larger and slower repository; see the discussion in\npack.packSizeLimit."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --write-bitmap-index",
        "description": "Write a reachability bitmap index as part of the repack. This\nonly makes sense when used with -a or -A, as the bitmaps\nmust be able to refer to all reachable objects. This option\noverrides the setting of repack.writeBitmaps.  This option\nhas no effect if multiple packfiles are created."
      },
      {
        "type": "long",
        "key": "write-bitmap-index",
        "title": "-b, --write-bitmap-index",
        "description": "Write a reachability bitmap index as part of the repack. This\nonly makes sense when used with -a or -A, as the bitmaps\nmust be able to refer to all reachable objects. This option\noverrides the setting of repack.writeBitmaps.  This option\nhas no effect if multiple packfiles are created."
      },
      {
        "type": "long",
        "key": "pack-kept-objects",
        "title": "--pack-kept-objects",
        "description": "Include objects in .keep files when repacking.  Note that we\nstill do not delete .keep packs after pack-objects finishes.\nThis means that we may duplicate objects, but this makes the\noption safe to use when there are concurrent pushes or fetches.\nThis option is generally only useful if you are writing bitmaps\nwith -b or repack.writeBitmaps, as it ensures that the\nbitmapped packfile has the necessary objects."
      },
      {
        "type": "long",
        "key": "keep-pack",
        "title": "--keep-pack=<pack-name>",
        "description": "Exclude the given pack from repacking. This is the equivalent\nof having .keep file on the pack. <pack-name> is the\npack file name without leading directory (e.g. pack-123.pack).\nThe option could be specified multiple times to keep multiple\npacks."
      },
      {
        "type": "long",
        "key": "unpack-unreachable",
        "title": "--unpack-unreachable=<when>",
        "description": "When loosening unreachable objects, do not bother loosening any\nobjects older than <when>. This can be used to optimize out\nthe write of any objects that would be immediately pruned by\na follow-up git prune."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep-unreachable",
        "description": "When used with -ad, any unreachable objects from existing\npacks will be appended to the end of the packfile instead of\nbeing removed. In addition, any unreachable loose objects will\nbe packed (and their loose counterparts removed)."
      },
      {
        "type": "long",
        "key": "keep-unreachable",
        "title": "-k, --keep-unreachable",
        "description": "When used with -ad, any unreachable objects from existing\npacks will be appended to the end of the packfile instead of\nbeing removed. In addition, any unreachable loose objects will\nbe packed (and their loose counterparts removed)."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --delta-islands",
        "description": "Pass the --delta-islands option to git-pack-objects, see\ngit-pack-objects[1]."
      },
      {
        "type": "long",
        "key": "delta-islands",
        "title": "-i, --delta-islands",
        "description": "Pass the --delta-islands option to git-pack-objects, see\ngit-pack-objects[1]."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g=<factor>, --geometric=<factor>",
        "description": "Arrange resulting pack structure so that each successive pack\ncontains at least <factor> times the number of objects as the\nnext-largest pack.\n\ngit repack ensures this by determining a \"cut\" of packfiles that need\nto be repacked into one in order to ensure a geometric progression. It\npicks the smallest set of packfiles such that as many of the larger\npackfiles (by count of objects contained in that pack) may be left\nintact.\n\n\nUnlike other repack modes, the set of objects to pack is determined\nuniquely by the set of packs being \"rolled-up\"; in other words, the\npacks determined to need to be combined in order to restore a geometric\nprogression.\n\n\nWhen --unpacked is specified, loose objects are implicitly included in\nthis \"roll-up\", without respect to their reachability. This is subject\nto change in the future. This option (implying a drastically different\nrepack mode) is not guaranteed to work with all other combinations of\noption to git repack."
      },
      {
        "type": "long",
        "key": "geometric",
        "title": "-g=<factor>, --geometric=<factor>",
        "description": "Arrange resulting pack structure so that each successive pack\ncontains at least <factor> times the number of objects as the\nnext-largest pack.\n\ngit repack ensures this by determining a \"cut\" of packfiles that need\nto be repacked into one in order to ensure a geometric progression. It\npicks the smallest set of packfiles such that as many of the larger\npackfiles (by count of objects contained in that pack) may be left\nintact.\n\n\nUnlike other repack modes, the set of objects to pack is determined\nuniquely by the set of packs being \"rolled-up\"; in other words, the\npacks determined to need to be combined in order to restore a geometric\nprogression.\n\n\nWhen --unpacked is specified, loose objects are implicitly included in\nthis \"roll-up\", without respect to their reachability. This is subject\nto change in the future. This option (implying a drastically different\nrepack mode) is not guaranteed to work with all other combinations of\noption to git repack."
      }
    ]
  },
  {
    "name": "git annotate",
    "options": [
      {
        "type": "short",
        "key": "b",
        "title": "-b",
        "description": "Show blank SHA-1 for boundary commits.  This can also\nbe controlled via the blame.blankBoundary config option."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root",
        "description": "Do not treat root commits as boundaries.  This can also be\ncontrolled via the blame.showRoot config option."
      },
      {
        "type": "long",
        "key": "show-stats",
        "title": "--show-stats",
        "description": "Include additional statistics at the end of blame output."
      },
      {
        "type": "short",
        "key": "L",
        "title": "-L <start>, <end>, -L :<funcname>",
        "description": "Annotate only the line range given by <start>,<end>,\nor by the function name regex <funcname>.\nMay be specified multiple times. Overlapping ranges are allowed.\n\n<start> and <end> are optional. -L <start> or -L <start>, spans from\n<start> to end of file. -L ,<end> spans from start of file to <end>.\n\n\n<start> and <end> can take one of these forms:\n\n\n\n\nnumber\n\nIf <start> or <end> is a number, it specifies an\nabsolute line number (lines count from 1).\n\n\n\n/regex/\n\nThis form will use the first line matching the given\nPOSIX regex. If <start> is a regex, it will search from the end of\nthe previous -L range, if any, otherwise from the start of file.\nIf <start> is ^/regex/, it will search from the start of file.\nIf <end> is a regex, it will search\nstarting at the line given by <start>.\n\n\n\n+offset or -offset\n\nThis is only valid for <end> and will specify a number\nof lines before or after the line given by <start>.\n\n\n\n\n\nIf :<funcname> is given in place of <start> and <end>, it is a\nregular expression that denotes the range from the first funcname line\nthat matches <funcname>, up to the next funcname line. :<funcname>\nsearches from the end of the previous -L range, if any, otherwise\nfrom the start of file. ^:<funcname> searches from the start of\nfile. The function names are determined in the same way as git diff\nworks out patch hunk headers (see Defining a custom hunk-header\nin gitattributes[5])."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l",
        "description": "Show long rev (Default: off)."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t",
        "description": "Show raw timestamp (Default: off)."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S <revs-file>",
        "description": "Use revisions from revs-file instead of calling git-rev-list[1]."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge\ncommit. This option can be used to determine when a line\nwas introduced to a particular integration branch, rather\nthan when it was introduced to the history overall."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --porcelain",
        "description": "Show in a format designed for machine consumption."
      },
      {
        "type": "long",
        "key": "porcelain",
        "title": "-p, --porcelain",
        "description": "Show in a format designed for machine consumption."
      },
      {
        "type": "long",
        "key": "line-porcelain",
        "title": "--line-porcelain",
        "description": "Show the porcelain format, but output commit information for\neach line, not just the first time a commit is referenced.\nImplies --porcelain."
      },
      {
        "type": "long",
        "key": "incremental",
        "title": "--incremental",
        "description": "Show the result incrementally in a format designed for\nmachine consumption."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "Specifies the encoding used to output author names\nand commit summaries. Setting it to none makes blame\noutput unconverted data. For more information see the\ndiscussion about encoding in the git-log[1]\nmanual page."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--[no-]progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal. This flag\nenables progress reporting even if not attached to a\nterminal. Can’t use --progress together with --porcelain\nor --incremental."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<num>]",
        "description": "Detect moved or copied lines within a file. When a commit\nmoves or copies a block of lines (e.g. the original file\nhas A and then B, and the commit changes it to B and then\nA), the traditional blame algorithm notices only half of\nthe movement and typically blames the lines that were moved\nup (i.e. B) to the parent and assigns blame to the lines that\nwere moved down (i.e. A) to the child commit.  With this\noption, both groups of lines are blamed on the parent by\nrunning extra passes of inspection.\n\n<num> is optional but it is the lower bound on the number of\nalphanumeric characters that Git must detect as moving/copying\nwithin a file for it to associate those lines with the parent\ncommit. The default value is 20."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<num>]",
        "description": "In addition to -M, detect lines moved or copied from other\nfiles that were modified in the same commit.  This is\nuseful when you reorganize your program and move code\naround across files.  When this option is given twice,\nthe command additionally looks for copies from other\nfiles in the commit that creates the file. When this\noption is given three times, the command additionally\nlooks for copies from other files in any commit.\n\n<num> is optional but it is the lower bound on the number of\nalphanumeric characters that Git must detect as moving/copying\nbetween files for it to associate those lines with the parent\ncommit. And the default value is 40. If there are more than one\n-C options given, the <num> argument of the last -C will\ntake effect."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h",
        "description": "Show help message."
      }
    ]
  },
  {
    "name": "git blame",
    "options": [
      {
        "type": "short",
        "key": "b",
        "title": "-b",
        "description": "Show blank SHA-1 for boundary commits.  This can also\nbe controlled via the blame.blankBoundary config option."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root",
        "description": "Do not treat root commits as boundaries.  This can also be\ncontrolled via the blame.showRoot config option."
      },
      {
        "type": "long",
        "key": "show-stats",
        "title": "--show-stats",
        "description": "Include additional statistics at the end of blame output."
      },
      {
        "type": "short",
        "key": "L",
        "title": "-L <start>, <end>, -L :<funcname>",
        "description": "Annotate only the line range given by <start>,<end>,\nor by the function name regex <funcname>.\nMay be specified multiple times. Overlapping ranges are allowed.\n\n<start> and <end> are optional. -L <start> or -L <start>, spans from\n<start> to end of file. -L ,<end> spans from start of file to <end>.\n\n\n<start> and <end> can take one of these forms:\n\n\n\n\nnumber\n\nIf <start> or <end> is a number, it specifies an\nabsolute line number (lines count from 1).\n\n\n\n/regex/\n\nThis form will use the first line matching the given\nPOSIX regex. If <start> is a regex, it will search from the end of\nthe previous -L range, if any, otherwise from the start of file.\nIf <start> is ^/regex/, it will search from the start of file.\nIf <end> is a regex, it will search\nstarting at the line given by <start>.\n\n\n\n+offset or -offset\n\nThis is only valid for <end> and will specify a number\nof lines before or after the line given by <start>.\n\n\n\n\n\nIf :<funcname> is given in place of <start> and <end>, it is a\nregular expression that denotes the range from the first funcname line\nthat matches <funcname>, up to the next funcname line. :<funcname>\nsearches from the end of the previous -L range, if any, otherwise\nfrom the start of file. ^:<funcname> searches from the start of\nfile. The function names are determined in the same way as git diff\nworks out patch hunk headers (see Defining a custom hunk-header\nin gitattributes[5])."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l",
        "description": "Show long rev (Default: off)."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t",
        "description": "Show raw timestamp (Default: off)."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S <revs-file>",
        "description": "Use revisions from revs-file instead of calling git-rev-list[1]."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge\ncommit. This option can be used to determine when a line\nwas introduced to a particular integration branch, rather\nthan when it was introduced to the history overall."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --porcelain",
        "description": "Show in a format designed for machine consumption."
      },
      {
        "type": "long",
        "key": "porcelain",
        "title": "-p, --porcelain",
        "description": "Show in a format designed for machine consumption."
      },
      {
        "type": "long",
        "key": "line-porcelain",
        "title": "--line-porcelain",
        "description": "Show the porcelain format, but output commit information for\neach line, not just the first time a commit is referenced.\nImplies --porcelain."
      },
      {
        "type": "long",
        "key": "incremental",
        "title": "--incremental",
        "description": "Show the result incrementally in a format designed for\nmachine consumption."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "Specifies the encoding used to output author names\nand commit summaries. Setting it to none makes blame\noutput unconverted data. For more information see the\ndiscussion about encoding in the git-log[1]\nmanual page."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--[no-]progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal. This flag\nenables progress reporting even if not attached to a\nterminal. Can’t use --progress together with --porcelain\nor --incremental."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<num>]",
        "description": "Detect moved or copied lines within a file. When a commit\nmoves or copies a block of lines (e.g. the original file\nhas A and then B, and the commit changes it to B and then\nA), the traditional blame algorithm notices only half of\nthe movement and typically blames the lines that were moved\nup (i.e. B) to the parent and assigns blame to the lines that\nwere moved down (i.e. A) to the child commit.  With this\noption, both groups of lines are blamed on the parent by\nrunning extra passes of inspection.\n\n<num> is optional but it is the lower bound on the number of\nalphanumeric characters that Git must detect as moving/copying\nwithin a file for it to associate those lines with the parent\ncommit. The default value is 20."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<num>]",
        "description": "In addition to -M, detect lines moved or copied from other\nfiles that were modified in the same commit.  This is\nuseful when you reorganize your program and move code\naround across files.  When this option is given twice,\nthe command additionally looks for copies from other\nfiles in the commit that creates the file. When this\noption is given three times, the command additionally\nlooks for copies from other files in any commit.\n\n<num> is optional but it is the lower bound on the number of\nalphanumeric characters that Git must detect as moving/copying\nbetween files for it to associate those lines with the parent\ncommit. And the default value is 40. If there are more than one\n-C options given, the <num> argument of the last -C will\ntake effect."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h",
        "description": "Show help message."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c",
        "description": "Use the same output mode as git-annotate[1] (Default: off)."
      },
      {
        "type": "long",
        "key": "score-debug",
        "title": "--score-debug",
        "description": "Include debugging information related to the movement of\nlines between files (see -C) and lines moved within a\nfile (see -M).  The first number listed is the score.\nThis is the number of alphanumeric characters detected\nas having been moved between or within files.  This must be above\na certain threshold for git blame to consider those lines\nof code to have been moved."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --show-name",
        "description": "Show the filename in the original commit.  By default\nthe filename is shown if there is any line that came from a\nfile with a different name, due to rename detection."
      },
      {
        "type": "long",
        "key": "show-name",
        "title": "-f, --show-name",
        "description": "Show the filename in the original commit.  By default\nthe filename is shown if there is any line that came from a\nfile with a different name, due to rename detection."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --show-number",
        "description": "Show the line number in the original commit (Default: off)."
      },
      {
        "type": "long",
        "key": "show-number",
        "title": "-n, --show-number",
        "description": "Show the line number in the original commit (Default: off)."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s",
        "description": "Suppress the author name and timestamp from the output."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --show-email",
        "description": "Show the author email instead of author name (Default: off).\nThis can also be controlled via the blame.showEmail config\noption."
      },
      {
        "type": "long",
        "key": "show-email",
        "title": "-e, --show-email",
        "description": "Show the author email instead of author name (Default: off).\nThis can also be controlled via the blame.showEmail config\noption."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w",
        "description": "Ignore whitespace when comparing the parent’s version and\nthe child’s to find where the lines came from."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev=<n>",
        "description": "Instead of using the default 7+1 hexadecimal digits as the\nabbreviated object name, use <m>+1 digits, where <m> is at\nleast <n> but ensures the commit object names are unique.\nNote that 1 column\nis used for a caret to mark the boundary commit."
      }
    ]
  },
  {
    "name": "git bugreport",
    "options": [
      {
        "type": "short",
        "key": "o",
        "title": "-o <path>, --output-directory <path>",
        "description": "Place the resulting bug report file in <path> instead of the root of\nthe Git repository."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s <format>, --suffix <format>",
        "description": "Specify an alternate suffix for the bugreport name, to create a file\nnamed git-bugreport-<formatted suffix>. This should take the form of a\nstrftime(3) format string; the current local time will be used."
      }
    ]
  },
  {
    "name": "git count-objects",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Report in more detail:\n\ncount: the number of loose objects\n\n\nsize: disk space consumed by loose objects, in KiB (unless -H is specified)\n\n\nin-pack: the number of in-pack objects\n\n\nsize-pack: disk space consumed by the packs, in KiB (unless -H is specified)\n\n\nprune-packable: the number of loose objects that are also present in\nthe packs. These objects could be pruned using git prune-packed.\n\n\ngarbage: the number of files in object database that are neither valid loose\nobjects nor valid packs\n\n\nsize-garbage: disk space consumed by garbage files, in KiB (unless -H is\nspecified)\n\n\nalternate: absolute path of alternate object databases; may appear\nmultiple times, one line per path. Note that if the path contains\nnon-printable characters, it may be surrounded by double-quotes and\ncontain C-style backslashed escape sequences."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Report in more detail:\n\ncount: the number of loose objects\n\n\nsize: disk space consumed by loose objects, in KiB (unless -H is specified)\n\n\nin-pack: the number of in-pack objects\n\n\nsize-pack: disk space consumed by the packs, in KiB (unless -H is specified)\n\n\nprune-packable: the number of loose objects that are also present in\nthe packs. These objects could be pruned using git prune-packed.\n\n\ngarbage: the number of files in object database that are neither valid loose\nobjects nor valid packs\n\n\nsize-garbage: disk space consumed by garbage files, in KiB (unless -H is\nspecified)\n\n\nalternate: absolute path of alternate object databases; may appear\nmultiple times, one line per path. Note that if the path contains\nnon-printable characters, it may be surrounded by double-quotes and\ncontain C-style backslashed escape sequences."
      },
      {
        "type": "short",
        "key": "H",
        "title": "-H, --human-readable",
        "description": "Print sizes in human readable format"
      },
      {
        "type": "long",
        "key": "human-readable",
        "title": "-H, --human-readable",
        "description": "Print sizes in human readable format"
      }
    ]
  },
  {
    "name": "git difftool",
    "options": [
      {
        "type": "short",
        "key": "d",
        "title": "-d, --dir-diff",
        "description": "Copy the modified files to a temporary location and perform\na directory diff on them. This mode never prompts before\nlaunching the diff tool."
      },
      {
        "type": "long",
        "key": "dir-diff",
        "title": "-d, --dir-diff",
        "description": "Copy the modified files to a temporary location and perform\na directory diff on them. This mode never prompts before\nlaunching the diff tool."
      },
      {
        "type": "short",
        "key": "y",
        "title": "-y, --no-prompt",
        "description": "Do not prompt before launching a diff tool."
      },
      {
        "type": "long",
        "key": "no-prompt",
        "title": "-y, --no-prompt",
        "description": "Do not prompt before launching a diff tool."
      },
      {
        "type": "long",
        "key": "prompt",
        "title": "--prompt",
        "description": "Prompt before each invocation of the diff tool.\nThis is the default behaviour; the option is provided to\noverride any configuration settings."
      },
      {
        "type": "long",
        "key": "rotate-to",
        "title": "--rotate-to=<file>",
        "description": "Start showing the diff for the given path,\nthe paths before it will move to end and output."
      },
      {
        "type": "long",
        "key": "skip-to",
        "title": "--skip-to=<file>",
        "description": "Start showing the diff for the given path, skipping all\nthe paths before it."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t <tool>, --tool=<tool>",
        "description": "Use the diff tool specified by <tool>.  Valid values include\nemerge, kompare, meld, and vimdiff. Run git difftool --tool-help\nfor the list of valid <tool> settings.\n\nIf a diff tool is not specified, git difftool\nwill use the configuration variable diff.tool.  If the\nconfiguration variable diff.tool is not set, git difftool\nwill pick a suitable default.\n\n\nYou can explicitly provide a full path to the tool by setting the\nconfiguration variable difftool.<tool>.path. For example, you\ncan configure the absolute path to kdiff3 by setting\ndifftool.kdiff3.path. Otherwise, git difftool assumes the\ntool is available in PATH.\n\n\nInstead of running one of the known diff tools,\ngit difftool can be customized to run an alternative program\nby specifying the command line to invoke in a configuration\nvariable difftool.<tool>.cmd.\n\n\nWhen git difftool is invoked with this tool (either through the\n-t or --tool option or the diff.tool configuration variable)\nthe configured command line will be invoked with the following\nvariables available: $LOCAL is set to the name of the temporary\nfile containing the contents of the diff pre-image and $REMOTE\nis set to the name of the temporary file containing the contents\nof the diff post-image.  $MERGED is the name of the file which is\nbeing compared. $BASE is provided for compatibility\nwith custom merge tool commands and has the same value as $MERGED."
      },
      {
        "type": "long",
        "key": "tool",
        "title": "-t <tool>, --tool=<tool>",
        "description": "Use the diff tool specified by <tool>.  Valid values include\nemerge, kompare, meld, and vimdiff. Run git difftool --tool-help\nfor the list of valid <tool> settings.\n\nIf a diff tool is not specified, git difftool\nwill use the configuration variable diff.tool.  If the\nconfiguration variable diff.tool is not set, git difftool\nwill pick a suitable default.\n\n\nYou can explicitly provide a full path to the tool by setting the\nconfiguration variable difftool.<tool>.path. For example, you\ncan configure the absolute path to kdiff3 by setting\ndifftool.kdiff3.path. Otherwise, git difftool assumes the\ntool is available in PATH.\n\n\nInstead of running one of the known diff tools,\ngit difftool can be customized to run an alternative program\nby specifying the command line to invoke in a configuration\nvariable difftool.<tool>.cmd.\n\n\nWhen git difftool is invoked with this tool (either through the\n-t or --tool option or the diff.tool configuration variable)\nthe configured command line will be invoked with the following\nvariables available: $LOCAL is set to the name of the temporary\nfile containing the contents of the diff pre-image and $REMOTE\nis set to the name of the temporary file containing the contents\nof the diff post-image.  $MERGED is the name of the file which is\nbeing compared. $BASE is provided for compatibility\nwith custom merge tool commands and has the same value as $MERGED."
      },
      {
        "type": "long",
        "key": "tool-help",
        "title": "--tool-help",
        "description": "Print a list of diff tools that may be used with --tool."
      },
      {
        "type": "long",
        "key": "symlinks",
        "title": "--[no-]symlinks",
        "description": "git difftool's default behavior is create symlinks to the\nworking tree when run in --dir-diff mode and the right-hand\nside of the comparison yields the same content as the file in\nthe working tree.\n\nSpecifying --no-symlinks instructs git difftool to create copies\ninstead.  --no-symlinks is the default on Windows."
      },
      {
        "type": "short",
        "key": "x",
        "title": "-x <command>, --extcmd=<command>",
        "description": "Specify a custom command for viewing diffs.\ngit-difftool ignores the configured defaults and runs\n$command $LOCAL $REMOTE when this option is specified.\nAdditionally, $BASE is set in the environment."
      },
      {
        "type": "long",
        "key": "extcmd",
        "title": "-x <command>, --extcmd=<command>",
        "description": "Specify a custom command for viewing diffs.\ngit-difftool ignores the configured defaults and runs\n$command $LOCAL $REMOTE when this option is specified.\nAdditionally, $BASE is set in the environment."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --[no-]gui",
        "description": "When git-difftool is invoked with the -g or --gui option\nthe default diff tool will be read from the configured\ndiff.guitool variable instead of diff.tool. The --no-gui\noption can be used to override this setting. If diff.guitool\nis not set, we will fallback in the order of merge.guitool,\ndiff.tool, merge.tool until a tool is found."
      },
      {
        "type": "long",
        "key": "gui",
        "title": "-g, --[no-]gui",
        "description": "When git-difftool is invoked with the -g or --gui option\nthe default diff tool will be read from the configured\ndiff.guitool variable instead of diff.tool. The --no-gui\noption can be used to override this setting. If diff.guitool\nis not set, we will fallback in the order of merge.guitool,\ndiff.tool, merge.tool until a tool is found."
      },
      {
        "type": "long",
        "key": "trust-exit-code",
        "title": "--[no-]trust-exit-code",
        "description": "git-difftool invokes a diff tool individually on each file.\nErrors reported by the diff tool are ignored by default.\nUse --trust-exit-code to make git-difftool exit when an\ninvoked diff tool returns a non-zero exit code.\n\ngit-difftool will forward the exit code of the invoked tool when\n--trust-exit-code is used."
      }
    ]
  },
  {
    "name": "git fsck",
    "options": [
      {
        "type": "long",
        "key": "unreachable",
        "title": "--unreachable",
        "description": "Print out objects that exist but that aren’t reachable from any\nof the reference nodes."
      },
      {
        "type": "long",
        "key": "dangling",
        "title": "--[no-]dangling",
        "description": "Print objects that exist but that are never directly used (default).\n--no-dangling can be used to omit this information from the output."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root",
        "description": "Report root nodes."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--tags",
        "description": "Report tags."
      },
      {
        "type": "long",
        "key": "cache",
        "title": "--cache",
        "description": "Consider any object recorded in the index also as a head node for\nan unreachability trace."
      },
      {
        "type": "long",
        "key": "no-reflogs",
        "title": "--no-reflogs",
        "description": "Do not consider commits that are referenced only by an\nentry in a reflog to be reachable.  This option is meant\nonly to search for commits that used to be in a ref, but\nnow aren’t, but are still in that corresponding reflog."
      },
      {
        "type": "long",
        "key": "full",
        "title": "--full",
        "description": "Check not just objects in GIT_OBJECT_DIRECTORY\n($GIT_DIR/objects), but also the ones found in alternate\nobject pools listed in GIT_ALTERNATE_OBJECT_DIRECTORIES\nor $GIT_DIR/objects/info/alternates,\nand in packed Git archives found in $GIT_DIR/objects/pack\nand corresponding pack subdirectories in alternate\nobject pools.  This is now default; you can turn it off\nwith --no-full."
      },
      {
        "type": "long",
        "key": "connectivity-only",
        "title": "--connectivity-only",
        "description": "Check only the connectivity of reachable objects, making sure\nthat any objects referenced by a reachable tag, commit, or tree\nis present. This speeds up the operation by avoiding reading\nblobs entirely (though it does still check that referenced blobs\nexist). This will detect corruption in commits and trees, but\nnot do any semantic checks (e.g., for format errors). Corruption\nin blob objects will not be detected at all.\n\nUnreachable tags, commits, and trees will also be accessed to find the\ntips of dangling segments of history. Use --no-dangling if you don’t\ncare about this output and want to speed it up further."
      },
      {
        "type": "long",
        "key": "strict",
        "title": "--strict",
        "description": "Enable more strict checking, namely to catch a file mode\nrecorded with g+w bit set, which was created by older\nversions of Git.  Existing repositories, including the\nLinux kernel, Git itself, and sparse repository have old\nobjects that triggers this check, but it is recommended\nto check new projects with this flag."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Be chatty."
      },
      {
        "type": "long",
        "key": "lost-found",
        "title": "--lost-found",
        "description": "Write dangling objects into .git/lost-found/commit/ or\n.git/lost-found/other/, depending on type.  If the object is\na blob, the contents are written into the file, rather than\nits object name."
      },
      {
        "type": "long",
        "key": "name-objects",
        "title": "--name-objects",
        "description": "When displaying names of reachable objects, in addition to the\nSHA-1 also display a name that describes how they are reachable,\ncompatible with git-rev-parse[1], e.g.\nHEAD@{1234567890}~25^2:src/."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--[no-]progress",
        "description": "Progress status is reported on the standard error stream by\ndefault when it is attached to a terminal, unless\n--no-progress or --verbose is specified. --progress forces\nprogress status even if the standard error stream is not\ndirected to a terminal."
      }
    ]
  },
  {
    "name": "git instaweb",
    "options": [
      {
        "type": "short",
        "key": "l",
        "title": "-l, --local",
        "description": "Only bind the web server to the local IP (127.0.0.1)."
      },
      {
        "type": "long",
        "key": "local",
        "title": "-l, --local",
        "description": "Only bind the web server to the local IP (127.0.0.1)."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --httpd",
        "description": "The HTTP daemon command-line that will be executed.\nCommand-line options may be specified here, and the\nconfiguration file will be added at the end of the command-line.\nCurrently apache2, lighttpd, mongoose, plackup, python and\nwebrick are supported.\n(Default: lighttpd)"
      },
      {
        "type": "long",
        "key": "httpd",
        "title": "-d, --httpd",
        "description": "The HTTP daemon command-line that will be executed.\nCommand-line options may be specified here, and the\nconfiguration file will be added at the end of the command-line.\nCurrently apache2, lighttpd, mongoose, plackup, python and\nwebrick are supported.\n(Default: lighttpd)"
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --module-path",
        "description": "The module path (only needed if httpd is Apache).\n(Default: /usr/lib/apache2/modules)"
      },
      {
        "type": "long",
        "key": "module-path",
        "title": "-m, --module-path",
        "description": "The module path (only needed if httpd is Apache).\n(Default: /usr/lib/apache2/modules)"
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p, --port",
        "description": "The port number to bind the httpd to.  (Default: 1234)"
      },
      {
        "type": "long",
        "key": "port",
        "title": "-p, --port",
        "description": "The port number to bind the httpd to.  (Default: 1234)"
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --browser",
        "description": "The web browser that should be used to view the gitweb\npage. This will be passed to the git web--browse helper\nscript along with the URL of the gitweb instance. See\ngit-web--browse[1] for more information about this. If\nthe script fails, the URL will be printed to stdout."
      },
      {
        "type": "long",
        "key": "browser",
        "title": "-b, --browser",
        "description": "The web browser that should be used to view the gitweb\npage. This will be passed to the git web--browse helper\nscript along with the URL of the gitweb instance. See\ngit-web--browse[1] for more information about this. If\nthe script fails, the URL will be printed to stdout."
      },
      {
        "type": "long",
        "key": "start",
        "title": "start, --start",
        "description": "Start the httpd instance and exit.  Regenerate configuration files\nas necessary for spawning a new instance."
      },
      {
        "type": "long",
        "key": "stop",
        "title": "stop, --stop",
        "description": "Stop the httpd instance and exit.  This does not generate\nany of the configuration files for spawning a new instance,\nnor does it close the browser."
      },
      {
        "type": "long",
        "key": "restart",
        "title": "restart, --restart",
        "description": "Restart the httpd instance and exit.  Regenerate configuration files\nas necessary for spawning a new instance."
      }
    ]
  },
  {
    "name": "git merge-tree",
    "options": []
  },
  {
    "name": "git rerere",
    "options": []
  },
  {
    "name": "git show-branch",
    "options": [
      {
        "type": "short",
        "key": "r",
        "title": "-r, --remotes",
        "description": "Show the remote-tracking branches."
      },
      {
        "type": "long",
        "key": "remotes",
        "title": "-r, --remotes",
        "description": "Show the remote-tracking branches."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "Show both remote-tracking branches and local branches."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "Show both remote-tracking branches and local branches."
      },
      {
        "type": "long",
        "key": "current",
        "title": "--current",
        "description": "With this option, the command includes the current\nbranch to the list of revs to be shown when it is not\ngiven on the command line."
      },
      {
        "type": "long",
        "key": "topo-order",
        "title": "--topo-order",
        "description": "By default, the branches and their commits are shown in\nreverse chronological order.  This option makes them\nappear in topological order (i.e., descendant commits\nare shown before their parents)."
      },
      {
        "type": "long",
        "key": "date-order",
        "title": "--date-order",
        "description": "This option is similar to --topo-order in the sense that no\nparent comes before all of its children, but otherwise commits\nare ordered according to their commit date."
      },
      {
        "type": "long",
        "key": "sparse",
        "title": "--sparse",
        "description": "By default, the output omits merges that are reachable\nfrom only one tip being shown.  This option makes them\nvisible."
      },
      {
        "type": "long",
        "key": "more",
        "title": "--more=<n>",
        "description": "Usually the command stops output upon showing the commit\nthat is the common ancestor of all the branches.  This\nflag tells the command to go <n> more common commits\nbeyond that.  When <n> is negative, display only the\n<reference>s given, without showing the commit ancestry\ntree."
      },
      {
        "type": "long",
        "key": "list",
        "title": "--list",
        "description": "Synonym to --more=-1"
      },
      {
        "type": "long",
        "key": "merge-base",
        "title": "--merge-base",
        "description": "Instead of showing the commit list, determine possible\nmerge bases for the specified commits. All merge bases\nwill be contained in all specified commits. This is\ndifferent from how git-merge-base[1] handles\nthe case of three or more commits."
      },
      {
        "type": "long",
        "key": "independent",
        "title": "--independent",
        "description": "Among the <reference>s given, display only the ones that\ncannot be reached from any other <reference>."
      },
      {
        "type": "long",
        "key": "no-name",
        "title": "--no-name",
        "description": "Do not show naming strings for each commit."
      },
      {
        "type": "long",
        "key": "sha1-name",
        "title": "--sha1-name",
        "description": "Instead of naming the commits using the path to reach\nthem from heads (e.g. \"master~2\" to mean the grandparent\nof \"master\"), name them with the unique prefix of their\nobject names."
      },
      {
        "type": "long",
        "key": "topics",
        "title": "--topics",
        "description": "Shows only commits that are NOT on the first branch given.\nThis helps track topic branches by hiding any commit that\nis already in the main line of development.  When given\n\"git show-branch --topics master topic1 topic2\", this\nwill show the revisions given by \"git rev-list ^master\ntopic1 topic2\""
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --reflog[=<n>[, <base>]] [<ref>]",
        "description": "Shows <n> most recent ref-log entries for the given\nref.  If <base> is given, <n> entries going back from\nthat entry.  <base> can be specified as count or date.\nWhen no explicit <ref> parameter is given, it defaults to the\ncurrent branch (or HEAD if it is detached)."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Color the status sign (one of these: * ! + -) of each commit\ncorresponding to the branch it’s in.\nThe value must be always (the default), never, or auto."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off colored output, even when the configuration file gives the\ndefault to color output.\nSame as --color=never."
      }
    ]
  },
  {
    "name": "git verify-commit",
    "options": [
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "Print the raw gpg status output to standard error instead of the normal\nhuman-readable output."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Print the contents of the commit object before validating it."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Print the contents of the commit object before validating it."
      }
    ]
  },
  {
    "name": "git verify-tag",
    "options": [
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "Print the raw gpg status output to standard error instead of the normal\nhuman-readable output."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Print the contents of the tag object before validating it."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Print the contents of the tag object before validating it."
      }
    ]
  },
  {
    "name": "git whatchanged",
    "options": []
  },
  {
    "name": "git archimport",
    "options": [
      {
        "type": "short",
        "key": "h",
        "title": "-h",
        "description": "Display usage."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Verbose output."
      },
      {
        "type": "short",
        "key": "T",
        "title": "-T",
        "description": "Many tags. Will create a tag for every commit, reflecting the commit\nname in the Arch repository."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f",
        "description": "Use the fast patchset import strategy.  This can be significantly\nfaster for large trees, but cannot handle directory renames or\npermissions changes.  The default strategy is slow and safe."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o",
        "description": "Use this for compatibility with old-style branch names used by\nearlier versions of git archimport.  Old-style branch names\nwere category--branch, whereas new-style branch names are\narchive,category--branch--version.  In both cases, names given\non the command-line will override the automatically-generated\nones."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D <depth>",
        "description": "Follow merge ancestry and attempt to import trees that have been\nmerged from.  Specify a depth greater than 1 if patch logs have been\npruned."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a",
        "description": "Attempt to auto-register archives at http://mirrors.sourcecontrol.net\nThis is particularly useful with the -D option."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t <tmpdir>",
        "description": "Override the default tempdir."
      }
    ]
  },
  {
    "name": "git cvsexportcommit",
    "options": [
      {
        "type": "short",
        "key": "c",
        "title": "-c",
        "description": "Commit automatically if the patch applied cleanly. It will not\ncommit if any hunks fail to apply or there were other problems."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p",
        "description": "Be pedantic (paranoid) when applying patches. Invokes patch with\n--fuzz=0"
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a",
        "description": "Add authorship information. Adds Author line, and Committer (if\ndifferent from Author) to the message."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d",
        "description": "Set an alternative CVSROOT to use.  This corresponds to the CVS\n-d parameter.  Usually users will not want to set this, except\nif using CVS in an asymmetric fashion."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f",
        "description": "Force the merge even if the files are not up to date."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P",
        "description": "Force the parent commit, even if it is not a direct parent."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m",
        "description": "Prepend the commit message with the provided prefix.\nUseful for patch series and the like."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u",
        "description": "Update affected files from CVS repository before attempting export."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k",
        "description": "Reverse CVS keyword expansion (e.g. $Revision: 1.2.3.4$\nbecomes $Revision$) in working CVS checkout before applying patch."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w",
        "description": "Specify the location of the CVS checkout to use for the export. This\noption does not require GIT_DIR to be set before execution if the\ncurrent directory is within a Git repository.  The default is the\nvalue of cvsexportcommit.cvsdir."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W",
        "description": "Tell cvsexportcommit that the current working directory is not only\na Git checkout, but also the CVS checkout.  Therefore, Git will\nreset the working directory to the parent commit before proceeding."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Verbose."
      }
    ]
  },
  {
    "name": "git cvsimport",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Verbosity: let cvsimport report what it is doing."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d <CVSROOT>",
        "description": "The root of the CVS archive. May be local (a simple path) or remote;\ncurrently, only the :local:, :ext: and :pserver: access methods\nare supported. If not given, git cvsimport will try to read it\nfrom CVS/Root. If no such file exists, it checks for the\nCVSROOT environment variable."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C <target-dir>",
        "description": "The Git repository to import to.  If the directory doesn’t\n       exist, it will be created.  Default is the current directory."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r <remote>",
        "description": "The Git remote to import this CVS repository into.\nMoves all CVS branches into remotes/<remote>/<branch>\nakin to the way git clone uses origin by default."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <branch-for-HEAD>",
        "description": "When no remote is specified (via -r) the HEAD branch\nfrom CVS is imported to the origin branch within the Git\nrepository, as HEAD already has a special meaning for Git.\nWhen a remote is specified the HEAD branch is named\nremotes/<remote>/master mirroring git clone behaviour.\nUse this option if you want to import into a different\nbranch.\n\nUse -o master for continuing an import that was initially done by\nthe old cvs2git tool."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i",
        "description": "Import-only: don’t perform a checkout after importing.  This option\nensures the working directory and index remain untouched and will\nnot create them if they do not exist."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k",
        "description": "Kill keywords: will extract files with -kk from the CVS archive\nto avoid noisy changesets. Highly recommended, but off by default\nto preserve compatibility with early imported trees."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u",
        "description": "Convert underscores in tag and branch names to dots."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s <subst>",
        "description": "Substitute the character \"/\" in branch names with <subst>"
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p <options-for-cvsps>",
        "description": "Additional options for cvsps.\nThe options -u and -A are implicit and should not be used here.\n\nIf you need to pass multiple options, separate them with a comma."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z <fuzz>",
        "description": "Pass the timestamp fuzz factor to cvsps, in seconds. If unset,\ncvsps defaults to 300s."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P <cvsps-output-file>",
        "description": "Instead of calling cvsps, read the provided cvsps output file. Useful\nfor debugging or when cvsps is being handled outside cvsimport."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m",
        "description": "Attempt to detect merges based on the commit message. This option\nwill enable default regexes that try to capture the source\nbranch name from the commit message."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M <regex>",
        "description": "Attempt to detect merges based on the commit message with a custom\nregex. It can be used with -m to enable the default regexes\nas well. You must escape forward slashes.\n\nThe regex must capture the source branch name in $1.\n\n\nThis option can be used several times to provide several detection regexes."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S <regex>",
        "description": "Skip paths matching the regex."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a",
        "description": "Import all commits, including recent ones. cvsimport by default\nskips commits that have a timestamp less than 10 minutes ago."
      },
      {
        "type": "short",
        "key": "L",
        "title": "-L <limit>",
        "description": "Limit the number of commits imported. Workaround for cases where\ncvsimport leaks memory."
      },
      {
        "type": "short",
        "key": "A",
        "title": "-A <author-conv-file>",
        "description": "CVS by default uses the Unix username when writing its\ncommit logs. Using this option and an author-conv-file\nmaps the name recorded in CVS to author name, e-mail and\noptional time zone:\n\n\n\texon=Andreas Ericsson <ae@op5.se>\n\tspawn=Simon Pawn <spawn@frog-pond.org> America/Chicago\n\n\n\ngit cvsimport will make it appear as those authors had\ntheir GIT_AUTHOR_NAME and GIT_AUTHOR_EMAIL set properly\nall along.  If a time zone is specified, GIT_AUTHOR_DATE will\nhave the corresponding offset applied.\n\n\nFor convenience, this data is saved to $GIT_DIR/cvs-authors\neach time the -A option is provided and read from that same\nfile each time git cvsimport is run.\n\n\nIt is not recommended to use this feature if you intend to\nexport changes back to CVS again later with\ngit cvsexportcommit."
      },
      {
        "type": "short",
        "key": "R",
        "title": "-R",
        "description": "Generate a $GIT_DIR/cvs-revisions file containing a mapping from CVS\nrevision numbers to newly-created Git commit IDs.  The generated file\nwill contain one line for each (filename, revision) pair imported;\neach line will look like\n\n\nsrc/widget.c 1.1 1d862f173cdc7325b6fa6d2ae1cfd61fd1b512b7\n\n\n\nThe revision data is appended to the file if it already exists, for use when\ndoing incremental imports.\n\n\nThis option may be useful if you have CVS revision numbers stored in commit\nmessages, bug-tracking systems, email archives, and the like."
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h",
        "description": "Print a short usage message and exit."
      }
    ]
  },
  {
    "name": "git cvsserver",
    "options": [
      {
        "type": "long",
        "key": "strict-paths",
        "title": "--strict-paths",
        "description": "Don’t allow recursing into subdirectories"
      },
      {
        "type": "long",
        "key": "export-all",
        "title": "--export-all",
        "description": "Don’t check for gitcvs.enabled in config. You also have to specify a list\nof allowed directories (see below) if you want to use this option."
      },
      {
        "type": "short",
        "key": "V",
        "title": "-V, --version",
        "description": "Print version information and exit"
      },
      {
        "type": "long",
        "key": "version",
        "title": "-V, --version",
        "description": "Print version information and exit"
      },
      {
        "type": "short",
        "key": "h",
        "title": "-h, -H, --help",
        "description": "Print usage information and exit"
      },
      {
        "type": "short",
        "key": "H",
        "title": "-h, -H, --help",
        "description": "Print usage information and exit"
      },
      {
        "type": "long",
        "key": "help",
        "title": "-h, -H, --help",
        "description": "Print usage information and exit"
      }
    ]
  },
  {
    "name": "git imap-send",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Be verbose."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Be quiet."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Be quiet."
      },
      {
        "type": "long",
        "key": "curl",
        "title": "--curl",
        "description": "Use libcurl to communicate with the IMAP server, unless tunneling\ninto it.  Ignored if Git was built without the USE_CURL_FOR_IMAP_SEND\noption set."
      },
      {
        "type": "long",
        "key": "no-curl",
        "title": "--no-curl",
        "description": "Talk to the IMAP server using git’s own IMAP routines instead of\nusing libcurl.  Ignored if Git was built with the NO_OPENSSL option\nset."
      }
    ]
  },
  {
    "name": "git p4",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Provide more progress information."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Provide more progress information."
      },
      {
        "type": "long",
        "key": "detect-branches",
        "title": "--detect-branches",
        "description": "Use the branch detection algorithm to find new paths in p4.  It is\ndocumented below in \"BRANCH DETECTION\"."
      },
      {
        "type": "long",
        "key": "silent",
        "title": "--silent",
        "description": "Do not print any progress information."
      },
      {
        "type": "long",
        "key": "detect-labels",
        "title": "--detect-labels",
        "description": "Query p4 for labels associated with the depot paths, and add\nthem as tags in Git. Limited usefulness as only imports labels\nassociated with new changelists. Deprecated."
      },
      {
        "type": "long",
        "key": "import-labels",
        "title": "--import-labels",
        "description": "Import labels from p4 into Git."
      },
      {
        "type": "long",
        "key": "import-local",
        "title": "--import-local",
        "description": "By default, p4 branches are stored in refs/remotes/p4/,\nwhere they will be treated as remote-tracking branches by\ngit-branch[1] and other commands.  This option instead\nputs p4 branches in refs/heads/p4/.  Note that future\nsync operations must specify --import-local as well so that\nthey can find the p4 branches in refs/heads."
      },
      {
        "type": "long",
        "key": "keep-path",
        "title": "--keep-path",
        "description": "The mapping of file names from the p4 depot path to Git, by\ndefault, involves removing the entire depot path.  With this\noption, the full p4 depot path is retained in Git.  For example,\npath //depot/main/foo/bar.c, when imported from\n//depot/main/, becomes foo/bar.c.  With --keep-path, the\nGit path is instead depot/main/foo/bar.c."
      },
      {
        "type": "long",
        "key": "use-client-spec",
        "title": "--use-client-spec",
        "description": "Use a client spec to find the list of interesting files in p4.\nSee the \"CLIENT SPEC\" section below."
      },
      {
        "type": "long",
        "key": "bare",
        "title": "--bare",
        "description": "Perform a bare clone.  See git-clone[1]."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M",
        "description": "Detect renames.  See git-diff[1].  Renames will be\nrepresented in p4 using explicit move operations.  There\nis no corresponding option to detect copies, but there are\nvariables for both moves and copies."
      },
      {
        "type": "long",
        "key": "preserve-user",
        "title": "--preserve-user",
        "description": "Re-author p4 changes before submitting to p4.  This option\nrequires p4 admin privileges."
      },
      {
        "type": "long",
        "key": "export-labels",
        "title": "--export-labels",
        "description": "Export tags from Git as p4 labels. Tags found in Git are applied\nto the perforce working directory."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Show just what commits would be submitted to p4; do not change\nstate in Git or p4."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Show just what commits would be submitted to p4; do not change\nstate in Git or p4."
      },
      {
        "type": "long",
        "key": "prepare-p4-only",
        "title": "--prepare-p4-only",
        "description": "Apply a commit to the p4 workspace, opening, adding and deleting\nfiles in p4 as for a normal submit operation.  Do not issue the\nfinal \"p4 submit\", but instead print a message about how to\nsubmit manually or revert.  This option always stops after the\nfirst (oldest) commit.  Git tags are not exported to p4."
      },
      {
        "type": "long",
        "key": "shelve",
        "title": "--shelve",
        "description": "Instead of submitting create a series of shelved changelists.\nAfter creating each shelve, the relevant files are reverted/deleted.\nIf you have multiple commits pending multiple shelves will be created."
      },
      {
        "type": "long",
        "key": "conflict",
        "title": "--conflict=(ask|skip|quit)",
        "description": "Conflicts can occur when applying a commit to p4.  When this\nhappens, the default behavior (\"ask\") is to prompt whether to\nskip this commit and continue, or quit.  This option can be used\nto bypass the prompt, causing conflicting commits to be automatically\nskipped, or to quit trying to apply commits, without prompting."
      },
      {
        "type": "long",
        "key": "disable-rebase",
        "title": "--disable-rebase",
        "description": "Disable the automatic rebase after all commits have been successfully\nsubmitted. Can also be set with git-p4.disableRebase."
      },
      {
        "type": "long",
        "key": "disable-p4sync",
        "title": "--disable-p4sync",
        "description": "Disable the automatic sync of p4/master from Perforce after commits have\nbeen submitted. Implies --disable-rebase. Can also be set with\ngit-p4.disableP4Sync. Sync with origin/master still goes ahead if possible."
      }
    ]
  },
  {
    "name": "git quiltimport",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Walk through the patches in the series and warn\nif we cannot find all of the necessary information to commit\na patch.  At the time of this writing only missing author\ninformation is warned about."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Walk through the patches in the series and warn\nif we cannot find all of the necessary information to commit\na patch.  At the time of this writing only missing author\ninformation is warned about."
      },
      {
        "type": "long",
        "key": "keep-non-patch",
        "title": "--keep-non-patch",
        "description": "Pass -b flag to git mailinfo (see git-mailinfo[1])."
      }
    ]
  },
  {
    "name": "git request-pull",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p",
        "description": "Include patch text in the output."
      }
    ]
  },
  {
    "name": "git send-email",
    "options": [
      {
        "type": "long",
        "key": "annotate",
        "title": "--annotate",
        "description": "Review and edit each patch you’re about to send. Default is the value\nof sendemail.annotate. See the CONFIGURATION section for\nsendemail.multiEdit."
      },
      {
        "type": "long",
        "key": "bcc",
        "title": "--bcc=<address>, …​",
        "description": "Specify a \"Bcc:\" value for each email. Default is the value of\nsendemail.bcc.\n\nThis option may be specified multiple times."
      },
      {
        "type": "long",
        "key": "cc",
        "title": "--cc=<address>, …​",
        "description": "Specify a starting \"Cc:\" value for each email.\nDefault is the value of sendemail.cc.\n\nThis option may be specified multiple times."
      },
      {
        "type": "long",
        "key": "compose",
        "title": "--compose",
        "description": "Invoke a text editor (see GIT_EDITOR in git-var[1])\nto edit an introductory message for the patch series.\n\nWhen --compose is used, git send-email will use the From, Subject, and\nIn-Reply-To headers specified in the message. If the body of the message\n(what you type after the headers and a blank line) only contains blank\n(or Git: prefixed) lines, the summary won’t be sent, but From, Subject,\nand In-Reply-To headers will be used unless they are removed.\n\n\nMissing From or In-Reply-To headers will be prompted for.\n\n\nSee the CONFIGURATION section for sendemail.multiEdit."
      },
      {
        "type": "long",
        "key": "from",
        "title": "--from=<address>",
        "description": "Specify the sender of the emails.  If not specified on the command line,\nthe value of the sendemail.from configuration option is used.  If\nneither the command-line option nor sendemail.from are set, then the\nuser will be prompted for the value.  The default for the prompt will be\nthe value of GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not\nset, as returned by \"git var -l\"."
      },
      {
        "type": "long",
        "key": "reply-to",
        "title": "--reply-to=<address>",
        "description": "Specify the address where replies from recipients should go to.\nUse this if replies to messages should go to another address than what\nis specified with the --from parameter."
      },
      {
        "type": "long",
        "key": "in-reply-to",
        "title": "--in-reply-to=<identifier>",
        "description": "Make the first mail (or all the mails with --no-thread) appear as a\nreply to the given Message-Id, which avoids breaking threads to\nprovide a new patch series.\nThe second and subsequent emails will be sent as replies according to\nthe --[no-]chain-reply-to setting.\n\nSo for example when --thread and --no-chain-reply-to are specified, the\nsecond and subsequent patches will be replies to the first one like in the\nillustration below where [PATCH v2 0/3] is in reply to [PATCH 0/2]:\n\n\n\n[PATCH 0/2] Here is what I did...\n  [PATCH 1/2] Clean up and tests\n  [PATCH 2/2] Implementation\n  [PATCH v2 0/3] Here is a reroll\n    [PATCH v2 1/3] Clean up\n    [PATCH v2 2/3] New tests\n    [PATCH v2 3/3] Implementation\n\n\n\nOnly necessary if --compose is also set.  If --compose\nis not set, this will be prompted for."
      },
      {
        "type": "long",
        "key": "subject",
        "title": "--subject=<string>",
        "description": "Specify the initial subject of the email thread.\nOnly necessary if --compose is also set.  If --compose\nis not set, this will be prompted for."
      },
      {
        "type": "long",
        "key": "to",
        "title": "--to=<address>, …​",
        "description": "Specify the primary recipient of the emails generated. Generally, this\nwill be the upstream maintainer of the project involved. Default is the\nvalue of the sendemail.to configuration value; if that is unspecified,\nand --to-cmd is not specified, this will be prompted for.\n\nThis option may be specified multiple times."
      },
      {
        "type": "long",
        "key": "8bit-encoding",
        "title": "--8bit-encoding=<encoding>",
        "description": "When encountering a non-ASCII message or subject that does not\ndeclare its encoding, add headers/quoting to indicate it is\nencoded in <encoding>.  Default is the value of the\nsendemail.assume8bitEncoding; if that is unspecified, this\nwill be prompted for if any non-ASCII files are encountered.\n\nNote that no attempts whatsoever are made to validate the encoding."
      },
      {
        "type": "long",
        "key": "compose-encoding",
        "title": "--compose-encoding=<encoding>",
        "description": "Specify encoding of compose message. Default is the value of the\nsendemail.composeencoding; if that is unspecified, UTF-8 is assumed."
      },
      {
        "type": "long",
        "key": "transfer-encoding",
        "title": "--transfer-encoding=(7bit|8bit|quoted-printable|base64|auto)",
        "description": "Specify the transfer encoding to be used to send the message over SMTP.\n7bit will fail upon encountering a non-ASCII message.  quoted-printable\ncan be useful when the repository contains files that contain carriage\nreturns, but makes the raw patch email file (as saved from a MUA) much\nharder to inspect manually.  base64 is even more fool proof, but also\neven more opaque.  auto will use 8bit when possible, and quoted-printable\notherwise.\n\nDefault is the value of the sendemail.transferEncoding configuration\nvalue; if that is unspecified, default to auto."
      },
      {
        "type": "long",
        "key": "xmailer",
        "title": "--xmailer, --no-xmailer",
        "description": "Add (or prevent adding) the \"X-Mailer:\" header.  By default,\nthe header is added, but it can be turned off by setting the\nsendemail.xmailer configuration variable to false."
      },
      {
        "type": "long",
        "key": "no-xmailer",
        "title": "--xmailer, --no-xmailer",
        "description": "Add (or prevent adding) the \"X-Mailer:\" header.  By default,\nthe header is added, but it can be turned off by setting the\nsendemail.xmailer configuration variable to false."
      },
      {
        "type": "long",
        "key": "envelope-sender",
        "title": "--envelope-sender=<address>",
        "description": "Specify the envelope sender used to send the emails.\nThis is useful if your default address is not the address that is\nsubscribed to a list. In order to use the From address, set the\nvalue to \"auto\". If you use the sendmail binary, you must have\nsuitable privileges for the -f parameter.  Default is the value of the\nsendemail.envelopeSender configuration variable; if that is\nunspecified, choosing the envelope sender is left to your MTA."
      },
      {
        "type": "long",
        "key": "sendmail-cmd",
        "title": "--sendmail-cmd=<command>",
        "description": "Specify a command to run to send the email. The command should\nbe sendmail-like; specifically, it must support the -i option.\nThe command will be executed in the shell if necessary.  Default\nis the value of sendemail.sendmailcmd.  If unspecified, and if\n--smtp-server is also unspecified, git-send-email will search\nfor sendmail in /usr/sbin, /usr/lib and $PATH."
      },
      {
        "type": "long",
        "key": "smtp-encryption",
        "title": "--smtp-encryption=<encryption>",
        "description": "Specify the encryption to use, either ssl or tls.  Any other\nvalue reverts to plain SMTP.  Default is the value of\nsendemail.smtpEncryption."
      },
      {
        "type": "long",
        "key": "smtp-domain",
        "title": "--smtp-domain=<FQDN>",
        "description": "Specifies the Fully Qualified Domain Name (FQDN) used in the\nHELO/EHLO command to the SMTP server.  Some servers require the\nFQDN to match your IP address.  If not set, git send-email attempts\nto determine your FQDN automatically.  Default is the value of\nsendemail.smtpDomain."
      },
      {
        "type": "long",
        "key": "smtp-auth",
        "title": "--smtp-auth=<mechanisms>",
        "description": "Whitespace-separated list of allowed SMTP-AUTH mechanisms. This setting\nforces using only the listed mechanisms. Example:\n\n\n$ git send-email --smtp-auth=\"PLAIN LOGIN GSSAPI\" ...\n\n\n\nIf at least one of the specified mechanisms matches the ones advertised by the\nSMTP server and if it is supported by the utilized SASL library, the mechanism\nis used for authentication. If neither sendemail.smtpAuth nor --smtp-auth\nis specified, all mechanisms supported by the SASL library can be used. The\nspecial value none maybe specified to completely disable authentication\nindependently of --smtp-user"
      },
      {
        "type": "long",
        "key": "smtp-pass",
        "title": "--smtp-pass[=<password>]",
        "description": "Password for SMTP-AUTH. The argument is optional: If no\nargument is specified, then the empty string is used as\nthe password. Default is the value of sendemail.smtpPass,\nhowever --smtp-pass always overrides this value.\n\nFurthermore, passwords need not be specified in configuration files\nor on the command line. If a username has been specified (with\n--smtp-user or a sendemail.smtpUser), but no password has been\nspecified (with --smtp-pass or sendemail.smtpPass), then\na password is obtained using git-credential."
      },
      {
        "type": "long",
        "key": "no-smtp-auth",
        "title": "--no-smtp-auth",
        "description": "Disable SMTP authentication. Short hand for --smtp-auth=none"
      },
      {
        "type": "long",
        "key": "smtp-server",
        "title": "--smtp-server=<host>",
        "description": "If set, specifies the outgoing SMTP server to use (e.g.\nsmtp.example.com or a raw IP address).  If unspecified, and if\n--sendmail-cmd is also unspecified, the default is to search\nfor sendmail in /usr/sbin, /usr/lib and $PATH if such a\nprogram is available, falling back to localhost otherwise.\n\nFor backward compatibility, this option can also specify a full pathname\nof a sendmail-like program instead; the program must support the -i\noption.  This method does not support passing arguments or using plain\ncommand names.  For those use cases, consider using --sendmail-cmd\ninstead."
      },
      {
        "type": "long",
        "key": "smtp-server-port",
        "title": "--smtp-server-port=<port>",
        "description": "Specifies a port different from the default port (SMTP\nservers typically listen to smtp port 25, but may also listen to\nsubmission port 587, or the common SSL smtp port 465);\nsymbolic port names (e.g. \"submission\" instead of 587)\nare also accepted. The port can also be set with the\nsendemail.smtpServerPort configuration variable."
      },
      {
        "type": "long",
        "key": "smtp-server-option",
        "title": "--smtp-server-option=<option>",
        "description": "If set, specifies the outgoing SMTP server option to use.\nDefault value can be specified by the sendemail.smtpServerOption\nconfiguration option.\n\nThe --smtp-server-option option must be repeated for each option you want\nto pass to the server. Likewise, different lines in the configuration files\nmust be used for each option."
      },
      {
        "type": "long",
        "key": "smtp-ssl",
        "title": "--smtp-ssl",
        "description": "Legacy alias for --smtp-encryption ssl."
      },
      {
        "type": "long",
        "key": "smtp-ssl-cert-path",
        "title": "--smtp-ssl-cert-path",
        "description": "Path to a store of trusted CA certificates for SMTP SSL/TLS\ncertificate validation (either a directory that has been processed\nby c_rehash, or a single file containing one or more PEM format\ncertificates concatenated together: see verify(1) -CAfile and\n-CApath for more information on these). Set it to an empty string\nto disable certificate verification. Defaults to the value of the\nsendemail.smtpsslcertpath configuration variable, if set, or the\nbacking SSL library’s compiled-in default otherwise (which should\nbe the best choice on most platforms)."
      },
      {
        "type": "long",
        "key": "smtp-user",
        "title": "--smtp-user=<user>",
        "description": "Username for SMTP-AUTH. Default is the value of sendemail.smtpUser;\nif a username is not specified (with --smtp-user or sendemail.smtpUser),\nthen authentication is not attempted."
      },
      {
        "type": "long",
        "key": "smtp-debug",
        "title": "--smtp-debug=0|1",
        "description": "Enable (1) or disable (0) debug output. If enabled, SMTP\ncommands and replies will be printed. Useful to debug TLS\nconnection and authentication problems."
      },
      {
        "type": "long",
        "key": "batch-size",
        "title": "--batch-size=<num>",
        "description": "Some email servers (e.g. smtp.163.com) limit the number emails to be\nsent per session (connection) and this will lead to a failure when\nsending many messages.  With this option, send-email will disconnect after\nsending $<num> messages and wait for a few seconds (see --relogin-delay)\nand reconnect, to work around such a limit.  You may want to\nuse some form of credential helper to avoid having to retype\nyour password every time this happens.  Defaults to the\nsendemail.smtpBatchSize configuration variable."
      },
      {
        "type": "long",
        "key": "relogin-delay",
        "title": "--relogin-delay=<int>",
        "description": "Waiting $<int> seconds before reconnecting to SMTP server. Used together\nwith --batch-size option.  Defaults to the sendemail.smtpReloginDelay\nconfiguration variable."
      },
      {
        "type": "long",
        "key": "no-",
        "title": "--no-[to|cc|bcc]",
        "description": "Clears any list of \"To:\", \"Cc:\", \"Bcc:\" addresses previously\nset via config."
      },
      {
        "type": "long",
        "key": "no-identity",
        "title": "--no-identity",
        "description": "Clears the previously read value of sendemail.identity set\nvia config, if any."
      },
      {
        "type": "long",
        "key": "to-cmd",
        "title": "--to-cmd=<command>",
        "description": "Specify a command to execute once per patch file which\nshould generate patch file specific \"To:\" entries.\nOutput of this command must be single email address per line.\nDefault is the value of sendemail.tocmd configuration value."
      },
      {
        "type": "long",
        "key": "cc-cmd",
        "title": "--cc-cmd=<command>",
        "description": "Specify a command to execute once per patch file which\nshould generate patch file specific \"Cc:\" entries.\nOutput of this command must be single email address per line.\nDefault is the value of sendemail.ccCmd configuration value."
      },
      {
        "type": "long",
        "key": "chain-reply-to",
        "title": "--[no-]chain-reply-to",
        "description": "If this is set, each email will be sent as a reply to the previous\nemail sent.  If disabled with \"--no-chain-reply-to\", all emails after\nthe first will be sent as replies to the first email sent.  When using\nthis, it is recommended that the first file given be an overview of the\nentire patch series. Disabled by default, but the sendemail.chainReplyTo\nconfiguration variable can be used to enable it."
      },
      {
        "type": "long",
        "key": "identity",
        "title": "--identity=<identity>",
        "description": "A configuration identity. When given, causes values in the\nsendemail.<identity> subsection to take precedence over\nvalues in the sendemail section. The default identity is\nthe value of sendemail.identity."
      },
      {
        "type": "long",
        "key": "signed-off-by-cc",
        "title": "--[no-]signed-off-by-cc",
        "description": "If this is set, add emails found in the Signed-off-by trailer or Cc: lines to the\ncc list. Default is the value of sendemail.signedoffbycc configuration\nvalue; if that is unspecified, default to --signed-off-by-cc."
      },
      {
        "type": "long",
        "key": "cc-cover",
        "title": "--[no-]cc-cover",
        "description": "If this is set, emails found in Cc: headers in the first patch of\nthe series (typically the cover letter) are added to the cc list\nfor each email set. Default is the value of sendemail.cccover\nconfiguration value; if that is unspecified, default to --no-cc-cover."
      },
      {
        "type": "long",
        "key": "to-cover",
        "title": "--[no-]to-cover",
        "description": "If this is set, emails found in To: headers in the first patch of\nthe series (typically the cover letter) are added to the to list\nfor each email set. Default is the value of sendemail.tocover\nconfiguration value; if that is unspecified, default to --no-to-cover."
      },
      {
        "type": "long",
        "key": "suppress-cc",
        "title": "--suppress-cc=<category>",
        "description": "Specify an additional category of recipients to suppress the\nauto-cc of:\n\n\n\n\n\nauthor will avoid including the patch author.\n\n\nself will avoid including the sender.\n\n\ncc will avoid including anyone mentioned in Cc lines in the patch header\nexcept for self (use self for that).\n\n\nbodycc will avoid including anyone mentioned in Cc lines in the\npatch body (commit message) except for self (use self for that).\n\n\nsob will avoid including anyone mentioned in the Signed-off-by trailers except\nfor self (use self for that).\n\n\nmisc-by will avoid including anyone mentioned in Acked-by,\nReviewed-by, Tested-by and other \"-by\" lines in the patch body,\nexcept Signed-off-by (use sob for that).\n\n\ncccmd will avoid running the --cc-cmd.\n\n\nbody is equivalent to sob + bodycc + misc-by.\n\n\nall will suppress all auto cc values.\n\n\n\n\n\n\nDefault is the value of sendemail.suppresscc configuration value; if\nthat is unspecified, default to self if --suppress-from is\nspecified, as well as body if --no-signed-off-cc is specified."
      },
      {
        "type": "long",
        "key": "suppress-from",
        "title": "--[no-]suppress-from",
        "description": "If this is set, do not add the From: address to the cc: list.\nDefault is the value of sendemail.suppressFrom configuration\nvalue; if that is unspecified, default to --no-suppress-from."
      },
      {
        "type": "long",
        "key": "thread",
        "title": "--[no-]thread",
        "description": "If this is set, the In-Reply-To and References headers will be\nadded to each email sent.  Whether each mail refers to the\nprevious email (deep threading per git format-patch\nwording) or to the first email (shallow threading) is\ngoverned by \"--[no-]chain-reply-to\".\n\nIf disabled with \"--no-thread\", those headers will not be added\n(unless specified with --in-reply-to).  Default is the value of the\nsendemail.thread configuration value; if that is unspecified,\ndefault to --thread.\n\n\nIt is up to the user to ensure that no In-Reply-To header already\nexists when git send-email is asked to add it (especially note that\ngit format-patch can be configured to do the threading itself).\nFailure to do so may not produce the expected result in the\nrecipient’s MUA."
      },
      {
        "type": "long",
        "key": "confirm",
        "title": "--confirm=<mode>",
        "description": "Confirm just before sending:\n\n\n\n\n\nalways will always confirm before sending\n\n\nnever will never confirm before sending\n\n\ncc will confirm before sending when send-email has automatically\nadded addresses from the patch to the Cc list\n\n\ncompose will confirm before sending the first message when using --compose.\n\n\nauto is equivalent to cc + compose\n\n\n\n\n\n\nDefault is the value of sendemail.confirm configuration value; if that\nis unspecified, default to auto unless any of the suppress options\nhave been specified, in which case default to compose."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Do everything except actually send the emails."
      },
      {
        "type": "long",
        "key": "format-patch",
        "title": "--[no-]format-patch",
        "description": "When an argument may be understood either as a reference or as a file name,\nchoose to understand it as a format-patch argument (--format-patch)\nor as a file name (--no-format-patch). By default, when such a conflict\noccurs, git send-email will fail."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Make git-send-email less verbose.  One line per email should be\nall that is output."
      },
      {
        "type": "long",
        "key": "validate",
        "title": "--[no-]validate",
        "description": "Perform sanity checks on patches.\nCurrently, validation means the following:\n\n\n\n\n\nInvoke the sendemail-validate hook if present (see githooks[5]).\n\n\nWarn of patches that contain lines longer than\n998 characters unless a suitable transfer encoding\n(auto, base64, or quoted-printable) is used;\nthis is due to SMTP limits as described by\nhttp://www.ietf.org/rfc/rfc5322.txt.\n\n\n\n\n\n\nDefault is the value of sendemail.validate; if this is not set,\ndefault to --validate."
      },
      {
        "type": "long",
        "key": "force",
        "title": "--force",
        "description": "Send emails even if safety checks would prevent it."
      },
      {
        "type": "long",
        "key": "dump-aliases",
        "title": "--dump-aliases",
        "description": "Instead of the normal operation, dump the shorthand alias names from\nthe configured alias file(s), one per line in alphabetical order. Note,\nthis only includes the alias name and not its expanded email addresses.\nSee sendemail.aliasesfile for more information about aliases."
      }
    ]
  },
  {
    "name": "git svn",
    "options": [
      {
        "type": "long",
        "key": "shared",
        "title": "--shared[=(false|true|umask|group|all|world|everybody)], --template=<template_directory>",
        "description": "Only used with the init command.\nThese are passed directly to git init."
      },
      {
        "type": "long",
        "key": "template",
        "title": "--shared[=(false|true|umask|group|all|world|everybody)], --template=<template_directory>",
        "description": "Only used with the init command.\nThese are passed directly to git init."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r <arg>, --revision <arg>",
        "description": "Used with the fetch command.\n\nThis allows revision ranges for partial/cauterized history\nto be supported.  $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges),\n$NUMBER:HEAD, and BASE:$NUMBER are all supported.\n\n\nThis can allow you to make partial mirrors when running fetch;\nbut is generally not recommended because history will be skipped\nand lost."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "-, --stdin",
        "description": "Only used with the set-tree command.\n\nRead a list of commits from stdin and commit them in reverse\norder.  Only the leading sha1 is read from each line, so\ngit rev-list --pretty=oneline output can be used."
      },
      {
        "type": "long",
        "key": "rmdir",
        "title": "--rmdir",
        "description": "Only used with the dcommit, set-tree and commit-diff commands.\n\nRemove directories from the SVN tree if there are no files left\nbehind.  SVN can version empty directories, and they are not\nremoved by default if there are no files left in them.  Git\ncannot version empty directories.  Enabling this flag will make\nthe commit to SVN act like Git.\n\n\nconfig key: svn.rmdir"
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e, --edit",
        "description": "Only used with the dcommit, set-tree and commit-diff commands.\n\nEdit the commit message before committing to SVN.  This is off by\ndefault for objects that are commits, and forced on when committing\ntree objects.\n\n\nconfig key: svn.edit"
      },
      {
        "type": "long",
        "key": "edit",
        "title": "-e, --edit",
        "description": "Only used with the dcommit, set-tree and commit-diff commands.\n\nEdit the commit message before committing to SVN.  This is off by\ndefault for objects that are commits, and forced on when committing\ntree objects.\n\n\nconfig key: svn.edit"
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l<num>, --find-copies-harder",
        "description": "Only used with the dcommit, set-tree and commit-diff commands.\n\nThey are both passed directly to git diff-tree; see\ngit-diff-tree[1] for more information.\n\n\nconfig key: svn.l\nconfig key: svn.findcopiesharder"
      },
      {
        "type": "long",
        "key": "find-copies-harder",
        "title": "-l<num>, --find-copies-harder",
        "description": "Only used with the dcommit, set-tree and commit-diff commands.\n\nThey are both passed directly to git diff-tree; see\ngit-diff-tree[1] for more information.\n\n\nconfig key: svn.l\nconfig key: svn.findcopiesharder"
      },
      {
        "type": "short",
        "key": "A",
        "title": "-A<filename>, --authors-file=<filename>",
        "description": "Syntax is compatible with the file used by git cvsimport but\nan empty email address can be supplied with <>:\n\n\n\tloginname = Joe User <user@example.com>\n\n\n\nIf this option is specified and git svn encounters an SVN\ncommitter name that does not exist in the authors-file, git svn\nwill abort operation. The user will then have to add the\nappropriate entry.  Re-running the previous git svn command\nafter the authors-file is modified should continue operation.\n\n\nconfig key: svn.authorsfile"
      },
      {
        "type": "long",
        "key": "authors-file",
        "title": "-A<filename>, --authors-file=<filename>",
        "description": "Syntax is compatible with the file used by git cvsimport but\nan empty email address can be supplied with <>:\n\n\n\tloginname = Joe User <user@example.com>\n\n\n\nIf this option is specified and git svn encounters an SVN\ncommitter name that does not exist in the authors-file, git svn\nwill abort operation. The user will then have to add the\nappropriate entry.  Re-running the previous git svn command\nafter the authors-file is modified should continue operation.\n\n\nconfig key: svn.authorsfile"
      },
      {
        "type": "long",
        "key": "authors-prog",
        "title": "--authors-prog=<filename>",
        "description": "If this option is specified, for each SVN committer name that\ndoes not exist in the authors file, the given file is executed\nwith the committer name as the first argument.  The program is\nexpected to return a single line of the form \"Name <email>\" or\n\"Name <>\", which will be treated as if included in the authors\nfile.\n\nDue to historical reasons a relative filename is first searched\nrelative to the current directory for init and clone and relative\nto the root of the working tree for fetch. If filename is\nnot found, it is searched like any other command in $PATH.\n\n\nconfig key: svn.authorsProg"
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Make git svn less verbose. Specify a second time to make it\neven less verbose."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Make git svn less verbose. Specify a second time to make it\neven less verbose."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --merge, -s<strategy>, --strategy=<strategy>, -p, --rebase-merges, --preserve-merges (DEPRECATED)",
        "description": "These are only used with the dcommit and rebase commands.\n\nPassed directly to git rebase when using dcommit if a\ngit reset cannot be used (see dcommit)."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "-m, --merge, -s<strategy>, --strategy=<strategy>, -p, --rebase-merges, --preserve-merges (DEPRECATED)",
        "description": "These are only used with the dcommit and rebase commands.\n\nPassed directly to git rebase when using dcommit if a\ngit reset cannot be used (see dcommit)."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-m, --merge, -s<strategy>, --strategy=<strategy>, -p, --rebase-merges, --preserve-merges (DEPRECATED)",
        "description": "These are only used with the dcommit and rebase commands.\n\nPassed directly to git rebase when using dcommit if a\ngit reset cannot be used (see dcommit)."
      },
      {
        "type": "long",
        "key": "strategy",
        "title": "-m, --merge, -s<strategy>, --strategy=<strategy>, -p, --rebase-merges, --preserve-merges (DEPRECATED)",
        "description": "These are only used with the dcommit and rebase commands.\n\nPassed directly to git rebase when using dcommit if a\ngit reset cannot be used (see dcommit)."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-m, --merge, -s<strategy>, --strategy=<strategy>, -p, --rebase-merges, --preserve-merges (DEPRECATED)",
        "description": "These are only used with the dcommit and rebase commands.\n\nPassed directly to git rebase when using dcommit if a\ngit reset cannot be used (see dcommit)."
      },
      {
        "type": "long",
        "key": "rebase-merges",
        "title": "-m, --merge, -s<strategy>, --strategy=<strategy>, -p, --rebase-merges, --preserve-merges (DEPRECATED)",
        "description": "These are only used with the dcommit and rebase commands.\n\nPassed directly to git rebase when using dcommit if a\ngit reset cannot be used (see dcommit)."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "This can be used with the dcommit, rebase, branch and\ntag commands.\n\nFor dcommit, print out the series of Git arguments that would show\nwhich diffs would be committed to SVN.\n\n\nFor rebase, display the local branch associated with the upstream svn\nrepository associated with the current branch and the URL of svn\nrepository that will be fetched from.\n\n\nFor branch and tag, display the urls that will be used for copying when\ncreating the branch or tag."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "This can be used with the dcommit, rebase, branch and\ntag commands.\n\nFor dcommit, print out the series of Git arguments that would show\nwhich diffs would be committed to SVN.\n\n\nFor rebase, display the local branch associated with the upstream svn\nrepository associated with the current branch and the URL of svn\nrepository that will be fetched from.\n\n\nFor branch and tag, display the urls that will be used for copying when\ncreating the branch or tag."
      },
      {
        "type": "long",
        "key": "use-log-author",
        "title": "--use-log-author",
        "description": "When retrieving svn commits into Git (as part of fetch, rebase, or\ndcommit operations), look for the first From: line or Signed-off-by trailer\nin the log message and use that as the author string.\n\nconfig key: svn.useLogAuthor"
      },
      {
        "type": "long",
        "key": "add-author-from",
        "title": "--add-author-from",
        "description": "When committing to svn from Git (as part of set-tree or dcommit\noperations), if the existing log message doesn’t already have a\nFrom: or Signed-off-by trailer, append a From: line based on the\nGit commit’s author string.  If you use this, then --use-log-author\nwill retrieve a valid author string for all commits.\n\nconfig key: svn.addAuthorFrom"
      }
    ]
  },
  {
    "name": "git update-index",
    "options": [
      {
        "type": "long",
        "key": "add",
        "title": "--add",
        "description": "If a specified file isn’t in the index already then it’s\nadded.\nDefault behaviour is to ignore new files."
      },
      {
        "type": "long",
        "key": "remove",
        "title": "--remove",
        "description": "If a specified file is in the index but is missing then it’s\nremoved.\nDefault behavior is to ignore removed file."
      },
      {
        "type": "long",
        "key": "refresh",
        "title": "--refresh",
        "description": "Looks at the current index and checks to see if merges or\nupdates are needed by checking stat() information."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "Quiet.  If --refresh finds that the index needs an update, the\n       default behavior is to error out.  This option makes\ngit update-index continue anyway."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules",
        "description": "Do not try to update submodules.  This option is only respected\nwhen passed before --refresh."
      },
      {
        "type": "long",
        "key": "unmerged",
        "title": "--unmerged",
        "description": "If --refresh finds unmerged changes in the index, the default\nbehavior is to error out.  This option makes git update-index\n       continue anyway."
      },
      {
        "type": "long",
        "key": "ignore-missing",
        "title": "--ignore-missing",
        "description": "Ignores missing files during a --refresh"
      },
      {
        "type": "long",
        "key": "index-info",
        "title": "--index-info",
        "description": "Read index information from stdin."
      },
      {
        "type": "long",
        "key": "chmod",
        "title": "--chmod=(+|-)x",
        "description": "Set the execute permissions on the updated files."
      },
      {
        "type": "long",
        "key": "assume-unchanged",
        "title": "--[no-]assume-unchanged",
        "description": "When this flag is specified, the object names recorded\nfor the paths are not updated.  Instead, this option\nsets/unsets the \"assume unchanged\" bit for the\npaths.  When the \"assume unchanged\" bit is on, the user\npromises not to change the file and allows Git to assume\nthat the working tree file matches what is recorded in\nthe index.  If you want to change the working tree file,\nyou need to unset the bit to tell Git.  This is\nsometimes helpful when working with a big project on a\nfilesystem that has very slow lstat(2) system call\n(e.g. cifs).\n\nGit will fail (gracefully) in case it needs to modify this file\nin the index e.g. when merging in a commit;\nthus, in case the assumed-untracked file is changed upstream,\nyou will need to handle the situation manually."
      },
      {
        "type": "long",
        "key": "really-refresh",
        "title": "--really-refresh",
        "description": "Like --refresh, but checks stat information unconditionally,\nwithout regard to the \"assume unchanged\" setting."
      },
      {
        "type": "long",
        "key": "skip-worktree",
        "title": "--[no-]skip-worktree",
        "description": "When one of these flags is specified, the object name recorded\nfor the paths are not updated. Instead, these options\nset and unset the \"skip-worktree\" bit for the paths. See\nsection \"Skip-worktree bit\" below for more information."
      },
      {
        "type": "long",
        "key": "ignore-skip-worktree-entries",
        "title": "--[no-]ignore-skip-worktree-entries",
        "description": "Do not remove skip-worktree (AKA \"index-only\") entries even when\nthe --remove option was specified."
      },
      {
        "type": "long",
        "key": "fsmonitor-valid",
        "title": "--[no-]fsmonitor-valid",
        "description": "When one of these flags is specified, the object name recorded\nfor the paths are not updated. Instead, these options\nset and unset the \"fsmonitor valid\" bit for the paths. See\nsection \"File System Monitor\" below for more information."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --again",
        "description": "Runs git update-index itself on the paths whose index\nentries are different from those from the HEAD commit."
      },
      {
        "type": "long",
        "key": "again",
        "title": "-g, --again",
        "description": "Runs git update-index itself on the paths whose index\nentries are different from those from the HEAD commit."
      },
      {
        "type": "long",
        "key": "unresolve",
        "title": "--unresolve",
        "description": "Restores the unmerged or needs updating state of a\nfile during a merge if it was cleared by accident."
      },
      {
        "type": "long",
        "key": "info-only",
        "title": "--info-only",
        "description": "Do not create objects in the object database for all\n<file> arguments that follow this flag; just insert\ntheir object IDs into the index."
      },
      {
        "type": "long",
        "key": "force-remove",
        "title": "--force-remove",
        "description": "Remove the file from the index even when the working directory\nstill has such a file. (Implies --remove.)"
      },
      {
        "type": "long",
        "key": "replace",
        "title": "--replace",
        "description": "By default, when a file path exists in the index,\ngit update-index refuses an attempt to add path/file.\nSimilarly if a file path/file exists, a file path\ncannot be added.  With --replace flag, existing entries\nthat conflict with the entry being added are\nautomatically removed with warning messages."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Instead of taking list of paths from the command line,\nread list of paths from the standard input.  Paths are\nseparated by LF (i.e. one path per line) by default."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Report what is being added and removed from index."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "Only meaningful with --stdin or --index-info; paths are\nseparated with NUL character instead of LF."
      },
      {
        "type": "long",
        "key": "split-index",
        "title": "--split-index, --no-split-index",
        "description": "Enable or disable split index mode. If split-index mode is\nalready enabled and --split-index is given again, all\nchanges in $GIT_DIR/index are pushed back to the shared index\nfile.\n\nThese options take effect whatever the value of the core.splitIndex\nconfiguration variable (see git-config[1]). But a warning is\nemitted when the change goes against the configured value, as the\nconfigured value will take effect next time the index is read and this\nwill remove the intended effect of the option."
      },
      {
        "type": "long",
        "key": "no-split-index",
        "title": "--split-index, --no-split-index",
        "description": "Enable or disable split index mode. If split-index mode is\nalready enabled and --split-index is given again, all\nchanges in $GIT_DIR/index are pushed back to the shared index\nfile.\n\nThese options take effect whatever the value of the core.splitIndex\nconfiguration variable (see git-config[1]). But a warning is\nemitted when the change goes against the configured value, as the\nconfigured value will take effect next time the index is read and this\nwill remove the intended effect of the option."
      },
      {
        "type": "long",
        "key": "untracked-cache",
        "title": "--untracked-cache, --no-untracked-cache",
        "description": "Enable or disable untracked cache feature. Please use\n--test-untracked-cache before enabling it.\n\nThese options take effect whatever the value of the core.untrackedCache\nconfiguration variable (see git-config[1]). But a warning is\nemitted when the change goes against the configured value, as the\nconfigured value will take effect next time the index is read and this\nwill remove the intended effect of the option."
      },
      {
        "type": "long",
        "key": "no-untracked-cache",
        "title": "--untracked-cache, --no-untracked-cache",
        "description": "Enable or disable untracked cache feature. Please use\n--test-untracked-cache before enabling it.\n\nThese options take effect whatever the value of the core.untrackedCache\nconfiguration variable (see git-config[1]). But a warning is\nemitted when the change goes against the configured value, as the\nconfigured value will take effect next time the index is read and this\nwill remove the intended effect of the option."
      },
      {
        "type": "long",
        "key": "test-untracked-cache",
        "title": "--test-untracked-cache",
        "description": "Only perform tests on the working directory to make sure\nuntracked cache can be used. You have to manually enable\nuntracked cache using --untracked-cache or\n--force-untracked-cache or the core.untrackedCache\nconfiguration variable afterwards if you really want to use\nit. If a test fails the exit code is 1 and a message\nexplains what is not working as needed, otherwise the exit\ncode is 0 and OK is printed."
      },
      {
        "type": "long",
        "key": "force-untracked-cache",
        "title": "--force-untracked-cache",
        "description": "Same as --untracked-cache. Provided for backwards\ncompatibility with older versions of Git where\n--untracked-cache used to imply --test-untracked-cache but\nthis option would enable the extension unconditionally."
      },
      {
        "type": "long",
        "key": "fsmonitor",
        "title": "--fsmonitor, --no-fsmonitor",
        "description": "Enable or disable files system monitor feature. These options\ntake effect whatever the value of the core.fsmonitor\nconfiguration variable (see git-config[1]). But a warning\nis emitted when the change goes against the configured value, as\nthe configured value will take effect next time the index is\nread and this will remove the intended effect of the option."
      },
      {
        "type": "long",
        "key": "no-fsmonitor",
        "title": "--fsmonitor, --no-fsmonitor",
        "description": "Enable or disable files system monitor feature. These options\ntake effect whatever the value of the core.fsmonitor\nconfiguration variable (see git-config[1]). But a warning\nis emitted when the change goes against the configured value, as\nthe configured value will take effect next time the index is\nread and this will remove the intended effect of the option."
      }
    ]
  },
  {
    "name": "git read-tree",
    "options": [
      {
        "type": "short",
        "key": "m",
        "title": "-m",
        "description": "Perform a merge, not just a read.  The command will\nrefuse to run if your index file has unmerged entries,\nindicating that you have not finished previous merge you\nstarted."
      },
      {
        "type": "long",
        "key": "reset",
        "title": "--reset",
        "description": "Same as -m, except that unmerged entries are discarded instead\nof failing. When used with -u, updates leading to loss of\nworking tree changes will not abort the operation."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u",
        "description": "After a successful merge, update the files in the work\ntree with the result of the merge."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i",
        "description": "Usually a merge requires the index file as well as the\nfiles in the working tree to be up to date with the\ncurrent head commit, in order not to lose local\nchanges.  This flag disables the check with the working\ntree and is meant to be used when creating a merge of\ntrees that are not directly related to the current\nworking tree status into a temporary index file."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Check if the command would error out, without updating the index\nor the files in the working tree for real."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Check if the command would error out, without updating the index\nor the files in the working tree for real."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Show the progress of checking files out."
      },
      {
        "type": "long",
        "key": "trivial",
        "title": "--trivial",
        "description": "Restrict three-way merge by git read-tree to happen\nonly if there is no file-level merging required, instead\nof resolving merge for trivial cases and leaving\nconflicting files unresolved in the index."
      },
      {
        "type": "long",
        "key": "aggressive",
        "title": "--aggressive",
        "description": "Usually a three-way merge by git read-tree resolves\nthe merge for really trivial cases and leaves other\ncases unresolved in the index, so that porcelains can\nimplement different merge policies.  This flag makes the\ncommand resolve a few more cases internally:\n\n\n\nwhen one side removes a path and the other side leaves the path\nunmodified.  The resolution is to remove that path.\n\n\nwhen both sides remove a path.  The resolution is to remove that path.\n\n\nwhen both sides add a path identically.  The resolution\nis to add that path."
      },
      {
        "type": "long",
        "key": "prefix",
        "title": "--prefix=<prefix>",
        "description": "Keep the current index contents, and read the contents\nof the named tree-ish under the directory at <prefix>.\nThe command will refuse to overwrite entries that already\nexisted in the original index file."
      },
      {
        "type": "long",
        "key": "exclude-per-directory",
        "title": "--exclude-per-directory=<gitignore>",
        "description": "When running the command with -u and -m options, the\nmerge result may need to overwrite paths that are not\ntracked in the current branch.  The command usually\nrefuses to proceed with the merge to avoid losing such a\npath.  However this safety valve sometimes gets in the\nway.  For example, it often happens that the other\nbranch added a file that used to be a generated file in\nyour branch, and the safety valve triggers when you try\nto switch to that branch after you ran make but before\nrunning make clean to remove the generated file.  This\noption tells the command to read per-directory exclude\nfile (usually .gitignore) and allows such an untracked\nbut explicitly ignored file to be overwritten."
      },
      {
        "type": "long",
        "key": "index-output",
        "title": "--index-output=<file>",
        "description": "Instead of writing the results out to $GIT_INDEX_FILE,\nwrite the resulting index in the named file.  While the\ncommand is operating, the original index file is locked\nwith the same mechanism as usual.  The file must allow\nto be rename(2)ed into from a temporary file that is\ncreated next to the usual index file; typically this\nmeans it needs to be on the same filesystem as the index\nfile itself, and you need write permission to the\ndirectories the index file and index output file are\nlocated in."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--[no-]recurse-submodules",
        "description": "Using --recurse-submodules will update the content of all active\nsubmodules according to the commit recorded in the superproject by\ncalling read-tree recursively, also setting the submodules' HEAD to be\ndetached at that commit."
      },
      {
        "type": "long",
        "key": "no-sparse-checkout",
        "title": "--no-sparse-checkout",
        "description": "Disable sparse checkout support even if core.sparseCheckout\nis true."
      },
      {
        "type": "long",
        "key": "empty",
        "title": "--empty",
        "description": "Instead of reading tree object(s) into the index, just empty\nit."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Quiet, suppress feedback messages."
      }
    ]
  },
  {
    "name": "git apply",
    "options": [
      {
        "type": "long",
        "key": "stat",
        "title": "--stat",
        "description": "Instead of applying the patch, output diffstat for the\ninput.  Turns off \"apply\"."
      },
      {
        "type": "long",
        "key": "numstat",
        "title": "--numstat",
        "description": "Similar to --stat, but shows the number of added and\ndeleted lines in decimal notation and the pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying\n0 0.  Turns off \"apply\"."
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary",
        "description": "Instead of applying the patch, output a condensed\nsummary of information obtained from git diff extended\nheaders, such as creations, renames and mode changes.\nTurns off \"apply\"."
      },
      {
        "type": "long",
        "key": "check",
        "title": "--check",
        "description": "Instead of applying the patch, see if the patch is\napplicable to the current working tree and/or the index\nfile and detects errors.  Turns off \"apply\"."
      },
      {
        "type": "long",
        "key": "index",
        "title": "--index",
        "description": "Apply the patch to both the index and the working tree (or\nmerely check that it would apply cleanly to both if --check is\nin effect). Note that --index expects index entries and\nworking tree copies for relevant paths to be identical (their\ncontents and metadata such as file mode must match), and will\nraise an error if they are not, even if the patch would apply\ncleanly to both the index and the working tree in isolation."
      },
      {
        "type": "long",
        "key": "cached",
        "title": "--cached",
        "description": "Apply the patch to just the index, without touching the working\ntree. If --check is in effect, merely check that it would\napply cleanly to the index entry."
      },
      {
        "type": "long",
        "key": "intent-to-add",
        "title": "--intent-to-add",
        "description": "When applying the patch only to the working tree, mark new\nfiles to be added to the index later (see --intent-to-add\noption in git-add[1]). This option is ignored unless\nrunning in a Git repository and --index is not specified.\nNote that --index could be implied by other options such\nas --cached or --3way."
      },
      {
        "type": "short",
        "key": "3",
        "title": "-3, --3way",
        "description": "Attempt 3-way merge if the patch records the identity of blobs it is supposed\nto apply to and we have those blobs available locally, possibly leaving the\nconflict markers in the files in the working tree for the user to\nresolve.  This option implies the --index option unless the\n--cached option is used, and is incompatible with the --reject option.\nWhen used with the --cached option, any conflicts are left at higher stages\nin the cache."
      },
      {
        "type": "long",
        "key": "3way",
        "title": "-3, --3way",
        "description": "Attempt 3-way merge if the patch records the identity of blobs it is supposed\nto apply to and we have those blobs available locally, possibly leaving the\nconflict markers in the files in the working tree for the user to\nresolve.  This option implies the --index option unless the\n--cached option is used, and is incompatible with the --reject option.\nWhen used with the --cached option, any conflicts are left at higher stages\nin the cache."
      },
      {
        "type": "long",
        "key": "build-fake-ancestor",
        "title": "--build-fake-ancestor=<file>",
        "description": "Newer git diff output has embedded index information\nfor each blob to help identify the original version that\nthe patch applies to.  When this flag is given, and if\nthe original versions of the blobs are available locally,\nbuilds a temporary index containing those blobs.\n\nWhen a pure mode change is encountered (which has no index information),\nthe information is read from the current index instead."
      },
      {
        "type": "short",
        "key": "R",
        "title": "-R, --reverse",
        "description": "Apply the patch in reverse."
      },
      {
        "type": "long",
        "key": "reverse",
        "title": "-R, --reverse",
        "description": "Apply the patch in reverse."
      },
      {
        "type": "long",
        "key": "reject",
        "title": "--reject",
        "description": "For atomicity, git apply by default fails the whole patch and\ndoes not touch the working tree when some of the hunks\ndo not apply.  This option makes it apply\nthe parts of the patch that are applicable, and leave the\nrejected hunks in corresponding *.rej files."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "When --numstat has been given, do not munge pathnames,\nbut use a NUL-terminated machine-readable format.\n\nWithout this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see\ngit-config[1])."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p<n>",
        "description": "Remove <n> leading path components (separated by slashes) from\ntraditional diff paths. E.g., with -p2, a patch against\na/dir/file will be applied directly to file. The default is\n1."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C<n>",
        "description": "Ensure at least <n> lines of surrounding context match before\nand after each change.  When fewer lines of surrounding\ncontext exist they all must match.  By default no context is\never ignored."
      },
      {
        "type": "long",
        "key": "unidiff-zero",
        "title": "--unidiff-zero",
        "description": "By default, git apply expects that the patch being\napplied is a unified diff with at least one line of context.\nThis provides good safety measures, but breaks down when\napplying a diff generated with --unified=0. To bypass these\nchecks use --unidiff-zero.\n\nNote, for the reasons stated above usage of context-free patches is\ndiscouraged."
      },
      {
        "type": "long",
        "key": "apply",
        "title": "--apply",
        "description": "If you use any of the options marked \"Turns off\napply\" above, git apply reads and outputs the\nrequested information without actually applying the\npatch.  Give this flag after those flags to also apply\nthe patch."
      },
      {
        "type": "long",
        "key": "no-add",
        "title": "--no-add",
        "description": "When applying a patch, ignore additions made by the\npatch.  This can be used to extract the common part between\ntwo files by first running diff on them and applying\nthe result with this option, which would apply the\ndeletion part but not the addition part."
      },
      {
        "type": "long",
        "key": "allow-binary-replacement",
        "title": "--allow-binary-replacement, --binary",
        "description": "Historically we did not allow binary patch applied\nwithout an explicit permission from the user, and this\nflag was the way to do so.  Currently we always allow binary\npatch application, so this is a no-op."
      },
      {
        "type": "long",
        "key": "binary",
        "title": "--allow-binary-replacement, --binary",
        "description": "Historically we did not allow binary patch applied\nwithout an explicit permission from the user, and this\nflag was the way to do so.  Currently we always allow binary\npatch application, so this is a no-op."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude=<path-pattern>",
        "description": "Don’t apply changes to files matching the given path pattern. This can\nbe useful when importing patchsets, where you want to exclude certain\nfiles or directories."
      },
      {
        "type": "long",
        "key": "include",
        "title": "--include=<path-pattern>",
        "description": "Apply changes to files matching the given path pattern. This can\nbe useful when importing patchsets, where you want to include certain\nfiles or directories.\n\nWhen --exclude and --include patterns are used, they are examined in the\norder they appear on the command line, and the first match determines if a\npatch to each path is used.  A patch to a path that does not match any\ninclude/exclude pattern is used by default if there is no include pattern\non the command line, and ignored if there is any include pattern."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "--ignore-space-change, --ignore-whitespace",
        "description": "When applying a patch, ignore changes in whitespace in context\nlines if necessary.\nContext lines will preserve their whitespace, and they will not\nundergo whitespace fixing regardless of the value of the\n--whitespace option. New lines will still be fixed, though."
      },
      {
        "type": "long",
        "key": "ignore-whitespace",
        "title": "--ignore-space-change, --ignore-whitespace",
        "description": "When applying a patch, ignore changes in whitespace in context\nlines if necessary.\nContext lines will preserve their whitespace, and they will not\nundergo whitespace fixing regardless of the value of the\n--whitespace option. New lines will still be fixed, though."
      },
      {
        "type": "long",
        "key": "whitespace",
        "title": "--whitespace=<action>",
        "description": "When applying a patch, detect a new or modified line that has\nwhitespace errors.  What are considered whitespace errors is\ncontrolled by core.whitespace configuration.  By default,\ntrailing whitespaces (including lines that solely consist of\nwhitespaces) and a space character that is immediately followed\nby a tab character inside the initial indent of the line are\nconsidered whitespace errors.\n\nBy default, the command outputs warning messages but applies the patch.\nWhen git-apply is used for statistics and not applying a\npatch, it defaults to nowarn.\n\n\nYou can use different <action> values to control this\nbehavior:\n\n\n\n\nnowarn turns off the trailing whitespace warning.\n\n\nwarn outputs warnings for a few such errors, but applies the\npatch as-is (default).\n\n\nfix outputs warnings for a few such errors, and applies the\npatch after fixing them (strip is a synonym --- the tool\nused to consider only trailing whitespace characters as errors, and the\nfix involved stripping them, but modern Gits do more).\n\n\nerror outputs warnings for a few such errors, and refuses\nto apply the patch.\n\n\nerror-all is similar to error but shows all errors."
      },
      {
        "type": "long",
        "key": "inaccurate-eof",
        "title": "--inaccurate-eof",
        "description": "Under certain circumstances, some versions of diff do not correctly\ndetect a missing new-line at the end of the file. As a result, patches\ncreated by such diff programs do not record incomplete lines\ncorrectly. This option adds support for applying such patches by\nworking around this bug."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Report progress to stderr. By default, only a message about the\ncurrent patch being applied will be printed. This option will cause\nadditional information to be reported."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Report progress to stderr. By default, only a message about the\ncurrent patch being applied will be printed. This option will cause\nadditional information to be reported."
      },
      {
        "type": "long",
        "key": "recount",
        "title": "--recount",
        "description": "Do not trust the line counts in the hunk headers, but infer them\nby inspecting the patch (e.g. after editing the patch without\nadjusting the hunk headers appropriately)."
      },
      {
        "type": "long",
        "key": "directory",
        "title": "--directory=<root>",
        "description": "Prepend <root> to all filenames.  If a \"-p\" argument was also passed,\nit is applied before prepending the new root.\n\nFor example, a patch that talks about updating a/git-gui.sh to b/git-gui.sh\ncan be applied to the file in the working tree modules/git-gui/git-gui.sh by\nrunning git apply --directory=modules/git-gui."
      },
      {
        "type": "long",
        "key": "unsafe-paths",
        "title": "--unsafe-paths",
        "description": "By default, a patch that affects outside the working area\n(either a Git controlled working tree, or the current working\ndirectory when \"git apply\" is used as a replacement of GNU\npatch) is rejected as a mistake (or a mischief).\n\nWhen git apply is used as a \"better GNU patch\", the user can pass\nthe --unsafe-paths option to override this safety check.  This option\nhas no effect when --index or --cached is in use."
      }
    ]
  },
  {
    "name": "git checkout-index",
    "options": [
      {
        "type": "short",
        "key": "u",
        "title": "-u, --index",
        "description": "update stat information for the checked out entries in\nthe index file."
      },
      {
        "type": "long",
        "key": "index",
        "title": "-u, --index",
        "description": "update stat information for the checked out entries in\nthe index file."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "be quiet if files exist or are not in the index"
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "be quiet if files exist or are not in the index"
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f, --force",
        "description": "forces overwrite of existing files"
      },
      {
        "type": "long",
        "key": "force",
        "title": "-f, --force",
        "description": "forces overwrite of existing files"
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "checks out all files in the index.  Cannot be used\ntogether with explicit filenames."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "checks out all files in the index.  Cannot be used\ntogether with explicit filenames."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --no-create",
        "description": "Don’t checkout new files, only refresh files already checked\nout."
      },
      {
        "type": "long",
        "key": "no-create",
        "title": "-n, --no-create",
        "description": "Don’t checkout new files, only refresh files already checked\nout."
      },
      {
        "type": "long",
        "key": "prefix",
        "title": "--prefix=<string>",
        "description": "When creating files, prepend <string> (usually a directory\nincluding a trailing /)"
      },
      {
        "type": "long",
        "key": "stage",
        "title": "--stage=<number>|all",
        "description": "Instead of checking out unmerged entries, copy out the\nfiles from named stage.  <number> must be between 1 and 3.\nNote: --stage=all automatically implies --temp."
      },
      {
        "type": "long",
        "key": "temp",
        "title": "--temp",
        "description": "Instead of copying the files to the working directory\nwrite the content to temporary files.  The temporary name\nassociations will be written to stdout."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Instead of taking list of paths from the command line,\nread list of paths from the standard input.  Paths are\nseparated by LF (i.e. one path per line) by default."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "Only meaningful with --stdin; paths are separated with\nNUL character instead of LF."
      }
    ]
  },
  {
    "name": "git commit-graph",
    "options": [
      {
        "type": "long",
        "key": "object-dir",
        "title": "--object-dir",
        "description": "Use given directory for the location of packfiles and commit-graph\nfile. This parameter exists to specify the location of an alternate\nthat only has the objects directory, not a full .git directory. The\ncommit-graph file is expected to be in the <dir>/info directory and\nthe packfiles are expected to be in <dir>/pack. If the directory\ncould not be made into an absolute path, or does not match any known\nobject directory, git commit-graph ... will exit with non-zero\nstatus."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--[no-]progress",
        "description": "Turn progress on/off explicitly. If neither is specified, progress is\nshown if standard error is connected to a terminal."
      }
    ]
  },
  {
    "name": "git commit-tree",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p <parent>",
        "description": "Each -p indicates the id of a parent commit object."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m <message>",
        "description": "A paragraph in the commit log message. This can be given more than\nonce and each <message> becomes its own paragraph."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F <file>",
        "description": "Read the commit log message from the given file. Use - to read\nfrom the standard input. This can be given more than once and the\ncontent of each file becomes its own paragraph."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand a --gpg-sign option given earlier on the command line."
      },
      {
        "type": "long",
        "key": "gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand a --gpg-sign option given earlier on the command line."
      },
      {
        "type": "long",
        "key": "no-gpg-sign",
        "title": "-S[<keyid>], --gpg-sign[=<keyid>], --no-gpg-sign",
        "description": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand a --gpg-sign option given earlier on the command line."
      }
    ]
  },
  {
    "name": "git hash-object",
    "options": [
      {
        "type": "short",
        "key": "t",
        "title": "-t <type>",
        "description": "Specify the type (default: \"blob\")."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w",
        "description": "Actually write the object into the object database."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Read the object from standard input instead of from a file."
      },
      {
        "type": "long",
        "key": "stdin-paths",
        "title": "--stdin-paths",
        "description": "Read file names from the standard input, one per line, instead\nof from the command-line."
      },
      {
        "type": "long",
        "key": "path",
        "title": "--path",
        "description": "Hash object as it were located at the given path. The location of\nfile does not directly influence on the hash value, but path is\nused to determine what Git filters should be applied to the object\nbefore it can be placed to the object database, and, as result of\napplying filters, the actual blob put into the object database may\ndiffer from the given file. This option is mainly useful for hashing\ntemporary files located outside of the working directory or files\nread from stdin."
      },
      {
        "type": "long",
        "key": "no-filters",
        "title": "--no-filters",
        "description": "Hash the contents as is, ignoring any input filter that would\nhave been chosen by the attributes mechanism, including the end-of-line\nconversion. If the file is read from standard input then this\nis always implied, unless the --path option is given."
      },
      {
        "type": "long",
        "key": "literally",
        "title": "--literally",
        "description": "Allow --stdin to hash any garbage into a loose object which might not\notherwise pass standard object parsing or git-fsck checks. Useful for\nstress-testing Git itself or reproducing characteristics of corrupt or\nbogus objects encountered in the wild."
      }
    ]
  },
  {
    "name": "git index-pack",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Be verbose about what is going on, including progress status."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <index-file>",
        "description": "Write the generated pack index into the specified\nfile.  Without this option the name of pack index\nfile is constructed from the name of packed archive\nfile by replacing .pack with .idx (and the program\nfails if the name of packed archive does not end\nwith .pack)."
      },
      {
        "type": "long",
        "key": "rev-index",
        "title": "--[no-]rev-index",
        "description": "When this flag is provided, generate a reverse index\n(a .rev file) corresponding to the given pack. If\n--verify is given, ensure that the existing\nreverse index is correct. Takes precedence over\npack.writeReverseIndex."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "When this flag is provided, the pack is read from stdin\ninstead and a copy is then written to <pack-file>. If\n<pack-file> is not specified, the pack is written to\nobjects/pack/ directory of the current Git repository with\na default name determined from the pack content.  If\n<pack-file> is not specified consider using --keep to\nprevent a race condition between this process and\ngit repack."
      },
      {
        "type": "long",
        "key": "fix-thin",
        "title": "--fix-thin",
        "description": "Fix a \"thin\" pack produced by git pack-objects --thin (see\ngit-pack-objects[1] for details) by adding the\nexcluded objects the deltified objects are based on to the\npack. This option only makes sense in conjunction with --stdin."
      },
      {
        "type": "long",
        "key": "keep",
        "title": "--keep",
        "description": "Before moving the index into its final destination\ncreate an empty .keep file for the associated pack file.\nThis option is usually necessary with --stdin to prevent a\nsimultaneous git repack process from deleting\nthe newly constructed pack and index before refs can be\nupdated to use objects contained in the pack."
      },
      {
        "type": "long",
        "key": "index-version",
        "title": "--index-version=<version>[, <offset>]",
        "description": "This is intended to be used by the test suite only. It allows\nto force the version for the generated pack index, and to force\n64-bit index entries on objects located above the given offset."
      },
      {
        "type": "long",
        "key": "strict",
        "title": "--strict",
        "description": "Die, if the pack contains broken objects or links."
      },
      {
        "type": "long",
        "key": "check-self-contained-and-connected",
        "title": "--check-self-contained-and-connected",
        "description": "Die if the pack contains broken links. For internal use only."
      },
      {
        "type": "long",
        "key": "fsck-objects",
        "title": "--fsck-objects",
        "description": "For internal use only.\n\nDie if the pack contains broken objects. If the pack contains a tree\npointing to a .gitmodules blob that does not exist, prints the hash of\nthat blob (for the caller to check) after the hash that goes into the\nname of the pack/idx file (see \"Notes\")."
      },
      {
        "type": "long",
        "key": "threads",
        "title": "--threads=<n>",
        "description": "Specifies the number of threads to spawn when resolving\ndeltas. This requires that index-pack be compiled with\npthreads otherwise this option is ignored with a warning.\nThis is meant to reduce packing time on multiprocessor\nmachines. The required amount of memory for the delta search\nwindow is however multiplied by the number of threads.\nSpecifying 0 will cause Git to auto-detect the number of CPU’s\nand use maximum 3 threads."
      },
      {
        "type": "long",
        "key": "max-input-size",
        "title": "--max-input-size=<size>",
        "description": "Die, if the pack is larger than <size>."
      },
      {
        "type": "long",
        "key": "object-format",
        "title": "--object-format=<hash-algorithm>",
        "description": "Specify the given object format (hash algorithm) for the pack.  The valid\nvalues are sha1 and (if enabled) sha256.  The default is the algorithm for\nthe current repository (set by extensions.objectFormat), or sha1 if no\nvalue is set or outside a repository.\n\nThis option cannot be used with --stdin.\n\n\nTHIS OPTION IS EXPERIMENTAL! SHA-256 support is experimental and still\nin an early stage.  A SHA-256 repository will in general not be able to\nshare work with \"regular\" SHA-1 repositories.  It should be assumed\nthat, e.g., Git internal file formats in relation to SHA-256\nrepositories may change in backwards-incompatible ways.  Only use\n--object-format=sha256 for testing purposes."
      }
    ]
  },
  {
    "name": "git merge-file",
    "options": [
      {
        "type": "short",
        "key": "L",
        "title": "-L <label>",
        "description": "This option may be given up to three times, and\nspecifies labels to be used in place of the\ncorresponding file names in conflict reports. That is,\ngit merge-file -L x -L y -L z a b c generates output that\nlooks like it came from files x, y and z instead of\nfrom files a, b and c."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p",
        "description": "Send results to standard output instead of overwriting\n<current-file>."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "Quiet; do not warn about conflicts."
      },
      {
        "type": "long",
        "key": "diff3",
        "title": "--diff3",
        "description": "Show conflicts in \"diff3\" style."
      },
      {
        "type": "long",
        "key": "ours",
        "title": "--ours, --theirs, --union",
        "description": "Instead of leaving conflicts in the file, resolve conflicts\nfavouring our (or their or both) side of the lines."
      },
      {
        "type": "long",
        "key": "theirs",
        "title": "--ours, --theirs, --union",
        "description": "Instead of leaving conflicts in the file, resolve conflicts\nfavouring our (or their or both) side of the lines."
      },
      {
        "type": "long",
        "key": "union",
        "title": "--ours, --theirs, --union",
        "description": "Instead of leaving conflicts in the file, resolve conflicts\nfavouring our (or their or both) side of the lines."
      }
    ]
  },
  {
    "name": "git merge-index",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a",
        "description": "Run merge against all files in the index that need merging."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o",
        "description": "Instead of stopping at the first failed merge, do all of them\nin one shot - continue with merging even when previous merges\nreturned errors, and only return the error code after all the\nmerges."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "Do not complain about a failed merge program (a merge program\nfailure usually indicates conflicts during the merge). This is for\nporcelains which might want to emit custom messages."
      }
    ]
  },
  {
    "name": "git multi-pack-index",
    "options": [
      {
        "type": "long",
        "key": "object-dir",
        "title": "--object-dir=<dir>",
        "description": "Use given directory for the location of Git objects. We check\n<dir>/packs/multi-pack-index for the current MIDX file, and\n<dir>/packs for the pack-files to index."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--[no-]progress",
        "description": "Turn progress on/off explicitly. If neither is specified, progress is\nshown if standard error is connected to a terminal."
      },
      {
        "type": "long",
        "key": "preferred-pack",
        "title": "--preferred-pack=<pack>",
        "description": "Optionally specify the tie-breaking pack used when\nmultiple packs contain the same object. If not given,\nties are broken in favor of the pack with the lowest\nmtime."
      }
    ]
  },
  {
    "name": "git mktag",
    "options": [
      {
        "type": "long",
        "key": "strict",
        "title": "--strict",
        "description": "By default mktag turns on the equivalent of\ngit-fsck[1] --strict mode. Use --no-strict to\ndisable it."
      }
    ]
  },
  {
    "name": "git mktree",
    "options": [
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "Read the NUL-terminated ls-tree -z output instead."
      },
      {
        "type": "long",
        "key": "missing",
        "title": "--missing",
        "description": "Allow missing objects.  The default behaviour (without this option)\nis to verify that each tree entry’s sha1 identifies an existing\nobject.  This option has no effect on the treatment of gitlink entries\n(aka \"submodules\") which are always allowed to be missing."
      },
      {
        "type": "long",
        "key": "batch",
        "title": "--batch",
        "description": "Allow building of more than one tree object before exiting.  Each\ntree is separated by as single blank line. The final new-line is\noptional.  Note - if the -z option is used, lines are terminated\nwith NUL."
      }
    ]
  },
  {
    "name": "git pack-objects",
    "options": [
      {
        "type": "long",
        "key": "stdout",
        "title": "--stdout",
        "description": "Write the pack contents (what would have been written to\n.pack file) out to the standard output."
      },
      {
        "type": "long",
        "key": "revs",
        "title": "--revs",
        "description": "Read the revision arguments from the standard input, instead of\nindividual object names.  The revision arguments are processed\nthe same way as git rev-list with the --objects flag\nuses its commit arguments to build the list of objects it\noutputs.  The objects on the resulting list are packed.\nBesides revisions, --not or --shallow <SHA-1> lines are\nalso accepted."
      },
      {
        "type": "long",
        "key": "unpacked",
        "title": "--unpacked",
        "description": "This implies --revs.  When processing the list of\nrevision arguments read from the standard input, limit\nthe objects packed to those that are not already packed."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "This implies --revs.  In addition to the list of\nrevision arguments read from the standard input, pretend\nas if all refs under refs/ are specified to be\nincluded."
      },
      {
        "type": "long",
        "key": "include-tag",
        "title": "--include-tag",
        "description": "Include unasked-for annotated tags if the object they\nreference was included in the resulting packfile.  This\ncan be useful to send new tags to native Git clients."
      },
      {
        "type": "long",
        "key": "stdin-packs",
        "title": "--stdin-packs",
        "description": "Read the basenames of packfiles (e.g., pack-1234abcd.pack)\nfrom the standard input, instead of object names or revision\narguments. The resulting pack contains all objects listed in the\nincluded packs (those not beginning with ^), excluding any\nobjects listed in the excluded packs (beginning with ^).\n\nIncompatible with --revs, or options that imply --revs (such as\n--all), with the exception of --unpacked, which is compatible."
      },
      {
        "type": "long",
        "key": "window",
        "title": "--window=<n>, --depth=<n>",
        "description": "These two options affect how the objects contained in\nthe pack are stored using delta compression.  The\nobjects are first internally sorted by type, size and\noptionally names and compared against the other objects\nwithin --window to see if using delta compression saves\nspace.  --depth limits the maximum delta depth; making\nit too deep affects the performance on the unpacker\nside, because delta data needs to be applied that many\ntimes to get to the necessary object.\n\nThe default value for --window is 10 and --depth is 50. The maximum\ndepth is 4095."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--window=<n>, --depth=<n>",
        "description": "These two options affect how the objects contained in\nthe pack are stored using delta compression.  The\nobjects are first internally sorted by type, size and\noptionally names and compared against the other objects\nwithin --window to see if using delta compression saves\nspace.  --depth limits the maximum delta depth; making\nit too deep affects the performance on the unpacker\nside, because delta data needs to be applied that many\ntimes to get to the necessary object.\n\nThe default value for --window is 10 and --depth is 50. The maximum\ndepth is 4095."
      },
      {
        "type": "long",
        "key": "window-memory",
        "title": "--window-memory=<n>",
        "description": "This option provides an additional limit on top of --window;\nthe window size will dynamically scale down so as to not take\nup more than <n> bytes in memory.  This is useful in\nrepositories with a mix of large and small objects to not run\nout of memory with a large window, but still be able to take\nadvantage of the large window for the smaller objects.  The\nsize can be suffixed with \"k\", \"m\", or \"g\".\n--window-memory=0 makes memory usage unlimited.  The default\nis taken from the pack.windowMemory configuration variable."
      },
      {
        "type": "long",
        "key": "max-pack-size",
        "title": "--max-pack-size=<n>",
        "description": "In unusual scenarios, you may not be able to create files\nlarger than a certain size on your filesystem, and this option\ncan be used to tell the command to split the output packfile\ninto multiple independent packfiles, each not larger than the\ngiven size. The size can be suffixed with\n\"k\", \"m\", or \"g\". The minimum size allowed is limited to 1 MiB.\nThe default is unlimited, unless the config variable\npack.packSizeLimit is set. Note that this option may result in\na larger and slower repository; see the discussion in\npack.packSizeLimit."
      },
      {
        "type": "long",
        "key": "honor-pack-keep",
        "title": "--honor-pack-keep",
        "description": "This flag causes an object already in a local pack that\nhas a .keep file to be ignored, even if it would have\notherwise been packed."
      },
      {
        "type": "long",
        "key": "keep-pack",
        "title": "--keep-pack=<pack-name>",
        "description": "This flag causes an object already in the given pack to be\nignored, even if it would have otherwise been\npacked. <pack-name> is the pack file name without\nleading directory (e.g. pack-123.pack). The option could be\nspecified multiple times to keep multiple packs."
      },
      {
        "type": "long",
        "key": "incremental",
        "title": "--incremental",
        "description": "This flag causes an object already in a pack to be ignored\neven if it would have otherwise been packed."
      },
      {
        "type": "long",
        "key": "local",
        "title": "--local",
        "description": "This flag causes an object that is borrowed from an alternate\nobject store to be ignored even if it would have otherwise been\npacked."
      },
      {
        "type": "long",
        "key": "non-empty",
        "title": "--non-empty",
        "description": "Only create a packed archive if it would contain at\nleast one object."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress",
        "description": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if\nthe standard error stream is not directed to a terminal."
      },
      {
        "type": "long",
        "key": "all-progress",
        "title": "--all-progress",
        "description": "When --stdout is specified then progress report is\ndisplayed during the object count and compression phases\nbut inhibited during the write-out phase. The reason is\nthat in some cases the output stream is directly linked\nto another command which may wish to display progress\nstatus of its own as it processes incoming pack data.\nThis flag is like --progress except that it forces progress\nreport for the write-out phase as well even if --stdout is\nused."
      },
      {
        "type": "long",
        "key": "all-progress-implied",
        "title": "--all-progress-implied",
        "description": "This is used to imply --all-progress whenever progress display\nis activated.  Unlike --all-progress this flag doesn’t actually\nforce any progress display by itself."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "This flag makes the command not to report its progress\non the standard error stream."
      },
      {
        "type": "long",
        "key": "no-reuse-delta",
        "title": "--no-reuse-delta",
        "description": "When creating a packed archive in a repository that\nhas existing packs, the command reuses existing deltas.\nThis sometimes results in a slightly suboptimal pack.\nThis flag tells the command not to reuse existing deltas\nbut compute them from scratch."
      },
      {
        "type": "long",
        "key": "no-reuse-object",
        "title": "--no-reuse-object",
        "description": "This flag tells the command not to reuse existing object data at all,\nincluding non deltified object, forcing recompression of everything.\nThis implies --no-reuse-delta. Useful only in the obscure case where\nwholesale enforcement of a different compression level on the\npacked data is desired."
      },
      {
        "type": "long",
        "key": "compression",
        "title": "--compression=<n>",
        "description": "Specifies compression level for newly-compressed data in the\ngenerated pack.  If not specified,  pack compression level is\ndetermined first by pack.compression,  then by core.compression,\nand defaults to -1,  the zlib default,  if neither is set.\nAdd --no-reuse-object if you want to force a uniform compression\nlevel on all data no matter the source."
      },
      {
        "type": "long",
        "key": "sparse",
        "title": "--[no-]sparse",
        "description": "Toggle the \"sparse\" algorithm to determine which objects to include in\nthe pack, when combined with the \"--revs\" option. This algorithm\nonly walks trees that appear in paths that introduce new objects.\nThis can have significant performance benefits when computing\na pack to send a small change. However, it is possible that extra\nobjects are added to the pack-file if the included commits contain\ncertain types of direct renames. If this option is not included,\nit defaults to the value of pack.useSparse, which is true unless\notherwise specified."
      },
      {
        "type": "long",
        "key": "thin",
        "title": "--thin",
        "description": "Create a \"thin\" pack by omitting the common objects between a\nsender and a receiver in order to reduce network transfer. This\noption only makes sense in conjunction with --stdout.\n\nNote: A thin pack violates the packed archive format by omitting\nrequired objects and is thus unusable by Git without making it\nself-contained. Use git index-pack --fix-thin\n(see git-index-pack[1]) to restore the self-contained property."
      },
      {
        "type": "long",
        "key": "shallow",
        "title": "--shallow",
        "description": "Optimize a pack that will be provided to a client with a shallow\nrepository.  This option, combined with --thin, can result in a\nsmaller pack at the cost of speed."
      },
      {
        "type": "long",
        "key": "delta-base-offset",
        "title": "--delta-base-offset",
        "description": "A packed archive can express the base object of a delta as\neither a 20-byte object name or as an offset in the\nstream, but ancient versions of Git don’t understand the\nlatter.  By default, git pack-objects only uses the\nformer format for better compatibility.  This option\nallows the command to use the latter format for\ncompactness.  Depending on the average delta chain\nlength, this option typically shrinks the resulting\npackfile by 3-5 per-cent.\n\nNote: Porcelain commands such as git gc (see git-gc[1]),\ngit repack (see git-repack[1]) pass this option by default\nin modern Git when they put objects in your repository into pack files.\nSo does git bundle (see git-bundle[1]) when it creates a bundle."
      },
      {
        "type": "long",
        "key": "threads",
        "title": "--threads=<n>",
        "description": "Specifies the number of threads to spawn when searching for best\ndelta matches.  This requires that pack-objects be compiled with\npthreads otherwise this option is ignored with a warning.\nThis is meant to reduce packing time on multiprocessor machines.\nThe required amount of memory for the delta search window is\nhowever multiplied by the number of threads.\nSpecifying 0 will cause Git to auto-detect the number of CPU’s\nand set the number of threads accordingly."
      },
      {
        "type": "long",
        "key": "index-version",
        "title": "--index-version=<version>[, <offset>]",
        "description": "This is intended to be used by the test suite only. It allows\nto force the version for the generated pack index, and to force\n64-bit index entries on objects located above the given offset."
      },
      {
        "type": "long",
        "key": "keep-true-parents",
        "title": "--keep-true-parents",
        "description": "With this option, parents that are hidden by grafts are packed\nnevertheless."
      },
      {
        "type": "long",
        "key": "filter",
        "title": "--filter=<filter-spec>",
        "description": "Requires --stdout.  Omits certain objects (usually blobs) from\nthe resulting packfile.  See git-rev-list[1] for valid\n<filter-spec> forms."
      },
      {
        "type": "long",
        "key": "no-filter",
        "title": "--no-filter",
        "description": "Turns off any previous --filter= argument."
      },
      {
        "type": "long",
        "key": "missing",
        "title": "--missing=<missing-action>",
        "description": "A debug option to help with future \"partial clone\" development.\nThis option specifies how missing objects are handled.\n\nThe form --missing=error requests that pack-objects stop with an error if\na missing object is encountered.  If the repository is a partial clone, an\nattempt to fetch missing objects will be made before declaring them missing.\nThis is the default action.\n\n\nThe form --missing=allow-any will allow object traversal to continue\nif a missing object is encountered.  No fetch of a missing object will occur.\nMissing objects will silently be omitted from the results.\n\n\nThe form --missing=allow-promisor is like allow-any, but will only\nallow object traversal to continue for EXPECTED promisor missing objects.\nNo fetch of a missing object will occur.  An unexpected missing object will\nraise an error."
      },
      {
        "type": "long",
        "key": "exclude-promisor-objects",
        "title": "--exclude-promisor-objects",
        "description": "Omit objects that are known to be in the promisor remote.  (This\noption has the purpose of operating only on locally created objects,\nso that when we repack, we still maintain a distinction between\nlocally created objects [without .promisor] and objects from the\npromisor remote [with .promisor].)  This is used with partial clone."
      },
      {
        "type": "long",
        "key": "keep-unreachable",
        "title": "--keep-unreachable",
        "description": "Objects unreachable from the refs in packs named with\n--unpacked= option are added to the resulting pack, in\naddition to the reachable objects that are not in packs marked\nwith *.keep files. This implies --revs."
      },
      {
        "type": "long",
        "key": "pack-loose-unreachable",
        "title": "--pack-loose-unreachable",
        "description": "Pack unreachable loose objects (and their loose counterparts\nremoved). This implies --revs."
      },
      {
        "type": "long",
        "key": "unpack-unreachable",
        "title": "--unpack-unreachable",
        "description": "Keep unreachable objects in loose form. This implies --revs."
      },
      {
        "type": "long",
        "key": "delta-islands",
        "title": "--delta-islands",
        "description": "Restrict delta matches based on \"islands\". See DELTA ISLANDS\nbelow."
      }
    ]
  },
  {
    "name": "git prune-packed",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-n, --dry-run",
        "description": "Don’t actually remove any objects, only show those that would have been\nremoved."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "-n, --dry-run",
        "description": "Don’t actually remove any objects, only show those that would have been\nremoved."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Squelch the progress indicator."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Squelch the progress indicator."
      }
    ]
  },
  {
    "name": "git symbolic-ref",
    "options": [
      {
        "type": "short",
        "key": "d",
        "title": "-d, --delete",
        "description": "Delete the symbolic ref <name>."
      },
      {
        "type": "long",
        "key": "delete",
        "title": "-d, --delete",
        "description": "Delete the symbolic ref <name>."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Do not issue an error message if the <name> is not a\nsymbolic ref but a detached HEAD; instead exit with\nnon-zero status silently."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Do not issue an error message if the <name> is not a\nsymbolic ref but a detached HEAD; instead exit with\nnon-zero status silently."
      },
      {
        "type": "long",
        "key": "short",
        "title": "--short",
        "description": "When showing the value of <name> as a symbolic ref, try to shorten the\nvalue, e.g. from refs/heads/master to master."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m",
        "description": "Update the reflog for <name> with <reason>.  This is valid only\nwhen creating or updating a symbolic ref."
      }
    ]
  },
  {
    "name": "git unpack-objects",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-n",
        "description": "Dry run.  Check the pack file without actually unpacking\nthe objects."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "The command usually shows percentage progress.  This\nflag suppresses it."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r",
        "description": "When unpacking a corrupt packfile, the command dies at\nthe first corruption.  This flag tells it to keep going\nand make the best effort to recover as many objects as\npossible."
      },
      {
        "type": "long",
        "key": "strict",
        "title": "--strict",
        "description": "Don’t write objects with broken content or links."
      },
      {
        "type": "long",
        "key": "max-input-size",
        "title": "--max-input-size=<size>",
        "description": "Die, if the pack is larger than <size>."
      }
    ]
  },
  {
    "name": "git update-ref",
    "options": []
  },
  {
    "name": "git write-tree",
    "options": [
      {
        "type": "long",
        "key": "missing-ok",
        "title": "--missing-ok",
        "description": "Normally git write-tree ensures that the objects referenced by the\ndirectory exist in the object database.  This option disables this\ncheck."
      },
      {
        "type": "long",
        "key": "prefix",
        "title": "--prefix=<prefix>/",
        "description": "Writes a tree object that represents a subdirectory\n<prefix>.  This can be used to write the tree object\nfor a subproject that is in the named subdirectory."
      }
    ]
  },
  {
    "name": "git cat-file",
    "options": [
      {
        "type": "short",
        "key": "t",
        "title": "-t",
        "description": "Instead of the content, show the object type identified by\n<object>."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s",
        "description": "Instead of the content, show the object size identified by\n<object>."
      },
      {
        "type": "short",
        "key": "e",
        "title": "-e",
        "description": "Exit with zero status if <object> exists and is a valid\nobject. If <object> is of an invalid format exit with non-zero and\nemits an error on stderr."
      },
      {
        "type": "short",
        "key": "p",
        "title": "-p",
        "description": "Pretty-print the contents of <object> based on its type."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv",
        "description": "Show the content as transformed by a textconv filter. In this case,\n<object> has to be of the form <tree-ish>:<path>, or :<path> in\norder to apply the filter to the content recorded in the index at\n<path>."
      },
      {
        "type": "long",
        "key": "filters",
        "title": "--filters",
        "description": "Show the content as converted by the filters configured in\nthe current working tree for the given <path> (i.e. smudge filters,\nend-of-line conversion, etc). In this case, <object> has to be of\nthe form <tree-ish>:<path>, or :<path>."
      },
      {
        "type": "long",
        "key": "path",
        "title": "--path=<path>",
        "description": "For use with --textconv or --filters, to allow specifying an object\nname and a path separately, e.g. when it is difficult to figure out\nthe revision from which the blob came."
      },
      {
        "type": "long",
        "key": "batch",
        "title": "--batch, --batch=<format>",
        "description": "Print object information and contents for each object provided\non stdin.  May not be combined with any other options or arguments\nexcept --textconv or --filters, in which case the input lines\nalso need to specify the path, separated by whitespace.  See the\nsection BATCH OUTPUT below for details."
      },
      {
        "type": "long",
        "key": "batch-check",
        "title": "--batch-check, --batch-check=<format>",
        "description": "Print object information for each object provided on stdin.  May\nnot be combined with any other options or arguments except\n--textconv or --filters, in which case the input lines also\nneed to specify the path, separated by whitespace.  See the\nsection BATCH OUTPUT below for details."
      },
      {
        "type": "long",
        "key": "batch-all-objects",
        "title": "--batch-all-objects",
        "description": "Instead of reading a list of objects on stdin, perform the\nrequested batch operation on all objects in the repository and\nany alternate object stores (not just reachable objects).\nRequires --batch or --batch-check be specified. Note that\nthe objects are visited in order sorted by their hashes."
      },
      {
        "type": "long",
        "key": "buffer",
        "title": "--buffer",
        "description": "Normally batch output is flushed after each object is output, so\nthat a process can interactively read and write from\ncat-file. With this option, the output uses normal stdio\nbuffering; this is much more efficient when invoking\n--batch-check on a large number of objects."
      },
      {
        "type": "long",
        "key": "unordered",
        "title": "--unordered",
        "description": "When --batch-all-objects is in use, visit objects in an\norder which may be more efficient for accessing the object\ncontents than hash order. The exact details of the order are\nunspecified, but if you do not require a specific order, this\nshould generally result in faster output, especially with\n--batch.  Note that cat-file will still show each object\nonly once, even if it is stored multiple times in the\nrepository."
      },
      {
        "type": "long",
        "key": "allow-unknown-type",
        "title": "--allow-unknown-type",
        "description": "Allow -s or -t to query broken/corrupt objects of unknown type."
      },
      {
        "type": "long",
        "key": "follow-symlinks",
        "title": "--follow-symlinks",
        "description": "With --batch or --batch-check, follow symlinks inside the\nrepository when requesting objects with extended SHA-1\nexpressions of the form tree-ish:path-in-tree.  Instead of\nproviding output about the link itself, provide output about\nthe linked-to object.  If a symlink points outside the\ntree-ish (e.g. a link to /foo or a root-level link to ../foo),\nthe portion of the link which is outside the tree will be\nprinted.\n\nThis option does not (currently) work correctly when an object in the\nindex is specified (e.g. :link instead of HEAD:link) rather than\none in the tree.\n\n\nThis option cannot (currently) be used unless --batch or\n--batch-check is used.\n\n\nFor example, consider a git repository containing:\n\n\n\n\n\nf: a file containing \"hello\\n\"\nlink: a symlink to f\ndir/link: a symlink to ../f\nplink: a symlink to ../f\nalink: a symlink to /etc/passwd\n\n\n\n\n\nFor a regular file f, echo HEAD:f | git cat-file --batch would print\n\n\n\n\n\nce013625030ba8dba906f756967f9e9ca394464a blob 6\n\n\n\n\n\nAnd echo HEAD:link | git cat-file --batch --follow-symlinks would\nprint the same thing, as would HEAD:dir/link, as they both point at\nHEAD:f.\n\n\nWithout --follow-symlinks, these would print data about the symlink\nitself.  In the case of HEAD:link, you would see\n\n\n\n\n\n4d1ae35ba2c8ec712fa2a379db44ad639ca277bd blob 1\n\n\n\n\n\nBoth plink and alink point outside the tree, so they would\nrespectively print:\n\n\n\n\n\nsymlink 4\n../f\n\n\n\n\nsymlink 11\n/etc/passwd"
      }
    ]
  },
  {
    "name": "git cherry",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Show the commit subjects next to the SHA1s."
      }
    ]
  },
  {
    "name": "git diff-files",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that\nshow the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "long",
        "key": "no-patch",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that\nshow the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "short",
        "key": "U",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch."
      },
      {
        "type": "long",
        "key": "unified",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch."
      },
      {
        "type": "long",
        "key": "output",
        "title": "--output=<file>",
        "description": "Output to a specific file instead of stdout."
      },
      {
        "type": "long",
        "key": "output-indicator-new",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-old",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-context",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "Generate the diff in raw format.\nThis is the default."
      },
      {
        "type": "long",
        "key": "patch-with-raw",
        "title": "--patch-with-raw",
        "description": "Synonym for -p --raw."
      },
      {
        "type": "long",
        "key": "indent-heuristic",
        "title": "--indent-heuristic",
        "description": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."
      },
      {
        "type": "long",
        "key": "no-indent-heuristic",
        "title": "--no-indent-heuristic",
        "description": "Disable the indent heuristic."
      },
      {
        "type": "long",
        "key": "minimal",
        "title": "--minimal",
        "description": "Spend extra time to make sure the smallest possible\ndiff is produced."
      },
      {
        "type": "long",
        "key": "patience",
        "title": "--patience",
        "description": "Generate a diff using the \"patience diff\" algorithm."
      },
      {
        "type": "long",
        "key": "histogram",
        "title": "--histogram",
        "description": "Generate a diff using the \"histogram diff\" algorithm."
      },
      {
        "type": "long",
        "key": "anchored",
        "title": "--anchored=<text>",
        "description": "Generate a diff using the \"anchored diff\" algorithm.\n\nThis option may be specified more than once.\n\n\nIf a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."
      },
      {
        "type": "long",
        "key": "diff-algorithm",
        "title": "--diff-algorithm={patience|minimal|histogram|myers}",
        "description": "Choose a diff algorithm. The variants are as follows:\n\n\n\n\n default, myers \n\nThe basic greedy diff algorithm. Currently, this is the default.\n\n minimal \n\nSpend extra time to make sure the smallest possible diff is\nproduced.\n\n patience \n\nUse \"patience diff\" algorithm when generating patches.\n\n histogram \n\nThis algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\".\n\n\n\n\n\n\nFor instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat[=<width>[, <name-width>[, <count>]]]",
        "description": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by\n<width>. The width of the filename part can be limited by\ngiving another width <name-width> after a comma. The width\nof the graph part can be limited by using\n--stat-graph-width=<width> (affects all commands generating\na stat graph) or by setting diff.statGraphWidth=<width>\n(does not affect git format-patch).\nBy giving a third parameter <count>, you can limit the\noutput to the first <count> lines, followed by ... if\nthere are more.\n\nThese parameters can also be set individually with --stat-width=<width>,\n--stat-name-width=<name-width> and --stat-count=<count>."
      },
      {
        "type": "long",
        "key": "compact-summary",
        "title": "--compact-summary",
        "description": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat."
      },
      {
        "type": "long",
        "key": "numstat",
        "title": "--numstat",
        "description": "Similar to --stat, but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying\n0 0."
      },
      {
        "type": "long",
        "key": "shortstat",
        "title": "--shortstat",
        "description": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X[<param1, param2, …​>], --dirstat[=<param1, param2, …​>]",
        "description": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:\n\n\n\n\n changes \n\nCompute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.\n\n lines \n\nCompute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.\n\n files \n\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.\n\n cumulative \n\nCount changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.\n\n <limit> \n\nAn integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.\n\n\n\n\n\n\nExample: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories:\n--dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "dirstat",
        "title": "-X[<param1, param2, …​>], --dirstat[=<param1, param2, …​>]",
        "description": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:\n\n\n\n\n changes \n\nCompute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.\n\n lines \n\nCompute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.\n\n files \n\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.\n\n cumulative \n\nCount changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.\n\n <limit> \n\nAn integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.\n\n\n\n\n\n\nExample: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories:\n--dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "cumulative",
        "title": "--cumulative",
        "description": "Synonym for --dirstat=cumulative"
      },
      {
        "type": "long",
        "key": "dirstat-by-file",
        "title": "--dirstat-by-file[=<param1, param2>…​]",
        "description": "Synonym for --dirstat=files,param1,param2…​"
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary",
        "description": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."
      },
      {
        "type": "long",
        "key": "patch-with-stat",
        "title": "--patch-with-stat",
        "description": "Synonym for -p --stat."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "When --raw, --numstat, --name-only or --name-status has been\ngiven, do not munge pathnames and use NULs as output field terminators.\n\nWithout this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see\ngit-config[1])."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only",
        "description": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log[1]\nmanual page."
      },
      {
        "type": "long",
        "key": "name-status",
        "title": "--name-status",
        "description": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."
      },
      {
        "type": "long",
        "key": "submodule",
        "title": "--submodule[=<format>]",
        "description": "Specify how differences in submodules are shown.  When specifying\n--submodule=short the short format is used.  This format just\nshows the names of the commits at the beginning and end of the range.\nWhen --submodule or --submodule=log is specified, the log\nformat is used.  This format lists the commits in the range like\ngit-submodule[1] summary does.  When --submodule=diff\nis specified, the diff format is used.  This format shows an\ninline diff of the changes in the submodule contents between the\ncommit range.  Defaults to diff.submodule or the short format\nif the config option is unset."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Show colored diff.\n--color (i.e. without =<when>) is the same as --color=always.\n<when> can be one of always, never, or auto."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off colored diff.\nIt is the same as --color=never."
      },
      {
        "type": "long",
        "key": "color-moved",
        "title": "--color-moved[=<mode>]",
        "description": "Moved lines of code are colored differently.\nThe <mode> defaults to no if the option is not given\nand to zebra if the option with no mode is given.\nThe mode must be one of:\n\n\n\n\n no \n\nMoved lines are not highlighted.\n\n default \n\nIs a synonym for zebra. This may change to a more sensible mode\nin the future.\n\n plain \n\nAny line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved.\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation.\n\n blocks \n\nBlocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart.\n\n zebra \n\nBlocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or\ncolor.diff.{old,new}MovedAlternative. The change between\nthe two colors indicates that a new block was detected.\n\n dimmed-zebra \n\nSimilar to zebra, but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting.\ndimmed_zebra is a deprecated synonym."
      },
      {
        "type": "long",
        "key": "no-color-moved",
        "title": "--no-color-moved",
        "description": "Turn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no."
      },
      {
        "type": "long",
        "key": "color-moved-ws",
        "title": "--color-moved-ws=<modes>",
        "description": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved.\nThese modes can be given as a comma separated list:\n\n\n\n\n no \n\nDo not ignore whitespace when performing move detection.\n\n ignore-space-at-eol \n\nIgnore changes in whitespace at EOL.\n\n ignore-space-change \n\nIgnore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.\n\n ignore-all-space \n\nIgnore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none.\n\n allow-indentation-change \n\nInitially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."
      },
      {
        "type": "long",
        "key": "no-color-moved-ws",
        "title": "--no-color-moved-ws",
        "description": "Do not ignore whitespace when performing move detection. This can be\nused to override configuration settings. It is the same as\n--color-moved-ws=no."
      },
      {
        "type": "long",
        "key": "word-diff",
        "title": "--word-diff[=<mode>]",
        "description": "Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see\n--word-diff-regex below.  The <mode> defaults to plain, and\nmust be one of:\n\n\n\n\n color \n\nHighlight changed words using only colors.  Implies --color.\n\n plain \n\nShow words as [-removed-] and {+added+}.  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous.\n\n porcelain \n\nUse a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a +/-/` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own.\n\n none \n\nDisable word diff again.\n\n\n\n\n\n\nNote that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled."
      },
      {
        "type": "long",
        "key": "word-diff-regex",
        "title": "--word-diff-regex=<regex>",
        "description": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies\n--word-diff unless it was already enabled.\n\nEvery non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline.\n\n\nFor example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character.\n\n\nThe regex can also be set via a diff driver or configuration option, see\ngitattributes[5] or git-config[1].  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."
      },
      {
        "type": "long",
        "key": "color-words",
        "title": "--color-words[=<regex>]",
        "description": "Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex>."
      },
      {
        "type": "long",
        "key": "no-renames",
        "title": "--no-renames",
        "description": "Turn off rename detection, even when the configuration\nfile gives the default to do so."
      },
      {
        "type": "long",
        "key": "rename-empty",
        "title": "--[no-]rename-empty",
        "description": "Whether to use empty blobs as rename source."
      },
      {
        "type": "long",
        "key": "check",
        "title": "--check",
        "description": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace\nconfiguration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."
      },
      {
        "type": "long",
        "key": "ws-error-highlight",
        "title": "--ws-error-highlight=<kind>",
        "description": "Highlight whitespace errors in the context, old or new\nlines of the diff.  Multiple values are separated by comma,\nnone resets previous values, default reset the list to\nnew and all is a shorthand for old,new,context.  When\nthis option is not given, and the configuration variable\ndiff.wsErrorHighlight is not set, only whitespace errors in\nnew lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace."
      },
      {
        "type": "long",
        "key": "full-index",
        "title": "--full-index",
        "description": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."
      },
      {
        "type": "long",
        "key": "binary",
        "title": "--binary",
        "description": "In addition to --full-index, output a binary diff that\ncan be applied with git-apply.\nImplies --patch."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n>\nhexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev.\nNon default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines).\n\n\nWhen used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."
      },
      {
        "type": "long",
        "key": "break-rewrites",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines).\n\n\nWhen used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%."
      },
      {
        "type": "long",
        "key": "find-renames",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies-harder",
        "title": "--find-copies-harder",
        "description": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one\n-C option has the same effect."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part\nof a delete/create pair."
      },
      {
        "type": "long",
        "key": "irreversible-delete",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part\nof a delete/create pair."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l<num>",
        "description": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."
      },
      {
        "type": "long",
        "key": "diff-filter",
        "title": "--diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]",
        "description": "Select only files that are Added (A), Copied (C),\nDeleted (D), Modified (M), Renamed (R), have their\ntype (i.e. regular file, symlink, submodule, …​) changed (T),\nare Unmerged (U), are\nUnknown (X), or have had their pairing Broken (B).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected.\n\nAlso, these upper-case letters can be downcased to exclude.  E.g.\n--diff-filter=ad excludes added and deleted paths.\n\n\nNote that not all diffs can feature all types. For instance, diffs\nfrom the index to the working tree can never have Added entries\n(because the set of paths included in the diff is limited by what is in\nthe index).  Similarly, copied and renamed entries cannot appear if\ndetection for those types is disabled."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S<string>",
        "description": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use.\n\nIt is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S, and keep going until you get the\nvery first version of the block.\n\n\nBinary files are searched as well."
      },
      {
        "type": "short",
        "key": "G",
        "title": "-G<regex>",
        "description": "Look for differences whose patch text contains added/removed\nlines that match <regex>.\n\nTo illustrate the difference between -S<regex> --pickaxe-regex and\n-G<regex>, consider a commit with the following diff in the same\nfile:\n\n\n\n+    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0);\n\n\n\nWhile git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change).\n\n\nUnless --text is supplied patches of binary files without a textconv\nfilter will be ignored.\n\n\nSee the pickaxe entry in gitdiffcore[7] for more\ninformation."
      },
      {
        "type": "long",
        "key": "find-object",
        "title": "--find-object=<object-id>",
        "description": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S, just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id.\n\nThe object can be a blob or a submodule commit. It implies the -t option in\ngit-log to also find trees."
      },
      {
        "type": "long",
        "key": "pickaxe-all",
        "title": "--pickaxe-all",
        "description": "When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>."
      },
      {
        "type": "long",
        "key": "pickaxe-regex",
        "title": "--pickaxe-regex",
        "description": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O<orderfile>",
        "description": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config[1]).  To cancel diff.orderFile,\nuse -O/dev/null.\n\nThe output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order.\n\n\n<orderfile> is parsed as follows:\n\n\n\n\n\n\nBlank lines are ignored, so they can be used as separators for\nreadability.\n\n\nLines starting with a hash (\"#\") are ignored, so they can be used\nfor comments.  Add a backslash (\"\\\") to the beginning of the\npattern if it starts with a hash.\n\n\nEach other line contains a single pattern.\n\n\n\n\n\n\nPatterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \"foo*bar\"\nmatches \"fooasdfbar\" and \"foo/bar/baz/asdf\" but not \"foobarx\"."
      },
      {
        "type": "long",
        "key": "skip-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output\n(i.e. skip to), or move them to the end of the output\n(i.e. rotate to).  These were invented primarily for use\nof the git difftool command, and may not be very useful\notherwise."
      },
      {
        "type": "long",
        "key": "rotate-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output\n(i.e. skip to), or move them to the end of the output\n(i.e. rotate to).  These were invented primarily for use\nof the git difftool command, and may not be very useful\notherwise."
      },
      {
        "type": "short",
        "key": "R",
        "title": "-R",
        "description": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."
      },
      {
        "type": "long",
        "key": "relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument.\n--no-relative can be used to countermand both diff.relative config\noption and previous --relative."
      },
      {
        "type": "long",
        "key": "no-relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument.\n--no-relative can be used to countermand both diff.relative config\noption and previous --relative."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "text",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "ignore-cr-at-eol",
        "title": "--ignore-cr-at-eol",
        "description": "Ignore carriage-return at the end of line when doing a comparison."
      },
      {
        "type": "long",
        "key": "ignore-space-at-eol",
        "title": "--ignore-space-at-eol",
        "description": "Ignore changes in whitespace at EOL."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."
      },
      {
        "type": "long",
        "key": "ignore-all-space",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."
      },
      {
        "type": "long",
        "key": "ignore-blank-lines",
        "title": "--ignore-blank-lines",
        "description": "Ignore changes whose lines are all blank."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."
      },
      {
        "type": "long",
        "key": "ignore-matching-lines",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."
      },
      {
        "type": "long",
        "key": "inter-hunk-context",
        "title": "--inter-hunk-context=<lines>",
        "description": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change.\nThe function names are determined in the same way as\ngit diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "function-context",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change.\nThe function names are determined in the same way as\ngit diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "exit-code",
        "title": "--exit-code",
        "description": "Make the program exit with codes similar to diff(1).\nThat is, it exits with 1 if there were differences and\n0 means no differences."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Disable all output of the program. Implies --exit-code."
      },
      {
        "type": "long",
        "key": "ext-diff",
        "title": "--ext-diff",
        "description": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes[5], you need\nto use this option with git-log[1] and friends."
      },
      {
        "type": "long",
        "key": "no-ext-diff",
        "title": "--no-ext-diff",
        "description": "Disallow external diff drivers."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands."
      },
      {
        "type": "long",
        "key": "no-textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules[=<when>]",
        "description": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the\nignore option in git-config[1] or gitmodules[5]. When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."
      },
      {
        "type": "long",
        "key": "src-prefix",
        "title": "--src-prefix=<prefix>",
        "description": "Show the given source prefix instead of \"a/\"."
      },
      {
        "type": "long",
        "key": "dst-prefix",
        "title": "--dst-prefix=<prefix>",
        "description": "Show the given destination prefix instead of \"b/\"."
      },
      {
        "type": "long",
        "key": "no-prefix",
        "title": "--no-prefix",
        "description": "Do not show any source or destination prefix."
      },
      {
        "type": "long",
        "key": "line-prefix",
        "title": "--line-prefix=<prefix>",
        "description": "Prepend an additional prefix to every line of output."
      },
      {
        "type": "long",
        "key": "ita-invisible-in-index",
        "title": "--ita-invisible-in-index",
        "description": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index. Both options are\nexperimental and could be removed in future."
      },
      {
        "type": "short",
        "key": "0",
        "title": "-1 --base, -2 --ours, -3 --theirs, -0",
        "description": "Diff against the \"base\" version, \"our branch\" or \"their\nbranch\" respectively.  With these options, diffs for\nmerged entries are not shown.\n\nThe default is to diff against our branch (-2) and the\ncleanly resolved paths.  The option -0 can be given to\nomit diff output for unmerged entries and just show \"Unmerged\"."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --cc",
        "description": "This compares stage 2 (our branch), stage 3 (their\nbranch) and the working tree file and outputs a combined\ndiff, similar to the way diff-tree shows a merge\ncommit with these flags."
      },
      {
        "type": "long",
        "key": "cc",
        "title": "-c, --cc",
        "description": "This compares stage 2 (our branch), stage 3 (their\nbranch) and the working tree file and outputs a combined\ndiff, similar to the way diff-tree shows a merge\ncommit with these flags."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q",
        "description": "Remain silent even on nonexistent files"
      }
    ]
  },
  {
    "name": "git diff-index",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that\nshow the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "long",
        "key": "no-patch",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that\nshow the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "short",
        "key": "U",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch."
      },
      {
        "type": "long",
        "key": "unified",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch."
      },
      {
        "type": "long",
        "key": "output",
        "title": "--output=<file>",
        "description": "Output to a specific file instead of stdout."
      },
      {
        "type": "long",
        "key": "output-indicator-new",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-old",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-context",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "Generate the diff in raw format.\nThis is the default."
      },
      {
        "type": "long",
        "key": "patch-with-raw",
        "title": "--patch-with-raw",
        "description": "Synonym for -p --raw."
      },
      {
        "type": "long",
        "key": "indent-heuristic",
        "title": "--indent-heuristic",
        "description": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."
      },
      {
        "type": "long",
        "key": "no-indent-heuristic",
        "title": "--no-indent-heuristic",
        "description": "Disable the indent heuristic."
      },
      {
        "type": "long",
        "key": "minimal",
        "title": "--minimal",
        "description": "Spend extra time to make sure the smallest possible\ndiff is produced."
      },
      {
        "type": "long",
        "key": "patience",
        "title": "--patience",
        "description": "Generate a diff using the \"patience diff\" algorithm."
      },
      {
        "type": "long",
        "key": "histogram",
        "title": "--histogram",
        "description": "Generate a diff using the \"histogram diff\" algorithm."
      },
      {
        "type": "long",
        "key": "anchored",
        "title": "--anchored=<text>",
        "description": "Generate a diff using the \"anchored diff\" algorithm.\n\nThis option may be specified more than once.\n\n\nIf a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."
      },
      {
        "type": "long",
        "key": "diff-algorithm",
        "title": "--diff-algorithm={patience|minimal|histogram|myers}",
        "description": "Choose a diff algorithm. The variants are as follows:\n\n\n\n\n default, myers \n\nThe basic greedy diff algorithm. Currently, this is the default.\n\n minimal \n\nSpend extra time to make sure the smallest possible diff is\nproduced.\n\n patience \n\nUse \"patience diff\" algorithm when generating patches.\n\n histogram \n\nThis algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\".\n\n\n\n\n\n\nFor instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat[=<width>[, <name-width>[, <count>]]]",
        "description": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by\n<width>. The width of the filename part can be limited by\ngiving another width <name-width> after a comma. The width\nof the graph part can be limited by using\n--stat-graph-width=<width> (affects all commands generating\na stat graph) or by setting diff.statGraphWidth=<width>\n(does not affect git format-patch).\nBy giving a third parameter <count>, you can limit the\noutput to the first <count> lines, followed by ... if\nthere are more.\n\nThese parameters can also be set individually with --stat-width=<width>,\n--stat-name-width=<name-width> and --stat-count=<count>."
      },
      {
        "type": "long",
        "key": "compact-summary",
        "title": "--compact-summary",
        "description": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat."
      },
      {
        "type": "long",
        "key": "numstat",
        "title": "--numstat",
        "description": "Similar to --stat, but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying\n0 0."
      },
      {
        "type": "long",
        "key": "shortstat",
        "title": "--shortstat",
        "description": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X[<param1, param2, …​>], --dirstat[=<param1, param2, …​>]",
        "description": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:\n\n\n\n\n changes \n\nCompute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.\n\n lines \n\nCompute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.\n\n files \n\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.\n\n cumulative \n\nCount changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.\n\n <limit> \n\nAn integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.\n\n\n\n\n\n\nExample: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories:\n--dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "dirstat",
        "title": "-X[<param1, param2, …​>], --dirstat[=<param1, param2, …​>]",
        "description": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:\n\n\n\n\n changes \n\nCompute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.\n\n lines \n\nCompute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.\n\n files \n\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.\n\n cumulative \n\nCount changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.\n\n <limit> \n\nAn integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.\n\n\n\n\n\n\nExample: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories:\n--dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "cumulative",
        "title": "--cumulative",
        "description": "Synonym for --dirstat=cumulative"
      },
      {
        "type": "long",
        "key": "dirstat-by-file",
        "title": "--dirstat-by-file[=<param1, param2>…​]",
        "description": "Synonym for --dirstat=files,param1,param2…​"
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary",
        "description": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."
      },
      {
        "type": "long",
        "key": "patch-with-stat",
        "title": "--patch-with-stat",
        "description": "Synonym for -p --stat."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "When --raw, --numstat, --name-only or --name-status has been\ngiven, do not munge pathnames and use NULs as output field terminators.\n\nWithout this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see\ngit-config[1])."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only",
        "description": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log[1]\nmanual page."
      },
      {
        "type": "long",
        "key": "name-status",
        "title": "--name-status",
        "description": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."
      },
      {
        "type": "long",
        "key": "submodule",
        "title": "--submodule[=<format>]",
        "description": "Specify how differences in submodules are shown.  When specifying\n--submodule=short the short format is used.  This format just\nshows the names of the commits at the beginning and end of the range.\nWhen --submodule or --submodule=log is specified, the log\nformat is used.  This format lists the commits in the range like\ngit-submodule[1] summary does.  When --submodule=diff\nis specified, the diff format is used.  This format shows an\ninline diff of the changes in the submodule contents between the\ncommit range.  Defaults to diff.submodule or the short format\nif the config option is unset."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Show colored diff.\n--color (i.e. without =<when>) is the same as --color=always.\n<when> can be one of always, never, or auto."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off colored diff.\nIt is the same as --color=never."
      },
      {
        "type": "long",
        "key": "color-moved",
        "title": "--color-moved[=<mode>]",
        "description": "Moved lines of code are colored differently.\nThe <mode> defaults to no if the option is not given\nand to zebra if the option with no mode is given.\nThe mode must be one of:\n\n\n\n\n no \n\nMoved lines are not highlighted.\n\n default \n\nIs a synonym for zebra. This may change to a more sensible mode\nin the future.\n\n plain \n\nAny line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved.\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation.\n\n blocks \n\nBlocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart.\n\n zebra \n\nBlocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or\ncolor.diff.{old,new}MovedAlternative. The change between\nthe two colors indicates that a new block was detected.\n\n dimmed-zebra \n\nSimilar to zebra, but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting.\ndimmed_zebra is a deprecated synonym."
      },
      {
        "type": "long",
        "key": "no-color-moved",
        "title": "--no-color-moved",
        "description": "Turn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no."
      },
      {
        "type": "long",
        "key": "color-moved-ws",
        "title": "--color-moved-ws=<modes>",
        "description": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved.\nThese modes can be given as a comma separated list:\n\n\n\n\n no \n\nDo not ignore whitespace when performing move detection.\n\n ignore-space-at-eol \n\nIgnore changes in whitespace at EOL.\n\n ignore-space-change \n\nIgnore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.\n\n ignore-all-space \n\nIgnore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none.\n\n allow-indentation-change \n\nInitially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."
      },
      {
        "type": "long",
        "key": "no-color-moved-ws",
        "title": "--no-color-moved-ws",
        "description": "Do not ignore whitespace when performing move detection. This can be\nused to override configuration settings. It is the same as\n--color-moved-ws=no."
      },
      {
        "type": "long",
        "key": "word-diff",
        "title": "--word-diff[=<mode>]",
        "description": "Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see\n--word-diff-regex below.  The <mode> defaults to plain, and\nmust be one of:\n\n\n\n\n color \n\nHighlight changed words using only colors.  Implies --color.\n\n plain \n\nShow words as [-removed-] and {+added+}.  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous.\n\n porcelain \n\nUse a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a +/-/` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own.\n\n none \n\nDisable word diff again.\n\n\n\n\n\n\nNote that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled."
      },
      {
        "type": "long",
        "key": "word-diff-regex",
        "title": "--word-diff-regex=<regex>",
        "description": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies\n--word-diff unless it was already enabled.\n\nEvery non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline.\n\n\nFor example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character.\n\n\nThe regex can also be set via a diff driver or configuration option, see\ngitattributes[5] or git-config[1].  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."
      },
      {
        "type": "long",
        "key": "color-words",
        "title": "--color-words[=<regex>]",
        "description": "Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex>."
      },
      {
        "type": "long",
        "key": "no-renames",
        "title": "--no-renames",
        "description": "Turn off rename detection, even when the configuration\nfile gives the default to do so."
      },
      {
        "type": "long",
        "key": "rename-empty",
        "title": "--[no-]rename-empty",
        "description": "Whether to use empty blobs as rename source."
      },
      {
        "type": "long",
        "key": "check",
        "title": "--check",
        "description": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace\nconfiguration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."
      },
      {
        "type": "long",
        "key": "ws-error-highlight",
        "title": "--ws-error-highlight=<kind>",
        "description": "Highlight whitespace errors in the context, old or new\nlines of the diff.  Multiple values are separated by comma,\nnone resets previous values, default reset the list to\nnew and all is a shorthand for old,new,context.  When\nthis option is not given, and the configuration variable\ndiff.wsErrorHighlight is not set, only whitespace errors in\nnew lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace."
      },
      {
        "type": "long",
        "key": "full-index",
        "title": "--full-index",
        "description": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."
      },
      {
        "type": "long",
        "key": "binary",
        "title": "--binary",
        "description": "In addition to --full-index, output a binary diff that\ncan be applied with git-apply.\nImplies --patch."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n>\nhexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev.\nNon default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines).\n\n\nWhen used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."
      },
      {
        "type": "long",
        "key": "break-rewrites",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines).\n\n\nWhen used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%."
      },
      {
        "type": "long",
        "key": "find-renames",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies-harder",
        "title": "--find-copies-harder",
        "description": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one\n-C option has the same effect."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part\nof a delete/create pair."
      },
      {
        "type": "long",
        "key": "irreversible-delete",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part\nof a delete/create pair."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l<num>",
        "description": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."
      },
      {
        "type": "long",
        "key": "diff-filter",
        "title": "--diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]",
        "description": "Select only files that are Added (A), Copied (C),\nDeleted (D), Modified (M), Renamed (R), have their\ntype (i.e. regular file, symlink, submodule, …​) changed (T),\nare Unmerged (U), are\nUnknown (X), or have had their pairing Broken (B).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected.\n\nAlso, these upper-case letters can be downcased to exclude.  E.g.\n--diff-filter=ad excludes added and deleted paths.\n\n\nNote that not all diffs can feature all types. For instance, diffs\nfrom the index to the working tree can never have Added entries\n(because the set of paths included in the diff is limited by what is in\nthe index).  Similarly, copied and renamed entries cannot appear if\ndetection for those types is disabled."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S<string>",
        "description": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use.\n\nIt is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S, and keep going until you get the\nvery first version of the block.\n\n\nBinary files are searched as well."
      },
      {
        "type": "short",
        "key": "G",
        "title": "-G<regex>",
        "description": "Look for differences whose patch text contains added/removed\nlines that match <regex>.\n\nTo illustrate the difference between -S<regex> --pickaxe-regex and\n-G<regex>, consider a commit with the following diff in the same\nfile:\n\n\n\n+    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0);\n\n\n\nWhile git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change).\n\n\nUnless --text is supplied patches of binary files without a textconv\nfilter will be ignored.\n\n\nSee the pickaxe entry in gitdiffcore[7] for more\ninformation."
      },
      {
        "type": "long",
        "key": "find-object",
        "title": "--find-object=<object-id>",
        "description": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S, just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id.\n\nThe object can be a blob or a submodule commit. It implies the -t option in\ngit-log to also find trees."
      },
      {
        "type": "long",
        "key": "pickaxe-all",
        "title": "--pickaxe-all",
        "description": "When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>."
      },
      {
        "type": "long",
        "key": "pickaxe-regex",
        "title": "--pickaxe-regex",
        "description": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O<orderfile>",
        "description": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config[1]).  To cancel diff.orderFile,\nuse -O/dev/null.\n\nThe output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order.\n\n\n<orderfile> is parsed as follows:\n\n\n\n\n\n\nBlank lines are ignored, so they can be used as separators for\nreadability.\n\n\nLines starting with a hash (\"#\") are ignored, so they can be used\nfor comments.  Add a backslash (\"\\\") to the beginning of the\npattern if it starts with a hash.\n\n\nEach other line contains a single pattern.\n\n\n\n\n\n\nPatterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \"foo*bar\"\nmatches \"fooasdfbar\" and \"foo/bar/baz/asdf\" but not \"foobarx\"."
      },
      {
        "type": "long",
        "key": "skip-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output\n(i.e. skip to), or move them to the end of the output\n(i.e. rotate to).  These were invented primarily for use\nof the git difftool command, and may not be very useful\notherwise."
      },
      {
        "type": "long",
        "key": "rotate-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output\n(i.e. skip to), or move them to the end of the output\n(i.e. rotate to).  These were invented primarily for use\nof the git difftool command, and may not be very useful\notherwise."
      },
      {
        "type": "short",
        "key": "R",
        "title": "-R",
        "description": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."
      },
      {
        "type": "long",
        "key": "relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument.\n--no-relative can be used to countermand both diff.relative config\noption and previous --relative."
      },
      {
        "type": "long",
        "key": "no-relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument.\n--no-relative can be used to countermand both diff.relative config\noption and previous --relative."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "text",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "ignore-cr-at-eol",
        "title": "--ignore-cr-at-eol",
        "description": "Ignore carriage-return at the end of line when doing a comparison."
      },
      {
        "type": "long",
        "key": "ignore-space-at-eol",
        "title": "--ignore-space-at-eol",
        "description": "Ignore changes in whitespace at EOL."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."
      },
      {
        "type": "long",
        "key": "ignore-all-space",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."
      },
      {
        "type": "long",
        "key": "ignore-blank-lines",
        "title": "--ignore-blank-lines",
        "description": "Ignore changes whose lines are all blank."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."
      },
      {
        "type": "long",
        "key": "ignore-matching-lines",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."
      },
      {
        "type": "long",
        "key": "inter-hunk-context",
        "title": "--inter-hunk-context=<lines>",
        "description": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change.\nThe function names are determined in the same way as\ngit diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "function-context",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change.\nThe function names are determined in the same way as\ngit diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "exit-code",
        "title": "--exit-code",
        "description": "Make the program exit with codes similar to diff(1).\nThat is, it exits with 1 if there were differences and\n0 means no differences."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Disable all output of the program. Implies --exit-code."
      },
      {
        "type": "long",
        "key": "ext-diff",
        "title": "--ext-diff",
        "description": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes[5], you need\nto use this option with git-log[1] and friends."
      },
      {
        "type": "long",
        "key": "no-ext-diff",
        "title": "--no-ext-diff",
        "description": "Disallow external diff drivers."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands."
      },
      {
        "type": "long",
        "key": "no-textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules[=<when>]",
        "description": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the\nignore option in git-config[1] or gitmodules[5]. When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."
      },
      {
        "type": "long",
        "key": "src-prefix",
        "title": "--src-prefix=<prefix>",
        "description": "Show the given source prefix instead of \"a/\"."
      },
      {
        "type": "long",
        "key": "dst-prefix",
        "title": "--dst-prefix=<prefix>",
        "description": "Show the given destination prefix instead of \"b/\"."
      },
      {
        "type": "long",
        "key": "no-prefix",
        "title": "--no-prefix",
        "description": "Do not show any source or destination prefix."
      },
      {
        "type": "long",
        "key": "line-prefix",
        "title": "--line-prefix=<prefix>",
        "description": "Prepend an additional prefix to every line of output."
      },
      {
        "type": "long",
        "key": "ita-invisible-in-index",
        "title": "--ita-invisible-in-index",
        "description": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index. Both options are\nexperimental and could be removed in future."
      },
      {
        "type": "long",
        "key": "cached",
        "title": "--cached",
        "description": "Do not consider the on-disk file at all."
      },
      {
        "type": "long",
        "key": "merge-base",
        "title": "--merge-base",
        "description": "Instead of comparing <tree-ish> directly, use the merge base\nbetween <tree-ish> and HEAD instead.  <tree-ish> must be a\ncommit."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m",
        "description": "By default, files recorded in the index but not checked\nout are reported as deleted.  This flag makes\ngit diff-index say that all non-checked-out files are up\nto date."
      }
    ]
  },
  {
    "name": "git diff-tree",
    "options": [
      {
        "type": "short",
        "key": "p",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "long",
        "key": "patch",
        "title": "-p, -u, --patch",
        "description": "Generate patch (see section on generating patches)."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that\nshow the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "long",
        "key": "no-patch",
        "title": "-s, --no-patch",
        "description": "Suppress diff output. Useful for commands like git show that\nshow the patch by default, or to cancel the effect of --patch."
      },
      {
        "type": "short",
        "key": "U",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch."
      },
      {
        "type": "long",
        "key": "unified",
        "title": "-U<n>, --unified=<n>",
        "description": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch."
      },
      {
        "type": "long",
        "key": "output",
        "title": "--output=<file>",
        "description": "Output to a specific file instead of stdout."
      },
      {
        "type": "long",
        "key": "output-indicator-new",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-old",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "output-indicator-context",
        "title": "--output-indicator-new=<char>, --output-indicator-old=<char>, --output-indicator-context=<char>",
        "description": "Specify the character used to indicate new, old or context\nlines in the generated patch. Normally they are +, - and\n' ' respectively."
      },
      {
        "type": "long",
        "key": "raw",
        "title": "--raw",
        "description": "Generate the diff in raw format.\nThis is the default."
      },
      {
        "type": "long",
        "key": "patch-with-raw",
        "title": "--patch-with-raw",
        "description": "Synonym for -p --raw."
      },
      {
        "type": "long",
        "key": "indent-heuristic",
        "title": "--indent-heuristic",
        "description": "Enable the heuristic that shifts diff hunk boundaries to make patches\neasier to read. This is the default."
      },
      {
        "type": "long",
        "key": "no-indent-heuristic",
        "title": "--no-indent-heuristic",
        "description": "Disable the indent heuristic."
      },
      {
        "type": "long",
        "key": "minimal",
        "title": "--minimal",
        "description": "Spend extra time to make sure the smallest possible\ndiff is produced."
      },
      {
        "type": "long",
        "key": "patience",
        "title": "--patience",
        "description": "Generate a diff using the \"patience diff\" algorithm."
      },
      {
        "type": "long",
        "key": "histogram",
        "title": "--histogram",
        "description": "Generate a diff using the \"histogram diff\" algorithm."
      },
      {
        "type": "long",
        "key": "anchored",
        "title": "--anchored=<text>",
        "description": "Generate a diff using the \"anchored diff\" algorithm.\n\nThis option may be specified more than once.\n\n\nIf a line exists in both the source and destination, exists only once,\nand starts with this text, this algorithm attempts to prevent it from\nappearing as a deletion or addition in the output. It uses the \"patience\ndiff\" algorithm internally."
      },
      {
        "type": "long",
        "key": "diff-algorithm",
        "title": "--diff-algorithm={patience|minimal|histogram|myers}",
        "description": "Choose a diff algorithm. The variants are as follows:\n\n\n\n\n default, myers \n\nThe basic greedy diff algorithm. Currently, this is the default.\n\n minimal \n\nSpend extra time to make sure the smallest possible diff is\nproduced.\n\n patience \n\nUse \"patience diff\" algorithm when generating patches.\n\n histogram \n\nThis algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\".\n\n\n\n\n\n\nFor instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."
      },
      {
        "type": "long",
        "key": "stat",
        "title": "--stat[=<width>[, <name-width>[, <count>]]]",
        "description": "Generate a diffstat. By default, as much space as necessary\nwill be used for the filename part, and the rest for the graph\npart. Maximum width defaults to terminal width, or 80 columns\nif not connected to a terminal, and can be overridden by\n<width>. The width of the filename part can be limited by\ngiving another width <name-width> after a comma. The width\nof the graph part can be limited by using\n--stat-graph-width=<width> (affects all commands generating\na stat graph) or by setting diff.statGraphWidth=<width>\n(does not affect git format-patch).\nBy giving a third parameter <count>, you can limit the\noutput to the first <count> lines, followed by ... if\nthere are more.\n\nThese parameters can also be set individually with --stat-width=<width>,\n--stat-name-width=<name-width> and --stat-count=<count>."
      },
      {
        "type": "long",
        "key": "compact-summary",
        "title": "--compact-summary",
        "description": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it’s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat."
      },
      {
        "type": "long",
        "key": "numstat",
        "title": "--numstat",
        "description": "Similar to --stat, but shows number of added and\ndeleted lines in decimal notation and pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying\n0 0."
      },
      {
        "type": "long",
        "key": "shortstat",
        "title": "--shortstat",
        "description": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X[<param1, param2, …​>], --dirstat[=<param1, param2, …​>]",
        "description": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:\n\n\n\n\n changes \n\nCompute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.\n\n lines \n\nCompute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.\n\n files \n\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.\n\n cumulative \n\nCount changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.\n\n <limit> \n\nAn integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.\n\n\n\n\n\n\nExample: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories:\n--dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "dirstat",
        "title": "-X[<param1, param2, …​>], --dirstat[=<param1, param2, …​>]",
        "description": "Output the distribution of relative amount of changes for each\nsub-directory. The behavior of --dirstat can be customized by\npassing it a comma separated list of parameters.\nThe defaults are controlled by the diff.dirstat configuration\nvariable (see git-config[1]).\nThe following parameters are available:\n\n\n\n\n changes \n\nCompute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given.\n\n lines \n\nCompute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat\nbehavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options.\n\n files \n\nCompute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all.\n\n cumulative \n\nCount changes in a child directory for the parent directory as well.\nNote that when using cumulative, the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter.\n\n <limit> \n\nAn integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output.\n\n\n\n\n\n\nExample: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories:\n--dirstat=files,10,cumulative."
      },
      {
        "type": "long",
        "key": "cumulative",
        "title": "--cumulative",
        "description": "Synonym for --dirstat=cumulative"
      },
      {
        "type": "long",
        "key": "dirstat-by-file",
        "title": "--dirstat-by-file[=<param1, param2>…​]",
        "description": "Synonym for --dirstat=files,param1,param2…​"
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--summary",
        "description": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."
      },
      {
        "type": "long",
        "key": "patch-with-stat",
        "title": "--patch-with-stat",
        "description": "Synonym for -p --stat."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "When --raw, --numstat, --name-only or --name-status has been\ngiven, do not munge pathnames and use NULs as output field terminators.\n\nWithout this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see\ngit-config[1])."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only",
        "description": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log[1]\nmanual page."
      },
      {
        "type": "long",
        "key": "name-status",
        "title": "--name-status",
        "description": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."
      },
      {
        "type": "long",
        "key": "submodule",
        "title": "--submodule[=<format>]",
        "description": "Specify how differences in submodules are shown.  When specifying\n--submodule=short the short format is used.  This format just\nshows the names of the commits at the beginning and end of the range.\nWhen --submodule or --submodule=log is specified, the log\nformat is used.  This format lists the commits in the range like\ngit-submodule[1] summary does.  When --submodule=diff\nis specified, the diff format is used.  This format shows an\ninline diff of the changes in the submodule contents between the\ncommit range.  Defaults to diff.submodule or the short format\nif the config option is unset."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Show colored diff.\n--color (i.e. without =<when>) is the same as --color=always.\n<when> can be one of always, never, or auto."
      },
      {
        "type": "long",
        "key": "no-color",
        "title": "--no-color",
        "description": "Turn off colored diff.\nIt is the same as --color=never."
      },
      {
        "type": "long",
        "key": "color-moved",
        "title": "--color-moved[=<mode>]",
        "description": "Moved lines of code are colored differently.\nThe <mode> defaults to no if the option is not given\nand to zebra if the option with no mode is given.\nThe mode must be one of:\n\n\n\n\n no \n\nMoved lines are not highlighted.\n\n default \n\nIs a synonym for zebra. This may change to a more sensible mode\nin the future.\n\n plain \n\nAny line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved.\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation.\n\n blocks \n\nBlocks of moved text of at least 20 alphanumeric characters\nare detected greedily. The detected blocks are\npainted using either the color.diff.{old,new}Moved color.\nAdjacent blocks cannot be told apart.\n\n zebra \n\nBlocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or\ncolor.diff.{old,new}MovedAlternative. The change between\nthe two colors indicates that a new block was detected.\n\n dimmed-zebra \n\nSimilar to zebra, but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting.\ndimmed_zebra is a deprecated synonym."
      },
      {
        "type": "long",
        "key": "no-color-moved",
        "title": "--no-color-moved",
        "description": "Turn off move detection. This can be used to override configuration\nsettings. It is the same as --color-moved=no."
      },
      {
        "type": "long",
        "key": "color-moved-ws",
        "title": "--color-moved-ws=<modes>",
        "description": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved.\nThese modes can be given as a comma separated list:\n\n\n\n\n no \n\nDo not ignore whitespace when performing move detection.\n\n ignore-space-at-eol \n\nIgnore changes in whitespace at EOL.\n\n ignore-space-change \n\nIgnore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent.\n\n ignore-all-space \n\nIgnore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none.\n\n allow-indentation-change \n\nInitially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."
      },
      {
        "type": "long",
        "key": "no-color-moved-ws",
        "title": "--no-color-moved-ws",
        "description": "Do not ignore whitespace when performing move detection. This can be\nused to override configuration settings. It is the same as\n--color-moved-ws=no."
      },
      {
        "type": "long",
        "key": "word-diff",
        "title": "--word-diff[=<mode>]",
        "description": "Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see\n--word-diff-regex below.  The <mode> defaults to plain, and\nmust be one of:\n\n\n\n\n color \n\nHighlight changed words using only colors.  Implies --color.\n\n plain \n\nShow words as [-removed-] and {+added+}.  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous.\n\n porcelain \n\nUse a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a +/-/` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own.\n\n none \n\nDisable word diff again.\n\n\n\n\n\n\nNote that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled."
      },
      {
        "type": "long",
        "key": "word-diff-regex",
        "title": "--word-diff-regex=<regex>",
        "description": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies\n--word-diff unless it was already enabled.\n\nEvery non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline.\n\n\nFor example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character.\n\n\nThe regex can also be set via a diff driver or configuration option, see\ngitattributes[5] or git-config[1].  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."
      },
      {
        "type": "long",
        "key": "color-words",
        "title": "--color-words[=<regex>]",
        "description": "Equivalent to --word-diff=color plus (if a regex was\nspecified) --word-diff-regex=<regex>."
      },
      {
        "type": "long",
        "key": "no-renames",
        "title": "--no-renames",
        "description": "Turn off rename detection, even when the configuration\nfile gives the default to do so."
      },
      {
        "type": "long",
        "key": "rename-empty",
        "title": "--[no-]rename-empty",
        "description": "Whether to use empty blobs as rename source."
      },
      {
        "type": "long",
        "key": "check",
        "title": "--check",
        "description": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace\nconfiguration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."
      },
      {
        "type": "long",
        "key": "ws-error-highlight",
        "title": "--ws-error-highlight=<kind>",
        "description": "Highlight whitespace errors in the context, old or new\nlines of the diff.  Multiple values are separated by comma,\nnone resets previous values, default reset the list to\nnew and all is a shorthand for old,new,context.  When\nthis option is not given, and the configuration variable\ndiff.wsErrorHighlight is not set, only whitespace errors in\nnew lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace."
      },
      {
        "type": "long",
        "key": "full-index",
        "title": "--full-index",
        "description": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."
      },
      {
        "type": "long",
        "key": "binary",
        "title": "--binary",
        "description": "In addition to --full-index, output a binary diff that\ncan be applied with git-apply.\nImplies --patch."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n>\nhexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev.\nNon default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "short",
        "key": "B",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines).\n\n\nWhen used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."
      },
      {
        "type": "long",
        "key": "break-rewrites",
        "title": "-B[<n>][/<m>], --break-rewrites[=[<n>][/<m>]]",
        "description": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes:\n\nIt affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines).\n\n\nWhen used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file’s size are\neligible for being picked up as a possible source of a rename to\nanother file."
      },
      {
        "type": "short",
        "key": "M",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%."
      },
      {
        "type": "long",
        "key": "find-renames",
        "title": "-M[<n>], --find-renames[=<n>]",
        "description": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile’s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn’t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50%.  Similarly, -M05 is\nthe same as -M5%.  To limit detection to exact renames, use\n-M100%.  The default similarity index is 50%."
      },
      {
        "type": "short",
        "key": "C",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies",
        "title": "-C[<n>], --find-copies[=<n>]",
        "description": "Detect copies as well as renames.  See also --find-copies-harder.\nIf n is specified, it has the same meaning as for -M<n>."
      },
      {
        "type": "long",
        "key": "find-copies-harder",
        "title": "--find-copies-harder",
        "description": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one\n-C option has the same effect."
      },
      {
        "type": "short",
        "key": "D",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part\nof a delete/create pair."
      },
      {
        "type": "long",
        "key": "irreversible-delete",
        "title": "-D, --irreversible-delete",
        "description": "Omit the preimage for deletes, i.e. print only the header but not\nthe diff between the preimage and /dev/null. The resulting patch\nis not meant to be applied with patch or git apply; this is\nsolely for people who want to just concentrate on reviewing the\ntext after the change. In addition, the output obviously lacks\nenough information to apply such a patch in reverse, even manually,\nhence the name of the option.\n\nWhen used together with -B, omit also the preimage in the deletion part\nof a delete/create pair."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l<num>",
        "description": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."
      },
      {
        "type": "long",
        "key": "diff-filter",
        "title": "--diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]",
        "description": "Select only files that are Added (A), Copied (C),\nDeleted (D), Modified (M), Renamed (R), have their\ntype (i.e. regular file, symlink, submodule, …​) changed (T),\nare Unmerged (U), are\nUnknown (X), or have had their pairing Broken (B).\nAny combination of the filter characters (including none) can be used.\nWhen * (All-or-none) is added to the combination, all\npaths are selected if there is any file that matches\nother criteria in the comparison; if there is no file\nthat matches other criteria, nothing is selected.\n\nAlso, these upper-case letters can be downcased to exclude.  E.g.\n--diff-filter=ad excludes added and deleted paths.\n\n\nNote that not all diffs can feature all types. For instance, diffs\nfrom the index to the working tree can never have Added entries\n(because the set of paths included in the diff is limited by what is in\nthe index).  Similarly, copied and renamed entries cannot appear if\ndetection for those types is disabled."
      },
      {
        "type": "short",
        "key": "S",
        "title": "-S<string>",
        "description": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter’s use.\n\nIt is useful when you’re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S, and keep going until you get the\nvery first version of the block.\n\n\nBinary files are searched as well."
      },
      {
        "type": "short",
        "key": "G",
        "title": "-G<regex>",
        "description": "Look for differences whose patch text contains added/removed\nlines that match <regex>.\n\nTo illustrate the difference between -S<regex> --pickaxe-regex and\n-G<regex>, consider a commit with the following diff in the same\nfile:\n\n\n\n+    return frotz(nitfol, two->ptr, 1, 0);\n...\n-    hit = frotz(nitfol, mf2.ptr, 1, 0);\n\n\n\nWhile git log -G\"frotz\\(nitfol\" will show this commit, git log\n-S\"frotz\\(nitfol\" --pickaxe-regex will not (because the number of\noccurrences of that string did not change).\n\n\nUnless --text is supplied patches of binary files without a textconv\nfilter will be ignored.\n\n\nSee the pickaxe entry in gitdiffcore[7] for more\ninformation."
      },
      {
        "type": "long",
        "key": "find-object",
        "title": "--find-object=<object-id>",
        "description": "Look for differences that change the number of occurrences of\nthe specified object. Similar to -S, just the argument is different\nin that it doesn’t search for a specific string but for a specific\nobject id.\n\nThe object can be a blob or a submodule commit. It implies the -t option in\ngit-log to also find trees."
      },
      {
        "type": "long",
        "key": "pickaxe-all",
        "title": "--pickaxe-all",
        "description": "When -S or -G finds a change, show all the changes in that\nchangeset, not just the files that contain the change\nin <string>."
      },
      {
        "type": "long",
        "key": "pickaxe-regex",
        "title": "--pickaxe-regex",
        "description": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."
      },
      {
        "type": "short",
        "key": "O",
        "title": "-O<orderfile>",
        "description": "Control the order in which files appear in the output.\nThis overrides the diff.orderFile configuration variable\n(see git-config[1]).  To cancel diff.orderFile,\nuse -O/dev/null.\n\nThe output order is determined by the order of glob patterns in\n<orderfile>.\nAll files with pathnames that match the first pattern are output\nfirst, all files with pathnames that match the second pattern (but not\nthe first) are output next, and so on.\nAll files with pathnames that do not match any pattern are output\nlast, as if there was an implicit match-all pattern at the end of the\nfile.\nIf multiple pathnames have the same rank (they match the same pattern\nbut no earlier patterns), their output order relative to each other is\nthe normal order.\n\n\n<orderfile> is parsed as follows:\n\n\n\n\n\n\nBlank lines are ignored, so they can be used as separators for\nreadability.\n\n\nLines starting with a hash (\"#\") are ignored, so they can be used\nfor comments.  Add a backslash (\"\\\") to the beginning of the\npattern if it starts with a hash.\n\n\nEach other line contains a single pattern.\n\n\n\n\n\n\nPatterns have the same syntax and semantics as patterns used for\nfnmatch(3) without the FNM_PATHNAME flag, except a pathname also\nmatches a pattern if removing any number of the final pathname\ncomponents matches the pattern.  For example, the pattern \"foo*bar\"\nmatches \"fooasdfbar\" and \"foo/bar/baz/asdf\" but not \"foobarx\"."
      },
      {
        "type": "long",
        "key": "skip-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output\n(i.e. skip to), or move them to the end of the output\n(i.e. rotate to).  These were invented primarily for use\nof the git difftool command, and may not be very useful\notherwise."
      },
      {
        "type": "long",
        "key": "rotate-to",
        "title": "--skip-to=<file>, --rotate-to=<file>",
        "description": "Discard the files before the named <file> from the output\n(i.e. skip to), or move them to the end of the output\n(i.e. rotate to).  These were invented primarily for use\nof the git difftool command, and may not be very useful\notherwise."
      },
      {
        "type": "short",
        "key": "R",
        "title": "-R",
        "description": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."
      },
      {
        "type": "long",
        "key": "relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument.\n--no-relative can be used to countermand both diff.relative config\noption and previous --relative."
      },
      {
        "type": "long",
        "key": "no-relative",
        "title": "--relative[=<path>], --no-relative",
        "description": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument.\n--no-relative can be used to countermand both diff.relative config\noption and previous --relative."
      },
      {
        "type": "short",
        "key": "a",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "text",
        "title": "-a, --text",
        "description": "Treat all files as text."
      },
      {
        "type": "long",
        "key": "ignore-cr-at-eol",
        "title": "--ignore-cr-at-eol",
        "description": "Ignore carriage-return at the end of line when doing a comparison."
      },
      {
        "type": "long",
        "key": "ignore-space-at-eol",
        "title": "--ignore-space-at-eol",
        "description": "Ignore changes in whitespace at EOL."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."
      },
      {
        "type": "long",
        "key": "ignore-space-change",
        "title": "-b, --ignore-space-change",
        "description": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."
      },
      {
        "type": "long",
        "key": "ignore-all-space",
        "title": "-w, --ignore-all-space",
        "description": "Ignore whitespace when comparing lines.  This ignores\ndifferences even if one line has whitespace where the other\nline has none."
      },
      {
        "type": "long",
        "key": "ignore-blank-lines",
        "title": "--ignore-blank-lines",
        "description": "Ignore changes whose lines are all blank."
      },
      {
        "type": "short",
        "key": "I",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."
      },
      {
        "type": "long",
        "key": "ignore-matching-lines",
        "title": "-I<regex>, --ignore-matching-lines=<regex>",
        "description": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."
      },
      {
        "type": "long",
        "key": "inter-hunk-context",
        "title": "--inter-hunk-context=<lines>",
        "description": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."
      },
      {
        "type": "short",
        "key": "W",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change.\nThe function names are determined in the same way as\ngit diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "function-context",
        "title": "-W, --function-context",
        "description": "Show whole function as context lines for each change.\nThe function names are determined in the same way as\ngit diff works out patch hunk headers (see Defining a\ncustom hunk-header in gitattributes[5])."
      },
      {
        "type": "long",
        "key": "exit-code",
        "title": "--exit-code",
        "description": "Make the program exit with codes similar to diff(1).\nThat is, it exits with 1 if there were differences and\n0 means no differences."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Disable all output of the program. Implies --exit-code."
      },
      {
        "type": "long",
        "key": "ext-diff",
        "title": "--ext-diff",
        "description": "Allow an external diff helper to be executed. If you set an\nexternal diff driver with gitattributes[5], you need\nto use this option with git-log[1] and friends."
      },
      {
        "type": "long",
        "key": "no-ext-diff",
        "title": "--no-ext-diff",
        "description": "Disallow external diff drivers."
      },
      {
        "type": "long",
        "key": "textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands."
      },
      {
        "type": "long",
        "key": "no-textconv",
        "title": "--textconv, --no-textconv",
        "description": "Allow (or disallow) external text conversion filters to be run\nwhen comparing binary files. See gitattributes[5] for\ndetails. Because textconv filters are typically a one-way\nconversion, the resulting diff is suitable for human\nconsumption, but cannot be applied. For this reason, textconv\nfilters are enabled by default only for git-diff[1] and\ngit-log[1], but not for git-format-patch[1] or\ndiff plumbing commands."
      },
      {
        "type": "long",
        "key": "ignore-submodules",
        "title": "--ignore-submodules[=<when>]",
        "description": "Ignore changes to submodules in the diff generation. <when> can be\neither \"none\", \"untracked\", \"dirty\" or \"all\", which is the default.\nUsing \"none\" will consider the submodule modified when it either contains\nuntracked or modified files or its HEAD differs from the commit recorded\nin the superproject and can be used to override any settings of the\nignore option in git-config[1] or gitmodules[5]. When\n\"untracked\" is used submodules are not considered dirty when they only\ncontain untracked content (but they are still scanned for modified\ncontent). Using \"dirty\" ignores all changes to the work tree of submodules,\nonly changes to the commits stored in the superproject are shown (this was\nthe behavior until 1.7.0). Using \"all\" hides all changes to submodules."
      },
      {
        "type": "long",
        "key": "src-prefix",
        "title": "--src-prefix=<prefix>",
        "description": "Show the given source prefix instead of \"a/\"."
      },
      {
        "type": "long",
        "key": "dst-prefix",
        "title": "--dst-prefix=<prefix>",
        "description": "Show the given destination prefix instead of \"b/\"."
      },
      {
        "type": "long",
        "key": "no-prefix",
        "title": "--no-prefix",
        "description": "Do not show any source or destination prefix."
      },
      {
        "type": "long",
        "key": "line-prefix",
        "title": "--line-prefix=<prefix>",
        "description": "Prepend an additional prefix to every line of output."
      },
      {
        "type": "long",
        "key": "ita-invisible-in-index",
        "title": "--ita-invisible-in-index",
        "description": "By default entries added by \"git add -N\" appear as an existing\nempty file in \"git diff\" and a new file in \"git diff --cached\".\nThis option makes the entry appear as a new file in \"git diff\"\nand non-existent in \"git diff --cached\". This option could be\nreverted with --ita-visible-in-index. Both options are\nexperimental and could be removed in future."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r",
        "description": "recurse into sub-trees"
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t",
        "description": "show tree entry itself as well as subtrees.  Implies -r."
      },
      {
        "type": "long",
        "key": "root",
        "title": "--root",
        "description": "When --root is specified the initial commit will be shown as a big\ncreation event. This is equivalent to a diff against the NULL tree."
      },
      {
        "type": "long",
        "key": "merge-base",
        "title": "--merge-base",
        "description": "Instead of comparing the <tree-ish>s directly, use the merge\nbase between the two <tree-ish>s as the \"before\" side.  There\nmust be two <tree-ish>s given and they must both be commits."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "When --stdin is specified, the command does not take\n<tree-ish> arguments from the command line.  Instead, it\nreads lines containing either two <tree>, one <commit>, or a\nlist of <commit> from its standard input.  (Use a single space\nas separator.)\n\nWhen two trees are given, it compares the first tree with the second.\nWhen a single commit is given, it compares the commit with its\nparents.  The remaining commits, when given, are used as if they are\nparents of the first commit.\n\n\nWhen comparing two trees, the ID of both trees (separated by a space\nand terminated by a newline) is printed before the difference.  When\ncomparing commits, the ID of the first (or only) commit, followed by a\nnewline, is printed.\n\n\nThe following flags further affect the behavior when comparing\ncommits (but not trees)."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m",
        "description": "By default, git diff-tree --stdin does not show\ndifferences for merge commits.  With this flag, it shows\ndifferences to that commit from all of its parents. See\nalso -c."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "This flag causes git diff-tree --stdin to also show\nthe commit message before the differences."
      },
      {
        "type": "long",
        "key": "pretty",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, reference, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each\nformat.  When =<format> part is omitted, it defaults to medium.\n\n\nNote: you can specify the default pretty format in the repository\nconfiguration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, reference, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each\nformat.  When =<format> part is omitted, it defaults to medium.\n\n\nNote: you can specify the default pretty format in the repository\nconfiguration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "abbrev-commit",
        "title": "--abbrev-commit",
        "description": "Instead of showing the full 40-byte hexadecimal commit object\nname, show a prefix that names the object uniquely.\n\"--abbrev=<n>\" (which also modifies diff output, if it is displayed)\noption can be used to specify the minimum length of the prefix.\n\nThis should make \"--pretty=oneline\" a whole lot more readable for\npeople using 80-column terminals."
      },
      {
        "type": "long",
        "key": "no-abbrev-commit",
        "title": "--no-abbrev-commit",
        "description": "Show the full 40-byte hexadecimal commit object name. This negates\n--abbrev-commit, either explicit or implied by other options such\nas \"--oneline\". It also overrides the log.abbrevCommit variable."
      },
      {
        "type": "long",
        "key": "oneline",
        "title": "--oneline",
        "description": "This is a shorthand for \"--pretty=oneline --abbrev-commit\"\nused together."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "The commit objects record the encoding used for the log message\nin their encoding header; this option can be used to tell the\ncommand to re-code the commit log message in the encoding\npreferred by the user.  For non plumbing commands this\ndefaults to UTF-8. Note that if an object claims to be encoded\nin X and we are outputting in X, we will output the object\nverbatim; this means that invalid sequences in the original\ncommit may be copied to the output."
      },
      {
        "type": "long",
        "key": "expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e.  medium, which is the default, full,\nand fuller)."
      },
      {
        "type": "long",
        "key": "no-expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e.  medium, which is the default, full,\nand fuller)."
      },
      {
        "type": "long",
        "key": "notes",
        "title": "--notes[=<ref>]",
        "description": "Show the notes (see git-notes[1]) that annotate the\ncommit, when showing the commit log message.  This is the default\nfor git log, git show and git whatchanged commands when\nthere is no --pretty, --format, or --oneline option given\non the command line.\n\nBy default, the notes shown are from the notes refs listed in the\ncore.notesRef and notes.displayRef variables (or corresponding\nenvironment overrides). See git-config[1] for more details.\n\n\nWith an optional <ref> argument, use the ref to find the notes\nto display.  The ref can specify the full refname when it begins\nwith refs/notes/; when it begins with notes/, refs/ and otherwise\nrefs/notes/ is prefixed to form a full name of the ref.\n\n\nMultiple --notes options can be combined to control which notes are\nbeing displayed. Examples: \"--notes=foo\" will show only notes from\n\"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from\n\"refs/notes/foo\" and from the default notes ref(s)."
      },
      {
        "type": "long",
        "key": "no-notes",
        "title": "--no-notes",
        "description": "Do not show notes. This negates the above --notes option, by\nresetting the list of notes refs from which notes are shown.\nOptions are parsed in the order given on the command line, so e.g.\n\"--notes --notes=foo --no-notes --notes=bar\" will only show notes\nfrom \"refs/notes/bar\"."
      },
      {
        "type": "long",
        "key": "show-notes",
        "title": "--show-notes[=<ref>], --[no-]standard-notes",
        "description": "These options are deprecated. Use the above --notes/--no-notes\noptions instead."
      },
      {
        "type": "long",
        "key": "standard-notes",
        "title": "--show-notes[=<ref>], --[no-]standard-notes",
        "description": "These options are deprecated. Use the above --notes/--no-notes\noptions instead."
      },
      {
        "type": "long",
        "key": "show-signature",
        "title": "--show-signature",
        "description": "Check the validity of a signed commit object by passing the signature\nto gpg --verify and show the output."
      },
      {
        "type": "long",
        "key": "no-commit-id",
        "title": "--no-commit-id",
        "description": "git diff-tree outputs a line with the commit ID when\napplicable.  This flag suppressed the commit ID output."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c",
        "description": "This flag changes the way a merge commit is displayed\n(which means it is useful only when the command is given\none <tree-ish>, or --stdin).  It shows the differences\nfrom each of the parents to the merge result simultaneously\ninstead of showing pairwise diff between a parent and the\nresult one at a time (which is what the -m option does).\nFurthermore, it lists only files which were modified\nfrom all parents."
      },
      {
        "type": "long",
        "key": "cc",
        "title": "--cc",
        "description": "This flag changes the way a merge commit patch is displayed,\nin a similar way to the -c option. It implies the -c\nand -p options and further compresses the patch output\nby omitting uninteresting hunks whose the contents in the parents\nhave only two variants and the merge result picks one of them\nwithout modification.  When all hunks are uninteresting, the commit\nitself and the commit log message is not shown, just like in any other\n\"empty diff\" case."
      },
      {
        "type": "long",
        "key": "combined-all-paths",
        "title": "--combined-all-paths",
        "description": "This flag causes combined diffs (used for merge commits) to\nlist the name of the file from all parents.  It thus only has\neffect when -c or --cc are specified, and is likely only\nuseful if filename changes are detected (i.e. when either\nrename or copy detection have been requested)."
      },
      {
        "type": "long",
        "key": "always",
        "title": "--always",
        "description": "Show the commit itself and the commit log message even\nif the diff itself is empty."
      }
    ]
  },
  {
    "name": "git for-each-ref",
    "options": [
      {
        "type": "long",
        "key": "count",
        "title": "--count=<count>",
        "description": "By default the command shows all refs that match\n<pattern>.  This option makes it stop after showing\nthat many refs."
      },
      {
        "type": "long",
        "key": "sort",
        "title": "--sort=<key>",
        "description": "A field name to sort on.  Prefix - to sort in\ndescending order of the value.  When unspecified,\nrefname is used.  You may use the --sort=<key> option\nmultiple times, in which case the last key becomes the primary\nkey."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--format=<format>",
        "description": "A string that interpolates %(fieldname) from a ref being shown\nand the object it points at.  If fieldname\nis prefixed with an asterisk (*) and the ref points\nat a tag object, use the value for the field in the object\nwhich the tag object refers to (instead of the field in the tag object).\nWhen unspecified, <format> defaults to\n%(objectname) SPC %(objecttype) TAB %(refname).\nIt also interpolates %% to %, and %xx where xx\nare hex digits interpolates to character with hex code\nxx; for example %00 interpolates to \\0 (NUL),\n%09 to \\t (TAB) and %0a to \\n (LF)."
      },
      {
        "type": "long",
        "key": "color",
        "title": "--color[=<when>]",
        "description": "Respect any colors specified in the --format option. The\n<when> field must be one of always, never, or auto (if\n<when> is absent, behave as if always was given)."
      },
      {
        "type": "long",
        "key": "shell",
        "title": "--shell, --perl, --python, --tcl",
        "description": "If given, strings that substitute %(fieldname)\nplaceholders are quoted as string literals suitable for\nthe specified host language.  This is meant to produce\na scriptlet that can directly be `eval`ed."
      },
      {
        "type": "long",
        "key": "perl",
        "title": "--shell, --perl, --python, --tcl",
        "description": "If given, strings that substitute %(fieldname)\nplaceholders are quoted as string literals suitable for\nthe specified host language.  This is meant to produce\na scriptlet that can directly be `eval`ed."
      },
      {
        "type": "long",
        "key": "python",
        "title": "--shell, --perl, --python, --tcl",
        "description": "If given, strings that substitute %(fieldname)\nplaceholders are quoted as string literals suitable for\nthe specified host language.  This is meant to produce\na scriptlet that can directly be `eval`ed."
      },
      {
        "type": "long",
        "key": "tcl",
        "title": "--shell, --perl, --python, --tcl",
        "description": "If given, strings that substitute %(fieldname)\nplaceholders are quoted as string literals suitable for\nthe specified host language.  This is meant to produce\na scriptlet that can directly be `eval`ed."
      },
      {
        "type": "long",
        "key": "points-at",
        "title": "--points-at=<object>",
        "description": "Only list refs which points at the given object."
      },
      {
        "type": "long",
        "key": "merged",
        "title": "--merged[=<object>]",
        "description": "Only list refs whose tips are reachable from the\nspecified commit (HEAD if not specified)."
      },
      {
        "type": "long",
        "key": "no-merged",
        "title": "--no-merged[=<object>]",
        "description": "Only list refs whose tips are not reachable from the\nspecified commit (HEAD if not specified)."
      },
      {
        "type": "long",
        "key": "contains",
        "title": "--contains[=<object>]",
        "description": "Only list refs which contain the specified commit (HEAD if not\nspecified)."
      },
      {
        "type": "long",
        "key": "no-contains",
        "title": "--no-contains[=<object>]",
        "description": "Only list refs which don’t contain the specified commit (HEAD\nif not specified)."
      },
      {
        "type": "long",
        "key": "ignore-case",
        "title": "--ignore-case",
        "description": "Sorting and filtering refs are case insensitive."
      }
    ]
  },
  {
    "name": "git for-each-repo",
    "options": [
      {
        "type": "long",
        "key": "config",
        "title": "--config=<config>",
        "description": "Use the given config variable as a multi-valued list storing\nabsolute path names. Iterate on that list of paths to run\nthe given arguments.\n\nThese config values are loaded from system, global, and local Git config,\nas available. If git for-each-repo is run in a directory that is not a\nGit repository, then only the system and global config is used."
      }
    ]
  },
  {
    "name": "git get-tar-commit-id",
    "options": []
  },
  {
    "name": "git ls-files",
    "options": [
      {
        "type": "short",
        "key": "c",
        "title": "-c, --cached",
        "description": "Show cached files in the output (default)"
      },
      {
        "type": "long",
        "key": "cached",
        "title": "-c, --cached",
        "description": "Show cached files in the output (default)"
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --deleted",
        "description": "Show deleted files in the output"
      },
      {
        "type": "long",
        "key": "deleted",
        "title": "-d, --deleted",
        "description": "Show deleted files in the output"
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --modified",
        "description": "Show modified files in the output"
      },
      {
        "type": "long",
        "key": "modified",
        "title": "-m, --modified",
        "description": "Show modified files in the output"
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o, --others",
        "description": "Show other (i.e. untracked) files in the output"
      },
      {
        "type": "long",
        "key": "others",
        "title": "-o, --others",
        "description": "Show other (i.e. untracked) files in the output"
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --ignored",
        "description": "Show only ignored files in the output. When showing files in the\nindex, print only those matched by an exclude pattern. When\nshowing \"other\" files, show only those matched by an exclude\npattern. Standard ignore rules are not automatically activated,\ntherefore at least one of the --exclude* options is required."
      },
      {
        "type": "long",
        "key": "ignored",
        "title": "-i, --ignored",
        "description": "Show only ignored files in the output. When showing files in the\nindex, print only those matched by an exclude pattern. When\nshowing \"other\" files, show only those matched by an exclude\npattern. Standard ignore rules are not automatically activated,\ntherefore at least one of the --exclude* options is required."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --stage",
        "description": "Show staged contents' mode bits, object name and stage number in the output."
      },
      {
        "type": "long",
        "key": "stage",
        "title": "-s, --stage",
        "description": "Show staged contents' mode bits, object name and stage number in the output."
      },
      {
        "type": "long",
        "key": "directory",
        "title": "--directory",
        "description": "If a whole directory is classified as \"other\", show just its\nname (with a trailing slash) and not its whole contents."
      },
      {
        "type": "long",
        "key": "no-empty-directory",
        "title": "--no-empty-directory",
        "description": "Do not list empty directories. Has no effect without --directory."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u, --unmerged",
        "description": "Show unmerged files in the output (forces --stage)"
      },
      {
        "type": "long",
        "key": "unmerged",
        "title": "-u, --unmerged",
        "description": "Show unmerged files in the output (forces --stage)"
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --killed",
        "description": "Show files on the filesystem that need to be removed due\nto file/directory conflicts for checkout-index to\nsucceed."
      },
      {
        "type": "long",
        "key": "killed",
        "title": "-k, --killed",
        "description": "Show files on the filesystem that need to be removed due\nto file/directory conflicts for checkout-index to\nsucceed."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "\\0 line termination on output and do not quote filenames.\nSee OUTPUT below for more information."
      },
      {
        "type": "long",
        "key": "deduplicate",
        "title": "--deduplicate",
        "description": "When only filenames are shown, suppress duplicates that may\ncome from having multiple stages during a merge, or giving\n--deleted and --modified option at the same time.\nWhen any of the -t, --unmerged, or --stage option is\nin use, this option has no effect."
      },
      {
        "type": "short",
        "key": "x",
        "title": "-x <pattern>, --exclude=<pattern>",
        "description": "Skip untracked files matching pattern.\nNote that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS\nbelow for more information."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "-x <pattern>, --exclude=<pattern>",
        "description": "Skip untracked files matching pattern.\nNote that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS\nbelow for more information."
      },
      {
        "type": "short",
        "key": "X",
        "title": "-X <file>, --exclude-from=<file>",
        "description": "Read exclude patterns from <file>; 1 per line."
      },
      {
        "type": "long",
        "key": "exclude-from",
        "title": "-X <file>, --exclude-from=<file>",
        "description": "Read exclude patterns from <file>; 1 per line."
      },
      {
        "type": "long",
        "key": "exclude-per-directory",
        "title": "--exclude-per-directory=<file>",
        "description": "Read additional exclude patterns that apply only to the\ndirectory and its subdirectories in <file>."
      },
      {
        "type": "long",
        "key": "exclude-standard",
        "title": "--exclude-standard",
        "description": "Add the standard Git exclusions: .git/info/exclude, .gitignore\nin each directory, and the user’s global exclusion file."
      },
      {
        "type": "long",
        "key": "error-unmatch",
        "title": "--error-unmatch",
        "description": "If any <file> does not appear in the index, treat this as an\nerror (return 1)."
      },
      {
        "type": "long",
        "key": "with-tree",
        "title": "--with-tree=<tree-ish>",
        "description": "When using --error-unmatch to expand the user supplied\n<file> (i.e. path pattern) arguments to paths, pretend\nthat paths which were removed in the index since the\nnamed <tree-ish> are still present.  Using this option\nwith -s or -u options does not make any sense."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t",
        "description": "This feature is semi-deprecated. For scripting purpose,\ngit-status[1] --porcelain and\ngit-diff-files[1] --name-status are almost always\nsuperior alternatives, and users should look at\ngit-status[1] --short or git-diff[1]\n--name-status for more user-friendly alternatives.\n\n\n\nThis option identifies the file status with the following tags (followed by\na space) at the start of each line:\n\n\n\n H \n\ncached\n\n S \n\nskip-worktree\n\n M \n\nunmerged\n\n R \n\nremoved/deleted\n\n C \n\nmodified/changed\n\n K \n\nto be killed\n\n ? \n\nother"
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Similar to -t, but use lowercase letters for files\nthat are marked as assume unchanged (see\ngit-update-index[1])."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f",
        "description": "Similar to -t, but use lowercase letters for files\nthat are marked as fsmonitor valid (see\ngit-update-index[1])."
      },
      {
        "type": "long",
        "key": "full-name",
        "title": "--full-name",
        "description": "When run from a subdirectory, the command usually\noutputs paths relative to the current directory.  This\noption forces paths to be output relative to the project\ntop directory."
      },
      {
        "type": "long",
        "key": "recurse-submodules",
        "title": "--recurse-submodules",
        "description": "Recursively calls ls-files on each active submodule in the repository.\nCurrently there is only support for the --cached mode."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object\nlines, show the shortest prefix that is at least <n>\nhexdigits long that uniquely refers the object.\nNon default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "long",
        "key": "debug",
        "title": "--debug",
        "description": "After each line that describes a file, add more data about its\ncache entry.  This is intended to show as much information as\npossible for manual inspection; the exact format may change at\nany time."
      },
      {
        "type": "long",
        "key": "eol",
        "title": "--eol",
        "description": "Show <eolinfo> and <eolattr> of files.\n<eolinfo> is the file content identification used by Git when\nthe \"text\" attribute is \"auto\" (or not set and core.autocrlf is not false).\n<eolinfo> is either \"-text\", \"none\", \"lf\", \"crlf\", \"mixed\" or \"\".\n\n\"\" means the file is not a regular file, it is not in the index or\nnot accessible in the working tree.\n\n\n<eolattr> is the attribute that is used when checking out or committing,\nit is either \"\", \"-text\", \"text\", \"text=auto\", \"text eol=lf\", \"text eol=crlf\".\nSince Git 2.10 \"text=auto eol=lf\" and \"text=auto eol=crlf\" are supported.\n\n\nBoth the <eolinfo> in the index (\"i/<eolinfo>\")\nand in the working tree (\"w/<eolinfo>\") are shown for regular files,\nfollowed by the  (\"attr/<eolattr>\")."
      }
    ]
  },
  {
    "name": "git ls-remote",
    "options": [
      {
        "type": "short",
        "key": "h",
        "title": "-h, --heads, -t, --tags",
        "description": "Limit to only refs/heads and refs/tags, respectively.\nThese options are not mutually exclusive; when given\nboth, references stored in refs/heads and refs/tags are\ndisplayed.  Note that git ls-remote -h used without\nanything else on the command line gives help, consistent\nwith other git subcommands."
      },
      {
        "type": "long",
        "key": "heads",
        "title": "-h, --heads, -t, --tags",
        "description": "Limit to only refs/heads and refs/tags, respectively.\nThese options are not mutually exclusive; when given\nboth, references stored in refs/heads and refs/tags are\ndisplayed.  Note that git ls-remote -h used without\nanything else on the command line gives help, consistent\nwith other git subcommands."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-h, --heads, -t, --tags",
        "description": "Limit to only refs/heads and refs/tags, respectively.\nThese options are not mutually exclusive; when given\nboth, references stored in refs/heads and refs/tags are\ndisplayed.  Note that git ls-remote -h used without\nanything else on the command line gives help, consistent\nwith other git subcommands."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "-h, --heads, -t, --tags",
        "description": "Limit to only refs/heads and refs/tags, respectively.\nThese options are not mutually exclusive; when given\nboth, references stored in refs/heads and refs/tags are\ndisplayed.  Note that git ls-remote -h used without\nanything else on the command line gives help, consistent\nwith other git subcommands."
      },
      {
        "type": "long",
        "key": "refs",
        "title": "--refs",
        "description": "Do not show peeled tags or pseudorefs like HEAD in the output."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Do not print remote URL to stderr."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Do not print remote URL to stderr."
      },
      {
        "type": "long",
        "key": "upload-pack",
        "title": "--upload-pack=<exec>",
        "description": "Specify the full path of git-upload-pack on the remote\nhost. This allows listing references from repositories accessed via\nSSH and where the SSH daemon does not use the PATH configured by the\nuser."
      },
      {
        "type": "long",
        "key": "exit-code",
        "title": "--exit-code",
        "description": "Exit with status \"2\" when no matching refs are found in the remote\nrepository. Usually the command exits with status \"0\" to indicate\nit successfully talked with the remote repository, whether it\nfound any matching refs."
      },
      {
        "type": "long",
        "key": "get-url",
        "title": "--get-url",
        "description": "Expand the URL of the given remote repository taking into account any\n\"url.<base>.insteadOf\" config setting (See git-config[1]) and\nexit without talking to the remote."
      },
      {
        "type": "long",
        "key": "symref",
        "title": "--symref",
        "description": "In addition to the object pointed by it, show the underlying\nref pointed by it when showing a symbolic ref.  Currently,\nupload-pack only shows the symref HEAD, so it will be the only\none shown by ls-remote."
      },
      {
        "type": "long",
        "key": "sort",
        "title": "--sort=<key>",
        "description": "Sort based on the key given. Prefix - to sort in descending order\nof the value. Supports \"version:refname\" or \"v:refname\" (tag names\nare treated as versions). The \"version:refname\" sort order can also\nbe affected by the \"versionsort.suffix\" configuration variable.\nSee git-for-each-ref[1] for more sort options, but be aware\nkeys like committerdate that require access to the objects\nthemselves will not work for refs whose objects have not yet been\nfetched from the remote, and will give a missing object error."
      },
      {
        "type": "short",
        "key": "o",
        "title": "-o <option>, --server-option=<option>",
        "description": "Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.\nWhen multiple --server-option=<option> are given, they are all\nsent to the other side in the order listed on the command line."
      },
      {
        "type": "long",
        "key": "server-option",
        "title": "-o <option>, --server-option=<option>",
        "description": "Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.\nWhen multiple --server-option=<option> are given, they are all\nsent to the other side in the order listed on the command line."
      }
    ]
  },
  {
    "name": "git ls-tree",
    "options": [
      {
        "type": "short",
        "key": "d",
        "title": "-d",
        "description": "Show only the named tree entry itself, not its children."
      },
      {
        "type": "short",
        "key": "r",
        "title": "-r",
        "description": "Recurse into sub-trees."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-t",
        "description": "Show tree entries even when going to recurse them. Has no effect\nif -r was not passed. -d implies -t."
      },
      {
        "type": "short",
        "key": "l",
        "title": "-l, --long",
        "description": "Show object size of blob (file) entries."
      },
      {
        "type": "long",
        "key": "long",
        "title": "-l, --long",
        "description": "Show object size of blob (file) entries."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "\\0 line termination on output and do not quote filenames.\nSee OUTPUT FORMAT below for more information."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only, --name-status",
        "description": "List only filenames (instead of the \"long\" output), one per line."
      },
      {
        "type": "long",
        "key": "name-status",
        "title": "--name-only, --name-status",
        "description": "List only filenames (instead of the \"long\" output), one per line."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Instead of showing the full 40-byte hexadecimal object\nlines, show the shortest prefix that is at least <n>\nhexdigits long that uniquely refers the object.\nNon default number of digits can be specified with --abbrev=<n>."
      },
      {
        "type": "long",
        "key": "full-name",
        "title": "--full-name",
        "description": "Instead of showing the path names relative to the current working\ndirectory, show the full path names."
      },
      {
        "type": "long",
        "key": "full-tree",
        "title": "--full-tree",
        "description": "Do not limit the listing to the current working directory.\nImplies --full-name."
      }
    ]
  },
  {
    "name": "git merge-base",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "Output all merge bases for the commits, instead of just one."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "Output all merge bases for the commits, instead of just one."
      }
    ]
  },
  {
    "name": "git name-rev",
    "options": [
      {
        "type": "long",
        "key": "tags",
        "title": "--tags",
        "description": "Do not use branch names, but only tags to name the commits"
      },
      {
        "type": "long",
        "key": "refs",
        "title": "--refs=<pattern>",
        "description": "Only use refs whose names match a given shell pattern.  The pattern\ncan be one of branch name, tag name or fully qualified ref name. If\ngiven multiple times, use refs whose names match any of the given shell\npatterns. Use --no-refs to clear any previous ref patterns given."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude=<pattern>",
        "description": "Do not use any ref whose name matches a given shell pattern. The\npattern can be one of branch name, tag name or fully qualified ref\nname. If given multiple times, a ref will be excluded when it matches\nany of the given patterns. When used together with --refs, a ref will\nbe used as a match only when it matches at least one --refs pattern and\ndoes not match any --exclude patterns. Use --no-exclude to clear the\nlist of exclude patterns."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "List all commits reachable from all refs"
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Transform stdin by substituting all the 40-character SHA-1\nhexes (say $hex) with \"$hex ($rev_name)\".  When used with\n--name-only, substitute with \"$rev_name\", omitting $hex\naltogether.  Intended for the scripter’s use."
      },
      {
        "type": "long",
        "key": "name-only",
        "title": "--name-only",
        "description": "Instead of printing both the SHA-1 and the name, print only\nthe name.  If given with --tags the usual tag prefix of\n\"tags/\" is also omitted from the name, matching the output\nof git-describe more closely."
      },
      {
        "type": "long",
        "key": "no-undefined",
        "title": "--no-undefined",
        "description": "Die with error code != 0 when a reference is undefined,\ninstead of printing undefined."
      },
      {
        "type": "long",
        "key": "always",
        "title": "--always",
        "description": "Show uniquely abbreviated commit object as fallback."
      }
    ]
  },
  {
    "name": "git pack-redundant",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Processes all packs. Any filenames on the command line are ignored."
      },
      {
        "type": "long",
        "key": "alt-odb",
        "title": "--alt-odb",
        "description": "Don’t require objects present in packs from alternate object\ndirectories to be present in local packs."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Outputs some statistics to stderr. Has a small performance penalty."
      }
    ]
  },
  {
    "name": "git rev-list",
    "options": [
      {
        "type": "short",
        "key": "n",
        "title": "-<number>, -n <number>, --max-count=<number>",
        "description": "Limit the number of commits to output."
      },
      {
        "type": "long",
        "key": "max-count",
        "title": "-<number>, -n <number>, --max-count=<number>",
        "description": "Limit the number of commits to output."
      },
      {
        "type": "long",
        "key": "skip",
        "title": "--skip=<number>",
        "description": "Skip number commits before starting to show the commit output."
      },
      {
        "type": "long",
        "key": "since",
        "title": "--since=<date>, --after=<date>",
        "description": "Show commits more recent than a specific date."
      },
      {
        "type": "long",
        "key": "after",
        "title": "--since=<date>, --after=<date>",
        "description": "Show commits more recent than a specific date."
      },
      {
        "type": "long",
        "key": "until",
        "title": "--until=<date>, --before=<date>",
        "description": "Show commits older than a specific date."
      },
      {
        "type": "long",
        "key": "before",
        "title": "--until=<date>, --before=<date>",
        "description": "Show commits older than a specific date."
      },
      {
        "type": "long",
        "key": "max-age",
        "title": "--max-age=<timestamp>, --min-age=<timestamp>",
        "description": "Limit the commits output to specified time range."
      },
      {
        "type": "long",
        "key": "min-age",
        "title": "--max-age=<timestamp>, --min-age=<timestamp>",
        "description": "Limit the commits output to specified time range."
      },
      {
        "type": "long",
        "key": "author",
        "title": "--author=<pattern>, --committer=<pattern>",
        "description": "Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern>,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern>)."
      },
      {
        "type": "long",
        "key": "committer",
        "title": "--author=<pattern>, --committer=<pattern>",
        "description": "Limit the commits output to ones with author/committer\nheader lines that match the specified pattern (regular\nexpression).  With more than one --author=<pattern>,\ncommits whose author matches any of the given patterns are\nchosen (similarly for multiple --committer=<pattern>)."
      },
      {
        "type": "long",
        "key": "grep-reflog",
        "title": "--grep-reflog=<pattern>",
        "description": "Limit the commits output to ones with reflog entries that\nmatch the specified pattern (regular expression). With\nmore than one --grep-reflog, commits whose reflog message\nmatches any of the given patterns are chosen.  It is an\nerror to use this option unless --walk-reflogs is in use."
      },
      {
        "type": "long",
        "key": "grep",
        "title": "--grep=<pattern>",
        "description": "Limit the commits output to ones with log message that\nmatches the specified pattern (regular expression).  With\nmore than one --grep=<pattern>, commits whose message\nmatches any of the given patterns are chosen (but see\n--all-match)."
      },
      {
        "type": "long",
        "key": "all-match",
        "title": "--all-match",
        "description": "Limit the commits output to ones that match all given --grep,\ninstead of ones that match at least one."
      },
      {
        "type": "long",
        "key": "invert-grep",
        "title": "--invert-grep",
        "description": "Limit the commits output to ones with log message that do not\nmatch the pattern specified with --grep=<pattern>."
      },
      {
        "type": "short",
        "key": "i",
        "title": "-i, --regexp-ignore-case",
        "description": "Match the regular expression limiting patterns without regard to letter\ncase."
      },
      {
        "type": "long",
        "key": "regexp-ignore-case",
        "title": "-i, --regexp-ignore-case",
        "description": "Match the regular expression limiting patterns without regard to letter\ncase."
      },
      {
        "type": "long",
        "key": "basic-regexp",
        "title": "--basic-regexp",
        "description": "Consider the limiting patterns to be basic regular expressions;\nthis is the default."
      },
      {
        "type": "short",
        "key": "E",
        "title": "-E, --extended-regexp",
        "description": "Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions."
      },
      {
        "type": "long",
        "key": "extended-regexp",
        "title": "-E, --extended-regexp",
        "description": "Consider the limiting patterns to be extended regular expressions\ninstead of the default basic regular expressions."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F, --fixed-strings",
        "description": "Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression)."
      },
      {
        "type": "long",
        "key": "fixed-strings",
        "title": "-F, --fixed-strings",
        "description": "Consider the limiting patterns to be fixed strings (don’t interpret\npattern as a regular expression)."
      },
      {
        "type": "short",
        "key": "P",
        "title": "-P, --perl-regexp",
        "description": "Consider the limiting patterns to be Perl-compatible regular\nexpressions.\n\nSupport for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."
      },
      {
        "type": "long",
        "key": "perl-regexp",
        "title": "-P, --perl-regexp",
        "description": "Consider the limiting patterns to be Perl-compatible regular\nexpressions.\n\nSupport for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn’t compiled with support for them\nproviding this option will cause it to die."
      },
      {
        "type": "long",
        "key": "remove-empty",
        "title": "--remove-empty",
        "description": "Stop when a given path disappears from the tree."
      },
      {
        "type": "long",
        "key": "merges",
        "title": "--merges",
        "description": "Print only merge commits. This is exactly the same as --min-parents=2."
      },
      {
        "type": "long",
        "key": "no-merges",
        "title": "--no-merges",
        "description": "Do not print commits with more than one parent. This is\nexactly the same as --max-parents=1."
      },
      {
        "type": "long",
        "key": "min-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "max-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "no-min-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "no-max-parents",
        "title": "--min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents",
        "description": "Show only commits which have at least (or at most) that many parent\ncommits. In particular, --max-parents=1 is the same as --no-merges,\n--min-parents=2 is the same as --merges.  --max-parents=0\ngives all root commits and --min-parents=3 all octopus merges.\n\n--no-min-parents and --no-max-parents reset these limits (to no limit)\nagain.  Equivalent forms are --min-parents=0 (any commit has 0 or more\nparents) and --max-parents=-1 (negative numbers denote no upper limit)."
      },
      {
        "type": "long",
        "key": "first-parent",
        "title": "--first-parent",
        "description": "Follow only the first parent commit upon seeing a merge\ncommit.  This option can give a better overview when\nviewing the evolution of a particular topic branch,\nbecause merges into a topic branch tend to be only about\nadjusting to updated upstream from time to time, and\nthis option allows you to ignore the individual commits\nbrought in to your history by such a merge."
      },
      {
        "type": "long",
        "key": "not",
        "title": "--not",
        "description": "Reverses the meaning of the ^ prefix (or lack thereof)\nfor all following revision specifiers, up to the next --not."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Pretend as if all the refs in refs/, along with HEAD, are\nlisted on the command line as <commit>."
      },
      {
        "type": "long",
        "key": "branches",
        "title": "--branches[=<pattern>]",
        "description": "Pretend as if all the refs in refs/heads are listed\non the command line as <commit>. If <pattern> is given, limit\nbranches to ones matching given shell glob. If pattern lacks ?,\n*, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--tags[=<pattern>]",
        "description": "Pretend as if all the refs in refs/tags are listed\non the command line as <commit>. If <pattern> is given, limit\ntags to ones matching given shell glob. If pattern lacks ?, *,\nor [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "remotes",
        "title": "--remotes[=<pattern>]",
        "description": "Pretend as if all the refs in refs/remotes are listed\non the command line as <commit>. If <pattern> is given, limit\nremote-tracking branches to ones matching given shell glob.\nIf pattern lacks ?, *, or [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "glob",
        "title": "--glob=<glob-pattern>",
        "description": "Pretend as if all the refs matching shell glob <glob-pattern>\nare listed on the command line as <commit>. Leading refs/,\nis automatically prepended if missing. If pattern lacks ?, *,\nor [, /* at the end is implied."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude=<glob-pattern>",
        "description": "Do not include refs matching <glob-pattern> that the next --all,\n--branches, --tags, --remotes, or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all, --branches, --tags, --remotes, or\n--glob option (other options or arguments do not clear\naccumulated patterns).\n\nThe patterns given should not begin with refs/heads, refs/tags, or\nrefs/remotes when applied to --branches, --tags, or --remotes,\nrespectively, and they must begin with refs/ when applied to --glob\nor --all. If a trailing /* is intended, it must be given\nexplicitly."
      },
      {
        "type": "long",
        "key": "reflog",
        "title": "--reflog",
        "description": "Pretend as if all objects mentioned by reflogs are listed on the\ncommand line as <commit>."
      },
      {
        "type": "long",
        "key": "alternate-refs",
        "title": "--alternate-refs",
        "description": "Pretend as if all objects mentioned as ref tips of alternate\nrepositories were listed on the command line. An alternate\nrepository is any repository whose object directory is specified\nin objects/info/alternates.  The set of included objects may\nbe modified by core.alternateRefsCommand, etc. See\ngit-config[1]."
      },
      {
        "type": "long",
        "key": "single-worktree",
        "title": "--single-worktree",
        "description": "By default, all working trees will be examined by the\nfollowing options when there are more than one (see\ngit-worktree[1]): --all, --reflog and\n--indexed-objects.\nThis option forces them to examine the current working tree\nonly."
      },
      {
        "type": "long",
        "key": "ignore-missing",
        "title": "--ignore-missing",
        "description": "Upon seeing an invalid object name in the input, pretend as if\nthe bad input was not given."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "In addition to the <commit> listed on the command\nline, read them from the standard input. If a -- separator is\nseen, stop reading commits and start reading paths to limit the\nresult."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "--quiet",
        "description": "Don’t print anything to standard output.  This form\nis primarily meant to allow the caller to\ntest the exit status to see if a range of objects is fully\nconnected (or not).  It is faster than redirecting stdout\nto /dev/null as the output does not have to be formatted."
      },
      {
        "type": "long",
        "key": "disk-usage",
        "title": "--disk-usage",
        "description": "Suppress normal output; instead, print the sum of the bytes used\nfor on-disk storage by the selected commits or objects. This is\nequivalent to piping the output into git cat-file\n--batch-check='%(objectsize:disk)', except that it runs much\nfaster (especially with --use-bitmap-index). See the CAVEATS\nsection in git-cat-file[1] for the limitations of what\n\"on-disk storage\" means."
      },
      {
        "type": "long",
        "key": "cherry-mark",
        "title": "--cherry-mark",
        "description": "Like --cherry-pick (see below) but mark equivalent commits\nwith = rather than omitting them, and inequivalent ones with +."
      },
      {
        "type": "long",
        "key": "cherry-pick",
        "title": "--cherry-pick",
        "description": "Omit any commit that introduces the same change as\nanother commit on the “other side” when the set of\ncommits are limited with symmetric difference.\n\nFor example, if you have two branches, A and B, a usual way\nto list all commits on only one side of them is with\n--left-right (see the example below in the description of\nthe --left-right option). However, it shows the commits that were\ncherry-picked from the other branch (for example, “3rd on b” may be\ncherry-picked from branch A). With this option, such pairs of commits are\nexcluded from the output."
      },
      {
        "type": "long",
        "key": "left-only",
        "title": "--left-only, --right-only",
        "description": "List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by\n--left-right.\n\nFor example, --cherry-pick --right-only A...B omits those\ncommits from B which are in A or are patch-equivalent to a commit in\nA. In other words, this lists the + commits from git cherry A B.\nMore precisely, --cherry-pick --right-only --no-merges gives the exact\nlist."
      },
      {
        "type": "long",
        "key": "right-only",
        "title": "--left-only, --right-only",
        "description": "List only commits on the respective side of a symmetric difference,\ni.e. only those which would be marked < resp. > by\n--left-right.\n\nFor example, --cherry-pick --right-only A...B omits those\ncommits from B which are in A or are patch-equivalent to a commit in\nA. In other words, this lists the + commits from git cherry A B.\nMore precisely, --cherry-pick --right-only --no-merges gives the exact\nlist."
      },
      {
        "type": "long",
        "key": "cherry",
        "title": "--cherry",
        "description": "A synonym for --right-only --cherry-mark --no-merges; useful to\nlimit the output to the commits on our side and mark those that\nhave been applied to the other side of a forked history with\ngit log --cherry upstream...mybranch, similar to\ngit cherry upstream mybranch."
      },
      {
        "type": "short",
        "key": "g",
        "title": "-g, --walk-reflogs",
        "description": "Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit, commit1..commit2,\nand commit1...commit2 notations cannot be used).\n\nWith --pretty format other than oneline and reference (for obvious reasons),\nthis causes the output to have two extra lines of information\ntaken from the reflog.  The reflog designator in the output may be shown\nas ref@{Nth} (where Nth is the reverse-chronological index in the\nreflog) or as ref@{timestamp} (with the timestamp for that entry),\ndepending on a few rules:\n\n\n\n\n\n\nIf the starting point is specified as ref@{Nth}, show the index\nformat.\n\n\nIf the starting point was specified as ref@{now}, show the\ntimestamp format.\n\n\nIf neither was used, but --date was given on the command line, show\nthe timestamp in the format requested by --date.\n\n\nOtherwise, show the index format.\n\n\n\n\n\n\nUnder --pretty=oneline, the commit message is\nprefixed with this information on the same line.\nThis option cannot be combined with --reverse.\nSee also git-reflog[1].\n\n\nUnder --pretty=reference, this information will not be shown at all."
      },
      {
        "type": "long",
        "key": "walk-reflogs",
        "title": "-g, --walk-reflogs",
        "description": "Instead of walking the commit ancestry chain, walk\nreflog entries from the most recent one to older ones.\nWhen this option is used you cannot specify commits to\nexclude (that is, ^commit, commit1..commit2,\nand commit1...commit2 notations cannot be used).\n\nWith --pretty format other than oneline and reference (for obvious reasons),\nthis causes the output to have two extra lines of information\ntaken from the reflog.  The reflog designator in the output may be shown\nas ref@{Nth} (where Nth is the reverse-chronological index in the\nreflog) or as ref@{timestamp} (with the timestamp for that entry),\ndepending on a few rules:\n\n\n\n\n\n\nIf the starting point is specified as ref@{Nth}, show the index\nformat.\n\n\nIf the starting point was specified as ref@{now}, show the\ntimestamp format.\n\n\nIf neither was used, but --date was given on the command line, show\nthe timestamp in the format requested by --date.\n\n\nOtherwise, show the index format.\n\n\n\n\n\n\nUnder --pretty=oneline, the commit message is\nprefixed with this information on the same line.\nThis option cannot be combined with --reverse.\nSee also git-reflog[1].\n\n\nUnder --pretty=reference, this information will not be shown at all."
      },
      {
        "type": "long",
        "key": "merge",
        "title": "--merge",
        "description": "After a failed merge, show refs that touch files having a\nconflict and don’t exist on all heads to merge."
      },
      {
        "type": "long",
        "key": "boundary",
        "title": "--boundary",
        "description": "Output excluded boundary commits. Boundary commits are\nprefixed with -."
      },
      {
        "type": "long",
        "key": "use-bitmap-index",
        "title": "--use-bitmap-index",
        "description": "Try to speed up the traversal using the pack bitmap index (if\none is available). Note that when traversing with --objects,\ntrees and blobs will not have their associated path printed."
      },
      {
        "type": "long",
        "key": "progress",
        "title": "--progress=<header>",
        "description": "Show progress reports on stderr as objects are considered. The\n<header> text will be printed with each progress update."
      },
      {
        "type": "long",
        "key": "simplify-by-decoration",
        "title": "--simplify-by-decoration",
        "description": "Commits that are referred by some branch or tag are selected."
      },
      {
        "type": "long",
        "key": "show-pulls",
        "title": "--show-pulls",
        "description": "Include all commits from the default mode, but also any merge\ncommits that are not TREESAME to the first parent but are\nTREESAME to a later parent. This mode is helpful for showing\nthe merge commits that \"first introduced\" a change to a branch."
      },
      {
        "type": "long",
        "key": "full-history",
        "title": "--full-history",
        "description": "Same as the default mode, but does not prune some history."
      },
      {
        "type": "long",
        "key": "dense",
        "title": "--dense",
        "description": "Only the selected commits are shown, plus some to have a\nmeaningful history."
      },
      {
        "type": "long",
        "key": "sparse",
        "title": "--sparse",
        "description": "All commits in the simplified history are shown."
      },
      {
        "type": "long",
        "key": "simplify-merges",
        "title": "--simplify-merges",
        "description": "Additional option to --full-history to remove some needless\nmerges from the resulting history, as there are no selected\ncommits contributing to this merge."
      },
      {
        "type": "long",
        "key": "ancestry-path",
        "title": "--ancestry-path",
        "description": "When given a range of commits to display (e.g. commit1..commit2\nor commit2 ^commit1), only display commits that exist\ndirectly on the ancestry chain between the commit1 and\ncommit2, i.e. commits that are both descendants of commit1,\nand ancestors of commit2."
      },
      {
        "type": "long",
        "key": "bisect",
        "title": "--bisect",
        "description": "Limit output to the one commit object which is roughly halfway between\nincluded and excluded commits. Note that the bad bisection ref\nrefs/bisect/bad is added to the included commits (if it\nexists) and the good bisection refs refs/bisect/good-* are\nadded to the excluded commits (if they exist). Thus, supposing there\nare no refs in refs/bisect/, if\n\n\n\t$ git rev-list --bisect foo ^bar ^baz\n\n\n\noutputs midpoint, the output of the two commands\n\n\n\n\t$ git rev-list foo ^midpoint\n\t$ git rev-list midpoint ^bar ^baz\n\n\n\nwould be of roughly the same length.  Finding the change which\nintroduces a regression is thus reduced to a binary search: repeatedly\ngenerate and test new 'midpoint’s until the commit chain is of length\none."
      },
      {
        "type": "long",
        "key": "bisect-vars",
        "title": "--bisect-vars",
        "description": "This calculates the same as --bisect, except that refs in\nrefs/bisect/ are not used, and except that this outputs\ntext ready to be eval’ed by the shell. These lines will assign the\nname of the midpoint revision to the variable bisect_rev, and the\nexpected number of commits to be tested after bisect_rev is tested\nto bisect_nr, the expected number of commits to be tested if\nbisect_rev turns out to be good to bisect_good, the expected\nnumber of commits to be tested if bisect_rev turns out to be bad to\nbisect_bad, and the number of commits we are bisecting right now to\nbisect_all."
      },
      {
        "type": "long",
        "key": "bisect-all",
        "title": "--bisect-all",
        "description": "This outputs all the commit objects between the included and excluded\ncommits, ordered by their distance to the included and excluded\ncommits. Refs in refs/bisect/ are not used. The farthest\nfrom them is displayed first. (This is the only one displayed by\n--bisect.)\n\nThis is useful because it makes it easy to choose a good commit to\ntest when you want to avoid to test some of them for some reason (they\nmay not compile for example).\n\n\nThis option can be used along with --bisect-vars, in this case,\nafter all the sorted commit objects, there will be the same text as if\n--bisect-vars had been used alone."
      },
      {
        "type": "long",
        "key": "date-order",
        "title": "--date-order",
        "description": "Show no parents before all of its children are shown, but\notherwise show commits in the commit timestamp order."
      },
      {
        "type": "long",
        "key": "author-date-order",
        "title": "--author-date-order",
        "description": "Show no parents before all of its children are shown, but\notherwise show commits in the author timestamp order."
      },
      {
        "type": "long",
        "key": "topo-order",
        "title": "--topo-order",
        "description": "Show no parents before all of its children are shown, and\navoid showing commits on multiple lines of history\nintermixed.\n\nFor example, in a commit history like this:\n\n\n\n    ---1----2----4----7\n\t\\\t       \\\n\t 3----5----6----8---\n\n\n\nwhere the numbers denote the order of commit timestamps, git\nrev-list and friends with --date-order show the commits in the\ntimestamp order: 8 7 6 5 4 3 2 1.\n\n\nWith --topo-order, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5\n3 1); some older commits are shown before newer ones in order to\navoid showing the commits from two parallel development track mixed\ntogether."
      },
      {
        "type": "long",
        "key": "reverse",
        "title": "--reverse",
        "description": "Output the commits chosen to be shown (see Commit Limiting\nsection above) in reverse order. Cannot be combined with\n--walk-reflogs."
      },
      {
        "type": "long",
        "key": "objects",
        "title": "--objects",
        "description": "Print the object IDs of any object referenced by the listed\ncommits.  --objects foo ^bar thus means “send me\nall object IDs which I need to download if I have the commit\nobject bar but not foo”."
      },
      {
        "type": "long",
        "key": "in-commit-order",
        "title": "--in-commit-order",
        "description": "Print tree and blob ids in order of the commits. The tree\nand blob ids are printed after they are first referenced\nby a commit."
      },
      {
        "type": "long",
        "key": "objects-edge",
        "title": "--objects-edge",
        "description": "Similar to --objects, but also print the IDs of excluded\ncommits prefixed with a “-” character.  This is used by\ngit-pack-objects[1] to build a “thin” pack, which records\nobjects in deltified form based on objects contained in these\nexcluded commits to reduce network traffic."
      },
      {
        "type": "long",
        "key": "objects-edge-aggressive",
        "title": "--objects-edge-aggressive",
        "description": "Similar to --objects-edge, but it tries harder to find excluded\ncommits at the cost of increased time.  This is used instead of\n--objects-edge to build “thin” packs for shallow repositories."
      },
      {
        "type": "long",
        "key": "indexed-objects",
        "title": "--indexed-objects",
        "description": "Pretend as if all trees and blobs used by the index are listed\non the command line.  Note that you probably want to use\n--objects, too."
      },
      {
        "type": "long",
        "key": "unpacked",
        "title": "--unpacked",
        "description": "Only useful with --objects; print the object IDs that are not\nin packs."
      },
      {
        "type": "long",
        "key": "object-names",
        "title": "--object-names",
        "description": "Only useful with --objects; print the names of the object IDs\nthat are found. This is the default behavior."
      },
      {
        "type": "long",
        "key": "no-object-names",
        "title": "--no-object-names",
        "description": "Only useful with --objects; does not print the names of the object\nIDs that are found. This inverts --object-names. This flag allows\nthe output to be more easily parsed by commands such as\ngit-cat-file[1]."
      },
      {
        "type": "long",
        "key": "filter",
        "title": "--filter=<filter-spec>",
        "description": "Only useful with one of the --objects*; omits objects (usually\nblobs) from the list of printed objects.  The <filter-spec>\nmay be one of the following:\n\nThe form --filter=blob:none omits all blobs.\n\n\nThe form --filter=blob:limit=<n>[kmg] omits blobs larger than n bytes\nor units.  n may be zero.  The suffixes k, m, and g can be used to name\nunits in KiB, MiB, or GiB.  For example, blob:limit=1k is the same\nas blob:limit=1024.\n\n\nThe form --filter=object:type=(tag|commit|tree|blob) omits all objects\nwhich are not of the requested type.\n\n\nThe form --filter=sparse:oid=<blob-ish> uses a sparse-checkout\nspecification contained in the blob (or blob-expression) <blob-ish>\nto omit blobs that would not be required for a sparse checkout on\nthe requested refs.\n\n\nThe form --filter=tree:<depth> omits all blobs and trees whose depth\nfrom the root tree is >= <depth> (minimum depth if an object is located\nat multiple depths in the commits traversed). <depth>=0 will not include\nany trees or blobs unless included explicitly in the command-line (or\nstandard input when --stdin is used). <depth>=1 will include only the\ntree and blobs which are referenced directly by a commit reachable from\n<commit> or an explicitly-given object. <depth>=2 is like <depth>=1\nwhile also including trees and blobs one more level removed from an\nexplicitly-given commit or tree.\n\n\nNote that the form --filter=sparse:path=<path> that wants to read\nfrom an arbitrary path on the filesystem has been dropped for security\nreasons.\n\n\nMultiple --filter= flags can be specified to combine filters. Only\nobjects which are accepted by every filter are included.\n\n\nThe form --filter=combine:<filter1>+<filter2>+…​<filterN> can also be\nused to combined several filters, but this is harder than just repeating\nthe --filter flag and is usually not necessary. Filters are joined by\n+ and individual filters are %-encoded (i.e. URL-encoded).\nBesides the + and % characters, the following characters are\nreserved and also must be encoded: ~!@#$^&*()[]{}\\;\",<>?'`\nas well as all characters with ASCII code <= 0x20, which includes\nspace and newline.\n\n\nOther arbitrary characters can also be encoded. For instance,\ncombine:tree:3+blob:none and combine:tree%3A3+blob%3Anone are\nequivalent."
      },
      {
        "type": "long",
        "key": "no-filter",
        "title": "--no-filter",
        "description": "Turn off any previous --filter= argument."
      },
      {
        "type": "long",
        "key": "filter-provided-objects",
        "title": "--filter-provided-objects",
        "description": "Filter the list of explicitly provided objects, which would otherwise\nalways be printed even if they did not match any of the filters. Only\nuseful with --filter=."
      },
      {
        "type": "long",
        "key": "filter-print-omitted",
        "title": "--filter-print-omitted",
        "description": "Only useful with --filter=; prints a list of the objects omitted\nby the filter.  Object IDs are prefixed with a “~” character."
      },
      {
        "type": "long",
        "key": "missing",
        "title": "--missing=<missing-action>",
        "description": "A debug option to help with future \"partial clone\" development.\nThis option specifies how missing objects are handled.\n\nThe form --missing=error requests that rev-list stop with an error if\na missing object is encountered.  This is the default action.\n\n\nThe form --missing=allow-any will allow object traversal to continue\nif a missing object is encountered.  Missing objects will silently be\nomitted from the results.\n\n\nThe form --missing=allow-promisor is like allow-any, but will only\nallow object traversal to continue for EXPECTED promisor missing objects.\nUnexpected missing objects will raise an error.\n\n\nThe form --missing=print is like allow-any, but will also print a\nlist of the missing objects.  Object IDs are prefixed with a “?” character."
      },
      {
        "type": "long",
        "key": "exclude-promisor-objects",
        "title": "--exclude-promisor-objects",
        "description": "(For internal use only.)  Prefilter object traversal at\npromisor boundary.  This is used with partial clone.  This is\nstronger than --missing=allow-promisor because it limits the\ntraversal, rather than just silencing errors about missing\nobjects."
      },
      {
        "type": "long",
        "key": "no-walk",
        "title": "--no-walk[=(sorted|unsorted)]",
        "description": "Only show the given commits, but do not traverse their ancestors.\nThis has no effect if a range is specified. If the argument\nunsorted is given, the commits are shown in the order they were\ngiven on the command line. Otherwise (if sorted or no argument\nwas given), the commits are shown in reverse chronological order\nby commit time.\nCannot be combined with --graph."
      },
      {
        "type": "long",
        "key": "do-walk",
        "title": "--do-walk",
        "description": "Overrides a previous --no-walk."
      },
      {
        "type": "long",
        "key": "pretty",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, reference, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each\nformat.  When =<format> part is omitted, it defaults to medium.\n\n\nNote: you can specify the default pretty format in the repository\nconfiguration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "format",
        "title": "--pretty[=<format>], --format=<format>",
        "description": "Pretty-print the contents of the commit logs in a given format,\nwhere <format> can be one of oneline, short, medium,\nfull, fuller, reference, email, raw, format:<string>\nand tformat:<string>.  When <format> is none of the above,\nand has %placeholder in it, it acts as if\n--pretty=tformat:<format> were given.\n\nSee the \"PRETTY FORMATS\" section for some additional details for each\nformat.  When =<format> part is omitted, it defaults to medium.\n\n\nNote: you can specify the default pretty format in the repository\nconfiguration (see git-config[1])."
      },
      {
        "type": "long",
        "key": "abbrev-commit",
        "title": "--abbrev-commit",
        "description": "Instead of showing the full 40-byte hexadecimal commit object\nname, show a prefix that names the object uniquely.\n\"--abbrev=<n>\" (which also modifies diff output, if it is displayed)\noption can be used to specify the minimum length of the prefix.\n\nThis should make \"--pretty=oneline\" a whole lot more readable for\npeople using 80-column terminals."
      },
      {
        "type": "long",
        "key": "no-abbrev-commit",
        "title": "--no-abbrev-commit",
        "description": "Show the full 40-byte hexadecimal commit object name. This negates\n--abbrev-commit, either explicit or implied by other options such\nas \"--oneline\". It also overrides the log.abbrevCommit variable."
      },
      {
        "type": "long",
        "key": "oneline",
        "title": "--oneline",
        "description": "This is a shorthand for \"--pretty=oneline --abbrev-commit\"\nused together."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "The commit objects record the encoding used for the log message\nin their encoding header; this option can be used to tell the\ncommand to re-code the commit log message in the encoding\npreferred by the user.  For non plumbing commands this\ndefaults to UTF-8. Note that if an object claims to be encoded\nin X and we are outputting in X, we will output the object\nverbatim; this means that invalid sequences in the original\ncommit may be copied to the output."
      },
      {
        "type": "long",
        "key": "expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e.  medium, which is the default, full,\nand fuller)."
      },
      {
        "type": "long",
        "key": "no-expand-tabs",
        "title": "--expand-tabs=<n>, --expand-tabs, --no-expand-tabs",
        "description": "Perform a tab expansion (replace each tab with enough spaces\nto fill to the next display column that is multiple of <n>)\nin the log message before showing it in the output.\n--expand-tabs is a short-hand for --expand-tabs=8, and\n--no-expand-tabs is a short-hand for --expand-tabs=0,\nwhich disables tab expansion.\n\nBy default, tabs are expanded in pretty formats that indent the log\nmessage by 4 spaces (i.e.  medium, which is the default, full,\nand fuller)."
      },
      {
        "type": "long",
        "key": "show-signature",
        "title": "--show-signature",
        "description": "Check the validity of a signed commit object by passing the signature\nto gpg --verify and show the output."
      },
      {
        "type": "long",
        "key": "relative-date",
        "title": "--relative-date",
        "description": "Synonym for --date=relative."
      },
      {
        "type": "long",
        "key": "date",
        "title": "--date=<format>",
        "description": "Only takes effect for dates shown in human-readable format, such\nas when using --pretty. log.date config variable sets a default\nvalue for the log command’s --date option. By default, dates\nare shown in the original time zone (either committer’s or\nauthor’s). If -local is appended to the format (e.g.,\niso-local), the user’s local time zone is used instead.\n\n\n\n--date=relative shows dates relative to the current time,\ne.g. “2 hours ago”. The -local option has no effect for\n--date=relative.\n\n\n--date=local is an alias for --date=default-local.\n\n\n--date=iso (or --date=iso8601) shows timestamps in a ISO 8601-like format.\nThe differences to the strict ISO 8601 format are:\n\n\n\n\na space instead of the T date/time delimiter\n\n\na space between time and time zone\n\n\nno colon between hours and minutes of the time zone\n\n\n\n\n--date=iso-strict (or --date=iso8601-strict) shows timestamps in strict\nISO 8601 format.\n\n\n--date=rfc (or --date=rfc2822) shows timestamps in RFC 2822\nformat, often found in email messages.\n\n\n--date=short shows only the date, but not the time, in YYYY-MM-DD format.\n\n\n--date=raw shows the date as seconds since the epoch (1970-01-01\n00:00:00 UTC), followed by a space, and then the timezone as an offset\nfrom UTC (a + or - with four digits; the first two are hours, and\nthe second two are minutes). I.e., as if the timestamp were formatted\nwith strftime(\"%s %z\")).\nNote that the -local option does not affect the seconds-since-epoch\nvalue (which is always measured in UTC), but does switch the accompanying\ntimezone value.\n\n\n--date=human shows the timezone if the timezone does not match the\ncurrent time-zone, and doesn’t print the whole date if that matches\n(ie skip printing year for dates that are \"this year\", but also skip\nthe whole date itself if it’s in the last few days and we can just say\nwhat weekday it was).  For older dates the hour and minute is also\nomitted.\n\n\n--date=unix shows the date as a Unix epoch timestamp (seconds since\n1970).  As with --raw, this is always in UTC and therefore -local\nhas no effect.\n\n\n--date=format:... feeds the format ... to your system strftime,\nexcept for %z and %Z, which are handled internally.\nUse --date=format:%c to show the date in your system locale’s\npreferred format.  See the strftime manual for a complete list of\nformat placeholders. When using -local, the correct syntax is\n--date=format-local:....\n\n\n--date=default is the default format, and is similar to\n--date=rfc2822, with a few exceptions:\n\n\n\n\n\n\nthere is no comma after the day-of-week\n\n\nthe time zone is omitted when the local time zone is used"
      },
      {
        "type": "long",
        "key": "header",
        "title": "--header",
        "description": "Print the contents of the commit in raw-format; each record is\nseparated with a NUL character."
      },
      {
        "type": "long",
        "key": "no-commit-header",
        "title": "--no-commit-header",
        "description": "Suppress the header line containing \"commit\" and the object ID printed before\nthe specified format.  This has no effect on the built-in formats; only custom\nformats are affected."
      },
      {
        "type": "long",
        "key": "commit-header",
        "title": "--commit-header",
        "description": "Overrides a previous --no-commit-header."
      },
      {
        "type": "long",
        "key": "parents",
        "title": "--parents",
        "description": "Print also the parents of the commit (in the form \"commit parent…​\").\nAlso enables parent rewriting, see History Simplification above."
      },
      {
        "type": "long",
        "key": "children",
        "title": "--children",
        "description": "Print also the children of the commit (in the form \"commit child…​\").\nAlso enables parent rewriting, see History Simplification above."
      },
      {
        "type": "long",
        "key": "timestamp",
        "title": "--timestamp",
        "description": "Print the raw commit timestamp."
      },
      {
        "type": "long",
        "key": "left-right",
        "title": "--left-right",
        "description": "Mark which side of a symmetric difference a commit is reachable from.\nCommits from the left side are prefixed with < and those from\nthe right with >.  If combined with --boundary, those\ncommits are prefixed with -.\n\nFor example, if you have this topology:\n\n\n\n\t     y---b---b  branch B\n\t    / \\ /\n\t   /   .\n\t  /   / \\\n\t o---x---a---a  branch A\n\n\n\nyou would get an output like this:\n\n\n\n\t$ git rev-list --left-right --boundary --pretty=oneline A...B\n\n\t>bbbbbbb... 3rd on b\n\t>bbbbbbb... 2nd on b\n\t<aaaaaaa... 3rd on a\n\t<aaaaaaa... 2nd on a\n\t-yyyyyyy... 1st on b\n\t-xxxxxxx... 1st on a"
      },
      {
        "type": "long",
        "key": "graph",
        "title": "--graph",
        "description": "Draw a text-based graphical representation of the commit history\non the left hand side of the output.  This may cause extra lines\nto be printed in between commits, in order for the graph history\nto be drawn properly.\nCannot be combined with --no-walk.\n\nThis enables parent rewriting, see History Simplification above.\n\n\nThis implies the --topo-order option by default, but the\n--date-order option may also be specified."
      },
      {
        "type": "long",
        "key": "show-linear-break",
        "title": "--show-linear-break[=<barrier>]",
        "description": "When --graph is not used, all history branches are flattened\nwhich can make it hard to see that the two consecutive commits\ndo not belong to a linear branch. This option puts a barrier\nin between them in that case. If <barrier> is specified, it\nis the string that will be shown instead of the default one."
      },
      {
        "type": "long",
        "key": "count",
        "title": "--count",
        "description": "Print a number stating how many commits would have been\nlisted, and suppress all other output.  When used together\nwith --left-right, instead print the counts for left and\nright commits, separated by a tab. When used together with\n--cherry-mark, omit patch equivalent commits from these\ncounts and print the count for equivalent commits separated\nby a tab."
      }
    ]
  },
  {
    "name": "git rev-parse",
    "options": [
      {
        "type": "long",
        "key": "parseopt",
        "title": "--parseopt",
        "description": "Use git rev-parse in option parsing mode (see PARSEOPT section below)."
      },
      {
        "type": "long",
        "key": "sq-quote",
        "title": "--sq-quote",
        "description": "Use git rev-parse in shell quoting mode (see SQ-QUOTE\nsection below). In contrast to the --sq option below, this\nmode does only quoting. Nothing else is done to command input."
      },
      {
        "type": "long",
        "key": "keep-dashdash",
        "title": "--keep-dashdash",
        "description": "Only meaningful in --parseopt mode. Tells the option parser to echo\nout the first -- met instead of skipping it."
      },
      {
        "type": "long",
        "key": "stop-at-non-option",
        "title": "--stop-at-non-option",
        "description": "Only meaningful in --parseopt mode.  Lets the option parser stop at\nthe first non-option argument.  This can be used to parse sub-commands\nthat take options themselves."
      },
      {
        "type": "long",
        "key": "stuck-long",
        "title": "--stuck-long",
        "description": "Only meaningful in --parseopt mode. Output the options in their\nlong form if available, and with their arguments stuck."
      },
      {
        "type": "long",
        "key": "revs-only",
        "title": "--revs-only",
        "description": "Do not output flags and parameters not meant for\ngit rev-list command."
      },
      {
        "type": "long",
        "key": "no-revs",
        "title": "--no-revs",
        "description": "Do not output flags and parameters meant for\ngit rev-list command."
      },
      {
        "type": "long",
        "key": "flags",
        "title": "--flags",
        "description": "Do not output non-flag parameters."
      },
      {
        "type": "long",
        "key": "no-flags",
        "title": "--no-flags",
        "description": "Do not output flag parameters."
      },
      {
        "type": "long",
        "key": "verify",
        "title": "--verify",
        "description": "Verify that exactly one parameter is provided, and that it\ncan be turned into a raw 20-byte SHA-1 that can be used to\naccess the object database. If so, emit it to the standard\noutput; otherwise, error out.\n\nIf you want to make sure that the output actually names an object in\nyour object database and/or can be used as a specific type of object\nyou require, you can add the ^{type} peeling operator to the parameter.\nFor example, git rev-parse \"$VAR^{commit}\" will make sure $VAR\nnames an existing object that is a commit-ish (i.e. a commit, or an\nannotated tag that points at a commit).  To make sure that $VAR\nnames an existing object of any type, git rev-parse \"$VAR^{object}\"\ncan be used.\n\n\nNote that if you are verifying a name from an untrusted source, it is\nwise to use --end-of-options so that the name argument is not mistaken\nfor another option."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Only meaningful in --verify mode. Do not output an error\nmessage if the first argument is not a valid object name;\ninstead exit with non-zero status silently.\nSHA-1s for valid object names are printed to stdout on success."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Only meaningful in --verify mode. Do not output an error\nmessage if the first argument is not a valid object name;\ninstead exit with non-zero status silently.\nSHA-1s for valid object names are printed to stdout on success."
      },
      {
        "type": "long",
        "key": "sq",
        "title": "--sq",
        "description": "Usually the output is made one line per flag and\nparameter.  This option makes output a single line,\nproperly quoted for consumption by shell.  Useful when\nyou expect your parameter to contain whitespaces and\nnewlines (e.g. when using pickaxe -S with\ngit diff-*). In contrast to the --sq-quote option,\nthe command input is still interpreted as usual."
      },
      {
        "type": "long",
        "key": "short",
        "title": "--short[=length]",
        "description": "Same as --verify but shortens the object name to a unique\nprefix with at least length characters. The minimum length\nis 4, the default is the effective value of the core.abbrev\nconfiguration variable (see git-config[1])."
      },
      {
        "type": "long",
        "key": "not",
        "title": "--not",
        "description": "When showing object names, prefix them with ^ and\nstrip ^ prefix from the object names that already have\none."
      },
      {
        "type": "long",
        "key": "abbrev-ref",
        "title": "--abbrev-ref[=(strict|loose)]",
        "description": "A non-ambiguous short name of the objects name.\nThe option core.warnAmbiguousRefs is used to select the strict\nabbreviation mode."
      },
      {
        "type": "long",
        "key": "symbolic",
        "title": "--symbolic",
        "description": "Usually the object names are output in SHA-1 form (with\npossible ^ prefix); this option makes them output in a\nform as close to the original input as possible."
      },
      {
        "type": "long",
        "key": "symbolic-full-name",
        "title": "--symbolic-full-name",
        "description": "This is similar to --symbolic, but it omits input that\nare not refs (i.e. branch or tag names; or more\nexplicitly disambiguating \"heads/master\" form, when you\nwant to name the \"master\" branch when there is an\nunfortunately named tag \"master\"), and show them as full\nrefnames (e.g. \"refs/heads/master\")."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Show all refs found in refs/."
      },
      {
        "type": "long",
        "key": "branches",
        "title": "--branches[=pattern], --tags[=pattern], --remotes[=pattern]",
        "description": "Show all branches, tags, or remote-tracking branches,\nrespectively (i.e., refs found in refs/heads,\nrefs/tags, or refs/remotes, respectively).\n\nIf a pattern is given, only refs matching the given shell glob are\nshown.  If the pattern does not contain a globbing character (?,\n*, or [), it is turned into a prefix match by appending /*."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--branches[=pattern], --tags[=pattern], --remotes[=pattern]",
        "description": "Show all branches, tags, or remote-tracking branches,\nrespectively (i.e., refs found in refs/heads,\nrefs/tags, or refs/remotes, respectively).\n\nIf a pattern is given, only refs matching the given shell glob are\nshown.  If the pattern does not contain a globbing character (?,\n*, or [), it is turned into a prefix match by appending /*."
      },
      {
        "type": "long",
        "key": "remotes",
        "title": "--branches[=pattern], --tags[=pattern], --remotes[=pattern]",
        "description": "Show all branches, tags, or remote-tracking branches,\nrespectively (i.e., refs found in refs/heads,\nrefs/tags, or refs/remotes, respectively).\n\nIf a pattern is given, only refs matching the given shell glob are\nshown.  If the pattern does not contain a globbing character (?,\n*, or [), it is turned into a prefix match by appending /*."
      },
      {
        "type": "long",
        "key": "glob",
        "title": "--glob=pattern",
        "description": "Show all refs matching the shell glob pattern pattern. If\nthe pattern does not start with refs/, this is automatically\nprepended.  If the pattern does not contain a globbing\ncharacter (?, *, or [), it is turned into a prefix\nmatch by appending /*."
      },
      {
        "type": "long",
        "key": "exclude",
        "title": "--exclude=<glob-pattern>",
        "description": "Do not include refs matching <glob-pattern> that the next --all,\n--branches, --tags, --remotes, or --glob would otherwise\nconsider. Repetitions of this option accumulate exclusion patterns\nup to the next --all, --branches, --tags, --remotes, or\n--glob option (other options or arguments do not clear\naccumulated patterns).\n\nThe patterns given should not begin with refs/heads, refs/tags, or\nrefs/remotes when applied to --branches, --tags, or --remotes,\nrespectively, and they must begin with refs/ when applied to --glob\nor --all. If a trailing /* is intended, it must be given\nexplicitly."
      },
      {
        "type": "long",
        "key": "disambiguate",
        "title": "--disambiguate=<prefix>",
        "description": "Show every object whose name begins with the given prefix.\nThe <prefix> must be at least 4 hexadecimal digits long to\navoid listing each and every object in the repository by\nmistake."
      },
      {
        "type": "long",
        "key": "local-env-vars",
        "title": "--local-env-vars",
        "description": "List the GIT_* environment variables that are local to the\nrepository (e.g. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR).\nOnly the names of the variables are listed, not their value,\neven if they are set."
      },
      {
        "type": "long",
        "key": "path-format",
        "title": "--path-format=(absolute|relative)",
        "description": "Controls the behavior of certain other options. If specified as absolute, the\npaths printed by those options will be absolute and canonical. If specified as\nrelative, the paths will be relative to the current working directory if that\nis possible.  The default is option specific.\n\nThis option may be specified multiple times and affects only the arguments that\nfollow it on the command line, either to the end of the command line or the next\ninstance of this option."
      },
      {
        "type": "long",
        "key": "git-dir",
        "title": "--git-dir",
        "description": "Show $GIT_DIR if defined. Otherwise show the path to\nthe .git directory. The path shown, when relative, is\nrelative to the current working directory.\n\nIf $GIT_DIR is not defined and the current directory\nis not detected to lie in a Git repository or work tree\nprint a message to stderr and exit with nonzero status."
      },
      {
        "type": "long",
        "key": "git-common-dir",
        "title": "--git-common-dir",
        "description": "Show $GIT_COMMON_DIR if defined, else $GIT_DIR."
      },
      {
        "type": "long",
        "key": "show-toplevel",
        "title": "--show-toplevel",
        "description": "Show the (by default, absolute) path of the top-level directory\nof the working tree. If there is no working tree, report an error."
      },
      {
        "type": "long",
        "key": "show-superproject-working-tree",
        "title": "--show-superproject-working-tree",
        "description": "Show the absolute path of the root of the superproject’s\nworking tree (if exists) that uses the current repository as\nits submodule.  Outputs nothing if the current repository is\nnot used as a submodule by any project."
      },
      {
        "type": "long",
        "key": "shared-index-path",
        "title": "--shared-index-path",
        "description": "Show the path to the shared index file in split index mode, or\nempty if not in split-index mode."
      },
      {
        "type": "long",
        "key": "absolute-git-dir",
        "title": "--absolute-git-dir",
        "description": "Like --git-dir, but its output is always the canonicalized\nabsolute path."
      },
      {
        "type": "long",
        "key": "is-inside-git-dir",
        "title": "--is-inside-git-dir",
        "description": "When the current working directory is below the repository\ndirectory print \"true\", otherwise \"false\"."
      },
      {
        "type": "long",
        "key": "is-inside-work-tree",
        "title": "--is-inside-work-tree",
        "description": "When the current working directory is inside the work tree of the\nrepository print \"true\", otherwise \"false\"."
      },
      {
        "type": "long",
        "key": "is-bare-repository",
        "title": "--is-bare-repository",
        "description": "When the repository is bare print \"true\", otherwise \"false\"."
      },
      {
        "type": "long",
        "key": "is-shallow-repository",
        "title": "--is-shallow-repository",
        "description": "When the repository is shallow print \"true\", otherwise \"false\"."
      },
      {
        "type": "long",
        "key": "show-cdup",
        "title": "--show-cdup",
        "description": "When the command is invoked from a subdirectory, show the\npath of the top-level directory relative to the current\ndirectory (typically a sequence of \"../\", or an empty string)."
      },
      {
        "type": "long",
        "key": "show-prefix",
        "title": "--show-prefix",
        "description": "When the command is invoked from a subdirectory, show the\npath of the current directory relative to the top-level\ndirectory."
      },
      {
        "type": "long",
        "key": "show-object-format",
        "title": "--show-object-format[=(storage|input|output)]",
        "description": "Show the object format (hash algorithm) used for the repository\nfor storage inside the .git directory, input, or output. For\ninput, multiple algorithms may be printed, space-separated.\nIf not specified, the default is \"storage\"."
      },
      {
        "type": "long",
        "key": "since",
        "title": "--since=datestring, --after=datestring",
        "description": "Parse the date string, and output the corresponding\n--max-age= parameter for git rev-list."
      },
      {
        "type": "long",
        "key": "after",
        "title": "--since=datestring, --after=datestring",
        "description": "Parse the date string, and output the corresponding\n--max-age= parameter for git rev-list."
      },
      {
        "type": "long",
        "key": "until",
        "title": "--until=datestring, --before=datestring",
        "description": "Parse the date string, and output the corresponding\n--min-age= parameter for git rev-list."
      },
      {
        "type": "long",
        "key": "before",
        "title": "--until=datestring, --before=datestring",
        "description": "Parse the date string, and output the corresponding\n--min-age= parameter for git rev-list."
      }
    ]
  },
  {
    "name": "git show-index",
    "options": [
      {
        "type": "long",
        "key": "object-format",
        "title": "--object-format=<hash-algorithm>",
        "description": "Specify the given object format (hash algorithm) for the index file.  The\nvalid values are sha1 and (if enabled) sha256.  The default is the\nalgorithm for the current repository (set by extensions.objectFormat), or\nsha1 if no value is set or outside a repository..\n\nTHIS OPTION IS EXPERIMENTAL! SHA-256 support is experimental and still\nin an early stage.  A SHA-256 repository will in general not be able to\nshare work with \"regular\" SHA-1 repositories.  It should be assumed\nthat, e.g., Git internal file formats in relation to SHA-256\nrepositories may change in backwards-incompatible ways.  Only use\n--object-format=sha256 for testing purposes."
      }
    ]
  },
  {
    "name": "git show-ref",
    "options": [
      {
        "type": "long",
        "key": "head",
        "title": "--head",
        "description": "Show the HEAD reference, even if it would normally be filtered out."
      },
      {
        "type": "long",
        "key": "heads",
        "title": "--heads, --tags",
        "description": "Limit to \"refs/heads\" and \"refs/tags\", respectively.  These options\nare not mutually exclusive; when given both, references stored in\n\"refs/heads\" and \"refs/tags\" are displayed."
      },
      {
        "type": "long",
        "key": "tags",
        "title": "--heads, --tags",
        "description": "Limit to \"refs/heads\" and \"refs/tags\", respectively.  These options\nare not mutually exclusive; when given both, references stored in\n\"refs/heads\" and \"refs/tags\" are displayed."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, --dereference",
        "description": "Dereference tags into object IDs as well. They will be shown with \"^{}\"\nappended."
      },
      {
        "type": "long",
        "key": "dereference",
        "title": "-d, --dereference",
        "description": "Dereference tags into object IDs as well. They will be shown with \"^{}\"\nappended."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --hash[=<n>]",
        "description": "Only show the SHA-1 hash, not the reference name. When combined with\n--dereference the dereferenced tag will still be shown after the SHA-1."
      },
      {
        "type": "long",
        "key": "hash",
        "title": "-s, --hash[=<n>]",
        "description": "Only show the SHA-1 hash, not the reference name. When combined with\n--dereference the dereferenced tag will still be shown after the SHA-1."
      },
      {
        "type": "long",
        "key": "verify",
        "title": "--verify",
        "description": "Enable stricter reference checking by requiring an exact ref path.\nAside from returning an error code of 1, it will also print an error\nmessage if --quiet was not specified."
      },
      {
        "type": "long",
        "key": "abbrev",
        "title": "--abbrev[=<n>]",
        "description": "Abbreviate the object name.  When using --hash, you do\nnot have to say --hash --abbrev; --hash=n would do."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Do not print any results to stdout. When combined with --verify this\ncan be used to silently check if a reference exists."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Do not print any results to stdout. When combined with --verify this\ncan be used to silently check if a reference exists."
      },
      {
        "type": "long",
        "key": "exclude-existing",
        "title": "--exclude-existing[=<pattern>]",
        "description": "Make git show-ref act as a filter that reads refs from stdin of the\nform \"^(?:<anything>\\s)?<refname>(?:\\^{})?$\"\nand performs the following actions on each:\n(1) strip \"^{}\" at the end of line if any;\n(2) ignore if pattern is provided and does not head-match refname;\n(3) warn if refname is not a well-formed refname and skip;\n(4) ignore if refname is a ref that exists in the local repository;\n(5) otherwise output the line."
      }
    ]
  },
  {
    "name": "git unpack-file",
    "options": []
  },
  {
    "name": "git var",
    "options": [
      {
        "type": "short",
        "key": "l",
        "title": "-l",
        "description": "Cause the logical variables to be listed. In addition, all the\nvariables of the Git configuration file .git/config are listed\nas well. (However, the configuration variables listing functionality\nis deprecated in favor of git config -l.)"
      }
    ]
  },
  {
    "name": "git verify-pack",
    "options": [
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "After verifying the pack, show list of objects contained\nin the pack and a histogram of delta chain length."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "After verifying the pack, show list of objects contained\nin the pack and a histogram of delta chain length."
      },
      {
        "type": "short",
        "key": "s",
        "title": "-s, --stat-only",
        "description": "Do not verify the pack contents; only show the histogram of delta\nchain length.  With --verbose, list of objects is also shown."
      },
      {
        "type": "long",
        "key": "stat-only",
        "title": "-s, --stat-only",
        "description": "Do not verify the pack contents; only show the histogram of delta\nchain length.  With --verbose, list of objects is also shown."
      }
    ]
  },
  {
    "name": "git daemon",
    "options": [
      {
        "type": "long",
        "key": "strict-paths",
        "title": "--strict-paths",
        "description": "Match paths exactly (i.e. don’t allow \"/foo/repo\" when the real path is\n\"/foo/repo.git\" or \"/foo/repo/.git\") and don’t do user-relative paths.\ngit daemon will refuse to start when this option is enabled and no\nwhitelist is specified."
      },
      {
        "type": "long",
        "key": "base-path",
        "title": "--base-path=<path>",
        "description": "Remap all the path requests as relative to the given path.\nThis is sort of \"Git root\" - if you run git daemon with\n--base-path=/srv/git on example.com, then if you later try to pull\ngit://example.com/hello.git, git daemon will interpret the path\nas /srv/git/hello.git."
      },
      {
        "type": "long",
        "key": "base-path-relaxed",
        "title": "--base-path-relaxed",
        "description": "If --base-path is enabled and repo lookup fails, with this option\ngit daemon will attempt to lookup without prefixing the base path.\nThis is useful for switching to --base-path usage, while still\nallowing the old paths."
      },
      {
        "type": "long",
        "key": "interpolated-path",
        "title": "--interpolated-path=<pathtemplate>",
        "description": "To support virtual hosting, an interpolated path template can be\nused to dynamically construct alternate paths.  The template\nsupports %H for the target hostname as supplied by the client but\nconverted to all lowercase, %CH for the canonical hostname,\n%IP for the server’s IP address, %P for the port number,\nand %D for the absolute path of the named repository.\nAfter interpolation, the path is validated against the directory\nwhitelist."
      },
      {
        "type": "long",
        "key": "export-all",
        "title": "--export-all",
        "description": "Allow pulling from all directories that look like Git repositories\n(have the objects and refs subdirectories), even if they\ndo not have the git-daemon-export-ok file."
      },
      {
        "type": "long",
        "key": "inetd",
        "title": "--inetd",
        "description": "Have the server run as an inetd service. Implies --syslog (may be\noverridden with --log-destination=).\nIncompatible with --detach, --port, --listen, --user and --group\noptions."
      },
      {
        "type": "long",
        "key": "listen",
        "title": "--listen=<host_or_ipaddr>",
        "description": "Listen on a specific IP address or hostname.  IP addresses can\nbe either an IPv4 address or an IPv6 address if supported.  If IPv6\nis not supported, then --listen=hostname is also not supported and\n--listen must be given an IPv4 address.\nCan be given more than once.\nIncompatible with --inetd option."
      },
      {
        "type": "long",
        "key": "port",
        "title": "--port=<n>",
        "description": "Listen on an alternative port.  Incompatible with --inetd option."
      },
      {
        "type": "long",
        "key": "init-timeout",
        "title": "--init-timeout=<n>",
        "description": "Timeout (in seconds) between the moment the connection is established\nand the client request is received (typically a rather low value, since\nthat should be basically immediate)."
      },
      {
        "type": "long",
        "key": "timeout",
        "title": "--timeout=<n>",
        "description": "Timeout (in seconds) for specific client sub-requests. This includes\nthe time it takes for the server to process the sub-request and the\ntime spent waiting for the next client’s request."
      },
      {
        "type": "long",
        "key": "max-connections",
        "title": "--max-connections=<n>",
        "description": "Maximum number of concurrent clients, defaults to 32.  Set it to\nzero for no limit."
      },
      {
        "type": "long",
        "key": "syslog",
        "title": "--syslog",
        "description": "Short for --log-destination=syslog."
      },
      {
        "type": "long",
        "key": "log-destination",
        "title": "--log-destination=<destination>",
        "description": "Send log messages to the specified destination.\nNote that this option does not imply --verbose,\nthus by default only error conditions will be logged.\nThe <destination> must be one of:\n\n\n\n\n stderr \n\nWrite to standard error.\nNote that if --detach is specified,\nthe process disconnects from the real standard error,\nmaking this destination effectively equivalent to none.\n\n syslog \n\nWrite to syslog, using the git-daemon identifier.\n\n none \n\nDisable all logging.\n\n\n\n\n\n\nThe default destination is syslog if --inetd or --detach is specified,\notherwise stderr."
      },
      {
        "type": "long",
        "key": "user-path",
        "title": "--user-path, --user-path=<path>",
        "description": "Allow ~user notation to be used in requests.  When\nspecified with no parameter, requests to\ngit://host/~alice/foo is taken as a request to access\nfoo repository in the home directory of user alice.\nIf --user-path=path is specified, the same request is\ntaken as a request to access path/foo repository in\nthe home directory of user alice."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Log details about the incoming connections and requested files."
      },
      {
        "type": "long",
        "key": "reuseaddr",
        "title": "--reuseaddr",
        "description": "Use SO_REUSEADDR when binding the listening socket.\nThis allows the server to restart without waiting for\nold connections to time out."
      },
      {
        "type": "long",
        "key": "detach",
        "title": "--detach",
        "description": "Detach from the shell. Implies --syslog."
      },
      {
        "type": "long",
        "key": "pid-file",
        "title": "--pid-file=<file>",
        "description": "Save the process id in file.  Ignored when the daemon\nis run under --inetd."
      },
      {
        "type": "long",
        "key": "user",
        "title": "--user=<user>, --group=<group>",
        "description": "Change daemon’s uid and gid before entering the service loop.\nWhen only --user is given without --group, the\nprimary group ID for the user is used.  The values of\nthe option are given to getpwnam(3) and getgrnam(3)\nand numeric IDs are not supported.\n\nGiving these options is an error when used with --inetd; use\nthe facility of inet daemon to achieve the same before spawning\ngit daemon if needed.\n\n\nLike many programs that switch user id, the daemon does not reset\nenvironment variables such as $HOME when it runs git programs,\ne.g. upload-pack and receive-pack. When using this option, you\nmay also want to set and export HOME to point at the home\ndirectory of <user> before starting the daemon, and make sure any\nGit configuration files in that directory are readable by <user>."
      },
      {
        "type": "long",
        "key": "group",
        "title": "--user=<user>, --group=<group>",
        "description": "Change daemon’s uid and gid before entering the service loop.\nWhen only --user is given without --group, the\nprimary group ID for the user is used.  The values of\nthe option are given to getpwnam(3) and getgrnam(3)\nand numeric IDs are not supported.\n\nGiving these options is an error when used with --inetd; use\nthe facility of inet daemon to achieve the same before spawning\ngit daemon if needed.\n\n\nLike many programs that switch user id, the daemon does not reset\nenvironment variables such as $HOME when it runs git programs,\ne.g. upload-pack and receive-pack. When using this option, you\nmay also want to set and export HOME to point at the home\ndirectory of <user> before starting the daemon, and make sure any\nGit configuration files in that directory are readable by <user>."
      },
      {
        "type": "long",
        "key": "enable",
        "title": "--enable=<service>, --disable=<service>",
        "description": "Enable/disable the service site-wide per default.  Note\nthat a service disabled site-wide can still be enabled\nper repository if it is marked overridable and the\nrepository enables the service with a configuration\nitem."
      },
      {
        "type": "long",
        "key": "disable",
        "title": "--enable=<service>, --disable=<service>",
        "description": "Enable/disable the service site-wide per default.  Note\nthat a service disabled site-wide can still be enabled\nper repository if it is marked overridable and the\nrepository enables the service with a configuration\nitem."
      },
      {
        "type": "long",
        "key": "allow-override",
        "title": "--allow-override=<service>, --forbid-override=<service>",
        "description": "Allow/forbid overriding the site-wide default with per\nrepository configuration.  By default, all the services\nmay be overridden."
      },
      {
        "type": "long",
        "key": "forbid-override",
        "title": "--allow-override=<service>, --forbid-override=<service>",
        "description": "Allow/forbid overriding the site-wide default with per\nrepository configuration.  By default, all the services\nmay be overridden."
      },
      {
        "type": "long",
        "key": "informative-errors",
        "title": "--[no-]informative-errors",
        "description": "When informative errors are turned on, git-daemon will report\nmore verbose errors to the client, differentiating conditions\nlike \"no such repository\" from \"repository not exported\". This\nis more convenient for clients, but may leak information about\nthe existence of unexported repositories.  When informative\nerrors are not enabled, all errors report \"access denied\" to the\nclient. The default is --no-informative-errors."
      },
      {
        "type": "long",
        "key": "access-hook",
        "title": "--access-hook=<path>",
        "description": "Every time a client connects, first run an external command\nspecified by the <path> with service name (e.g. \"upload-pack\"),\npath to the repository, hostname (%H), canonical hostname\n(%CH), IP address (%IP), and TCP port (%P) as its command-line\narguments. The external command can decide to decline the\nservice by exiting with a non-zero status (or to allow it by\nexiting with a zero status).  It can also look at the $REMOTE_ADDR\nand $REMOTE_PORT environment variables to learn about the\nrequestor when making this decision.\n\nThe external command can optionally write a single line to its\nstandard output to be sent to the requestor as an error message when\nit declines the service."
      }
    ]
  },
  {
    "name": "git fetch-pack",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Fetch all remote refs."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Take the list of refs from stdin, one per line. If there\nare refs specified on the command line in addition to this\noption, then the refs from stdin are processed after those\non the command line.\n\nIf --stateless-rpc is specified together with this option then\nthe list of refs must be in packet format (pkt-line). Each ref must\nbe in a separate packet, and the list must end with a flush packet."
      },
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Pass -q flag to git unpack-objects; this makes the\ncloning process less verbose."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Pass -q flag to git unpack-objects; this makes the\ncloning process less verbose."
      },
      {
        "type": "short",
        "key": "k",
        "title": "-k, --keep",
        "description": "Do not invoke git unpack-objects on received data, but\ncreate a single packfile out of it instead, and store it\nin the object database. If provided twice then the pack is\nlocked against repacking."
      },
      {
        "type": "long",
        "key": "keep",
        "title": "-k, --keep",
        "description": "Do not invoke git unpack-objects on received data, but\ncreate a single packfile out of it instead, and store it\nin the object database. If provided twice then the pack is\nlocked against repacking."
      },
      {
        "type": "long",
        "key": "thin",
        "title": "--thin",
        "description": "Fetch a \"thin\" pack, which records objects in deltified form based\non objects not included in the pack to reduce network traffic."
      },
      {
        "type": "long",
        "key": "include-tag",
        "title": "--include-tag",
        "description": "If the remote side supports it, annotated tags objects will\nbe downloaded on the same connection as the other objects if\nthe object the tag references is downloaded.  The caller must\notherwise determine the tags this option made available."
      },
      {
        "type": "long",
        "key": "upload-pack",
        "title": "--upload-pack=<git-upload-pack>",
        "description": "Use this to specify the path to git-upload-pack on the\nremote side, if is not found on your $PATH.\nInstallations of sshd ignores the user’s environment\nsetup scripts for login shells (e.g. .bash_profile) and\nyour privately installed git may not be found on the system\ndefault $PATH.  Another workaround suggested is to set\nup your $PATH in \".bashrc\", but this flag is for people\nwho do not want to pay the overhead for non-interactive\nshells by having a lean .bashrc file (they set most of\nthe things up in .bash_profile)."
      },
      {
        "type": "long",
        "key": "exec",
        "title": "--exec=<git-upload-pack>",
        "description": "Same as --upload-pack=<git-upload-pack>."
      },
      {
        "type": "long",
        "key": "depth",
        "title": "--depth=<n>",
        "description": "Limit fetching to ancestor-chains not longer than n.\ngit-upload-pack treats the special depth 2147483647 as\ninfinite even if there is an ancestor-chain that long."
      },
      {
        "type": "long",
        "key": "shallow-since",
        "title": "--shallow-since=<date>",
        "description": "Deepen or shorten the history of a shallow repository to\ninclude all reachable commits after <date>."
      },
      {
        "type": "long",
        "key": "shallow-exclude",
        "title": "--shallow-exclude=<revision>",
        "description": "Deepen or shorten the history of a shallow repository to\nexclude commits reachable from a specified remote branch or tag.\nThis option can be specified multiple times."
      },
      {
        "type": "long",
        "key": "deepen-relative",
        "title": "--deepen-relative",
        "description": "Argument --depth specifies the number of commits from the\ncurrent shallow boundary instead of from the tip of each\nremote branch history."
      },
      {
        "type": "long",
        "key": "no-progress",
        "title": "--no-progress",
        "description": "Do not show the progress."
      },
      {
        "type": "long",
        "key": "check-self-contained-and-connected",
        "title": "--check-self-contained-and-connected",
        "description": "Output \"connectivity-ok\" if the received pack is\nself-contained and connected."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Run verbosely."
      }
    ]
  },
  {
    "name": "git http-backend",
    "options": []
  },
  {
    "name": "git send-pack",
    "options": [
      {
        "type": "long",
        "key": "receive-pack",
        "title": "--receive-pack=<git-receive-pack>",
        "description": "Path to the git-receive-pack program on the remote\nend.  Sometimes useful when pushing to a remote\nrepository over ssh, and you do not have the program in\na directory on the default $PATH."
      },
      {
        "type": "long",
        "key": "exec",
        "title": "--exec=<git-receive-pack>",
        "description": "Same as --receive-pack=<git-receive-pack>."
      },
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Instead of explicitly specifying which refs to update,\nupdate all heads that locally exist."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Take the list of refs from stdin, one per line. If there\nare refs specified on the command line in addition to this\noption, then the refs from stdin are processed after those\non the command line.\n\nIf --stateless-rpc is specified together with this option then\nthe list of refs must be in packet format (pkt-line). Each ref must\nbe in a separate packet, and the list must end with a flush packet."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Do everything except actually send the updates."
      },
      {
        "type": "long",
        "key": "force",
        "title": "--force",
        "description": "Usually, the command refuses to update a remote ref that\nis not an ancestor of the local ref used to overwrite it.\nThis flag disables the check.  What this means is that\nthe remote repository can lose commits; use it with\ncare."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Run verbosely."
      },
      {
        "type": "long",
        "key": "thin",
        "title": "--thin",
        "description": "Send a \"thin\" pack, which records objects in deltified form based\non objects not included in the pack to reduce network traffic."
      },
      {
        "type": "long",
        "key": "atomic",
        "title": "--atomic",
        "description": "Use an atomic transaction for updating the refs. If any of the refs\nfails to update then the entire push will fail without changing any\nrefs."
      },
      {
        "type": "long",
        "key": "signed",
        "title": "--[no-]signed, --signed=(true|false|if-asked)",
        "description": "GPG-sign the push request to update refs on the receiving\nside, to allow it to be checked by the hooks and/or be\nlogged.  If false or --no-signed, no signing will be\nattempted.  If true or --signed, the push will fail if the\nserver does not support signed pushes.  If set to if-asked,\nsign if and only if the server supports signed pushes.  The push\nwill also fail if the actual call to gpg --sign fails.  See\ngit-receive-pack[1] for the details on the receiving end."
      },
      {
        "type": "long",
        "key": "push-option",
        "title": "--push-option=<string>",
        "description": "Pass the specified string as a push option for consumption by\nhooks on the server side.  If the server doesn’t support push\noptions, error out.  See git-push[1] and\ngithooks[5] for details."
      }
    ]
  },
  {
    "name": "git update-server-info",
    "options": []
  },
  {
    "name": "git http-fetch",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, -c, -t",
        "description": "These options are ignored for historical reasons."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-a, -c, -t",
        "description": "These options are ignored for historical reasons."
      },
      {
        "type": "short",
        "key": "t",
        "title": "-a, -c, -t",
        "description": "These options are ignored for historical reasons."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v",
        "description": "Report what is downloaded."
      },
      {
        "type": "short",
        "key": "w",
        "title": "-w <filename>",
        "description": "Writes the commit-id into the filename under $GIT_DIR/refs/<filename> on\nthe local end after the transfer is complete."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Instead of a commit id on the command line (which is not expected in this\ncase), git http-fetch expects lines on stdin in the format\n\n\n<commit-id>['\\t'<filename-as-in--w>]"
      },
      {
        "type": "long",
        "key": "packfile",
        "title": "--packfile=<hash>",
        "description": "For internal use only. Instead of a commit id on the command\nline (which is not expected in\nthis case), git http-fetch fetches the packfile directly at the given\nURL and uses index-pack to generate corresponding .idx and .keep files.\nThe hash is used to determine the name of the temporary file and is\narbitrary. The output of index-pack is printed to stdout. Requires\n--index-pack-args."
      },
      {
        "type": "long",
        "key": "index-pack-args",
        "title": "--index-pack-args=<args>",
        "description": "For internal use only. The command to run on the contents of the\ndownloaded pack. Arguments are URL-encoded separated by spaces."
      },
      {
        "type": "long",
        "key": "recover",
        "title": "--recover",
        "description": "Verify that everything reachable from target is fetched.  Used after\nan earlier fetch is interrupted."
      }
    ]
  },
  {
    "name": "git http-push",
    "options": [
      {
        "type": "long",
        "key": "all",
        "title": "--all",
        "description": "Do not assume that the remote repository is complete in its\ncurrent state, and verify all objects in the entire local\nref’s history exist in the remote repository."
      },
      {
        "type": "long",
        "key": "force",
        "title": "--force",
        "description": "Usually, the command refuses to update a remote ref that\nis not an ancestor of the local ref used to overwrite it.\nThis flag disables the check.  What this means is that\nthe remote repository can lose commits; use it with\ncare."
      },
      {
        "type": "long",
        "key": "dry-run",
        "title": "--dry-run",
        "description": "Do everything except actually send the updates."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "--verbose",
        "description": "Report the list of objects being walked locally and the\nlist of objects successfully sent to the remote repository."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d, -D",
        "description": "Remove <ref> from remote repository.  The specified branch\ncannot be the remote HEAD.  If -d is specified the following\nother conditions must also be met:\n\n\n\nRemote HEAD must resolve to an object that exists locally\n\n\nSpecified branch resolves to an object that exists locally\n\n\nSpecified branch is an ancestor of the remote HEAD"
      },
      {
        "type": "short",
        "key": "D",
        "title": "-d, -D",
        "description": "Remove <ref> from remote repository.  The specified branch\ncannot be the remote HEAD.  If -d is specified the following\nother conditions must also be met:\n\n\n\nRemote HEAD must resolve to an object that exists locally\n\n\nSpecified branch resolves to an object that exists locally\n\n\nSpecified branch is an ancestor of the remote HEAD"
      }
    ]
  },
  {
    "name": "git receive-pack",
    "options": []
  },
  {
    "name": "git shell",
    "options": []
  },
  {
    "name": "git upload-archive",
    "options": []
  },
  {
    "name": "git upload-pack",
    "options": [
      {
        "type": "long",
        "key": "strict",
        "title": "--[no-]strict",
        "description": "Do not try <directory>/.git/ if <directory> is no Git directory."
      },
      {
        "type": "long",
        "key": "timeout",
        "title": "--timeout=<n>",
        "description": "Interrupt transfer after <n> seconds of inactivity."
      },
      {
        "type": "long",
        "key": "stateless-rpc",
        "title": "--stateless-rpc",
        "description": "Perform only a single read-write cycle with stdin and stdout.\nThis fits with the HTTP POST request processing model where\na program may read the request, write a response, and must exit."
      },
      {
        "type": "long",
        "key": "advertise-refs",
        "title": "--advertise-refs",
        "description": "Only the initial ref advertisement is output, and the program exits\nimmediately. This fits with the HTTP GET request model, where\nno request content is received but a response must be produced."
      }
    ]
  },
  {
    "name": "git check-attr",
    "options": [
      {
        "type": "short",
        "key": "a",
        "title": "-a, --all",
        "description": "List all attributes that are associated with the specified\npaths.  If this option is used, then unspecified attributes\nwill not be included in the output."
      },
      {
        "type": "long",
        "key": "all",
        "title": "-a, --all",
        "description": "List all attributes that are associated with the specified\npaths.  If this option is used, then unspecified attributes\nwill not be included in the output."
      },
      {
        "type": "long",
        "key": "cached",
        "title": "--cached",
        "description": "Consider .gitattributes in the index only, ignoring the working tree."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Read pathnames from the standard input, one per line,\ninstead of from the command-line."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "The output format is modified to be machine-parsable.\nIf --stdin is also given, input paths are separated\nwith a NUL character instead of a linefeed character."
      }
    ]
  },
  {
    "name": "git check-ignore",
    "options": [
      {
        "type": "short",
        "key": "q",
        "title": "-q, --quiet",
        "description": "Don’t output anything, just set exit status.  This is only\nvalid with a single pathname."
      },
      {
        "type": "long",
        "key": "quiet",
        "title": "-q, --quiet",
        "description": "Don’t output anything, just set exit status.  This is only\nvalid with a single pathname."
      },
      {
        "type": "short",
        "key": "v",
        "title": "-v, --verbose",
        "description": "Instead of printing the paths that are excluded, for each path\nthat matches an exclude pattern, print the exclude pattern\ntogether with the path.  (Matching an exclude pattern usually\nmeans the path is excluded, but if the pattern begins with !\nthen it is a negated pattern and matching it means the path is\nNOT excluded.)\n\nFor precedence rules within and between exclude sources, see\ngitignore[5]."
      },
      {
        "type": "long",
        "key": "verbose",
        "title": "-v, --verbose",
        "description": "Instead of printing the paths that are excluded, for each path\nthat matches an exclude pattern, print the exclude pattern\ntogether with the path.  (Matching an exclude pattern usually\nmeans the path is excluded, but if the pattern begins with !\nthen it is a negated pattern and matching it means the path is\nNOT excluded.)\n\nFor precedence rules within and between exclude sources, see\ngitignore[5]."
      },
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Read pathnames from the standard input, one per line,\ninstead of from the command-line."
      },
      {
        "type": "short",
        "key": "z",
        "title": "-z",
        "description": "The output format is modified to be machine-parsable (see\nbelow).  If --stdin is also given, input paths are separated\nwith a NUL character instead of a linefeed character."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n, --non-matching",
        "description": "Show given paths which don’t match any pattern.\t This only\nmakes sense when --verbose is enabled, otherwise it would\nnot be possible to distinguish between paths which match a\npattern and those which don’t."
      },
      {
        "type": "long",
        "key": "non-matching",
        "title": "-n, --non-matching",
        "description": "Show given paths which don’t match any pattern.\t This only\nmakes sense when --verbose is enabled, otherwise it would\nnot be possible to distinguish between paths which match a\npattern and those which don’t."
      },
      {
        "type": "long",
        "key": "no-index",
        "title": "--no-index",
        "description": "Don’t look in the index when undertaking the checks. This can\nbe used to debug why a path became tracked by e.g. git add .\nand was not ignored by the rules as expected by the user or when\ndeveloping patterns including negation to match a path previously\nadded with git add -f."
      }
    ]
  },
  {
    "name": "git check-mailmap",
    "options": [
      {
        "type": "long",
        "key": "stdin",
        "title": "--stdin",
        "description": "Read contacts, one per line, from the standard input after exhausting\ncontacts provided on the command-line."
      }
    ]
  },
  {
    "name": "git check-ref-format",
    "options": [
      {
        "type": "long",
        "key": "allow-onelevel",
        "title": "--[no-]allow-onelevel",
        "description": "Controls whether one-level refnames are accepted (i.e.,\nrefnames that do not contain multiple /-separated\ncomponents).  The default is --no-allow-onelevel."
      },
      {
        "type": "long",
        "key": "refspec-pattern",
        "title": "--refspec-pattern",
        "description": "Interpret <refname> as a reference name pattern for a refspec\n(as used with remote repositories).  If this option is\nenabled, <refname> is allowed to contain a single *\nin the refspec (e.g., foo/bar*/baz or foo/bar*baz/\nbut not foo/bar*/baz*)."
      },
      {
        "type": "long",
        "key": "normalize",
        "title": "--normalize",
        "description": "Normalize refname by removing any leading slash (/)\ncharacters and collapsing runs of adjacent slashes between\nname components into a single slash.  If the normalized\nrefname is valid then print it to standard output and exit\nwith a status of 0, otherwise exit with a non-zero status.\n(--print is a deprecated way to spell --normalize.)"
      }
    ]
  },
  {
    "name": "git column",
    "options": [
      {
        "type": "long",
        "key": "command",
        "title": "--command=<name>",
        "description": "Look up layout mode using configuration variable column.<name> and\ncolumn.ui."
      },
      {
        "type": "long",
        "key": "mode",
        "title": "--mode=<mode>",
        "description": "Specify layout mode. See configuration variable column.ui for option\nsyntax in git-config[1]."
      },
      {
        "type": "long",
        "key": "raw-mode",
        "title": "--raw-mode=<n>",
        "description": "Same as --mode but take mode encoded as a number. This is mainly used\nby other commands that have already parsed layout mode."
      },
      {
        "type": "long",
        "key": "width",
        "title": "--width=<width>",
        "description": "Specify the terminal width. By default git column will detect the\nterminal width, or fall back to 80 if it is unable to do so."
      },
      {
        "type": "long",
        "key": "indent",
        "title": "--indent=<string>",
        "description": "String to be printed at the beginning of each line."
      },
      {
        "type": "long",
        "key": "nl",
        "title": "--nl=<N>",
        "description": "String to be printed at the end of each line,\nincluding newline character."
      },
      {
        "type": "long",
        "key": "padding",
        "title": "--padding=<N>",
        "description": "The number of spaces between columns. One space by default."
      }
    ]
  },
  {
    "name": "git credential",
    "options": []
  },
  {
    "name": "git credential-cache",
    "options": []
  },
  {
    "name": "git credential-store",
    "options": [
      {
        "type": "long",
        "key": "file",
        "title": "--file=<path>",
        "description": "Use <path> to lookup and store credentials. The file will have its\nfilesystem permissions set to prevent other users on the system\nfrom reading it, but will not be encrypted or otherwise\nprotected. If not specified, credentials will be searched for from\n~/.git-credentials and $XDG_CONFIG_HOME/git/credentials, and\ncredentials will be written to ~/.git-credentials if it exists, or\n$XDG_CONFIG_HOME/git/credentials if it exists and the former does\nnot. See also FILES."
      }
    ]
  },
  {
    "name": "git fmt-merge-msg",
    "options": [
      {
        "type": "long",
        "key": "log",
        "title": "--log[=<n>]",
        "description": "In addition to branch names, populate the log message with\none-line descriptions from the actual commits that are being\nmerged.  At most <n> commits from each merge parent will be\nused (20 if <n> is omitted).  This overrides the merge.log\nconfiguration variable."
      },
      {
        "type": "long",
        "key": "no-log",
        "title": "--no-log",
        "description": "Do not list one-line descriptions from the actual commits being\nmerged."
      },
      {
        "type": "long",
        "key": "summary",
        "title": "--[no-]summary",
        "description": "Synonyms to --log and --no-log; these are deprecated and will be\nremoved in the future."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m <message>, --message <message>",
        "description": "Use <message> instead of the branch names for the first line\nof the log message.  For use with --log."
      },
      {
        "type": "short",
        "key": "F",
        "title": "-F <file>, --file <file>",
        "description": "Take the list of merged objects from <file> instead of\nstdin."
      }
    ]
  },
  {
    "name": "git interpret-trailers",
    "options": [
      {
        "type": "long",
        "key": "in-place",
        "title": "--in-place",
        "description": "Edit the files in place."
      },
      {
        "type": "long",
        "key": "trim-empty",
        "title": "--trim-empty",
        "description": "If the <value> part of any trailer contains only whitespace,\nthe whole trailer will be removed from the resulting message.\nThis applies to existing trailers as well as new trailers."
      },
      {
        "type": "long",
        "key": "no-where",
        "title": "--where <placement>, --no-where",
        "description": "Specify where all new trailers will be added.  A setting\nprovided with --where overrides all configuration variables\nand applies to all --trailer options until the next occurrence of\n--where or --no-where. Possible values are after, before,\nend or start."
      },
      {
        "type": "long",
        "key": "no-if-exists",
        "title": "--if-exists <action>, --no-if-exists",
        "description": "Specify what action will be performed when there is already at\nleast one trailer with the same <token> in the message.  A setting\nprovided with --if-exists overrides all configuration variables\nand applies to all --trailer options until the next occurrence of\n--if-exists or --no-if-exists. Possible actions are addIfDifferent,\naddIfDifferentNeighbor, add, replace and doNothing."
      },
      {
        "type": "long",
        "key": "no-if-missing",
        "title": "--if-missing <action>, --no-if-missing",
        "description": "Specify what action will be performed when there is no other\ntrailer with the same <token> in the message.  A setting\nprovided with --if-missing overrides all configuration variables\nand applies to all --trailer options until the next occurrence of\n--if-missing or --no-if-missing. Possible actions are doNothing\nor add."
      },
      {
        "type": "long",
        "key": "only-trailers",
        "title": "--only-trailers",
        "description": "Output only the trailers, not any other parts of the input."
      },
      {
        "type": "long",
        "key": "only-input",
        "title": "--only-input",
        "description": "Output only trailers that exist in the input; do not add any\nfrom the command-line or by following configured trailer.*\nrules."
      },
      {
        "type": "long",
        "key": "unfold",
        "title": "--unfold",
        "description": "Remove any whitespace-continuation in trailers, so that each\ntrailer appears on a line by itself with its full content."
      },
      {
        "type": "long",
        "key": "parse",
        "title": "--parse",
        "description": "A convenience alias for --only-trailers --only-input\n--unfold."
      },
      {
        "type": "long",
        "key": "no-divider",
        "title": "--no-divider",
        "description": "Do not treat --- as the end of the commit message. Use this\nwhen you know your input contains just the commit message itself\n(and not an email or the output of git format-patch)."
      }
    ]
  },
  {
    "name": "git mailinfo",
    "options": [
      {
        "type": "short",
        "key": "k",
        "title": "-k",
        "description": "Usually the program removes email cruft from the Subject:\nheader line to extract the title line for the commit log\nmessage.  This option prevents this munging, and is most\nuseful when used to read back git format-patch -k output.\n\nSpecifically, the following are removed until none of them remain:\n\n\n\n\n\n\nLeading and trailing whitespace.\n\n\nLeading Re:, re:, and :.\n\n\nLeading bracketed strings (between [ and ], usually\n[PATCH]).\n\n\n\n\n\n\nFinally, runs of whitespace are normalized to a single ASCII space\ncharacter."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b",
        "description": "When -k is not in effect, all leading strings bracketed with [\nand ] pairs are stripped.  This option limits the stripping to\nonly the pairs whose bracketed string contains the word \"PATCH\"."
      },
      {
        "type": "short",
        "key": "u",
        "title": "-u",
        "description": "The commit log message, author name and author email are\ntaken from the e-mail, and after minimally decoding MIME\ntransfer encoding, re-coded in the charset specified by\ni18n.commitEncoding (defaulting to UTF-8) by transliterating\nthem.  This used to be optional but now it is the default.\n\nNote that the patch is always used as-is without charset\nconversion, even with this flag."
      },
      {
        "type": "long",
        "key": "encoding",
        "title": "--encoding=<encoding>",
        "description": "Similar to -u.  But when re-coding, the charset specified here is\nused instead of the one specified by i18n.commitEncoding or UTF-8."
      },
      {
        "type": "short",
        "key": "n",
        "title": "-n",
        "description": "Disable all charset re-coding of the metadata."
      },
      {
        "type": "short",
        "key": "m",
        "title": "-m, --message-id",
        "description": "Copy the Message-ID header at the end of the commit message.  This\nis useful in order to associate commits with mailing list discussions."
      },
      {
        "type": "long",
        "key": "message-id",
        "title": "-m, --message-id",
        "description": "Copy the Message-ID header at the end of the commit message.  This\nis useful in order to associate commits with mailing list discussions."
      },
      {
        "type": "long",
        "key": "scissors",
        "title": "--scissors",
        "description": "Remove everything in body before a scissors line (e.g. \"-- >8 --\").\nThe line represents scissors and perforation marks, and is used to\nrequest the reader to cut the message at that line.  If that line\nappears in the body of the message before the patch, everything\nbefore it (including the scissors line itself) is ignored when\nthis option is used.\n\nThis is useful if you want to begin your message in a discussion thread\nwith comments and suggestions on the message you are responding to, and to\nconclude it with a patch submission, separating the discussion and the\nbeginning of the proposed commit log message with a scissors line.\n\n\nThis can be enabled by default with the configuration option mailinfo.scissors."
      },
      {
        "type": "long",
        "key": "no-scissors",
        "title": "--no-scissors",
        "description": "Ignore scissors lines. Useful for overriding mailinfo.scissors settings."
      },
      {
        "type": "long",
        "key": "quoted-cr",
        "title": "--quoted-cr=<action>",
        "description": "Action when processes email messages sent with base64 or\nquoted-printable encoding, and the decoded lines end with a CRLF\ninstead of a simple LF.\n\nThe valid actions are:\n\n\n\n\n\n\nnowarn: Git will do nothing when such a CRLF is found.\n\n\nwarn: Git will issue a warning for each message if such a CRLF is\nfound.\n\n\nstrip: Git will convert those CRLF to LF.\n\n\n\n\n\n\nThe default action could be set by configuration option mailinfo.quotedCR.\nIf no such configuration option has been set, warn will be used."
      }
    ]
  },
  {
    "name": "git mailsplit",
    "options": [
      {
        "type": "short",
        "key": "o",
        "title": "-o<directory>",
        "description": "Directory in which to place the individual messages."
      },
      {
        "type": "short",
        "key": "b",
        "title": "-b",
        "description": "If any file doesn’t begin with a From line, assume it is a\nsingle mail message instead of signaling error."
      },
      {
        "type": "short",
        "key": "d",
        "title": "-d<prec>",
        "description": "Instead of the default 4 digits with leading zeros,\ndifferent precision can be specified for the generated\nfilenames."
      },
      {
        "type": "short",
        "key": "f",
        "title": "-f<nn>",
        "description": "Skip the first <nn> numbers, for example if -f3 is specified,\nstart the numbering with 0004."
      },
      {
        "type": "long",
        "key": "keep-cr",
        "title": "--keep-cr",
        "description": "Do not remove \\r from lines ending with \\r\\n."
      },
      {
        "type": "long",
        "key": "mboxrd",
        "title": "--mboxrd",
        "description": "Input is of the \"mboxrd\" format and \"^>+From \" line escaping is\nreversed."
      }
    ]
  },
  {
    "name": "git merge-one-file",
    "options": []
  },
  {
    "name": "git patch-id",
    "options": [
      {
        "type": "long",
        "key": "stable",
        "title": "--stable",
        "description": "Use a \"stable\" sum of hashes as the patch ID. With this option:\n\n\n\nReordering file diffs that make up a patch does not affect the ID.\nIn particular, two patches produced by comparing the same two trees\nwith two different settings for \"-O<orderfile>\" result in the same\npatch ID signature, thereby allowing the computed result to be used\nas a key to index some meta-information about the change between\nthe two trees;\n\n\nResult is different from the value produced by git 1.9 and older\nor produced when an \"unstable\" hash (see --unstable below) is\nconfigured - even when used on a diff output taken without any use\nof \"-O<orderfile>\", thereby making existing databases storing such\n\"unstable\" or historical patch-ids unusable.\n\n\nThis is the default if patchid.stable is set to true."
      },
      {
        "type": "long",
        "key": "unstable",
        "title": "--unstable",
        "description": "Use an \"unstable\" hash as the patch ID. With this option,\nthe result produced is compatible with the patch-id value produced\nby git 1.9 and older.  Users with pre-existing databases storing\npatch-ids produced by git 1.9 and older (who do not deal with reordered\npatches) may want to use this option.\n\n\nThis is the default."
      }
    ]
  },
  {
    "name": "git sh-i18n",
    "options": []
  },
  {
    "name": "git sh-setup",
    "options": []
  },
  {
    "name": "git stripspace",
    "options": [
      {
        "type": "short",
        "key": "s",
        "title": "-s, --strip-comments",
        "description": "Skip and remove all lines starting with comment character (default #)."
      },
      {
        "type": "long",
        "key": "strip-comments",
        "title": "-s, --strip-comments",
        "description": "Skip and remove all lines starting with comment character (default #)."
      },
      {
        "type": "short",
        "key": "c",
        "title": "-c, --comment-lines",
        "description": "Prepend comment character and blank to each line. Lines will automatically\nbe terminated with a newline. On empty lines, only the comment character\nwill be prepended."
      },
      {
        "type": "long",
        "key": "comment-lines",
        "title": "-c, --comment-lines",
        "description": "Prepend comment character and blank to each line. Lines will automatically\nbe terminated with a newline. On empty lines, only the comment character\nwill be prepended."
      }
    ]
  }
]
